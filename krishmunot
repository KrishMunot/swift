[33ma8737ab[m Merge remote-tracking branch 'refs/remotes/origin/KrishMunot-patch-1'
[33m0185bce[m Merge pull request #1 from KrishMunot/KrishMunot-patch-1-1
[33m07e8d6b[m Adding a new FAQ
[33mae6dbe8[m Adding a new FAQ
[33mf298805[m Merge pull request #159 from moiling/master
[33m43a564b[m Merge pull request #175 from lowell/master
[33mc2b5546[m Merge pull request #165 from pcbro/patch-2
[33m872dc69[m Document the motivation and use of delete notifications.
[33ma35081f[m Register AA and SILCombine to accept delete notifications.
[33ma91efe7[m [PM] Register analysis and passes to accept delete notifications.
[33m37991af[m [SIL] Add support for delete notification handlers.
[33m5ba9a37[m Merge pull request #182 from mightydeveloper/master
[33m6e4e285[m Fixed Typo
[33m1a57bd7[m Merge pull request #119 from jonnyla/patch-1
[33mebf9ee0[m Merge pull request #168 from shwhl/fix-bug
[33m88de1ee[m Merge pull request #171 from ken0nek/master
[33mc60e19f[m Merge pull request #178 from wide-aze/patch-1
[33m71d286d[m Merge pull request #174 from wxxsw/master
[33ma7f2fbd[m Merge pull request #176 from DaGopherboy/typo-fix
[33m8f7b064[m Fix punctuation
[33mab4e8c2[m Merge pull request #172 from ohkawa/master
[33m2d0a261[m Merge pull request #134 from snatchev/fix-typos
[33m5eaa3c4[m Fix typos in documentation
[33mc08685d[m Typo in Documentation
[33m867769b[m Verb tense fix in utils/build-script help output
[33m7c3abdf[m Add whitespaces and erase redundant whitespaces.
[33mf5caed8[m Fix typo
[33m68a59a0[m Add whitespaces
[33mb9ee2eb[m Fix missing period in comments
[33m8bda440[m Fix inconsiderate naming
[33mc959ce2[m Merge pull request #160 from justin999/fix-typo-on-EscapeAnalysis-1
[33me6b43df[m fix-typo
[33mf451900[m Reformat README
[33m8932511[m Merge pull request #158 from TroutZen/master
[33m8e59ae6[m Add missing period
[33m3265418[m Merge pull request #155 from bqueue/bqueue
[33m84fd7d6[m Corrected typo: text filed -> text file
[33m02a493b[m Revert "Error out on invalid LLDB build configurations on OS X."
[33m048de03[m Merge pull request #154 from jontelang/master
[33m19f228a[m Fix spelling error (mathing >> matching)
[33m9f6f62b[m Merge pull request #149 from ken0nek/master
[33m2bd6db6[m Fix mis-spelling (non-trival > non-trivial)
[33m2218e43[m Add whitespaces after comma and remove redundant whitespaces.
[33mbe4b651[m Merge pull request #152 from jontelang/master
[33m3e121de[m Merge pull request #153 from bqueue/bqueue
[33m50ac17d[m Fix git workflow (wrong name in instructions)
[33mf04eb91[m Corrected typo: separatly -> separately
[33mfce4611[m Merge pull request #150 from kballard/vim-sil-ftdetect
[33md8840b4[m Merge pull request #151 from ashishwt/master
[33m20f7d09[m Improved grammar
[33mae3b463[m Fix typo
[33m472eacc[m Fixed typo in comments
[33md128dad[m [vim] Add ftdetect file for sil
[33m00c25fb[m Merge pull request #147 from bqueue/bqueue
[33m7410703[m Fixed typos
[33me8a15c6[m Merge pull request #141 from marshallewhite/master
[33m15428fb[m Refine instructions for checking out sources.
[33m41704b2[m Merge pull request #144 from royxue/master
[33m5eb01ee[m Merge pull request #143 from larryv/master
[33mab6890f[m Fix typos in comments
[33m3172457[m Separate Homebrew/MacPorts instructions for CMake + Ninja
[33m2a654dd[m Fixed awkward wording
[33md079068[m Merge pull request #135 from larryv/master
[33m3de382e[m Merge pull request #120 from fabriziodemaria/master
[33m8402df2[m Merge pull request #140 from thomasjeans/master
[33m83f8c8a[m Merge pull request #139 from kabayan55/master
[33m8b7cee0[m Fix typo
[33m4df20a6[m Fixed typo in Clonable.rst
[33m1205637[m Add command to install CMake + Ninja via MacPorts
[33me0e5257[m Merge pull request #128 from jandrewstre/patch-2
[33mac4f146[m Merge pull request #117 from katzenbaer/master
[33m40e412a[m Merge pull request #116 from bdunlay/bdunlay-swift-typos
[33m2a74250[m Merge pull request #129 from zachpanz88/patch-2
[33mb9987e8[m Merge pull request #133 from jandrewstre/patch-4
[33mc7710b7[m Fix typo in SwiftPrivate.swift, "hexidecimal" -> "hexadecimal"
[33m149d474[m Merge pull request #130 from jandrewstre/patch-3
[33m02c487d[m Merge pull request #114 from balajipandian/fix_spelling_grammar
[33mb2850bc[m Reverted "builtin" inaccurate typo fix
[33m7998fe1[m Revert inaccurate typo fix
[33m89921c5[m Fix errors in OptimizationTips
[33m51a9cea[m Merge pull request #121 from noahfradin/patch-1
[33m177e775[m Merge pull request #126 from to4iki/master
[33m6e22607[m Fix typo
[33mdc451c4[m Fix typo and grammar in docs/DebuggingTheCompiler.rst
[33m43ef46d[m Fix a few typos and grammar in docs/Pattern Matching.rst
[33m1b5e201[m Fix typo
[33m048327c[m Update Shims.swift
[33m6e99e62[m Fix README header for subject agreement
[33mf8fb442[m Fix Typos
[33m273ad25[m Merge pull request #115 from katsumeshi/fix_typo
[33m88b2ed9[m Fix accidental FileCheck variable captures.
[33mb672216[m Fix typo
[33m907fa0b[m Linux: Mark this test as requiring Objective-C interop for now.
[33md9e9fea[m Remove use of "Dynamicism"
[33mb08610b[m Error out on invalid LLDB build configurations on OS X.
[33m780036e[m Fixed spelling and grammar error
[33m37428f7[m Merge pull request #112 from joesavage/master
[33m264e91d[m [SourceKit] Allow SourceEntityWalker to visit generic type parameters of type decls.
[33mfe3bd7d[m minor typo fixes
[33mac5d14a[m Remove use of the GNU ?: extension from a core header.
[33m15c3319[m Merge pull request #26 from steveklabnik/add_code_of_coduct
[33mf3e53b8[m Link to the code of conduct from the README.
[33mfba073f[m Merge pull request #109 from rogergzou/rev3
[33m6026b6d[m Revert a pull request that I landed earlier, which broke PrintAsObjC/comments.swift.
[33ma5366df[m Merge pull request #110 from ergenekonyigit/master
[33m8c84a06[m Clang importer: include subscripts in the Swift name lookup tables.
[33m37d168f[m Fix Typos
[33mbbab40a[m Merge pull request #108 from manyoso/linux_parallel
[33m074cb8e[m Merge pull request #107 from MaartenBode/patch-1
[33m741a31b[m whitespace
[33m7821341[m Add an argument-number field to DebugValueInst and friends. This commit adds a DebugVariable field that is shared by - AllocBoxInst - AllocStackInst - DebugValueInst - DebugValueAddrInst Currently DebugVariable only holds the Swift argument number.
[33mf4c3412[m Query linux for number of processing units for make parallelism
[33mba807a2[m Fixed typo
[33mc2448f4[m Merge pull request #105 from spencerking/master
[33m511c436[m Merge pull request #102 from udp/freebsd
[33m61cc0d8[m Merge pull request #104 from rogergzou/rev2
[33m2b61ca3[m minor stylistic change
[33mc8b942b[m whitespace
[33m8d78f74[m Merge pull request #101 from manyoso/master
[33m440a052[m Add FreeBSD cases in build script
[33mfbbc25a[m whitespace and capitalization for TODO's
[33m9da5899[m Consistently use env(1) to resolve bash and python paths
[33m6d6e6ab[m Update the build script with correct directory names for corelibs
[33m9575bfa[m whitespace
[33mc5950f6[m Merge pull request #98 from apple/clang-import-name-refactoring
[33mae24c99[m Merge pull request #95 from regexident/SetAlgebra-docfix
[33m1d2aa65[m Merge pull request #94 from Goles/patch-3
[33m6dbf2ac[m Merge pull request #96 from jyap808/my_markup3
[33mdaf7a83[m Merge pull request #97 from rogergzou/master
[33ma95dbab[m Fix spelling
[33m6696d99[m whitespace and capitalization
[33m7e86cd9[m Merge pull request #93 from grachyov/master
[33mb7a6236[m Fixing wrong method documentation for SetAlgebra (see my rdar://22031133)
[33m4cfcb7b[m Fix Typos
[33m53be1f4[m Fix typo
[33m5fe7948[m Merge pull request #89 from sferrini/master
[33m2ba7652[m Merge pull request #88 from grachyov/master
[33m9b96cdf[m Merge pull request #87 from nico/patch-1
[33m2f58e18[m Fix typo
[33mce4031f[m Removed unnecessary semicolons
[33m09f85c1[m Update link to ninja homepage.
[33m9d3c6ab[m Merge pull request #84 from Mitame/cmake-ignore
[33m0ab1951[m Merge pull request #85 from iMartinKiss/master
[33mb2ed2af[m Fix spelling
[33mfa8f4fa[m Ignore Cmake temp files
[33m1e43256[m Clang importer: Swift 2 lowercased subsequent argument names coming from Objective-C selectors. Mimic this.
[33md9ce07f[m Clang importer: when dropping the variadic parameter, drop the variadic parameter.
[33m2ea58f9[m Clang importer: handle CF type renaming in importFullName.
[33m50eea9c[m Clang importer: handle omit-needless-words for methods in importFullName.
[33m2d7044c[m Clang importer: move name translation for throwing methods into importFullName.
[33m4c50598[m Clang importer: switch method name import to importFullName().
[33m3102e23[m Clang importer: switch init method importing over to importFullName.
[33m13c1805[m Clang importer: teach importFullName about dropping certain variadics.
[33m91d1c3b[m Clang importer: use importFullName for factory methods as initializers.
[33mfedb6a8[m Clang importer: give importFullName a richer result type.
[33mec91244[m Clang importer: teach importFullName about factory methods as initializers.
[33meedf0fc[m Clang importer: teach importFullName to map init methods to initializers.
[33m9ee502b[m Clang importer: omit non-accessibility property getters/setters from lookup table.
[33m5776fa5[m Clang importer: migrate "Protocol" suffix computation into importFullName.
[33m2244cb4[m Swift lookup tables: start testing and cleaning up handling for Objective-C.
[33mfa865c7[m Clang importer: handle enumerator prefix stripping in importFullName().
[33mc41535a[m Clang importer: start computing the effective lookup context with the name.
[33m28dea3b[m Clang importer: recursively add members to the Swift lookup tables.
[33m2dc262f[m Clang importer: Don't add duplicate declarations to the Swift lookup tables.
[33mf798d53[m Clang importer: convert more importName callers over to importFullName. NFC
[33m3caf703[m Narrow the Clang importer's importDeclName to just importIdentifier. NFC
[33ma861a73[m Clang importer: introduce "importFullName" to centralize name-mapping logic.
[33mc2bf16c[m Clang importer: start building a Swift name -> Clang declarations table.
[33mf44f4a5[m Merge pull request #81 from jordanekay/fix-misspellings
[33m008a42f[m Fix misspellings
[33m5d21900[m Merge pull request #76 from serejahh/fix_typos
[33m929aab4[m Merge pull request #77 from joanna-chen/master
[33m34ac6b9[m Merge pull request #78 from mike-u/master
[33me26f341[m fixed type of designated in ObjectInitialization.rst
[33m40babfe[m fix grammatical error
[33m411c7df[m Fix typos
[33mc6382a6[m Merge pull request #56 from Goles/patch-2
[33m2fe44c0[m Fix typos
[33m2b28afa[m Merge pull request #74 from KevinPayravi/patch-1
[33m9a67365[m Merge pull request #75 from johankj/master
[33m13067ed[m Merge pull request #72 from frootloops/master
[33mdb3affb[m Wording and grammar fixes in LLVMOpt.cpp comments
[33mfa76656[m Remove instances of duplicated words
[33m31feb1f[m Merge pull request #73 from codestergit/patch-8
[33mc9d2c36[m Merge pull request #70 from shrx/patch-1
[33me944b06[m Merge pull request #71 from larssmit/typo_fixes
[33macf933f[m Fixed typo
[33m745a088[m Fixed Typo
[33mffd4175[m Fixed typos in docs/CallingConvention.rst
[33mdc632ed[m Merge pull request #69 from jandrewstre/patch-1
[33m156fd99[m Merge pull request #67 from codestergit/patch-7
[33m166ba55[m Merge pull request #68 from iKevinY/patch-1
[33mea1ced5[m fix some cases
[33m6492a47[m Minor README fixes
[33m9b5593a[m Merge pull request #66 from johankj/patch-1
[33me9b3b2e[m Fix Typos
[33m110f48d[m Update referenced IntegerArithmetic filename
[33m8fc2064[m Fix typo in docs/StringDesign.rst
[33m75ac2b0[m Merge pull request #58 from return/small_typo
[33m37325e7[m Merge pull request #59 from codestergit/patch-5
[33m4aba7d4[m Merge pull request #60 from xeoneux/patch-1
[33mffadf6c[m Merge pull request #64 from codestergit/patch-6
[33m4955dac[m Merge pull request #63 from thelastjedi/patch-1
[33m76621aa[m Merge pull request #61 from d-soni/master
[33m4884284[m Fixed typo circumstances
[33mecc7448[m Merge pull request #62 from deafgoat/master
[33m95dde43[m fix typo
[33m5510d4b[m fix typo in ASTWalker
[33m3237780[m Fix typographical error
[33m8ac2b31[m fixed typo "complatiblity"
[33m15dc3cb[m Fix typo acheived to achieved
[33mcf2a825[m Fixed small typo in StdlibRationales.rst
[33m9243042[m Merge pull request #57 from uraimo/patch-1
[33mcf97f2e[m A few minor typos in SIL.rst
[33m7a06230[m Merge pull request #54 from ksaldana1/master
[33mfe1aee3[m fixed capitalization in note for consistency
[33m279fe0d[m Merge pull request #53 from rsmoz/patch-1
[33m9650921[m Added closing quotation mark
[33mb29ba50[m fixed typo "when ever", deleted repeated word
[33ma97b75d[m Merge pull request #46 from mike-u/master
[33m28a72a0[m Merge pull request #39 from jeremybarr/typo-typechecker
[33mebda467[m Merge pull request #48 from codestergit/patch-4
[33mbd71bb0[m Merge pull request #50 from OEASLAN/master
[33mc2b8e6a[m Merge pull request #49 from sdulal/patch-2
[33mca1a45a[m fixed typo in docs/tools/Arrays.rst
[33m0ac65ed[m Merge pull request #47 from codestergit/patch-3
[33mc92dba6[m [GitFlowsWork.rst] commiting -> committing
[33m7f8691b[m Fixed spelling
[33mb724866[m Merge pull request #40 from stevemoser/patch-1
[33m083cf12[m Fixed `always` typo.
[33m73ad408[m Merge pull request #43 from lzwjava/typo
[33m92b7ae9[m Merge pull request #30 from franzejr/patch-1
[33mff70f62[m [utils] Change llbuild install to specifically only install swift-build-tool.
[33med399ef[m Fixed Typos
[33m0991f4f[m Merge pull request #41 from codestergit/patch-1
[33m085c96a[m Merge pull request #45 from codestergit/patch-2
[33m4826524[m fixed type of declaration in TypeChecker.rst
[33m17ef051[m Fixed Typo
[33md21d336[m Fix Typos and spelling
[33m95a7a03[m Fix typos
[33m289b0e5[m fix typo: commiting -> committing
[33m606ee60[m fixing typo of intofive to into five
[33m13ae184[m Merge pull request #37 from ksaldana1/master
[33md04dcb5[m Merge pull request #36 from beneggett/master
[33me86c733[m Merge pull request #33 from trel/patch-1
[33m94a8ab7[m Update Philosophies.rst
[33mad9b611[m Fixes langauges/languages typo in www/Philosophies & test/Prototypes/FloatingPoint.swift
[33m564973f[m Merge pull request #35 from codestergit/master
[33mc4741d6[m Merge pull request #34 from kaneshin/fix-comment-typo-2
[33m5dc4f87[m Fix Typos
[33md912014[m Fix `execution` typo
[33m2f32b13[m whitespace
[33m7f4351e[m Merge pull request #32 from Nerylix/master
[33mb016c90[m Merge pull request #27 from kaneshin/fix-comment-typo-1
[33m1adf677[m Merge pull request #28 from ArtSabintsev/patch-1
[33md3fa0c1[m Fix typo in String.swift documentation.
[33m3995c02[m Fix typo on "committing"
[33med6ce84[m Grammatical fix
[33m67d88b8[m Merge pull request #21 from passsy/patch-1
[33mf6550f8[m Fix tiny typo
[33m95338fd[m Merge pull request #25 from palfrey/cmark-checkout
[33m44fc7a5[m Merge branch 'master' into cmark-checkout
[33m6bace09[m Merge pull request #24 from codestergit/master
[33ma3d6d34[m Merge pull request #23 from nstanke/patch-1
[33m54c3ab9[m Fix cmark checkout path
[33mec23479[m Merge pull request #22 from steveklabnik/readme_fixes
[33mf7a1b6a[m Fix dynamic typo
[33m549263d[m updated spelling mistake of intead
[33meaa7ee5[m [RLE-DSE] Revert to use a vector of BBState. SmallDenseMap grows quadratically everytime and BBState is too big for that.
[33m5ba5baf[m Remove extra / in git commands in README
[33mfd48bb5[m Merge pull request #19 from alexwlchan/master
[33me8009da[m converted ApiNotes Readme.txt to markdown
[33m2b5cf8b[m [RLE-DSE] Refactor RLE. NFC
[33m9e06a2f[m Fix typo in docs/ARCOptimization.rst
[33m14731ce[m Merge pull request #16 from filipw/feature/readme-update
[33mc3e92cd[m Merge pull request #18 from mdiep/fix-swift-cmark-url
[33m5ef74da[m Fix URL for apple/swift-cmark
[33m675102e[m Added a link to Testing.rst in the readme file
[33m8d9ef80[m [frontend] Introduce a new frontend option '-dump-api-path', which outputs a swift interface file for each compiled source file.
[33m717b017[m Remove redundant code used for debugging. (NFC)
[33m58e2b0d[m IRGen: Use the static superclass for virtual dynamic dispatch
[33m7dd3046[m [ASTPrint] Print documentation comments for extensions and subscripts.
[33m8659022[m [ASTPrint] For when printing interface from a source file, introduce an option to pick up the original source text for the declarations.
[33m04e3949[m [ASTPrint] Introduce a printing option to hide underscored protocols in the stdlib.
[33m2740ad6[m Temporarily Revert "Add an argument-number field to DebugValueInst and friends." while investigating buildbot breakage.
[33med2b16d[m Add an argument-number field to DebugValueInst and friends. This commit adds a DebugVariable field that is shared by - AllocBoxInst - AllocStackInst - DebugValueInst - DebugValueAddrInst Currently DebugVariable only holds the Swift argument number.
[33m4218917[m [sil-combine] Improve dead closures elimination
[33m13591c5[m Correcting the typo
[33m1a0f7d4[m [docs] Emphasize that LibraryEvolution.rst is still in draft form.
[33m7cdea97[m docs: fix description of select_enum_addr
[33md601782[m [RLE-DSE] Remove EnableGlobalRLE as it is enabled by default now
[33m38611f4[m [RLE-DSE] Use SmallDenseMap instead of DenseMap in DSE to save memory allocations. Many, if not most functions, do not have more than 64 BasicBlocks (BBState)
[33m9d41905[m [RLE-DSE] Use SmallDenseMap instead of DenseMap in RLE to save memory allocations. Many, if not most functions do not have more than 64 BasicBlocks (BBState) which is the default for DenseMap.
[33m25f1743[m [RLE-DSE] Refactor in RLE, move declarations around. NFC
[33mf431025[m stdlib: Fix documentation comments for Sequence.{dropFirst(),dropLast()}
[33mfed7f79[m Runtime: Static-ize swift_unsafeReflectAny.
[33m124b0e4[m Fix <rdar://problem/23719432> [practicalswift] Compiler crashes on &(Int:_)
[33m7d3292b[m Enable lightweight assertions in OS X packages
[33m2a7af5f[m Delete the flag -disable-func-sig-opts.
[33m9617af5[m Remove the flag  -disable-func-sig-opts from a bunch of tests.
[33mb87ca95[m Remove the flag -disable-func-sig-opts from tests that don't need it.
[33m5b1f42c[m Generalize some code to be based on SelfApplyExpr instead of its two derived classes, NFC.
[33ma3f3a76[m Fix formatting and tabs. NFC.
[33m3784421[m Merge a switch case into the identical case block below. NFC.
[33m6636baf[m Fix <rdar://problem/23272739> Poor diagnostic due to contextual constraint Previously we erroneously complained:   error: cannot invoke 'contains' with an argument list of type '(String)' now we correctly complain:   error: unexpected non-void return value in void function
[33ma35699b[m [docs] Commit a draft of the Library Evolution (Resilience) master doc.
[33m047e400[m stdlib: Fix coding style
[33md73a2da[m Sort files in CMakeLists.txt. NFC.
[33mb6c284b[m Rename a variable. NFC.
[33m2b47167[m Simplify another implementation of map() and filter().
[33m6ed3e94[m [build-script] Add a heading for Foundation tests in the output.
[33m22926f3[m [build-script] Add support for testing swiftpm.
[33mb8c8844[m Improve UncurriedCandidate::dump to include the type information for a candidate, NFC since this is just a debugging aid.
[33mbc46ab5[m Minor tweaks to vim syntax highlighting
[33m76be22c[m Manually set the deployment target for Darwin Ninja bootstrap builds
[33m9886aee[m Merge pull request #15 from gribozavr/unifdef-tvos-target
[33m5cc14ab[m [sil-devirtualizer] Improve devirtualization of witness_method instructions.
[33m4324e7c[m Remove conditional compilation of tvOS
[33m8885997[m Simplify map() to a simple loop
[33m7dd34bf[m Fix an unused variable warning.
[33m3c2c8df[m [DOCS] Move the WMO document to /proposals
[33mb7a4a74[m [DOCS] Change "verified" to "type-checked".
[33m778f829[m [Frontend] Escape target names in dependencies output.
[33me11efcb[m ClangImporter: Fix external project crash in lookups
[33m99f40ee[m Translate the optimizer design document from RST to Markdown.
[33m3579402[m Clean up formatting for IRGen super_method tests
[33mfbbb593[m IRGen: Lower `super_method` SIL instruction for native classes
[33mc7c180f[m Fix <rdar://problem/23700031> QoI: Terrible diagnostic in tuple assignment
[33mc73a04d[m SILGen: ApplyOptions::Transparent and related support logic is dead, NFC
[33m7333c19[m Enable lightweight assertions in Linux packages
[33m4f8773f[m Add a test feature 'swift_ast_verifier'
[33me15132a[m Revert "Compile StdlibUnittest with -sil-serialize-all."
[33m3db6244[m IRGen: Make more enum tests work on Linux
[33mbac64f3[m More macro namespace qualification hygiene
[33m6f806b4[m Compare top-level modules when deciding visibility for redeclarations
[33m1cc28c7[m Default toolchain install location changed to /Library
[33m2194aa5[m ABI.rst: Document enum reflection metadata
[33mca7254c[m IRGen: Preliminary support for resilient enums
[33mc06f335[m IRGen: Remove unused IGM parameter from some methods on EnumImplStrategy, NFC
[33m9ee10e7[m IRGen: destructiveProjectEnumData() value witness doesn't need a return value
[33me6d35f2[m Fix typos I noticed in IRGen and SILGen, NFC
[33madc92ba[m Compile StdlibUnittest with -sil-serialize-all.
[33m44d2f0a[m Workaround for a bug in the deserializer (rdar://problem/23620491)
[33mc5c3b17[m EscapeAnalysis: improve the ConnectionGraph ABI.
[33m34bea2c[m EscapeAnalysis: change the handling of use-points.
[33mbd70851[m SIL: Fix mayRelease() for BuiltinInst
[33m461cf53[m tests: Improve comment for StdlibUnittest-import workaround.
[33m966033a[m EscapeAnalysis: make a separate state for "escapes with return"
[33m6605b59[m Absolute-qualify name refs in macro expansion
[33m5176fea[m [utils/build-script] Pass --xctest override path to SPM build, when building xctest.
[33m5e5cdc6[m Runtime: Use 'once' instead of static local variable initialization.
[33m4a11d81[m [update-checkout] Follow up 32f84929367
[33m8c6c9a2[m [sourcekitd] Be tolerant of multiple calls to sourcekitd_initialize.
[33ma33319b[m [CMake] Fix "Clang headers were not found" cmake error in a non-standalone build.
[33m380ddd7[m [RLE-DSE]. Add NDEBUG and some comments in DSE. NFC
[33m212110e[m Reapply "Make test independent of function processing order"
[33md81df69[m [RLE-DSE]. Add some comments about memory location canonicalization in DSE. NFC
[33m29d6170[m Revert "Make test independent of function processing order"
[33m8aea34d[m [RLE-DSE] Refactor and add some comments regarding why ProjectionPath is used in DSE
[33m3b9945c[m [RLE-DSE] Remove an unneeded parameter in DSE functions
[33mae478c0[m [RLE-DSE] Update some comments in DSE
[33m7f6da3b[m Make test independent of function processing order
[33m32f8492[m Change recommended name of checkout directory for Foundation and XCTest
[33m68aa44b[m Add a document that describes the design of the Swift Optimizer.
[33mf63492f[m Fix a the description of the CSE pass.
[33m0958f67[m Fix <rdar://problem/22058555> QoI: unhelpful type error "cannot invoke 'withCString' with an argument list of type '((_) -> _)'"
[33m1c592a7[m The fix for 23433271 also fixed the crash on 22058555, add its testcase so we don't regress on it in the future.  Yes, the diagnostic is lousy, I'll repurpose the second radar to improve it.
[33mf4fc002[m Fix <rdar://problem/23433271> Swift compiler segfault in failure diagnosis
[33m2379928[m Fix <rdar://22774938> QoI: "never used" in an "if let" should rewrite expression to use != nil
[33m5f3f1a3[m Revert "[Serialization] Fix a bug in the serialization of shared functions."
[33m97a793b[m Fix a warning in CSDiag.
[33m63f4f08[m Add a "Contributing" section.
[33m4b898ce[m Fix rdar://23681566, a bug noticed by Marcin Krzyzanowski on twitter where we would reject an invalid @objc enum with:
[33m714dcd5[m Fix <rdar://problem/23202128> QoI: Poor diagnostic with let vs. var passed to C function
[33ma7e8eb4[m Previous fix was actually for rdar://19478919, correct the testcase.
[33m568ed04[m fix <rdar://problem/23271868> QoI: Non-descriptive error message in Swift when passing immutable unsafe pointer instead of mutable
[33m0fd81af[m Remove the verification of cttz & ctlz from the SIL verifier.
[33mf181452[m Remove dead CallGraph parameters.
[33md3b9598[m Disable the test array_mutable_assertonly.swift
[33mc929cec[m Revert "[PassManager] Process the function in a bottom-up order."
[33m8869548[m Use the function order helper to compute bottom-up ordering.
[33mda70b97[m [PassManager] Process the function in a bottom-up order.
[33m422d466[m [Serialization] Fix a bug in the serialization of shared functions.
[33m5542bc3[m [Serialization] Fix a bug in the serialization of resilient functions
[33m7c46d17[m [loop-arc] Change Loop ARC Pairing Context to be a Loop Visitor
[33m1400227[m [loop-arc] Add a simple Loop visitor that visits loops bottom up in the loop tree.
[33ma768dc2[m [loop-arc] Remove the opaque ARC pairing interfaces.
[33m9b211d4[m [loop-arc] Prepare to remove opaque ARC pairing interfaces.
[33m2faaa34[m [loop-arc] Small refactoring in preparation for changing ARCSequenceOpts to use a loop visitor.
[33m3a34b30[m Disable the module verification in the pass manager.
[33maafc973[m [Deserialization] Verify that the module that PM handles is valid.
[33mbc42387[m Create swift-latest symlink in darwin installer
[33m1e2eea6[m [CallGraph] Rip out CallGraph from the linker pass.
[33mcb83040[m [PM] Make the printer/dumper passes agnostic to the order the PM scans functions in the module.
[33m300ab4d[m [PM] Add a small verification method to ensure that analysis run on funcs with bodies.
[33mb2fd1ec[m Default toolchain install location to ~/Library instead of /Library.
[33me8bbace[m [SideEffectsAnalysis] Cleanups some code.
[33m8d24c12[m Add missing braces.
[33m54ceaf2[m Tweak access-modifier formatting.
[33m40a89cb[m Remove call graph maintenance in dead function elimination.
[33m7b5e2fd[m Remove mention of CallGraphAnalysis.
[33mea5ebb7[m Fix up includes in PassManager.h.
[33m34238e5[m [AliasAnalysis] Remove duplicate code in TBAA.
[33ma07da67[m [AliasAnalysis] Cache the results of TBAA.
[33md99b9d1[m Merge pull request #12 from shahmishal/master
[33m891f9e8[m Fix comment
[33ma3020a8[m [AliasAnalysis] Make the dependence on SideEffectsAnalysis internal.
[33mcbb3bab[m Updating license header
[33mcba563c[m Cleaning up code:  - Add darwin_ prefix to preset variables  - Add license header to utils/toolchain-codesign and utils/toolchain-installer  - Simplify the logic to remove Info.plist
[33m4c0c8df[m Add DARWIN prefix to TOOLCHAIN_INSTALL_LOCATION
[33m970a0a2[m Remove the old Info.plist if it already exists before creating new one
[33m4cd1a6f[m Fix typo in preset
[33mffcfca6[m Fix Toolchain path in build script
[33m7885cc0[m Add darwin prefix to toolchain var in build script
[33m9e5e408[m Add support to create xctoolchain with code sign
[33m3d35b03[m [AliasAnalysis] Document and cleanup referenceTypeTBAAMayAlias.
[33m89a8103[m [AliasAnalysis] Minor cleanup.
[33m651edbf[m Revert "[AliasAnalysis] Document and roll the alias() family of methods. NFC."
[33mcdacda9[m Merge pull request #11 from nadavrot/alias_analysis_cleanups
[33m971aa23[m [AliasAnalysis] Remove the AliasAnalysis Cache.
[33m00e1685[m Rename 'Threshold' to a more specific variable name.
[33mc7a4637[m [AliasAnalysis] Rename getMemoryBehavior.
[33m96ab8d8[m [AliasAnalysis] Rename getMemoryBehavior.
[33m2276a93[m [AliasAnalysis] Clean some of the docs.
[33m08d75ca[m Abbreviate AliasResult.
[33m4b2da0a[m [AliasAnalysis] Remove the default argument from getMemoryBehavior.
[33mc1dce5c[m [AliasAnalysis] Document and roll the alias() family of methods. NFC.
[33mf6d6f31[m [AliasAnalysis] Document the AliasResult enum. NFC.
[33m3be2be5[m [MemoryBehavior] Cleanup and document logic for access to readonly memory location.
[33m5ed14f1[m Merge pull request #10 from nadavrot/calee_analysis_branch
[33m693f6af[m Fix a bug in the lexicographically order of functions in the callee set.
[33md78c4db[m [CalleeAnalysis] Remove the enumeration of functions in the module for sorting.
[33m293d08e[m Fix the dump of top_level_code_decl to include the ), fixing rdar://23392159
[33mc6ddf3c[m Merge pull request #6 from adrian-prantl/master
[33md432286[m Re-apply "Sema: Targeted fix for LLDB REPL issue"
[33m3d2056d[m Revert "Sema: Targeted fix for LLDB REPL issue"
[33mae3dc8d[m Merge pull request #8 from phausler/FoundationConfigureSimplification
[33m872b8ac[m Linux cmake script env doesn't have pushd/popd.
[33mdf2fe71[m Pull libswiftStdlibStubs.a, libswiftRuntime.a into libswiftCore.a
[33m3d79008[m Revert "Pull libswiftStdlibStubs.a, libswiftRuntime.a into libswiftCore.a"
[33m7dee535[m Pull libswiftStdlibStubs.a, libswiftRuntime.a into libswiftCore.a
[33m29fdaa4[m LLDB build: pass along several version-related variables.
[33m1a640d4[m Sema: Targeted fix for LLDB REPL issue
[33m88ca1e5[m [Preset] Disable test installable package in OS X again
[33m2dca396[m Merge pull request #7 from aschwaighofer/hoist_addr_proj_bug
[33m723cd51[m Merge pull request #9 from phausler/CoreLibsReadme
[33m72adaea[m Revert "Revert "IRGen: If Objective-C interop is disabled foreign classes should use Swift reference counting""
[33m3e779db[m Revert "Revert "Safely implement strict TBAA rules.""
[33m4f4cfd7[m update related projects list to include Foundation and XCTest
[33mddc9c52[m Revert "Safely implement strict TBAA rules."
[33m1b966c8[m Simplify configure pass for Foundation to use a defined variable for XCTest's build directory
[33mbc9e830[m [Preset] Disable test installable package in OS X
[33m3d5c496[m Safely implement strict TBAA rules.
[33m95f43bc[m Fix a bug in SILValue's hoistAddressProjections
[33md326c8e[m Revert "IRGen: If Objective-C interop is disabled foreign classes should use Swift reference counting"
[33m54a6b46[m IRGen: If Objective-C interop is disabled foreign classes should use Swift reference counting
[33m37f38c9[m Fix TBI test.
[33ma1aed3b[m [utils/build-presets] For the package preset, also install the clang headers so libclang can find them.
[33mf40d28f[m Debug Info: Don't reset the debug scope after leaving the outermost scope, because the debugger is not expecting the function epilogue to be in a different scope.
[33m9c565fe[m Merge pull request #5 from shahmishal/master
[33m1279ba8[m adding bug number back in bindings-build-record test
[33m24bd011[m Only runs on OS X, removing XFAIL
[33m2b04707[m Only run bindings-build-record on OS X due to test flakiness on Liunx system rdar://21515673
[33m2016e33[m Revert today's changes to SIL AliasAnalysis.
[33m308f39f[m stdlib tests: add import statements to prevent unresolved symbols when compiling StdlibUnittest with -sil-serialize-all.
[33m5e73426[m runtime: add runtime functions for stack promotion of buffers. These functions are usually lowered away, but can remain if SIL optimizations run but not llvm optimizations. This is only a workaround. I hope that I can remove the functions soon when we have a better support for buffers in SIL.
[33ma6aedec[m GlobalOpt: Don't assume we see all accesses to a global if it is imported from another module.
[33m793b838[m [presets] Add swift package tests to the OS X package builders.
[33mde8faa0[m Update comments.
[33m83b44be[m Out-line the definition of ScopeCloner::getOrCreateClonedScope(). NFC
[33m3390a58[m Refactor in alias analysis. NFC
[33m5940fcc[m Update SILArgument alias analysis to make use of the new alias() interface
[33m81ebb56[m Clean up uneeded SIL in a LIT test
[33m215bdc0[m Merge pull request #4 from phausler/FoundationBuildScripts
[33ma553403[m Fix LIT test in basic-aa.
[33m7e97baa[m Assert that no SILInstruction is created without a SILDebugScope.
[33md756a69[m Remove redundant assertions used while debugging.
[33m44ddc5b[m Improve comments in alias analysis
[33m8ab1e2d[m Unify debug scope and location handling in SILInstruction and SILBuilder.
[33m23c2579[m Implement SILArgument and select_enum handling for alias analysis
[33mf8143bb[m Clean and document the PassManager's runFunctionPasses.
[33m45308f6[m Try apply insts can also have guaranteed parameters.
[33m5a48882[m Revert "Re-apply "Reduce memory footprint of the Swift compiler""
[33m7d18161[m Add additional swiftc flags for adding the XCTest module path when configuring Foundation
[33m19b7554[m Use the new function order helper in side effect analysis.
[33m2a2a201[m Remove include of CallGraphAnalysis.h from files that don't need it.
[33mf98cd04[m IRGen: Don't use spare bits in address-only payloads
[33mfa421c7[m Strip swig build support out of the Swift build script.
[33m4cb6069[m build-script: run dsymutil and `strip -S` on the whole toolchain
[33mdf5d706[m [stdlib/prototype] Merge some Integer work
[33m4398b81[m [stdlib] Integer prototype: correct a comment
[33m1b18822[m [stdlib] Integer prototype: remove promotion model
[33m133fdde[m Rename the trait WholeFunction to FunctionBody.
[33mb2f0769[m Fix a bug in the invalidation of analysis in CapturePropagation.
[33m55e79ae[m Fix a bug in the invalidation of analysis in the inliner and ArrayOpt passes.
[33mc1e45d8[m Add a shim: swift_stdlib_objcDebugDescription, NFC.
[33mb3604aa[m Remove the fake _CocoaStringType protocol, NFC.
[33m6313170[m Comment an assumption made by DeadObjectElimination
[33m1f726fe[m IRGen: Address-only enums should not use spare bits for layout
[33m6c2d5b1[m IRGen: GenEnum.cpp cleanups, NFC
[33mbf2fdb6[m Re-apply "Reduce memory footprint of the Swift compiler"
[33m46fda83[m [AliasAnalysis] Don't cache the results between queries.
[33m2942822[m [RCIdentityAnalysis] Don't cache the results of analysis
[33m3284751[m Convert another bool into an enum.
[33mcc2ca08[m Change the bool that represents the property of observing or ignoring retains in Alias Analysis into an enum.
[33mcdb8e1d[m Shorten some of the names in SideEffectsAnalysis
[33md2d6e0c[m Re-apply "Update SideEffectAnalysis to use BasicCalleeAnalysis.""
[33m06590c4[m LICM: Dont move function calls out of loops which do a retain.
[33m159eab1[m install Foundation via the ninja script and add the test phase for Foundation
[33m681171b[m [callgraph] The new invalidation trait 'function' needs to invalidate the call graph.
[33m9ea30d0[m Runtime: Remove custom operator new(InPlace).
[33md9ae156[m [utils] Factor out command line setup of swiftpm bootstrap command.
[33m7c68fc1[m Add a comment for why Demangler::isDigit isn't just std::isdigit.
[33m0b79ecf[m Rename swift-arc-optimize to swift-llvm-arc-optimize as this is a LLVM pass
[33m7a5fe1d[m Change the analysis invalidation message from "preserve" to "invalidate".
[33m02e08e2[m Revert "Update SideEffectAnalysis to use BasicCalleeAnalysis."
[33mcbf5495[m [RLE-DSE] port more tests to redundantloadelimination.sil
[33m63ff286[m Update EscapeAnalysis to use BasicCalleeAnalysis.
[33mf668a74[m EscapeAnalysis: keep a separate summary connection graph for a function.
[33m83e9777[m EscapeAnalysis: refactoring so that we don't have to store a pointer to EscapeAnalysis in ConnectionGraph. NFC
[33mc25ed8c[m EscapeAnalysis: possibility to create a summary graph for a function.
[33m88baeea[m Switch function signature optimization away from call graph.
[33m3f4519d[m Tweak method naming in BottomUpFunctionOrder.
[33m4121b43[m Move the closure specializer to using the new function orderer.
[33m3c7d802[m Add a flattened view of functions in BottomUpFunctionOrder.
[33m790448f[m [RLE-DSE] Run clang-format on RLE and DSE files. NFC
[33m4c12a12[m Bump Swift version to '2.2'.
[33m0f3642f[m [RLE-DSE]. Improve how RLE removes instructions with no use
[33mb219c9b[m Update validation test to reflect diagnostic changes.  Have I ever mentioned that it doesn't make sense for validation tests to be checking diagnostics?
[33mdf9d572[m Fix <rdar://problem/22602657> better diagnostics for closures w/o "in" clause
[33m8b6d9e9[m Revert "Reduce memory footprint of the Swift compiler"
[33m1389c41[m Revert "Always use malloc/free for allocation of SIL instructions."
[33m25e310c[m Add a testcase for a fixed issue, remove a fixme that has been fixed. NFC.
[33m2c42ae6[m Remove maintenance of call graph in closure specializer.
[33m4b8ccac[m Fix <rdar://problem/22243469> QoI: Poor error message with throws, default arguments, & overloads and probably others.
[33m632b72a[m Refactor bottom-up function ordering code from the call graph.
[33m1d8a4cd[m Tweak comment and assert in refactored code.
[33m0b784b1[m [RLE-DSE] Add  more LIT tests.
[33m9beeb56[m [TypeInterface] When printing type-specific interfaces, replace parameter and return types with instantiated types.
[33m606cc82[m [Doc] Add some notes about the recently added doc comment fields.
[33ma149313[m Refactor ArchetypeTransformer into a reusable IDE utility. NFC
[33m01ec4f2[m [TypeInterface] Replace generic params with instantiated type when printing type-specific interface.
[33m6b125a2[m [RLE-DSE] fix a LIT test
[33mff72cec[m [RLE-DSE] disable a LIT test
[33m4ea73b5[m [RLE-DSE] rename redundantloadelimination_basic.sil
[33mba6bca6[m [RLE-DSE] Move more tests to redundantloadelimination_basic.sil
[33m774dd10[m IRGen: Address a FIXME by adding an assertion to guard against invalid casts from ResilientStructTypeInfo
[33ma312dad[m Always use malloc/free for allocation of SIL instructions.
[33md58f948[m Reduce memory footprint of the Swift compiler
[33mf8029c7[m A temporary workaround for a use-after-free issue related to debug scopes.
[33ma4669a2[m Handle DynamicMethodInst in callee analysis.
[33mc7b069d[m [RLE-DSE] Remove test cases from globalredundantloadelimination.sil. They have been moved to redundantloadelimination_basic.sil
[33m64d1439[m [RLE-DSE] Disable a test case
[33m75a9f3c[m [RLE-DSE] Change how BBState is allocated in DSE to save memory allocation and space. Existing test cases ensure correctness
[33m4f80a70[m [RLE-DSE] Re-enable RLE. crash found and fixed in DCE
[33meb5376e[m Clear data structure before premature exit in DCE
[33m7648d5e[m Remove XFAIL from test/1_stdlib/Runtime.swift now that the optimizer bug was fixed
[33mc09212b[m [RLE-DSE]. Disable RLE for now as it causes a crash on linux
[33mfbd2e4d[m Rename @asmname to @_silgen_name.
[33ma3b6bef[m Runtime: Use new(InPlace) in more places to avoid unwanted null checks.
[33m385f4cc[m Demangle: Use our own isDigit instead of isdigit.
[33m4b495e5[m [RLE-DSE]. Add improvements on how to deal with terminator inst which can not have BBArgument.
[33m795b00d[m Fix two iterator invalidation bugs (use-after-free).
[33m362c801[m IRGen: Fix {class,struct}_resilience tests on 32-bit
[33m36fa732[m Revert "Fix an iterator invalidation bug."
[33m5203a68[m Pick up LLVM_PACKAGE_VERSION correctly in unified builds.
[33ma653f71[m Quote cmake variable in case it isn't properly set.
[33mea9bd9c[m Fix compile error on ARM and i386
[33m9140f1d[m Remove unimplemented method declaration.
[33m93d841b[m Fix this test case to work correctly in an environment where Int == Int32
[33m514a9bc[m [CMake] Really fix the issue from rdar://problem/23570075.
[33m978bc67[m Silence a warning about unused an unused debug function.
[33m28a5c0b[m Simplify the code that searches the last Release instruction. NFC.
[33m2874a6d[m SILGen: Switches over resilient enums must include a default case
[33m68a8a5e[m Fix an iterator invalidation bug.
[33mebcadcf[m [CMake] Fix install of Swift's copy of Clang headers.
[33m0fc6dc8[m Runtime: Rename swift_stdlib_getDemangledTypeName to swift_getTypeName and decouple it from String.
[33m40fd2cb[m Remove no longer neeed include of CallGraphAnalysis.h.
[33m3144bf5[m Remove call graph maintenance from SimplifyCFG.
[33mea53336[m Remove call graph maintenance from CSE.
[33mffddffc[m Update SideEffectAnalysis to use BasicCalleeAnalysis.
[33m4cbdfda[m Fix silly invalidation issue in BasicCalleeAnalysis.
[33m5feccb9[m Add missing include to BasicCalleePrinter.cpp.
[33me09027c[m Fix the error message when a cast to a protocol type fails.
[33m752649a[m [RLE-DSE]. disable 1 unhandled test for RLE.
[33m423139e[m [RLE-DSE]. Fix some LIT test cases for changed RLE option
[33m148c916[m [RLE-DSE]. Fix some LIT test cases for changed RLE option
[33m79f9d57[m Merge branch 'master' of github.com:apple/swift
[33m6bbcdd0[m Start keeping track of the argument that failed when filtering a candidate produces a list that differs in a consistent argument.  NFC since this isn't used yet.
[33m33f388e[m Split the callee analysis portion of the call graph out.
[33m03deb7d[m [RLE-DSE]. Move test from the old RLE/LoadStoreOpt test file to the new RLE test file
[33m854bfb3[m [RLE-DSE]. Move test from the old RLE/LoadStoreOpt test file to the new RLE test file
[33m3cbd67d[m Refactor handling of 'hasTrailingClosure' in CalleeCandidateInfo.  This is a statically determinable property of a given call site, so pass it into the ctor for CalleeCandidateInfo instead of computing it when filtering.  NFC.
[33m5a23bfd[m add a testcase for a diagnostic not tested elsewhere, NFC.
[33mefb1df4[m [RLE-DSE]. Rename RLE and DSE LIT test files. NFC
[33m99e2082[m [RLE-DSE] Rename GlobalRedundantLoadElimination to RedundantLoadElimination. NFC
[33made3952[m [RLE-DSE]. Rename GlobalDeadStoreElimination to DeadStoreElimination
[33me65813b[m [RLE-DSE] Rename GlobalRedundantLoadElimination.cpp to RedundantLoadElimination.cpp
[33m02b267d[m [RLE-DSE] Rename GlobalDeadStoreElimination.cpp to DeadStoreElimination.cpp
[33m178e6f6[m 6370e40c65f0d798651731bf93b5f1a77772382e fixed rdar://21890157 as well, add a testcase from it.
[33m82c00c5[m [RLE-DSE]. Enable global redundant load elimination again ...
[33m3ba770b[m [RLE-DSE] Fix a bug in DSE killset and genset construction. This bug is exposed when RLE is turned on
[33m8635ec0[m Do not CSE existential_metatype on an address. :bug:
[33m6370e40[m Fix <rdar://problem/23560128> QoI: trying to mutate an optional dictionary result produces bogus diagnostic
[33m9e880a2[m EscapeAnalysis: better and simpler handling of ref_element_addr.
[33m0c2cbb7[m README: typo: stray 'the'
[33m7984c5c[m Fix a comment typo, and make ConstraintSystem::dump show fixes pending, NFC.
[33m7546d58[m Revert "Add -linker-path frontend option to choose the linker"
[33m406667e[m README: Add Ubuntu 14.04 clang-3.6 dependency note
[33mcea1a8a[m Revert "Specify path to ninja for Linux bootstrap builds"
[33mc5c9b78[m IRGen: These setters on TypeInfo are dead, NFC
[33m5fa9a7d[m IRGen: Multi-payload enums only use spare bits if payloads are universally fixed-size
[33m0f673f5[m Omit needless words: distinguish class vs. instance properties for pruning.
[33m7b93555[m Specify path to ninja for Linux bootstrap builds
[33md9bbb6c[m Remove checks and references to internal Apple SDKs.
[33m69d3b20[m Use OS X SDK for Darwin Ninja bootstrap builds
[33m106bf80[m Omit needless words: don't prune "properties" of the context from the base name.
[33m9491ec4[m Add a swift-ide-test option to not print import declarations.
[33m17d6b19[m Changes to the test case due to Dmitri's feedback
[33ma7d14ba[m Sort analyses in Analysis.def.
[33md380e0e[m Fix clang-args-diags.swift test for public Clang's output.
[33m6bcd425[m [sourcekit] Introduce sourcekitd_set_uid_handlers, to fully control how uid's are mapped to strings and vice-versa.
[33mdf060ff[m [sourcekit] Fix a comment.
[33me8b1a10[m [sourcekit] Fix sourcekitd::UIdentFromSKDUID on the service side, that is used for logging purposes.
[33m868035b[m Fix an issue where the PlaygroundQuickLook for an NSRange would cause a crash for certain values
[33m3626876[m [RLE-DSE] seems there is a miscompile in check-swift-all-optimize-iphonesimulator-i386 due to SILArgument. Disable RLE for now
[33m86fab4a[m Demangler/Remangler: Purge iostreams.
[33m5f79cab[m IRGen: Purge iostreams.
[33m8436c1a[m Runtime: Remove unnecessary block.
[33mdc26310[m Runtime: Avoid instantiating call_once on Darwin by using cross-platform Lazy definitions.
[33m6d064d1[m Simplify some code, NFC.
[33m5d1dfdd[m [RLE-DSE] Implement load forwarding for covering value, i.e. need to make use of phi-node/silargument to forward a different values from different predecessor basic blocks
[33mfa3d4c3[m Obey the value of build-swift-perf-testsuite again
[33m50cc79c[m Fix crash code-completing after `1 + [0]`
[33mc749046[m IRGen: Remove ancient runes, NFC
[33m5fc23a7[m IRGen: Use metadata templates for non-generic types with fields of resilient type
[33m6057ede[m Runtime: Add new swift_getResilientMetadata() entry point
[33m4b09426[m IRGen: Clean up metadata template logic, NFC
[33mcf8baed[m Re-apply "Rename @transparent to @_transparent for now."
[33ma05f6c8[m IRGen: Use metadata accessors for types with resilient layout
[33m72fa928[m IRGen: name create_generic_metadata functions for easier debugging
[33maaa60d3[m Renable SLP vectorization
[33mb68b183[m [RLE-DSE]. Add a LIT test that was not handled before. rdar://18948156
[33m947e840[m [RLE-DSE]. Add a LIT test that was not handled before. rdar://18948156
[33m2baa686[m [RLE-DSE]. Add LIT tests for the newly enabled RLE. Some of these tests come from the old loadstoreopt and some are newly written.
[33mda72a82[m Comment an assumption made by DeadObjectElimination
[33m82106db[m [RLE-DSE]. deleted 1 variable without removing its use
[33ma6296a2[m [RLE-DSE]. Enable redundant load elimination by default...
[33mc5df107[m [RLE-DSE]. Refactor in RLE
[33m80abe99[m remove the OutOfOrderArgument failure mode now that CSDiag subsumes it.
[33mb7b6af9[m Improve some incorrect label diagnostics, and pull the logic for it into CSDiag's core.
[33m5b433cc[m Rearrange a bunch of code to make way for progress, NFC.
[33m85501b4[m Remove some weird hacks that added special case behavior for operators.  This code had the effect of squishing the note that printed the overload candidate set for the operators in question.  While these are not generally helpful given how many overloads we have of (e.g.) the + operator, it doesn't do us any good to have special cases like this, because methods can have tons of overloads as well.
[33mf275c6b[m Add newlines to the end of files
[33m132d141[m Merge branch 'master' of github.com:/apple/swift
[33mc652c62[m When sorting through a list of candidates in a call overload set, introduce the notion of a "near miss" for an argument type mismatch.  This allows us to prune the candidate set down in some cases.  For example, in the testcase in rdar://22243469 we are able to go from:
[33m2f3c483[m Reeapply: DeadCodeElimination: remove fix_lifetime if its definition is dead.
[33m7f2522b[m Use getCalleeFunction in some places to simplify code. NFC
[33mea5c51a[m SIL: add getCalleeFunction utility also in ApplySite
[33m3e894f3[m SIL: rename getCalledFunction to getCalleeFunction in ApplyInstBase
[33m1065103[m [Preset] enable tvOS and watchOS testing
[33mf3d5345[m IRGen: Kill classifyTypeSize(), NFC
[33mc469b20[m IRGen: Class layout now uses TypeInfo to figure out if types are fixed-size
[33m7237098[m IRGen: Clean up class archetype spare bits hack
[33m2f04cb1[m Fix <rdar://problem/23550816> QoI: Poor diagnostic in argument list of "print" (varargs related) When passing a contextual type to a call, if we have a scalar element initializing a varargs parameter list, we need to use the varargs element type contextually.  Fixing this improves some confusing diagnostics.
[33m6f931ca[m Add some debugging dump() support, NFC.
[33mbed0f2f[m This is a testcase update that was meant to go with r13792f915e0406d325db7ec0c22ff6370f99e090
[33m13792f9[m Fix <rdar://problem/23086402> Swift compiler crash in CSDiag
[33mea06af5[m fix <rdar://problem/22918558> Improve error message for weak protocol properties
[33mef8165e[m Fix typo.
[33mdc1f0c4[m Make sure when compiling with the debug ASAN builder to build the stdlib with release.
[33mf3ca521[m Fix typo.
[33m303dc7f[m Only try to build the perf test suite on Darwin.
[33m444a4cd[m Revert "Revert "Add benchmark target when BUILD_SWIFT_PERF_TESTSUITE is set""
[33m0840b3a[m Fix a use-after free bug in the RegionCloner
[33m3381b23[m Fix use-after-free error caused by SILBuilderWithScope.
[33m26cac78[m Fix use after free in SimplifyUsers.
[33mc1bf6d3[m Refactor SILCombiner::visitAllocStackInst.
[33maedd6c0[m Fix use-after-free error.
[33m0e55301[m Fix use after free in ARC.
[33mb13865c[m Change ASAN debug preset to use a different subdirectory from the release ASAN bot.
[33m3b9caf7[m Add a debug ASAN build. This will build LLVM at -O1 and Swift at -O0.
[33md24292c[m Fix another use-after-free.
[33m70b7393[m Fix a use after delete bug.
[33m1684368[m Revert "Rename @transparent to @_transparent for now."
[33m6b1328d[m Reapply XFAIL OpenCLSDKOverlay.swift to appease the bots for now. Bug tracked in rdar//23505191
[33m670c105[m Revert "Reapply XFAIL OpenCLSDKOverlay.swift to appease the bots for now. Bug tracked in rdar//23505191"
[33m8c55907[m Reapply XFAIL OpenCLSDKOverlay.swift to appease the bots for now. Bug tracked in rdar//23505191
[33m5437140[m Revert "Add benchmark target when BUILD_SWIFT_PERF_TESTSUITE is set"
[33maf00d32[m Revert "DeadCodeElimination: remove fix_lifetime if its definition is dead."
[33m660fdeb[m Revert "Disable test that will fail due to extra imports that are needed to unbreak the build."
[33me04d3ca[m lldb: pass the HOST_CC compiler to the lldb test suite.
[33mbdc42e7[m Revert several commits working around the autolinking breakage.
[33m956b04f[m XFAIL test/1_stdlib/Runtime.swift in optimized modes.
[33m4abd79d[m Remove unnecessary #include.
[33m9d366f7[m Build libswiftStdlibStubs.a with the same warnings about global ctors/dtors as the runtime.
[33m24f0753[m [build-script] use tar to package symbols and toolchain on Darwin
[33ma230ab2[m Move GlobalObjects.cpp to SwiftStubs.
[33m1adf753[m IRGen: Collapse down ResilienceScope enum
[33mf59baf3[m [CodeComplete] Teach Swift doc comment three new fields and manifest them in code completion results. rdar://23544071
[33m551ba99[m [FunctionSignatureOpt] Calls to @NoReturn functions must be followed by an Unreachable Inst.
[33md7349e6[m Reapply "[FunctionSigOpt] Callee set construction does not need to be bottom-up."
[33m9cb037f[m Reapply "Remove use of CallGraph in Function Signature Optimization."
[33m5e42b7a[m Reapply "Remove the micro optimization (delete unused func) from Function Signature Optimization."
[33m81cbc24[m Fix the documentation of the ExtInfo bits.
[33m52f209f[m Add benchmark target when BUILD_SWIFT_PERF_TESTSUITE is set
[33m90fcbfe[m Rename @transparent to @_transparent for now.
[33m24b5136[m [CMake] Remove bogus dependency on "bin/swiftc".
[33m216e6d2[m Remove tests for SwiftPrivateSerialization (which was removed).
[33mb721fa0[m Fix IRGen/struct_resilience test for 32-bit platforms
[33mf0a4b59[m [utils/build] Introduce llvm-install-components to specify which llvm components to install.
[33me6bdcbc[m [ClangImporter] Drop the version from Clang's resource directory.
[33m58cfa27[m Add -linker-path frontend option to choose the linker
[33m4defeb9[m Note libsqlite3-dev Linux build dependency
[33m0fd1294[m Sort filenames.
[33m19458ce[m IRGen: Preliminary resilient struct support
[33m02ea8b8[m IRGen: Factor out ResilientTypeInfo from OpaqueArchetypeTypeInfo
[33m50add6a[m Rename @fixed_layout to @_fixed_layout and mark it UserInaccessible
[33m88b3888[m Fix complete_decl_attribute test for @fixed_layout
[33mfe4390a[m Sema: Access stored properties of resilient structs through accessors
[33m57dd686[m Strawman @fixed_layout attribute and -{enable,disable}-resilience flags
[33md8b6859[m Runtime: Remove unused swift_stdlib_demangleName stub.
[33m4074f06[m Bring back _stdlib_getDemangledTypeName tests as _typeName tests.
[33mf9f04d6[m [build-script] Adjust lit invocation of pkg tests.
[33mc25fd8a[m Annoint code owners.
[33ma77183c[m [stdlib] Removing unused library.
[33m7583ab1[m A pass for devirtualizing release-instructions which are known to destruct the object. It replaces a release of a stack-allocated object with an explicit call to deinit. For details see the comment in ReleaseDevirtualizer.cpp.
[33mb33c1c0[m SILCombine: remove destroyArray builtin instructions for trivial types.
[33m4f88838[m DeadCodeElimination: remove fix_lifetime if its definition is dead.
[33m329df40[m SIL: add a helper function to get the called function of an apply instruction.
[33me6e29cf[m Add 'pkg-config' to list of minimal dependencies.  This was reported when building Swift on a minimal Ubuntu installation.
[33m9690bda[m Remove dead @asmname declaration.
[33m49261a0[m Runtime/stdlib: Remove _stdlib_getDemangledTypeName.
[33mc6b6d34[m Move the SwiftNativeNSXXXBase classes and stubs to SwiftStubs.
[33m8732589[m Move FoundationHelpers.mm to SwiftStubs.
[33m7658ec9[m Move Availability.mm to SwiftStubs.
[33mffa83c0[m static-ize some helpers that don't need to be exported.
[33m0969164[m Revert "Remove the micro optimization (delete unused func) from Function Signature Optimization."
[33m66d8524[m Revert "Remove use of CallGraph in Function Signature Optimization."
[33m17b059c[m Revert "[FunctionSigOpt] Callee set construction does not need to be bottom-up."
[33mf1038d3[m [RLE-DSE] Refactor RLE. NFC
[33m3819081[m [FunctionSigOpt] Callee set construction does not need to be bottom-up.
[33m0e6faa6[m Remove use of CallGraph in Function Signature Optimization.
[33m4d11aae[m Remove the micro optimization (delete unused func) from Function Signature Optimization.
[33m2c820fe[m Revert "Remove the flag that controls signature optimization."
[33m0dd2603[m Remove the flag that controls signature optimization.
[33mc1f417b[m Remove the UsePrespecialized flag. It is now enabled by default.
[33mf658841[m Just disable the GameplayKit test and do not link against GameplayKit everywhere.
[33mad95b5f[m Use analogous rpath settings for Swift libraries on Linux
[33m59092a3[m Disable a test until rdar23505191 is fixed.
[33m7ea9d54[m Add a bunch of missing includes for the public SDK.
[33m7eb6f46[m Disable test that will fail due to extra imports that are needed to unbreak the build.
[33me01c19c[m Remove a micro-optimization and get rid of a use-after-free issue associated with it.
[33m30aaecc[m Reapply "Fix perf test suite option in build-script-impl. Now it /should/ work."
[33maac44c8[m [build-presets] Enable building Foundation on Ubuntu 14.04.
[33m7649d32[m [CodeCompletion] Add test for a fixed crasher assigning to AnyObject
[33m6887b90[m Revert "Fix a use-after-free bug :boom:"
[33m068dea1[m Add a pass to propagate the array count from array intializations
[33m1623516[m DeadObjectElimination: The ArraySemanticsCall API now does the check for us.
[33mcc49286[m ArraySemanticCall: API to get the count and the array value from initializations
[33mdbe4e59[m Fix a use-after-free bug :boom:
[33m1d973cc[m [test] Make sure member completion recognizes useful '@' commands.
[33mdf478d9[m Fix another iterator invalidation bug. :bug:
[33md1beac9[m Fix another iterator invalidation bug. :bug:
[33m5c4104e[m NFC: Separate the "mayBindDynamicSelf" property from CallGraph.
[33m2318be3[m UncheckedAddrCast does not preserve RC identity.
[33m59882ff[m NFC: In MemoryBehaviorVisitor, don't do use-list iteration within the visitor.
[33m7820961[m Revert commits to fix the build.
[33mc91c6a7[m Fix complete_decl_attribute test for @fixed_layout
[33me52ef22[m Try to fix the oss bots by including CoreGraphics for UIKit overlay.
[33m8e9ab12[m Add two requires lines that for some reason escaped my initial commit of the stable merge.
[33m085f88f[m Sema: non-@objc private stored properties do not need accessors
[33m693d3d3[m Sema: Access stored properties of resilient structs through accessors
[33m5d99dc9[m Strawman @fixed_layout attribute and -{enable,disable}-resilience flags
[33mcd0df84[m Fix two iterator invalidation bugs.
[33m30c218f[m Fix another iterator invalidation bug. :bug:
[33m3deec77[m Fix a use-after-free bug. :boom:
[33m5278dfe[m [RLE-DSE] Avoid another whole traversal in NDEBUG builds in RLE. NFC
[33m01302c5[m Remove the use of Foundation from a testcase.
[33m7192b28[m Fix another iterator invalidation bug. :boom:
[33me6c1a33[m [RLE-DSE] Avoid the whole traversal in NDEBUG . NFC
[33m020f3a2[m Fix another iterator invalidation bug.
[33m064ab48[m Fix an iterator invalidation bug. :boom:
[33md06b55a[m [CMake/build] Instead of just picking up the libclang dylib, invoke install-libclang target on the llvm build.
[33m756dd23[m Fix Linux build after 69a20622 which renamed a header
[33m81d2cf8[m Rename Diagnostics/ -> EarlySIL/.
[33m03d6a17[m Fix an unused variable warning in RLE.
[33mbfecb37[m Move the optimization passes into the Scalar and IPO directories.
[33m5237f9f[m [Build-script] Add logic to find clang install with not default name
[33m7a007aa[m Move some of the optimization passes into a directory:
[33mc36a3a4[m Revert "Allow to explicitly disable the test suite"
[33m3eb2c61[m Allow to explicitly disable the test suite
[33m8ad41a3[m Fix the test line.
[33m4fdec4e[m Fixes an use-after-erase issue in sil-combine.
[33m0e5d37c[m Fixes another use-after-erase issue.
[33m8e7e404[m Fixes an use-after-erase issue.
[33mb8529af[m [inliner] Move the simple recursion test into hasInliningCycle.
[33m69a2062[m Runtime: Start splitting out stubs only needed by the standard library.
[33m974209d[m [Inliner] Migrate the cycle-prevention mechanism from pointers to strings.
[33m24d78d1[m Document the code that bails out when the inliner can't inline, devirtualize or specialize.
[33me66a2e9[m Disable test until the embed-bitcode issue is resolved.
[33m576e656[m Disable test clang-args-diags.swift until Jordan has a chance to look at it.
[33mfda6cb0[m Remove option from test that did not do anything.
[33m99bd775[m Fix typo in StdlibUnittest.swift.gyb.
[33m48814da[m Update commandline options passed to llvm-objdump for upstream changes.
[33mb0b9ca4[m Update for upstream llvm change.
[33m551b0c8[m Adapt to upstream LLVM API changes.
[33mb917548[m Update for upstream llvm::OptTable API change
[33m9fb54bf[m Fix for upstream ilist changes.
[33mdcc4883[m Prevent alloc_ref [stack] from code sinking because it may invalidate the proper nesting of stack allocations.
[33mdb87baf[m [update-checkout] Add XCTest and Foundation.
[33me767ee9[m [build-script] Foundation doesn't use swift install path.
[33ma84378b[m [Preset] Add preset to install components
[33m68f90b0[m The Ninja package is called 'ninja-build' on Ubuntu
[33m55ecebf[m [build-script] Declare the build directory for Foundation.
[33mfaf6bc7[m [build-presets] Add post-packaging testing to Linux.
[33m3e34d78[m Fix a few assertions that were too tight.
[33m4b847ab[m [SourceKit][CodeFormat] Align the comments before a case statement with the statement. rdar://20985149
[33m95a328d[m [AA] Use isSuperclassOf to determine whether 2 SILTypes share parent-child relationship. NFC.
[33m8726689[m test commit
[33m067cbce[m A bash script for auto-completion of swift command line options and ninja build targets.
[33md816f62[m [build-script] Fix path to ninja binary.
[33mdd458c5[m [build-script] Check for Ninja the right way.
[33m8c5e7d4[m DeadCodeElimination: clear all data structures at the end of run()
[33m1384b24[m StackPromotion: handle more cases of stack nesting instructions.
[33m44e3281[m [RLE-DSE] Refactor in RLE. NFC
[33m653e779[m [RLE-DSE] Refactor in DSE. NFC
[33m8bf4d8e[m [RLE-DSE] Update some comments in DSE. NFC
[33mc660820[m [RLE-DSE] Refactor intersect in DSE. NFC
[33m62e0cc2[m [RLE-DSE] Refactor in RLE. NFC
[33ma801776[m Remove more call graph maintenance code.
[33ma728339[m Remove more call graph maintenance code.
[33m48987d6[m Update validation test suite after fixing 21967211.
[33me86f606[m [build-script] Add swift binary to Foundation configure.
[33mb82afc7[m Do not attempt to maintain call graph in a few passes.
[33mda15fbf[m [Sema] Error on generic arg lists with different lengths
[33mb620850[m [build-script] Define the host variant arch for linux.
[33mc1c1b37[m [build-script] Add post-package testing.
[33m726224a[m README: Clean up references to CMake and Ninja on OS X
[33me715130[m [sil-devirtualizer] Don't emit extra branches for try_apply's that are devirtualized.
[33m70284da[m [RLE-DSE] Refactor SILValueProjection. NFC
[33m50feb1e[m [RLE-DSE] Refactor MemLocation. NFC
[33mf1d4ef7[m [RLE-DSE] Create a superclass for MemLocation and LoadStoreValue. These two share a lot of identical fields, e.g. Base, ProjectionPath and Kind.
[33m3ab3142[m [build-script] Hotfix invalid syntax.
[33m280124f[m [CodeComplete] Hold a local copy of module names instead of referencing them.
[33m547eab2[m [build-presets] Split 14.04 and 15.10 presets
[33mea87329[m [RLE-DSE] Refactor in DSE. NFC
[33md62eee4[m [build-script] Update swifpm build invocation.
[33m15d1a72[m [build-script] Use ninja installed on system.
[33m14d490e[m [build-script] Add Foundation support.
[33m827ea69[m [CodeComplete] Mark already-imported modules as not-recommended. rdar://23209864
[33m44f4fb4[m Simplify copy, NFC
[33m2088cd4[m swift-autolink-extract should look inside .a files.
[33m0ea9c29[m Remove unnecessary `unsafeUnwrap` calls.
[33m0cd6a76[m Revert "Add support for deinits in the call graph."
[33m65fec0a[m Remove outstanding reference to the arclite symlink.
[33m098c079[m Debug Info: Don't skip updating IRGenDebugInfo's current location for SILLocations that are marked as prologue. IRGenDebugInfo will handle them correctly anyway and if the instruction with the prologue location originates from an inlined function, this would result in dropping debug location information.
[33m6879dad[m Remove an unused #include.
[33m309f963[m Add support for deinits in the call graph.
[33m78ee82d[m Replace the single backtick with a double backtick to fix the linux build.
[33m7fdf92a[m Invalidate the call graph at the end of several passes.
[33mb789919[m [CMake] Remove the symlink to Xcode's arclite libraries.
[33m23ac137[m [stdlib] Correct my last commit to not rely on Int128
[33m90396d8[m Fix a few unused variable warnings.
[33m5230a07[m [build-script] Add XCTest
[33m6b85ada[m [optimization guide] Add a disclaimer about the advice given in this document
[33m8f2fbdc[m Make function parameters and refutable patterns always immutable
[33m22ba61b[m Reapply "[CodeComplete] Teach code completion engine to recognize and manifest @recommended and @recommendedover." after fixing a linux failure. (thanks, Dmitri)
[33m8858503[m [Docs] Use double quote to avoid doc build errors.
[33md90054f[m [RLE-DSE] Remove local stores that are not read before function exits.
[33m9763b5a[m [RLE-DSE] Refactor DSE. NFC
[33m0044bc4[m [RLE-DSE] Remove dead instruction recursively in DSE. Existing test cases ensure correctness
[33m3c93dbb[m [RLE-DSE] Implement the actual redundant load elimination (RLE) data flow. This should handle some simple RLE. but not phi-node, i.e. SILArguments.
[33me9cade4[m Revert "Add to the README.md that when checking out llvm/clang from swift-{llvm,clang}, one needs to checkout the stable branches."
[33mf7a29c7[m Add to the README.md that when checking out llvm/clang from swift-{llvm,clang}, one needs to checkout the stable branches.
[33m1307957[m [stdlib/prototype] Demo heterogeneous arithmetic
[33ma39d49b[m [stdlib/prototype] Replace Integer Prototype
[33m7ee2e25[m Fix a sinkArgument bug in SILCodeMotion. rdar://23456019
[33mf944a14[m README: Add libxml2-dev package dependency for Linux
[33mf2852f8[m lldb testsuite invocation: add full package qualifier for curses test results formatter
[33m2f84328[m [Preset Temporary skip lldb test in OS X package preset
[33m7d26bac[m Linux build fix: libxml isn't used for XML validation on Linux bots
[33m4704a5f[m Escape <Link> tags in doc comment XML
[33mb5173d2[m Add support for devirtualizing init/deinit.
[33mf2408df[m Revert "[stdlib/prototype] Replace Integer Prototype"
[33m342349c[m Revert "[stdlib/prototype] Demo heterogeneous arithmetic"
[33m04cfc92[m [optimization guide] Describe the disadvantages of using Array and propose an alternative cow data structure.
[33mce848c6[m And again: re-apply the StackPromotion commit 0dd045ca04dcc10a33abf57f7e1b08260c4e3de1. The problem of the failure was a bug in instruction cloning, which is fixed in the previous commit.
[33m6fcb9eb[m Fix cloning of (de)alloc_stack [stack]
[33mfd8b933[m This reverts commit 794df2d91fd7534b818e0fcac0cd677243a2da0f
[33m4bc27f0[m Revert "Fix comments in RLE. NFC"
[33mf2f76ea[m Revert "[RLE-DSE] Remove dead instruction recursively in DSE. Existing test cases ensure correctness"
[33m915235a[m Revert "[RLE-DSE] Refactor DSE. unswitch a few loops and update a variable name. NFC"
[33m05d1b23[m Revert "[RLE-DSE] Refactor a variable declaration in DSE. NFC"
[33m4ff7c73[m Revert "[RLE-DSE] Remove local stores that are not read before function exits."
[33m4281ea8[m Revert "[RLE-DSE] Rename a few functions, update some comments. NFC"
[33mbbda1d3[m Revert "[RLE-DSE] Refactor for RLE. NFC"
[33m12647a5[m Revert "[RLE-DSE] Refactor how BBstate is allocated, kept and retrieved in RLE"
[33mc736094[m Revert "[RLE-DSE] Remove an obsolete file for RLE and DSE"
[33mcaa9a8e[m Revert "[RLE-DSE] Accidentally enabled by default in middle of refactoring"
[33m2789e48[m Revert "[RLE-DSE] Create a superclass for MemLocation and LoadStoreValue. These two share a lot"
[33mfe93ae2[m Revert "Disable SwiftPrivateSerializationMsgPack.swift to appease the bots for now."
[33m34ac867[m Disable SwiftPrivateSerializationMsgPack.swift to appease the bots for now. Issue tracked in rdar://23456019. Will enable once problem fixed.
[33mc7d011a[m [stdlib/prototype] Demo heterogeneous arithmetic
[33mc73826e[m [stdlib/prototype] Replace Integer Prototype
[33mbd5b3ae[m Revert "Fix perf test suite option in build-script-impl. Now it /should/ work."
[33m52ebe72[m Revert "Make sure to build the perf test suite in the buildbot/buildbot-incremental presets."
[33m8fa8681[m Make sure to build the perf test suite in the buildbot/buildbot-incremental presets.
[33mc3ed3c3[m Fix perf test suite option in build-script-impl. Now it /should/ work.
[33m043fd75[m Fix header line in OptimizationTips.rst that was too long for the heading above it.
[33m751b261[m [optimization guide] Advice: Mark protocols that are only satisfied by classes as class-protocols
[33m2f125d1[m Add the option 'build-swift-perf-testsuite' to build-script-impl
[33me9718f6[m Revert "Another try to re-apply the StackPromotion commit 0dd045ca04dcc10a33abf57f7e1b08260c4e3de1."
[33m94d7dcf[m Inliner/generic specializer prep for handling deinit in call graph.
[33m1394af3[m Add TryApplyInst to SILInstruction::mayRelease().
[33m0feba76[m Revert "[stdlib/prototype] Replace Integer Prototype"
[33m7b188d2[m Revert "[stdlib/prototype] Demo heterogeneous arithmetic"
[33mda794b8[m Update dead object elimination to maintain the call graph.
[33m76e9915[m copy swift-stdlib-tool in to xctoolchain
[33m45a9c22[m [stdlib/prototype] Demo heterogeneous arithmetic
[33m380be58[m [stdlib/prototype] Replace Integer Prototype
[33mc878619[m [emacs] Adjust error parsing for unit tests
[33m9035291[m Fix a ReST formatting error
[33m7b07849[m [CodeCompletion] Penalize fuzzy matches that aren't on token boundaries even more
[33m1144437[m [CodeCompletion] Don't fuzzy-match on single characters
[33m0a82a6f[m Revert "[CodeComplete] Teach code completion engine to recognize and manifest @recommended and @recommendedover."
[33mef8338f[m [CodeCompletion] Don't add inner results on non-declarations
[33m877b51d[m [Driver] If lib/arc/ isn't present next to Swift, look next to Xcode's Clang.
[33m978267b[m [CodeCompletion] Fix source text inserted for literal completions
[33m448a23c[m [CodeComplete] Teach code completion engine to recognize and manifest @recommended and @recommendedover.
[33m4a8ace1[m Fix up diagnostic categories after moving diags from Sema to Parse.
[33me7bdaea[m Warn about indentation of returned expr in single expression closure.
[33m6a0527e[m [SourceKit/CMake] Fix output directory for building with Xcode.
[33mf40c5f1[m [CMake] Remove 'check-swift' dependency on internal tool.
[33ma275b17[m [CMake] Fix 'check-swift' dependencies in Xcode.
[33m2faa903[m [CMake] Remove the 'lang-docs' component entirely.
[33m7d70aa3[m Another try to re-apply the StackPromotion commit 0dd045ca04dcc10a33abf57f7e1b08260c4e3de1. One bug fixed in escape analysis (previous commit) and one bug fixed in StackPromotion itself.
[33m703e627[m EscapeAnalysis: remove the code to exclude trivial nodes from the dot view. It's a rare case anyway.
[33mba46ce3[m Fix a problem in EscapeAnalysis. In some cases didn't merge the escaping-state of unknown instructions to caller functions.
[33mb716f91[m [utils/build] Add swift-stdib-tool-substitute, destined for OSS toolchains.
[33me2e4362[m Remove code sinking logic from the speculative devirtualizer.
[33mdebc8f4[m [optimization guide] Describe the cost of passing large values.
[33mfa32b72[m Debug Info: Establish a default ordering for compile units.
[33m389b723[m [RLE-DSE] Create a superclass for MemLocation and LoadStoreValue. These two share a lot of identical fields, e.g. Base, ProjectionPath and Kind.
[33me7a3877[m SILGen: Fix re-abstraction of single-element tuples to opaque pattern
[33md304412[m [RLE-DSE] Accidentally enabled by default in middle of refactoring
[33m7999b70[m [RLE-DSE] Remove an obsolete file for RLE and DSE
[33m68933ed[m [RLE-DSE] Refactor how BBstate is allocated, kept and retrieved in RLE
[33m321b0f6[m [RLE-DSE] Refactor for RLE. NFC
[33m2011680[m Sema: Fix compiler_crashers regressions
[33m1b55bec[m SILGen: Fix issues with one-element tuples in thunks
[33mab1f21a[m Link libpthread and libdl when importing Glibc module.
[33m97166a3[m [RLE-DSE] Rename a few functions, update some comments. NFC
[33m6d19519[m [SourceKit][CodeFormat] Adjust the indentation for getter methods that have no explicit "getter" keyword. rdar://21598808
[33mdd5feb6[m SILGen: More general re-abstraction thunks
[33m8b3753b[m AST: Split up RecursiveTypePropeties::isMaterializable() into sub-cases and fix a bug
[33mfc13077[m Muffle some warnings, NFC
[33mcf3317e[m Code review feedback from @jrose-apple for "95e9a0 The frontend should stop if the stdlib failed to load"
[33m01c4c6a[m Utility functions in headers need to be 'static inline', not just 'static', or else the compiler will complain when they're unused.
[33m7acb2df[m Enabling hoisting of uniqueness checks in loops with 2D arrays
[33mfd66298[m Revert the StackPromotion pass - bots hit an assert.
[33m3f4b149[m Fix comment for StackPromotion pass in SIL Passes
[33m199cfca[m Reapply the StackPromotion commit  0dd045ca04dcc10a33abf57f7e1b08260c4e3de1. This time with fixing a crash.
[33m91cf4c1[m SIL: Move description of abstraction patterns to AbstractionPattern.h and write new comment in SILGenPoly describing function thunks, NFC
[33mb325179[m SILGen: Combine Transform::transformMetatype() implementations, NFC
[33mcbdab7d[m SILGen: Big re-abstraction thunk renaming, NFC
[33mec8d952[m Runtime: Remove redundant #ifdef that's already nested inside another, NFC
[33m736bedd[m SILGen: Cleanup, NFC
[33md7b7fc7[m Revert "Add a stack promotion optimization."
[33me3e6183[m [CMake] Drop the contents of the "lang-docs" install package.
[33mb5d6274[m [CMake] Update generated Xcode project to contain all docs/.
[33mdae482e[m Add SILInstruction::mayRelease().
[33m7c5de8f[m [CMake] Make sure the standalone build enables the same warnings as the llvm/clang build.
[33m56cb5bd[m Fix -Wreorder warning.
[33mc4bd8c3[m Fix -Wnon-virtual-dtor warnings.
[33mbb59b71[m Fix -Wmismatched-tags warnings.
[33mf0f83d3[m Fix -Wunused-function warnings.
[33m156607c[m Fix -Wunused-variable warnings.
[33m5c99ce0[m [cmake] Correct some paths.
[33ma11b562[m [SourceKit] Use the correct macro, 'SWIFT_ENABLE_TARGET_TVOS'.
[33m26fca3a[m [SourceKit/CMake] Use 'tools' install component for the SourceKit tools.
[33m0dd045c[m Add a stack promotion optimization.
[33m971a680[m Support for stack promotion of array buffers in the stdlib. The basic idea is to move the allocation of the buffer out of @_semantics("array.uninitialized") so that it can be inlined without inlining the semantics function (on high-level SIL).
[33m08cbbc0[m SILCombine: Add a simple peephole optimization for unchecked_ref_cast - open_existential_ref
[33m527ba0a[m EscapeAnalysis: remove dead code
[33m1b0f133[m Mark TryApplyInst as an instruction that MayRelease.
[33mff127ad[m Remove PreserveKindBuilder and re-implement the CP invalidation logic with two flags.
[33mc022c99[m [CodeComplete] Start to support keyword-based code completion. rdar://23101032
[33md11b6d6[m [RLE-DSE] Remove local stores that are not read before function exits.
[33md3751d8[m Mark ApplyInst as an instruction that may release.
[33m878621c[m Merge remote-tracking branch 'origin/master'
[33mc263d4b[m Pass the toolchain directory to Xcode when installing LLDB. This allows LLDB to be installed to a toolchain with any name, not just XcodeDefault.xctoolchain.
[33m3e7d630[m Revert "Build the Dispatch overlay on Linux"
[33mac6de62[m Build the Dispatch overlay on Linux
[33m07e7be5[m [sourcekit] Fix swift library dependencies
[33m5d52666[m Improved the performance of _dictionaryBridgeFromObjectiveCConditional by specifying the minimumCapacity up front. NFC
[33m933c973[m Revert "Improved the performance of _dictionaryBridgeFromObjectiveCConditional by only allocating a _NativeDictionaryStorage once all the items are bridged. NFC"
[33md19e4ae[m [SourceKit] Add license notices to all the source files.
[33m6e1bf0d[m Rename @exported to @_exported for now.
[33m5cc71a1[m [RLE-DSE] Refactor a variable declaration in DSE. NFC
[33m7a7a554[m [RLE-DSE] Refactor DSE. unswitch a few loops and update a variable name. NFC
[33m03fb58b[m [RLE-DSE] Remove dead instruction recursively in DSE. Existing test cases ensure correctness
[33mfd7b9c4[m Move the MergeCondFail pass after RedundantCondFailElimination
[33me331ab2[m Minor cleanups for things I ran into while reading the code. NFC.
[33mb6eacfb[m Fix comments in RLE. NFC
[33m794df2d[m [RLE-DSE] Implement the actual redundant load elimination (RLE) data flow. This should handle some simple RLE. but not phi-node, i.e. SILArguments.
[33m8f0bc8c[m [CMake] Fix building SourceKit for a standalone build.
[33m282b5d9[m Fix source code alignments. NFC
[33m9cb8673[m [RLE-DSE] Implement LoadStoreValue in MemLocation.cpp.  LoadStoreValue represents the value residing in a given MemLocation. In RLE, we create a map between MemLocation and its corresponding LoadStoreValue.
[33mb7cbd95[m Support packaging of LLDB:   - run xcodebuild install with the correct installation path   - change the directory that's tarred up to the one containing     /usr because we've added /System(/Library...) as a peer of /usr
[33m42a466b[m [docs] Delete proposal for KVO-supporting features.
[33mfe9143f[m [docs] Delete superseded proposals.
[33me038079[m [docs] Promote Failable Initializers out of proposals/ as Plan of Record.
[33m8c62851[m [docs] Demote several proposals to archive/.
[33m6cdeb22[m [docs] Make a new subfolder for rejected proposals.
[33m9f9780c[m [docs] Delete several docs that don't even really have historical interest.
[33mde15f8a[m [docs] Move several historical-interest-only docs to an archive/ subfolder.
[33mc36bee2[m [test/lit.cfg] Remove a problematic substitution.
[33m00c8c4d[m ClangImporter: avoid infinite recursion if we can't find a Swift declaration of a mapped type
[33maa40f20[m IRGen: optionals of blocks now use block reference counting entry points
[33m8ff6a98[m [sourcekit] Merge SourceKit into the Swift repo.
[33m598a129[m Document and simplify the logic in PreserveKindBuilder.
[33m64ccc3f[m [utils/build] Changes in build scripts to avoid treating SourceKit as a separate repo and build.
[33m2b54f40[m [Preset] Temporary remove install-lldb flag and add SourceKit/lldb test flags in OS X package preset
[33m606ca9e[m Update the file header of UpdateEscapeAnalysis.
[33m3ed3e5c[m Rename the RedundantOverflowCheckRemoval filename.
[33m2573303[m Rename the RedundantOverflowCheckRemoval pass.
[33mf83595f[m Append "-dev" to printed version of builds not meant for release.
[33md9b3030[m Switch back to CLANG_REPOSITORY_STRING for option passed to LLVM
[33m6cca63c[m Prevent dead code elimination in fixed point arithmetic trap test.
[33mac980f2[m Enhancing type based alias analysis for 2 reference types with disjoint hierarchies.
[33me001efc[m Improved the performance of _dictionaryBridgeFromObjectiveCConditional by only allocating a _NativeDictionaryStorage once all the items are bridged. NFC
[33m38a08cd[m Enable all tests for removing unused containers.
[33m5eb6449[m Add the notion of releasing instructions to SILNodes.def.
[33m2e796ae[m Remove MappedLanguages enum, NFC
[33m95e9a0c[m The frontend should stop if the stdlib failed to load
[33m8442f56[m A few additions to escape analysis for better support of stack promotion: *) find all use points of an allocation *) handle array semantics calls *) handle more instructions
[33ma9a53ec[m Make a separate pass to update escape analysis instead of doing it in UpdateSideEffects.
[33m5067dad[m IRGen: create end-of-lifetime intrinsics for dealloc_ref [stack]
[33m2504257[m DeadCodeElimination: remove dead overflow producing operations together with the cond_fail which handles the overflow.
[33m2cf7f18[m Rework function conversion logic for propagating ExtInfo.
[33m71485b3[m Check if type exists before retrieving it. rdar://22871737
[33m37370aa[m [SyntaxColoring] Check if the end quote is escaped when checking if a string ends. rdar://23188457
[33m33f71c9[m Simplify/Unify the constructors of SILLocation. (NFC)
[33m5c82050[m Begin to generalize call graph for non-apply instructions.
[33m9a0437f[m Move to a gen and kill set based data flow for dead store elimination. Existing tests ensure correctness of the compilation time optimization.
[33m2d1fdc8[m Convert DocumentationComments doc to Markdown
[33m44daa48[m Fix the test: Use a fixed-size Int32 instead of Int.
[33mc857d39[m [Preset] Temporary skip SourceKit test in OS X package preset
[33mc403aed[m [Driver] Use Swift's shim for std::is_trivially_copyable.
[33m0cdbe89[m Fix some regressions with handling of blocks.
[33ma79c1c9[m Don't allow conversion from inout argument to Any parameter.
[33m9586337[m [Parser] Allow FuncDecl to record the locations of accessor keywords, e.g. set, get, etc.
[33m9b55933[m Check to see if any source files were modified during the build.
[33m93b6962[m Warn when using 'var' bindings in function parameters
[33m9f6994b[m Remove RCIdentity from ARC/CMakeLists.txt now that I have moved it back to Analysis.
[33m583d202[m Create the GitWorkflows document.
[33mb2870d2[m I by mistake moved the RC Identity code with the rest of the ARCSequenceOpts code. This commit moves it back.
[33m893c06d[m [loop-arc] Rename GlobalARCOpts => ARCSequenceOpts.
[33mde4e162[m Fix new enum_value_semantics_special_cases_objc test that was split off from enum_value_semantics_special_cases
[33m87d3a80[m [loop-arc] Move ARCOpts specific analysis code into SILPasses from SILAnalysis.
[33m5d88b04[m Forgot to update some tests for Linux reference counting changes
[33m6baf5c6[m Cleanup the comments in SILLocation.
[33m3d19691[m IRGen: Always use Swift reference counting when Obj-C interop is not available
[33m6402411[m Make always-immutable pattern bindings a warning for now
[33mb951525[m Do not perform any retain sinking in the speculative devirtualizer.
[33m203c980[m Remove dead functions from callee sets.
[33m5491a5b[m Use INSTALL_PREFIX in llbuild and swiftpm installation.
[33m6f30afb[m Update README for configuring non-building Xcode projects
[33mcd606c1[m Functions annotated with @_semantics("optimize.sil.never") should not be inlined or specialized.
[33m02be521[m [Preset] Temporary skip lldb test in OS X package preset
[33m5bc7cf0[m Keeping terminators in the AvailVals list of the threading cloner is problematic because terminators get replaced during SSA update.
[33mb88b701[m [cmake] Do not attempt to include the perf test suite by default
[33m92830b6[m Add conditional logic for including benchmarks.
[33mae7667f[m Use the API on CallGraph to determine if we can call an unknown function.
[33mbd7b963[m Include full checking for performance test suite.
[33md36dac6[m Update edge removal API in call graph.
[33mbc679c1[m Use tryGetCallGraphEdge in places where the edge may not exist.
[33mf716bb2[m Runtime: Let allocError take an initial value.
[33m734d1b4[m Make the linking pass add new functions to the call graph.
[33mf14e75c[m Enable the perf test suite to be imported if it is checked out. This is a stop gap measure to make it easier to run tests.
[33m9cca0a7[m [loop-arc] Wire up the loop summary information to the ARC optimizer.
[33m41c5b4a[m Use SILFileLocations temporarily on inserted retain, releases.
[33m070ccba[m Verify that a function's DeclName, TuplePattern, and ParamDecls are in sync.
[33m3a1fad6[m Pass the path to the preferred swig binary to LLDB when building.
[33m3ec168c[m [docs] Clean up (historical) Modules.rst a bit.
[33m51e3358[m [docs] Rewrite PersistentSerialization to describe the current situation.
[33md5c6d0d[m [docs] Mark a bunch of older docs as out of date and not plan-of-record.
[33mf15f73c[m Adjusting repo name.
[33m71759bb[m [Preset] Build and install SourceKit for OS X package
[33me505af1[m [Preset] build OS X package without lldb debugserver
[33m5f1ff1f[m Fix a use-after-deallocation bug.
[33md59f90d[m Print list of uses for each SIL basic block argument.
[33m39dcf40[m Add license text for content of repository.
[33me59bb8c[m [loop-arc] Teach ARC how to summarize subregions but do not wire it up to the analysis yet.
[33mf7f1df4[m [loop-arc] Refactor code that processes how an instruction effects a reference count completely onto RefCountState.
[33mf99577d[m [loop-arc] Add a new ARC Analysis API called canNeverDecrementRefCounts(SILInstruction *)
[33mf7db1c1[m Add adaptors for std::{any_of,all_of,none_of} for ranges.
[33m30af42f[m Add warning that curried function decl syntax is going away.
[33m8c7c2e6[m Retire now-dead memory_order enum in Stubs.cpp.
[33md119d6e[m [CodeCompletion] Update validation-test/IDE after keyword changes
[33m29f98a9[m Reorder a header in DSE
[33me2734bd[m Add missing docs/Testing.rst
[33mdcbe84f[m Fix a comment in DSE
[33m9660260[m Fix a misspelling in SILMem2Reg
[33m1992bb0[m [CodeCompletion] Add keyword kind to code completion results
[33ma2994d5[m [CodeCompletion] Don't add decl and stmt keywords to expressions
[33m04138e2[m [CodeCompletion] Add a new StmtOrExpr code completion kind
[33m49bac78[m Fix repo name in README.md
[33m3245b6a[m Fix README.txt reference in CMakeLists.txt - it's now Markdown.
[33ma2a6a32[m Fix leak in function signature opts.
[33m282d047[m Tweak 'swift-project-settings.el' to insert Swift-style header.
[33m3adf1e6[m Fix leak in LoopRegionAnalysis.
[33mdb49e0d[m When destroying a FunctionAnalysisBase, make sure to delete the analysis function info structures that it vends.
[33m739800a[m Fix a leak in ARC by calling the destructor on ARCRegionState objects.
[33m5f805b6[m Add unittests for BlotMapVector and change it to use Optional<> in its internal representation to remove a leak.
[33m654ca4e[m Move Lazy.h from stdlib/public/runtime => include/swift/Basic
[33mf9ad7ec[m Readme should suggest cloning to non-prefixed directories
[33m0489fee[m Add Markdown version of the Open Source README
[33m4ac9c80[m Add back remaining files for building and testing in Open Source
[33me08d1b3[m Fix a memory leak in SideEffectAnalysis.
[33m8146a97[m Remove stale proposals
[33m4fb68c8[m stdlib & Runtime: Replace atomic RMW stubs with builtins.
[33m527221f[m stdlib & Runtime: Replace atomicStore/Load stubs with builtins.
[33m0bf0528[m Add builtins for atomic load/store operations.
[33m5e06d13[m Use a small blot map vector instead of a blot map vector to avoid using a dense map.
[33mcd26857[m Take 2 - make NSObject conform to CustomDebugStringConvertible
[33m49a0608[m Add test for _TTO mangling prefix
[33mbe7f8cc[m [test] Fix importer test to not use 'nosource'.
[33m21e0173[m Revert "Don't need to mangle @nonobjc, NFC"
[33mfb3627e[m SILGen: Add an assert
[33m406d448[m SIL: Rename Module to ModuleDecl due to FIXME, NFC
[33m103bda0[m SIL: Typo and stylistic cleanup, NFC
[33m6b29312[m AST: We're not going to be using the Resilience enum, NFC
[33ma92ffea[m Don't need to mangle @nonobjc, NFC
[33mfe62d2b[m Nuke some duplication around SILModule::lookUpFunction() uses, NFC
[33ma1459a6[m Make a call graph query more forgiving of missing edges.
[33m7541e0f[m Recompute the callgraph's bottom-up function order in the escape analysis.
[33m39ac294[m Fix a comment.
[33meb33048[m stdlib & Runtime: Replace _swift_stdlib_atomicCompareExchangeStrong* stubs with Builtin calls.
[33m35e1091[m [Driver] Rebuild a file if its primary output is missing.
[33m962b4ff[m [test] Dependencies: make sure 'one-way' works with -emit-module.
[33m6bc2234[m Revert "[cmake] Turn on the -Wbool-conversion flag." (r32925)
[33m0ceb040[m Add const to a bunch of call graph functions.
[33m68fa1c2[m Support for stack promotion in IRGen.
[33m4a1dffe[m Support for stack promotion in the runtime. NFC yet.
[33m79c3eeb[m CSE: Don't CSE read-none function calls if they contain a retain.
[33m4b63ffc[m [cmake] Turn on the -Wbool-conversion flag.
[33m4082355[m Split KnownProtocolKind enum case from protocol name
[33mab68a2f[m [loop-arc] Pass in the insertion point into TopDownRefCountState instead of computing it inside the class.
[33ma7cb9ad[m [loop-arc] Pass in the insertion point into BottomUpRefCountState instead of computing it inside.
[33m2d465b8[m Remove unused literal convertible protocol descriptions
[33m3be9ef9[m [loop-arc] Restrict access of certain parts of refcountstate and its subclasses to protected/private.
[33md20c78b[m [loop-arc] Change RefCountState to be a non-CRTP construct and refactor code to subclasses where necessary.
[33ma74c02d[m Fix doxygen comment block in closure specializer.
[33mad788a2[m [loop-arc] Move responsibility for not propagating state over loops into the region processing code instead of the merging code.
[33mf1ae3bb[m Revert "[test] Put variadic definitions in a platform-independent header and remove the platform requirement."
[33me048947[m [test] Put variadic definitions in a platform-independent header and remove the platform requirement.
[33m0ad201b[m REPL: Tear out CF-based async repl loop.
[33m1f04d09[m Revert my previous commit as it breaks the buildbots
[33m67563a1[m Remove use of reserved identifier from r32906
[33mf0869d2[m Add tests for the alloc_ref/dealloc_ref stack attribute
[33mee988e2[m SIL: Add stack attributes to alloc_ref and dealloc_ref.
[33m54a28a4[m [CodeCompletion] Split literals out into their own completion kind
[33m9662523[m [test] Add requirement to avoid failure on linux bots.
[33mdaea903[m Make NSObject conform to CustomDebugStringConvertible
[33m1604c4b[m [ClangImporter] Import variadic C functions as unavailable functions instead of ignoring them. rdar://16677468
[33mdab6dde[m Undo an accidental change that I committed in r32866
[33m6034573[m Update DemangleTest unit test.
[33mc96b6dd[m Update test case I missed.
[33mf53cad8[m [sil-combine] Fix a bug in the peephole performing apply{partial_apply(x,y,z)}(a) -> apply(a,x,y,z)
[33m2368ce7[m Remove self types from mangling by default.
[33me5f6eb3[m Add a convenience function hasName in SILFunction to be used in the debugger.
[33m20bcd65[m [CodeCompletion] Remove now-incorrect assertion
[33m6c98336[m [CodeComplete] Show #available completion only in guard and if statements. rdar://23228191
[33m880ef5e[m [CodeCompletion] Add _ColorLiteralConvertible completion
[33m7fda896[m [CodeCompletion] Add several more literal completions
[33mba7db29[m [CodeCompletion] Add type relation to literals
[33m7d6d7c3[m [CodeCompletion] Substitute the real type name if it matches an expected type
[33m58bd3e7[m [CodeCompletion] Stub in value/literal suggestions
[33m9c3126c[m Do not spent a lot of time in GlobalARC opts debug printing basic block numbers in assert builds.
[33ma759ca9[m Disallow 'var' bindings in case patterns
[33m8df3dd3[m Remove standard library hooks for AppKit apps in the integrated REPL
[33m2e51d23[m Un-ifdef object literals
[33m9383927[m stdlib: trap correctly in floating-point to unsigned integer conversion
[33md455f0a[m Insert live components from a partial dead stores at the end of the data flow.
[33m0f2e315[m Create a typedef. NFC
[33m1f6ab8c[m Implement type expansion cache for MemLocation. Every time we try to expand a type to its indivisible components, i.e. leaf nodes on the type tree. This can be cached so that we do not need to go through the type tree every time.
[33m98f612a[m [stdlib] warning suppression
[33mbe9acc0[m Fix another gyb parsing bug
[33ma795fcd[m Remove stray debug print
[33m4b424e9[m XFAIL test to get the bots blue
[33ma32cf33[m [loop-arc] When performing the loop DFS, do not wait to process a loop if it does not have any subloops, readding it to the worklist just wastes time.
[33m3a48651[m [loop-arc] Remove dead code.
[33m3b535d8[m [loop-arc] Process each loop individually at a time.
[33m9c02b2c[m [loop-arc] Instead of using a lambda, use a callback data structure to process ARC results.
[33m27dae23[m CMake: allow choosing the deployment target
[33mde5fe48[m CMake: allow customizing install_name for standard library dylibs
[33md679d9a[m CMake: remove a feature to install stdlib dylibs
[33mb3ca7ee[m gyb parsing fixes
[33mf2ab974[m Rename some things in gyb
[33mb4b8e6c[m Fix a tiny gyb bug
[33m37f9daf[m Include gyb source in build dependencies
[33m95e0c5d[m [loop-arc] Refactor computation of ARCMatchingSet into the MatchingSetComputationContexts.
[33m4a11785[m DI: Fix [derivedselfonly] initializers and clean up diagnostics
[33m06c6762[m Sema: 'let' bindings are never default-initializable
[33m3434f96[m Disallow 'var' pattern bindings in if, while, and guard statements
[33m6d7d45a[m When clearing type data for failure diagnosis, reset the lvalue access kind too.
[33m2a1a6ed[m [CMake] Update for changes to LLVM CMake API (LLVM r248911).
[33m0f881f5[m [CodeComplete] Add code completion for Clang sub-modules at import decls. rdar://23244877
[33m321fffe[m [loop-arc] Make sure that we also test without loop arc on so we maintain that the old ARC works.
[33m3f79328[m Put no assumption on argument evaluation order, NFC.
[33mafe90ff[m [CodeComplete] Suggested by Ben, deliver #available completion after # token and add placeholder to represent platform names.
[33mbfc9efa[m Testcase for <rdar://problem/23236105> dead function elimination crashes for non-public initializer called by class_method
[33mafa41c0[m IRGen: Fix OBJC_CLASS_$_ clash if Clang emits first
[33m889b033[m [CodeCompletion] Add completion for property overrides
[33m51495c8[m [CodeCompletion] Factor override decl printing into separate method NFC
[33meadac91[m Fix a bug in how DSE tracks alive components in partial dead stores. rdar://23218844
[33m2a8f010[m Revert "When printing the SILModule for the standard library, do not import Swift. We are compiling Swift so this will cause an error."
[33ma7a5bd9[m Enable Loop ARC... again.
[33m5fe0b8b[m [loop-arc] Fix a bug in how we process successors and fix the resulting performance issue that resulted.
[33m9787441[m Allow for dumping a sil file to disk with the SwiftModule to make it easier to debug modules from the debugger. This is not meant for normal use.
[33mafef8a7[m When printing the SILModule for the standard library, do not import Swift. We are compiling Swift so this will cause an error.
[33m1a2dcc0[m Revert "Speculatively revert a debug-info-implicating change in my"
[33m17ad7f7[m [CodeComplete] Show #available in the list of keywords. rdar://23039417
[33m19c8680[m [CodeCompletion] Complete optional tuple members
[33mdfb7e98[m Remove SwiftLLVMPasses and llvm-opt. They are no longer needed since we have swift-llvm-opt.
[33m60d2331[m For unsafeReferenceCast rely on type checks in the runtime.
[33m9f33429[m Tweak var in for-in statement diagnostic
[33m9147eab[m XFAIL test case that is currently failing when run with optimization
[33mba8cac0[m Relax testcase so it works on Linux, too.
[33m4390d96[m Fix the linux build by appeasing the linker gods.
[33m8ac4c23[m [test] Update some tests after clang change in r249896.
[33m47c043e[m Disallow 'var' specifier in for-in patterns
[33m20e1d62[m [ASTPrinter] Expose shouldPrint() as global function. NFC
[33m2f9f964[m Change the contract between Swift compiler and LLDB about how the function prologue is handled in the line table. We now mark the first instruction after the stack setup as end_prologue and any further initilizations (which may include function calls to metadata accessors) with line 0 which lldb will skip. This allows swiftc to emit debug info for compiler-generated functions such as metadata accessors. Mixing debug and non-debug functions is not very well supported by LLVM and the resulting line table makes it impossible for LLDB to determine where a function with debug info ends and a nondebug function starts.
[33m401ce4c[m Improve support for witness_method in the call graph.
[33m7fa673c[m Revert "stdlib: Replace unsafeBitCast calls with unsafeCastReference." Revert "For unsafeReferenceCast rely on static verifier checks."
[33m7717dc3[m XFAIL two tests that Argyrios is going to fix on trunk.
[33m44f94b6[m Fix two GlobalValue::alias for upstream IR changes.
[33m8d60988[m Update IRGenDebugInfo for upstream API change.
[33m53b6472[m Add a new tool called swift-llvm-opts that is a custom opt driver for swift.
[33m9ebc0d2[m Move the declaration of initializeSwiftARCContractPass and initializeSwiftARCOptPass from {LLVMARCContarct,LLVMARCOpts}.cpp => PassesFwd.h so swift-llvm-opts can use them.
[33m26337f2[m Move declaration of initializeSwiftAAWrapperPassPass and initializeSwiftRCIdentityPass from Passes.h => PassesFwd.h.
[33mb8f18e5[m Make sure that swiftIRGen links with swiftSIL and swiftSILGen since it depends on them.
[33m4fae42e[m [irgen] Refactor out the pass pipeline build code in IRGen so that llvm-swift-opt can use it.
[33m911801e[m Specify in IRGen that we do not support lowering clang opencl builtins that are newly added to trunk.
[33m02d88a7[m Specify that the ClangImporter does not support new OpenCL BuiltinTypes that have been added to trunk.
[33me696331[m Fix a duplicate symbol linker error by making an inline definition out of line.
[33m72f5063[m Update SwiftAA for upstream AA changes.
[33m894f548[m Add in two missing includes.
[33m113fac2[m Update use of GlobalAlias::create API for upstream changes.
[33mb1b07ef[m stdlib: Replace unsafeBitCast calls with unsafeCastReference.
[33m98d17a5[m For unsafeReferenceCast rely on static verifier checks.
[33mfb1cc93[m Clean up uses of swift-compiler-verison and clang_repository_string
[33mde82241[m [CodeCompletion] Be more defensive about null type in RHS of assignment
[33m465c2db[m [CodeCompletion] Add a test for some previously crashing extensions
[33m9ffa0b2[m Add demangler support for protocol descriptor symbols.
[33m35d4d98[m Add test for Objective-C class reference from static inline function
[33m64af320[m Fix a crash in DeadFunctionElimination. I introduced the problem with r32123. The crash can happen for some "unusual" class method lookup.
[33m3089f3d[m Update release mode test I missed
[33mfd5a946[m Add MemLocation only-reduction test. Given a set of memory locations, reduction function try to aggregate them into the smallest # of memory locations possible. i.e. given 2 fields of a 2-field struct. reduce function will *reduce* the 2 memory locations into 1
[33m7e119d0[m Optimize the mangling of associated types in generic signatures.
[33mb77ea5e[m Mangle the generic signature of a constrained extension after the containing module.
[33m270e700[m Add an enum type expansion test.
[33m31d8b8e[m Update comments and reorder functions in MemLocationPrinter. NFC
[33m630776f[m Add more comment in MemLocationPrinter
[33mfe3929a[m Add a reset function for memlocation
[33m6fe4314[m Make MemLocation expansion printing more consistent as type expansion printing. NFC.
[33m0060733[m Add another type expansion for tuple inside struct
[33meeeb067[m Add a TODO in DSE
[33me681bad[m Make memlocation type expansion results more understandable
[33m562f417[m Use address projection instead of projection when expanding projection paths for a SILType in MemLocation.
[33m83cfbae[m [CodeCompletion] Add labels for first argument when not showing patterns
[33m9cff4a3[m Add a note to the optimization guide about the trick to enable generic specialization.
[33m0b46c2a[m Determine which class_method call sites might call unknown functions.
[33mb8ac2a1[m Fix abi_v7k test
[33m4324195[m Fix a crash in EscapeAnalysis.
[33me133125[m [ClangModulePrint] If skipping an unavailable decl, skipping its following regular comments too. rdar://20092567
[33m10a6615[m Fix test names from previous commit
[33m923079c[m [CodeCompletion] Fix r32765 when completing at EOF
[33mf6c9df4[m EscapeAnalysis: cache the isPointer checks, which makes the node lookup faster. Also remove the pointer_to_address instruction from the list of supported projections. At least for now the analysis doesn't handle raw pointers.
[33ma2c7298[m [CodeCompletion] Don't complete entire call patterns inside existing calls
[33m295a6b2[m [IRGen] Fix source list computation in PolymorphicConvention
[33m01a8fe3[m Update file header comments.
[33m1ff4f6d[m First version of escape analysis.
[33m06f6d79[m [loop-arc] Create a simple SuccessorID::operator!=() operator.
[33m4f2fb63[m [loop-arc] Fix a typo in LoopRegionFunctionInfo::getRegionForNonLocalSuccessor,
[33m60471cb[m For now turn off computation of loop region analysis while I investigate an assertion failure.
[33m8e75d41[m [loop-arc] Wire up stage 2 loop arc infrastructure to GlobalARCOpts behind a flag.
[33m3c5665d[m [loop-arc] Create ARC infrastructure needed to plug in loop ARC into the current ARC framework.
[33m895af4e[m [loop-arc] Do not run LoopARCAnalysis on functions with external declarations.
[33md55d6e6[m [loop-arc] Create LoopRegionFunctionInfo::getRegionForNonLocalSuccessor.
[33me18edfb[m [loop-arc] Change some loops into std::copy now that I remembered I need to use a back_inserter. = /.
[33m7b542e9[m [loop-arc] Make sure to check if we have a block when making subregion_reverse_iterators().
[33m742df3d[m [loop-arc] Make some methods on LoopRegion const en duex
[33ma9e530b[m [loop-arc] Create canonicalizeAllLoops(DominanceInfo *, SILLoopInfo *LI)
[33m73098df[m Rename canCallArbitraryFunction to canCallUnknownFunction.
[33m9ddfa28[m Switch SCC nodes to TinyPtrVector.
[33m4327e0b[m Update a comment regarding unknown callees for class methods.
[33m8537e8e[m Change call graph SCCs to be composed of SILFunction *.
[33m6e4e189[m Add 2 tuple type expansion tests.
[33mb20e179[m Add a more complex test case with struct and reference type
[33m073b131[m Add a test case for type expansion on a class reference.
[33m34f31aa[m Refactor the MemLocationPrinter pass. NFC.
[33mb4202d3[m Implement SILType expansion dumper and LIT test. More test cases to come
[33m895509a[m Refactor how expand and reduce are implemented in MemLocation. BreadthFirstList now takes a SILType instead of a MemLocation, BreadthFirstList will be used to expand memory values in RLE as well.
[33m919c8d1[m More watchOS test churn
[33m25abe9d[m Refactor and improve the representation of sets of callees.
[33m1da2c6e[m Revert "[loop-arc] Make some methods on LoopRegion const."
[33m4491e07[m [loop-arc] Make some methods on LoopRegion const.
[33m1b5778b[m UNSUPPORTED rather than XFAIL
[33m6e5475b[m Fixing watchOS simulator test failures
[33m870497e[m [CodeComplete] Avoid the assertions of already-type-checked ASTs.
[33m3286fc7[m [test] Add missing argument names.
[33m8cb107c[m Added llvm namespace qualifier to StringRef.
[33m30c3205[m [CodeComplete] Adjust the end location of a delayed-parsing var decl. rdar://22981278
[33m5e3ba2b[m Update getCurrentCompilerVersion call to parseCompilerVersionString
[33me1a7a0f[m Refactor CompilerVersion
[33m7c48e3a[m Define __SWIFT_COMPILER_VERSION in the ClangImporter
[33ma67596a[m Enforce practical limits of _compiler_version
[33m437d5b8[m Use SmallSetVector for callee sets.
[33mc925ff1[m [loop-arc] Refactor the dataflow rc state visitors so that they can be used with ARCRegionStates and ARCBBStates.
[33ma994a0d[m [loop-arc] Just maintain a unique predecessor list instead of a sorted unique predecessor list.
[33m51ed0ea[m [loop-arc] Hide two methods used only in construction of the loop region data structure by making them private.
[33m8a04415[m Omit needless words: lowercase the initial words of all names, including acroynums.
[33m912a00c[m [stdlib] More Array Refactoring
[33mfdba224[m Mark CallGraphNode's getFunction() const.
[33m26b3917[m Update ArrayRefView so that it works even if Basic/LLVM.h has not been included.
[33mfd94ce6[m [CodeComplete] Start using TypeSubstitutionMap to transform generic type parameters. NFC
[33m16d7c9e[m Fix test/IRGen/casts.sil harder
[33md6e038f[m Fix test/IRGen/casts.sil for 32-bit architectures
[33m8cc155c[m [ObjcHeaderPrint] When initializing CompilerInvocation with clang tuples, update i386 to x86_64 so that Stdlib is available. rdar://22978765
[33mf8b2469[m Omit needless words: drop "with" from the beginning of first argument labels.
[33mf3b8a58[m [CMake/build-presets] Add 'clang-libclang' install component that installs libclang and pass the clang version via darwin-llvm-submit-version.
[33m711c76e[m Add gold linker support for Swift executables and shared libraries on Linux.
[33m76c06ba[m In dump of call graph stats, print # of callee sets allocated.
[33med93dbe[m IRGen: Fix LLVM verifier failure with class casts when the source is an optional
[33m02ec8e6[m Add an install component to install the clang builtin headers to lib/clang
[33m9ce1cdc[m [loop-arc] Add support for non-local Loop Successors.
[33m341a77c[m [loop-arc] Prepare the successor representation for non-local successors.
[33m8959a3d[m [loop-arc] Standardize style of file check tests so that they all look the same. NFC.
[33m382746c[m Omit needless words: stop splitting first selector pieces for Boolean parameters.
[33m8d77703[m Minor comment update that should have gone into r32685.
[33mfdee2cb[m Bump module format for dealloc_ref change
[33mf7481ac[m DI: Only emit 'self consumed' error once
[33m76f1168[m Remove dealloc_ref's [constructor] form since its no longer needed
[33mfa30486[m Add another test case for more conservative memory behavior for CopyAddrInst. rdar://23081349
[33m94ddaf2[m Remove the getComplete* functions from call graph.
[33mb82b16b[m Fix memory behavior for CopyAddrInst. CopyAddrInst can decrement the reference count of the destination. rdar://23081349
[33mb074525[m [utils] Add update-checkout support for llbuild & swiftpm.
[33mbca5a48[m Minor clean-up. Produce an explicit boolean result, instead of relying on implicit conversion to bool. NFC.
[33m4fd8509[m Archetype builder: get rid of unnecessary uses of the module. NFC
[33m4e855ad[m Add a motivation section to the Swift level attributes proposal and remove the old low-level attributes proposal.
[33mf524802[m DI: Add support for early return from designated initializers
[33mea3d0b3[m Archetype builder: clean up typo correction and unresolved references.
[33m6f34a14[m SWIFT_COMPILER_VERSION needs TOSTR wrapper
[33m57d2967[m stdlib: remove _Strideable
[33m371e189[m stdlib: tighten constraints on MutableCollectionType.SubSequence
[33m962a1c0[m Warn and fix-it if second _compiler_version component isn't a *
[33mdd113d0[m Reapply "[InterfacePrint] When printing a type interface, omit the extensions that are not applicable." After fixing a dangling pointer.
[33m4b82904[m Don't allow silent failures in protocol conformances.
[33mfa3bb96[m Clang importer: allow the swift_name attribute to map any name.
[33m64d5c10[m Suppress some warnings. NFC
[33m537d5ab[m DI now tracks partially-initialized 'super.init' state
[33mfd4a9cd[m [stdlib] Fix typo in doc comment
[33mad3c032[m Revert "[InterfacePrint] When printing a type interface, omit the extensions that are not applicable."
[33m5cd1635[m Make a few more call graph functions private.
[33mb5bc5c5[m Remove unused method from call graph.
[33m59c4ca9[m [InterfacePrint] When printing a type interface, omit the extensions that are not applicable.
[33m1138a9c[m Suppress warnings, NFC
[33m7cc59e0[m SIL: Add DeallocPartialRefInst
[33md138433[m Fix implementation of casting for arguments and return values of optional types.
[33mff9f3d0[m Remove a TODO comment, which is implemented now.
[33m104f125[m Add a test-case that casts generic arguments of a function call.
[33m116d19c[m [CMake] Remove accidentally-added extra quotes from SWIFT_COMPILER_VERSION.
[33m8f089d2[m [Linux] Add Glibc overlay support for fcntl stat macros.
[33m9b7644b[m Hide more implementation details of the call graph.
[33m2e86c9a[m Move a couple helper classes into namespaces.
[33mbaf1352[m Another Linux test fix for r32644
[33m7661173[m The ivar_destroyer.sil test was extracted from class.sil and requires objc_interop and x86_64
[33mab94f22[m [loop-arc] Move creation of beginning and end all_edge_iterator onto LoopRegionWrapper.
[33mad8c9ad[m [loop-arc] Convert a bunch of CHECK => CHECK-NEXT statements so we can catch edges in the loop regions that are added as successors/predecessors, but should not be there.
[33m3160467[m [loop-arc] Simplify the output for short loop region logs.
[33m39acb24[m Effects doc, minor spelling typos.
[33mf3e5b1d[m Convert unsafeDownCast to use Builtin.castReference.
[33m418ab80[m Runtime: Implement swift_deallocPartialClassInstance()
[33m54dd789[m SIL: Emit native ivar destroyer and store it in class metadata
[33m75b026d[m [loop-arc] Rename LoopRegionID => SubregionID. NFC.
[33m6fd6598[m [loop-arc] Use FunctionTy instead of SILFunction.
[33m7ca605d[m [loop-arc] Be more explicit in the docs on how we handle loops with multiple backedges.
[33mad69350[m Fix testcase after r32637. The full path is now stored in the Filename portion of the DI"File" referenced by the CU.
[33mc2f6687[m Don't take the address of a temporary. NFC.
[33m3356f7a[m Pass the debug info settings through to Clang and ensure that compile units created by Swift and Clang set the CU's compilation dir similarly.
[33m15e3e59[m Just use the function ordering in function signature optimization.
[33m0d01c42[m Hide LoopRegionFunctionInfo::{getRegion,createRegion}(...) functions in LoopRegionAnalysis.cpp.
[33m6d7410c[m [loop-regions] Remove subregion_reverse_iterator as a separate implementation and instead use std::reverse_iterator.
[33m52ac3ed[m [loop-regions] Rename BBTy => BlockTy.
[33m3d08ee0[m OptimizerEffects proposal: Add some thoughts on pure value types.
[33m5ca83d9[m [InterfacePrint] Enhance ASTPrinter to support type-specific interface printing.
[33m5ac4fa6[m More principal approach for casting of ABI-compatible arguments and return types.
[33mc9e3c36[m [Glibc] Complete the Glibc module.map.
[33m42c71b7[m Don't mangle directness into type metadata symbols.
[33mb7bc622[m If there's no SWIFT_COMPILER_VERSION, show the revisions Swift was built with.
[33m2c0fb55[m Removed a stale comment and renamed a function. NFC
[33ma1f4abe[m Add a Swift-level CoW attributes proposal
[33m1106cf8[m Fix a default parameter wrongly modified in r32621. This is a refactoring change.
[33mc222f4b[m Refactor breadth first expansion out into separate function. NFC
[33md5b7aa2[m Rename mergeSuccessorsWriteIn to mergeSuccessorStates in DSE. NFC
[33m3577261[m Reorder field to silence initialization order warning. NFC
[33m496d411[m Some more refactoring in DSE.  Move 1 function around so that they match the declaration order. NFC
[33m733a522[m Some more refactoring in DSE. NFC
[33m24142cc[m Rename GlobalDeadStoreEliminationImpl to DSEContext to become more consistent with what is called in RLE. NFC
[33maad48a2[m Reorder field to get rid of initialization warning. NFC
[33m47051e6[m Change DSE debug-type string for consistency with RLE. NFC
[33ma220c7a[m Add a TODO for same value dead store in DSE. NFC
[33mef753c2[m Revert "RLE"
[33m6261f7f[m Add some comments to MemLocation. NFC
[33mf5540b1[m RLE
[33mfb0a555[m Refactor DSE code. NFC
[33m47b2aee[m Fix a LIT test case for DSE
[33m4ffe072[m Turn on optimistic data flow for DSE. Existing data flow is a bit too conservative
[33m81baa5e[m Refactor where base to access field projection is stripped off. NFC
[33m090d723[m SIL: Remove null_class instruction
[33m4bedf45[m Use the 'self consumed' analysis to eliminate releases of consumed self
[33m065dfd2[m Unbreak tests bitcast and casts on i386 (simulator).
[33mfb7b3ee[m Add a method to the call graph to determine if we know every call site of a function.
[33m9eca7db[m Add a couple helpers to CallGraphEditor.
[33m5bf932f[m Update VERSION_MINOR to reflect the previous commit which removed unchecked_ref_bit_cast.
[33mf74a3c9[m Re-apply "Use the 'self consumed' analysis to diagnose some invalid usages of self"
[33mc20370a[m Remove the last remnants of unchecked_ref_bit_cast
[33m57a450b[m Generate unchecked_ref_cast,  not unchecked_ref_bit_cast.
[33m9009c5e[m Add a SILCombine to promote unchecked_ref_cast_addr to unchecked_ref_cast.
[33m5f3a16d[m Make CopyForwarding aware of unchecked_ref_cast_addr.
[33m05a51b7[m [cast-optimizer] Small bug-fix to avoid a compiler crash.
[33m5447d08[m Revert "Use the 'self consumed' analysis to diagnose some invalid usages of self"
[33m9bdb509[m Add another call site query to the call graph.
[33m33e5c87[m Remove unused function from CallGraphEdge.
[33mc269f9c[m Add more entrypoints to CallGraph to hide implementation details.
[33m2c1d94d[m Hide some more implementation details of the call graph.
[33m8007dc8[m Add Builtin.castReference and internal API _unsafeCastReference.
[33m665e516[m Add unchecked_ref_cast_addr SIL instruction.
[33m9806949[m OptimizerEffects. Add a little note.
[33mc1abc4d[m Start hiding implementation details of the call graph.
[33m0f7722e[m [runtime-lib] Any Swift mmap /vm_allocate allocations should use a custom tag.
[33m194c4b1[m Use the 'self consumed' analysis to diagnose some invalid usages of self
[33m1b41fbc[m DI 'self consumed' analysis improvements
[33mfc9df13[m Don't try to devirtualize a method if the optimizer cannot handle the required cast of a return value afterwards.
[33mae1b2c3[m [utils/swift-mode] Allow customization of Swift indentation offset.
[33mfae45a1[m Don't try to apply optimizations involving casting of return values if the optimizer does not know how to cast them.
[33m21ce0d7[m Change the order of parameters and improve the description of a function. NFC.
[33m278fe4f[m Split the type check request payloads out into a separate .def file. NFC
[33m9632cac[m [Frontend] Don't crash when the module passed with '-import-module' is not found.
[33m2d324ca[m Minor cleanups in the iterative type checker. NFC
[33m8c9be9b[m Iterative type checker: simple circular reference detection.
[33m712796a[m Add a flag to enable the iterative type checker.
[33m0b59412[m Formatting fix. NFC
[33mc560c37[m Iterative type checker: stub out "structural" type resolution requests.
[33mbbf335e[m Iterative type checker: make request construction more convenient.
[33md245734[m Iterative type checker: thread an UnsatisfiedDependency through type resolution.
[33mbef4601[m Iterative type checker: add requests for name lookup.
[33m1ee99dd[m Iterative type checker: make checking dependencies more direct. NFC
[33m70968a3[m Use the iterative type checker for TypeChecker::resolveInheritedProtocols.
[33mb49964e[m Iterative type checker: collapse "enumerate dependencies" and "satisfy".
[33mf247447[m Iterative type checker: compute inherited protocols of a protocol.
[33m68604e6[m Switch TypeChecker::resolveInheritanceClause over the the iterative type checker
[33m72a2969[m Iterative type checker: handle the raw type of an enum
[33m2f71b20[m Iterative type checker: satisfy dependencies of a request before the request.
[33m2feed84[m Sketch out the interface to an iterative, lazy type checker.
[33ma6b5f56[m Disable MemLocationVault in RLE. RLE is currently modifying the SIL on the fly while the MemLocationVault could end up keeping instructions that are replaced/deleted. Until we have the optimistic dataflow which only modifies the SIL in the last iteration, we can not use the MemLocationVault for now.
[33m5bd460d[m [simplify-cfg] Better handling of return type casts.
[33m26ed61c[m Re-factoring: Make castTupleReturnType a utility function. NFC.
[33mb73ca15[m Build fix: Ask stream's string for its size
[33m76e324a[m Refactors leading towards the use of protocol witness table access functions.
[33m19bb23a[m Revert r32541 "Refactors leading towards the use of protocol witness table access functions."
[33m583d94a[m Remove EnableGDSE in GlobalDeadStoreElimination. It is enabled by default. NFC
[33m4f3461b[m Stylish changes. NFC
[33me625a6c[m Add a test case for global dead store elimination, making sure it does not remove stores across potentially interfering loads
[33me1eb240[m Speculatively revert a debug-info-implicating change in my last series of patches in an attempt to placate the build.
[33mcc721ab[m SimplifyCFG: fix a crash in the try_apply(convert_function) to apply conversion.
[33md9112d5[m Add const to print function
[33macec932[m Uncomment some real code, forgot to remove *#if 0* before checking in.
[33mbbc0d89[m Use index into the MemLocationVault to represent MemLocation.
[33m34d6ce6[m Only invalidate the WriteSet when a memory-reading instruction is encountered
[33m9c0b364[m DI changes in preparation for conditional 'self consumed' logic
[33m9af9b99[m Refactors leading towards the use of protocol witness table access functions.  NFC for now.
[33m7f975f0[m Generalize code emission for lazy metadata caches; we'll use this for non-dependent protocol witness tables, too.
[33m411b9e1[m Don't create unwanted global declarations.
[33mc449b4a[m Add more comments on how dead store elimination works.
[33md7cdcc0[m Add printing capability to MemLocation
[33m9872e10[m It appears MemLocation enumeration is not quite ready for RLE yet. Disable it for now
[33mbd1b6ab[m Add a reference to eff-lang.
[33mb521bcb[m Only need to enumerate the memory locations once when the RLEContext is constructed
[33ma60464a[m Add a reference to koka's effects
[33mfff8849[m FunctionEffects -> OptimizerEffects
[33m42a005b[m Change DI to calculate if 'self' was consumed by a delegating init call
[33m116f192[m Move SIL utility passes from ./lib/SILPasses -> ./lib/SILPasses/UtilityPasses.
[33m9578d5d[m FunctionEffects notes
[33m7abf2e8[m Write a proper introduction for FunctionEffects.rst.
[33m7dea517[m Finish formatting FunctionEffects for .80-col.
[33maf6da41[m Introducing MemValue. MemValue is used to keep track of the currently available value for a given memory location.
[33maa6f2d9[m Change class names. NFC
[33mf889f85[m Add MemLocationVault, a std::vector to keep track of all the MemLocation accessed in the currently processed function. With MemLocationVault in place, we can represent a location with an index, instead of a full MemLocation object which is currently quite large in memory.
[33m392fd3a[m Introduce MemLocation to Redundant Load Elimination (RLE) Pass. Currently its not used in any way other than updating its state while running the data flow.
[33md5f1f06[m Add the copy-on-write effects proposal to the function effects document.
[33m46cb33d[m The beginning of a working document on function effects.
[33m5eca3f7[m Rename MemLocationDumper.cpp to MemLocationPrinter.cpp
[33m5c92622[m Add option capability for MemLocationDumper
[33m044bf03[m Rename globalloadforwarding.sil to globalredundantloadelimination.sil
[33ma06d32f[m Revert "Rename globalloadforwarding.sil to globalredundantloadelimination.sil"
[33mf2758e2[m Rename globalloadforwarding.sil to globalredundantloadelimination.sil
[33mf07296f[m Add a selfloop class test case to memlocation expansion test.
[33m70e2435[m Rename LoadStoreOpts.cpp to GlobalRedundantLoadElimination.cpp
[33mab58c6b[m Change pass name GlobalLoadStoreOpts to GlobalRedundantLoadElimination
[33m1809f5c[m Disable a test case for StoreMap. Keep the test here so that we can make sure the new load forwarding pass can handle all the contained tests
[33mf6b6071[m Disable test case for StoreMap in LoadStoreOpt.cpp
[33m63caeac[m Remove StoreMap from load forwarding. StoreMap allows stores with different values from different paths of the program to be forwarded. The way it is implemented is quite limited and may be difficult to maintain. (For stores with the same value (same store inst)  from all the predecessor, we keep it in the Stores data structure).
[33m23982ae[m Write a rough plan on how to implement redundant load elimination (RLE), a.k.a load forwarding
[33m0a0136d[m Move deleteAllDebugUses into DebugUtils.h
[33m27e25b5[m Enable sinking of instructions that have debug info (for sinking allocation instructions).
[33m6d35fa2[m Change field ordering to suppress initialization order warning. NFC
[33m40db77a[m We only need to resolve accessibility to check accessibility.
[33m3ba8b06[m Remove duplicated code. NFC.
[33ma20609a[m Sink allocation instructions through basic block arguments.
[33m27a5c7d[m Mark Alloc instructions of the same types as identical.
[33m72fe9e6[m Fix style. NFC.
[33m9769dc4[m Remove DI change that should not have gone in
[33mb29bced[m SILGen: Use createBuiltinBinaryFunction() in place of createBuiltin() in one place
[33m0f993b3[m Rename file that had typo in file name, NFC
[33mc6636aa[m Enable tests that are passing now
[33mee427fa[m Remove unnecessary CanType() calls and other misc cleanups, NFC
[33m68b8f5f[m Refactor expand and reduce function in MemLocation.
[33me766447[m Revert "removes the old dead store elimination, the new dead store elimination takes over"
[33ma945bac[m Split GenProto.cpp into three files; NFC.
[33m255a1e6[m Random comment typo fixes, NFC
[33m309565f[m Fix a testcase on 32-bit systems.
[33m872ed08[m removes the old dead store elimination, the new dead store elimination takes over
[33mdc910fe[m [CodeCompletion] Handle sequence expression where the LHS type-checks
[33md12ea51[m rename a memlocation test case
[33m1d76766[m A memlocation expansion test case on struct
[33mc6c43c6[m Check memlocation projection path in MemLocationDumper
[33mfb23811[m Fix CoreMedia CMTimeRange overlay != operator
[33m1a38d9a[m Add printing capability for Projection and ProjectionPath.
[33m8c80d74[m Add a memory location dumper pass, this pass is used to check whether memlocations are constructed and expanded correctly. MemLocation is essential to the correctness of dead store elimination and load forwarding.
[33m2d38e26[m Move IRGen's PolymorphicConvention off of ArchetypeBuilder and onto direct queries against the GenericSignature.
[33m639db94[m Avoid non-deterministic code-completion test failure
[33m7c1e523[m Refactor the code that checks for owned parameters. NFC.
[33mbb9aa3a[m Teach IRGen to emit the 'readonly' function attribute.
[33m6f68cd5[m Mark the stdlib memcopy and strlen as readonly (pure).
[33me1aa81a[m Sink and duplicate literal instructions.
[33md518de5[m Silence a warning in Release builds. NFC.
[33ma6cc627[m Remove an unused header include. NFC
[33mf969a99[m [CodeCompletion] Handle simple cases of space in front of postfix completions
[33m68242ee[m Change heuristic for partial dead store elimination.
[33m01933ce[m Switch to using Swift-specific type traits to unbreak the Linux build.
[33md871c9a[m [CodeCompletion] Split code completion operator kind out
[33mc7c9846[m Fix a bug in MemLocation expansion, i.e. treat class reference type as MemLocation leaf node. Thank Eric Eckstein for finding this bug
[33m9448df6[m [CodeCompletion] Add initial support for completing infix operators
[33m0538553[m Change call site numbering in call graph.
[33m555f8e4[m Minor refactoring of call graph interface.
[33me576dba[m Add missing continue statement when measuring tab indents in doc comments
[33m2dcc3af[m Omit needless words: never reduce a name down to "using", "for", or "with"
[33me60e5a3[m Omit needless words: more verbs from Cocoa
[33m7778790a[m Omit needless words: prepend "is" to Boolean property names.
[33mbf55d27[m Omit needless words: add some more verbs found in Cocoa.
[33m9f7a1e7[m Zero-initialize the root pointer.
[33m8fa1cf2[m Refactor some code from the devirtualizer.
[33m6cc655c[m Introduce a more general mechanism for metadata fulfillment which allows the use of an arbitrary-length path.
[33mcc7938a[m Implement a trie data structure.  Specifically, implement a ternary tree with a fixed-length per-node inline key buffer.
[33m0d4bc12[m Revert "Completely remove the old DSE in LoadStoreOpts.cpp. The new DSE in GlobalDeadStoreElimination.cpp"
[33m2a97096[m Revert "Change debug type string for consistency"
[33m93a24c4[m Omit needless words: be more consistent about AnyObject -> "Object".
[33mb9b4939[m Omit needless words: don't use typedef names as type names.
[33ma5a70d9[m Change debug type string for consistency
[33m4cd078f[m Completely remove the old DSE in LoadStoreOpts.cpp. The new DSE in GlobalDeadStoreElimination.cpp takes over. Rename LoadStoreOpts.cpp and functions inside it.
[33mab2f20f[m Omit needless words: don't introduce default arguments for lone parameters to setters.
[33m8dc0e13[m Minimize and sort the protocols returned by GenericSignature::getConformsTo.
[33m76c3ea3[m Minor improvements to the omit-needless-words wrapper script.
[33mef8172b[m Teach the omit-needless-words script about the tvOS SDK.
[33med68fff[m Don't try to omit needless words on invalid declarations.
[33m46d857b[m Change class Location to MemLocation, to distinuguish from SILLocation
[33m175b3cc[m Add an threshold for the # of smaller stores that can be generated from a bigger store if the bigger store is partially dead.
[33m9c759bd[m Add a partial dead store test case
[33ma960e7b[m Fix some comments, remove a few useless includes in Location.cpp and GlobalDeadStoreElimination.cpp
[33m6582127[m Improve partial dead store by merging alive stores into smallest number of stores possible.
[33m984173d[m Moving more Location related code from GlobalDeadStoreElimination.cpp to Location.cpp
[33mfdff79c[m Moving more Location related code from GlobalDeadStoreElimination.cpp to Location.cpp
[33m226fa15[m Eliminate the Type from ComponentIdentTypeRepr.
[33m4c48048[m Stop setting the bound type for a nested ComponentIdentTypeRepr.
[33m7ba3cd2[m Stop setting a bound type on top-level IdentTypeReprs.
[33m34106f7[m Include the Self type of a protocol type in the list of "all" generic arguments.
[33md6c207d[m Move Location class into its separate files. we use Location in global dead store elimination to represent the accessed fields of the variables in the program. we plan to use Location in the load forwarding pass as well for similar purposes.
[33m74aa6ce[m Implement partial dead store elimination in GlobalDeadStoreElimination.cpp Partial dead store elimination can turn a store to a smaller one if part of it is dead.
[33m6536edd[m stdlib: fix coding style
[33mf7005d5[m stdlib: clean up code: arrays of functions work now
[33maba0903[m Use new API in Projection.cpp(getFirstLevelProjection) to enumerate individual fields in SILType in dead store elimination.
[33md78c964[m Revert "Renable LLVM's MergeFunctions pass"
[33m1c9aa59[m Renable LLVM's MergeFunctions pass
[33m6af6048[m AST printing: take more care to only escape 'Self' when needed.
[33m9809dbc[m Use IdentTypeRepr::setInvalid() rather than setting ErrorType explicitly.
[33m08d126a[m Don't mangle the generic signature of unconstrained extensions.
[33m2a96db1[m [swift-ib] Add preset for internal Swift project
[33m6e31ea5[m Introduce standard substitutions for Unsafe*Pointer.
[33m0cd5aa8[m Change mangling for the Swift module from 'Ss' to 's'.
[33m394b948[m SILCombine: fix removal of dead try_apply instructions.
[33m23d79a4[m SILGen: Fix miscompile if self accessed multiple times while forming delegating init call
[33m6099179[m [swift-mode] Use mapc instead of mapcar since it is more canonical.
[33mc08d25e[m Separate the call graph data structure code from the analysis.
[33m8f00643[m [stdlib] Integers prototype: remove undefined behavior
[33ma83720b[m Remove dead code. NFC.
[33m0b1391a[m SILCodeMotion: Make release hoisting more aggressive
[33m14e16cd[m Remove obsolete generics mangling from ABI.rst.
[33m436ff43[m Mangling: Conditionally eliminate self types and requirements from method symbol manglings.
[33m8c51348[m Update TODO comments in Mangle.cpp, NFC
[33m5145a49[m Add -disable-self-type-mangling staging option.
[33m2584faa[m Record the bound declaration whenever resolving nested type names. NFC
[33m78f98b7[m Start relying on bound declarations in resolveTopLevelIdentTypeComponent().
[33m7877b7a[m Remove a pointless and awful hackaround that makes no sense. NFC
[33ma2f3e86[m SILCombine: correct handling of @in parameters when deleting dead read-only function calls.
[33m44e3485[m Omit needless words: give initial Boolean parameters argument labels.
[33m3554254[m Simplify resolveIdentTypeComponent(). NFC
[33mf011ade[m Pull the rest of top-level type resolution into its dedicated function. NFC
[33mc4cf4aa[m Factor the resolution of qualified types into its own routine. NFC
[33m5aa1c42[m Move ARC Analysis code into its own subdirectory. It still compiles into libswiftSILAnalysis so that we do not create any layering dependencies.
[33ma1547cc[m Move SILCombiner to its own folder as per request. Still compile it into the SILPasses library. This avoids layering issues from the introduction of a new library.
[33mf9e1362[m [CodeComplete] Delay the processing of code completion tokens to preserve AST. rdar://21491053
[33m229e4f4[m Omit needless words: Objective-C BOOL -> "Bool".
[33mcf7cc55[m Omit needless words: make _t a skippable type suffix.
[33m2d5d3d2[m Omit needless words: use the actual mapped names for builtin C types.
[33m0c1b6f8[m CMake: fix separate overlay builds
[33mf90f9a6[m Omit needless words: verb adjustments.
[33mb7e6001[m Implement more type support for getFirstLevelProjection
[33m263cbdc[m Revert "Hook instruction insertion & removal."
[33mecb8751[m Add an enum test case for dead store elimination
[33m98dadc9[m Teach resolveTopLevelIdentTypeComponent not to modify the component.
[33m74e0376[m Add notes linking the two requirement-deriving queries. NFC
[33m885b30b[m Introduce an "invalid" bit on TypeRepr.
[33mdb0d8c6[m Eliminate two unnecessary uses of TypeRepr::setValue(Type).
[33m07bec98[m Introduce FixedTypeRepr to handle those few cases where we need a Type in a TypeRepr.
[33m1a6a98b[m ClangImporter: import LLVM's const and pure function attributes to SIL function effects.
[33m3b0c30a[m Remove dead code from r32355
[33mf9e30b5[m More conservative about what StrongRelease can do about AllocStack
[33m1f391d9[m Enumerate all accessed locations before running data flow for dead store elimination. This helps to resize the bit vector to the appropriate size and we do not need to keep resizing them as new locations are discovered. Instrument shows a non-trivial amount of time is spent in bitvector resizing in dead store elimination.
[33ma0f5bdf[m [PATCH] [Driver] Add support for using 'swift' to exec subcommands.
[33m51b8891[m Revert "Enumerate all accessed locations before running data flow for dead store elimination. This helps to resize the bit vector to the appropriate size and we do not need to keep resizing them as new locations are discovered. Instrument shows a non-trivial amount of time is spent in bitvector resizing in dead store elimination."
[33m3f0530e[m Revert "Completely remove dead store elimination in LoadStoreOpts.cpp, as the new dead store elimination can handle more cases. Rename LoadStoreOpts.cpp to GlobalLoadForwarding.cpp to better reflect what it does now."
[33me810244[m Replace getHashCode() function with hash_value overload for ProjectionPath
[33mcf72e74[m Completely remove dead store elimination in LoadStoreOpts.cpp, as the new dead store elimination can handle more cases. Rename LoadStoreOpts.cpp to GlobalLoadForwarding.cpp to better reflect what it does now.
[33m8fa2c12[m Enumerate all accessed locations before running data flow for dead store elimination. This helps to resize the bit vector to the appropriate size and we do not need to keep resizing them as new locations are discovered. Instrument shows a non-trivial amount of time is spent in bitvector resizing in dead store elimination.
[33mc1678ff[m CMake: DARWIN_USE_INTERNAL_SDK: Actually use the internal SDK
[33m0a4841a[m Adding projection path into dead store elimination. With projection path, dead store elimination can more precisely tell which 2 stores are to the same location.
[33m48b0e18[m Hook instruction insertion & removal.
[33mf639692[m Fix a stale comment in Projection.cpp
[33mefbba06[m Same-type requirements for the nested types of equivalent types are inferred.
[33mf819eb0[m [CodeCompletion] Add initial support for completing postfix operators
[33m5cd595b[m [docs] Note that RCIdentityAnalysis is a flow insensitive optimization in the ARCOptimization guide.
[33m230944c[m Revert deletion of comment.
[33ma3fd302[m Remove SILBasicBlock::getInstList().
[33m27a3eb1[m Implement SILInstruction::moveBefore and moveAfter in terms of remove/insert.
[33m1a6b3c5[m Expose an API to count the number of elements in CollectionExpr, need this for rdar://22852702
[33m255a01f[m Add SILBasicBlock::spliceAtEnd.
[33m3f3d2a9[m Use the TypeRepr when printing an extension with no extended type
[33m3563cbf[m Revert "Adding projection path into dead store elimination. With projection path, dead store elimination can more precisely tell which 2 stores are to the same location."
[33m3a5a540[m Add GenericSignature APIs to query the requirements on dependent types.
[33mff03d2c[m Move more GenericSignature method implementations in GenericSignature.cpp NFC
[33mf1c5cd2[m Adding projection path into dead store elimination. With projection path, dead store elimination can more precisely tell which 2 stores are to the same location.
[33m7ff5d61[m Rename 2 test files to reflect more on what they test
[33me14e0ec[m Moving some dead store test cases to the new DSE test case file.
[33m83abc5c[m More accurate side effect for allocstack and tryapply/applyinst. rdar://22892564
[33meb5a912[m Revert "Separate our SILCombiner into its own subdirectory/library." Revert "Move PassManager related code into the PassManager directory in order to prevent layering issues with sublibraries of SILPasses that may depend on it."
[33me475fa0[m CMake: when looking for an internal SDK, check for the 'PrivateFrameworks' dir
[33mf279492[m Separate our SILCombiner into its own subdirectory/library.
[33mfa61aec[m Move PassManager related code into the PassManager directory in order to prevent layering issues with sublibraries of SILPasses that may depend on it.
[33m95da3d2[m Fix header of SILCombinerMiscVisitors.cpp to have the right filename. NFC.
[33md0d0180[m Now that SILCombinerVisitors.cpp has been refactored, rename the remains SILCombinerMiscVisitors.cpp.
[33m1d20fe2[m Refactor out apply related combines from SILCombinerVisitors.cpp => SILCombinerApplyVisitors.cpp.
[33m6a900c9[m Refactor out cast/conversion related combines from SILCombinerVisitors.cpp => SILCombinerCastVisitors.cpp.
[33m0cdd101[m Refactor out builtin related combines from SILCombinerVisitors.cpp => SILCombinerBuiltinVisitors.cpp.
[33mb44e61f[m Sort order of *.cpp files in lib/SILPasses/CMakeLists.txt.
[33m06e3229[m [stdlib] Attempt to fix linux build
[33mf3c5692[m Add the missing include.
[33m71fdf73[m Allow CharSourceRange to peek the underlying text, need this for rdar://22857642
[33m0c9fb63[m Add push_front()/push_back() to SILBasicBlock.
[33mea4af73[m Remove another use of getInstList().
[33me98e281[m SILBasicBlock has begin()/end(), so use those rather than getInstList().
[33m26e5be0[m CMake: add an option that forces the use of internal SDK
[33m38197e1[m Warning suppression
[33m243b528[m [stdlib] Array refactoring: simplify all array subscript checking
[33mee60b5f[m [stdlib] Array refactoring: rewrite ArrayBuffer._isValidSubscript
[33mcfe877b[m [stdlib] Array refactoring: s/hoistedIs/was/
[33mb1e98fe[m [stdlib] Array refactoring: s/NoTypeCheck/TypeChecked/
[33m5cf3291[m Array: Improve function, parameter names and add documentation
[33m0b2b0df[m Clean up canonicalization of GenericSignatures. NFC
[33mf460cb7[m Factor GenericSignature implementation into its own file. NFC
[33m9d7dd08[m Add back() and front() to SILBasicBlock.
[33m7985035[m Squash a warning
[33mab8dd24[m Use rbegin() on SILBasicBlock rather than grabbing the instruction list.
[33m85ff60d[m Revert "More accurate side effect for allocstack and applyinst. rdar://22892564"
[33mc8ab2b6[m Re-apply "[CodeComplete] Make sure the lookup API can find closure parameters. rdar://17968255" This also fixes an ASAN issue when TuplePattern tries to retrieve its associated element buffer whose size is 0.
[33mbeaa924[m More accurate side effect for allocstack and applyinst. rdar://22892564
[33m8fd7ba1[m Use the llvm:: namespace to refer to StringRef and SmallVector, fixing lldb.
[33m08bc418[m Remove  from unsafeBitCast argument--it doesn't need an address.
[33md430903[m Temporarily disable the SLPVectorizer
[33m46b2de0[m Add instruction list manipulation functions to SILBasicBlock.
[33m19a88e3[m Use instruction list iterator interface in DSE.
[33m779e506[m StdlibUnittest: rename isSequenceType to expectSequenceType for uniformity
[33mb41986e[m StdlibUnittest: make isSequenceType and expectCollectionType more strict
[33m7afb88f[m StdlibUnittest: put complex generic constraints in the same order everywhere
[33m657c365[m When opening an existential l-value, emit the l-value readonly if that's how the opaque l-value is used.
[33md1554f9[m Track and verify how an l-value expression is used in the AST.
[33m7eb830f[m Diagnose the first and third operands of a C-style for loop as ignored expressions.
[33me27b1e7[m Omit needless words: infer nil default argument for nullable NSZone parameters.
[33m169581f[m Omit needless words: don't inject argument labels for trailing closures.
[33mf13000c[m Omit needless words: limit "= nil" default inference to nullable trailing closures.
[33m472f637[m Fix some 80-column issues in call graph code.
[33m8277473[m Add a section to ARCOptimization.rst describing RCIdentity.
[33m25b1110[m Remove -enable-interface-type-mangling staging option.
[33m39aeac8[m Refactor MemoryBehavior into its own file from AliasAnalysis.cpp.
[33m538e811[m [loops] Canonicalize loops so that all loop exit blocks only have loop exiting blocks as predecessors.
[33m3e984d2[m Change test name - we test non unique arrays here
[33m76fafd9[m Add more detailed statistics to object file comparisons.
[33m599a438[m Don't force to grow the buffer everytime we make it unique
[33m8c9a589[m Eliminate ArchetypeBuilder's getInheritedProtocols() NFC.
[33meea1911[m Split GenericSignature out into its own header. NFC
[33m997caa2[m Downgrade "unknown platform" error to a warning.
[33mcdaee8d[m Fix comment typo. NFC.
[33m3ecf26c[m Convert SILLoopAnalysis to use FunctionAnalysisBase.
[33mf80c7c3[m Add 'override' to a few methods in RCIdentityAnalysis. NFC.
[33mff40fca[m Fix up a comment. NFC.
[33m266cb75[m Add in commit that I forgot to squash into commit r32270.
[33m4f38366[m Create a new pass LoopCanonicalizer.
[33m8f4b2d3[m Remove stale part of comment.
[33m21e7b06[m Migrate the unsafeBitCast API to use Builtin.reinterpretCast.
[33mc9a4ba4[m After testing and measurements, turning on new DSE by default to see whether there is performance improvements or regression. Local testing reveals a slight performance improvement after replacing the old DSE with the new DSE. progress tracked in rdar://22873577.
[33m61f2843[m Add additional dead store elimination to the compilation pipeline
[33m1a3344b[m Early return instead of if-else in LoadStoreOpts.cpp
[33m9055b27[m Use bridgeToRawPointer instead of unsafeBitCast.
[33m7d7cadb[m Improve SILType isPointerSizeAndAligned and canBitCastAsSingleRef.
[33m4ac66e3[m ... and in GlobalOpt. (caught by the assertion in the previous commit)
[33mb50b0c3[m Add an assertion that an inline scope is never thrown away.
[33m21f81a9[m Fix the exact same error as in r32027 also in LetPropertiesOpts.
[33m03d3e4d[m SDK overlay: LAErrorDomain not actually available on 8.0-8.2, adjust availability
[33m586ccae[m Revert "Re-apply "[CodeComplete] Make sure the lookup API can find closure parameters. rdar://17968255"" for unhappy bot.
[33mc22ab44[m Re-apply "[CodeComplete] Make sure the lookup API can find closure parameters. rdar://17968255"
[33m0b4a54f[m CMake: detect and refuse broken std::regex
[33m82fd400[m Revert "[CodeComplete] Make sure the lookup API can find closure parameters. rdar://17968255" for breaking build bot.
[33m012f6cb[m [IDE] Make sure to process the body of a defer statement properly.
[33m3cf0e98[m IRGen: Indirect cases are never IR-type-dependent.
[33m3e925ca[m [CodeComplete] Make sure the lookup API can find closure parameters. rdar://17968255
[33m0acbc9b[m Thread -emit-verbose-sil into SILPasses, so it can be combined with -sil-print-all & friends.
[33m66275a3[m Replace handrolled max by max.
[33m9ec0c23[m Nuke the CollectionType implementation from _BitMap.
[33maad003b[m [test] Add a test for weak properties in 'let' structs.
[33mfd00a80[m HashedCollections: Fix code only executed if compiled with internal checks enabled
[33m6c88b41[m Fix _BitMap's endIndex function
[33mef4d117[m add an alias analysis test case for dead store elimination
[33ma5e7531[m stdlib: Implement Dictionary using a structs of arrays strategy
[33m6e51e15[m Add _sizeInBytes to fixed point types.
[33mcc4e41c[m Add a ispod builtin and _isPOD function to the stdlib
[33m8639248[m Adding private property to struct or class should trigger downstream builds.
[33m1a92333[m Add test for effect of new private property of class on interface hash.
[33m538f784[m Only ignore private decls at global level.
[33mee0599b[m separate number of dead stores with number of same-value stores in LoadStoreOpts.cpp
[33m7ff9754[m Add an option to disable dead store elimination in LoadStoreOpts.cpp. This is used to test the effectiveness of the new dead store elimination in GlobalDeadStoreElimination.cpp
[33mabe92d5[m Improve comment for alloc_stack around ARC releases
[33m5b4a42b[m Set the foreign error convention for throwing methods of @objc protocols.
[33m8e984a0[m Improve location invalidation using alias analysis in GlobalDeadStoreElimination
[33mfc2cdee[m [PrintAsObjC] Only define Swift-provided typedefs once.
[33m239b843[m [PrintAsObjC] Use 'struct _NSZone' rather than redeclaring the typedef.
[33m5917678[m [ClangImporter] Typedefs of CFTypeRef should not be imported as AnyObject.
[33mf866e56[m [swift-demangle] Filter mode: '$' is a valid mangled name character.
[33mcddd264[m [PrintAsObjC] Enum domain string constants are __nonnull.
[33m177f170[m Suppress a warning, NFC
[33mf57947a[m stdlib: fix capitalization issues in documentation comments
[33mee4a34b[m Temporarilly disabling a performance unit test.
[33m7fceb12[m Look for EOF in addition to whitespace to lex the #endif token
[33ma0811a3[m Put diagnostic caret on arch/os argument, not the function name
[33mb92bb09[m Only promote from unchecked_addr_cast to a value cast when the compiler can guarantee that the destination has the same or smaller layout.
[33mca62095[m Latent bug fix: SILType::isNull.
[33m2c6fc87[m Wrap to 80-col so I can read the comments.
[33m69b6763[m Emit a warning when using unknown arch/os build configurations
[33m153d95e[m SwiftShims: don't redeclare libc functions
[33m787b276[m some comment and minor code fixes in dead store elimination.
[33m930971e[m Implement a new global dead store elimination (DSE) with iterative data flow. This DSE should eventually replace old DSE in LoadStoreOpts.cpp. Currently, the new global DSE is under the EnableGDSE flag which is set to false by default. Subsequent patches will keep improving it and when it can handle all cases handled by the old DSE for stdlib and PerfTestSuite code, we can remove the old DSE and turn on the new DSE by default.
[33m3407bc9[m Add release notes for recent standard library changes
[33m9da0b57[m stdlib: Add an initializer to RangeReplaceableCollectionType from SequenceType
[33m2a0f027[m Review changes for _compiler_version
[33mbe016ae[m [CodeCompletion] Don't add empty code completion on invalid init
[33m50df585[m [ClangImporter] dispatch_block_t may be nullable or nonnull.
[33m87e0d40[m [ClangImporter] Add PrettyStackTrace breadcrumbs for imported decls.
[33m94f6eec[m [CodeCompletion] Don't try to lookup members of a null type
[33m4bac733[m AliasAnalysis: code reformatting and fixing comments.
[33mb80781d[m If there was an error in the build config, continue to parse
[33m830446f[m Move call graph printer test to test/SILAnalysis.
[33m41c7a28[m [CodeCompletion] Avoid salvaging when code completing expressions
[33mc73a4e1[m [CodeComplete] Teach type context analyzer to analyzer for each statement. rdar://22831848 When completing at the sequence position of for each statment (for i in <HRER> {}), values of sequence type should have higher priority than the rest.
[33m69af693[m More accurate side effect for StrongRelease, UnownedRelease and ReleaseValue, rdar://22570613
[33mac1d27e[m Remove -enable-sil-verify-all from sil-opt tests that run no transforms.
[33m061969f[m Disable Integers.swift.gyb test since it is failing on the bots.
[33m517723d[m Add -enable-sil-verify-all to sil-opt tests.
[33m27fac39[m Build fix: last compiler version component not null terminated for atoi
[33m9d373d0[m Add _compiler_version build configuration
[33mdf8df37[m [cast-optimizer] Do not introduce useless Swift->ObjC or ObjC->Swift conversions.
[33m7122a82[m Improve alias analysis for projections.
[33meb4f464[m Protocol conformance: handle derivable requirements before same-named requirements.
[33m373a73e[m Map from an arbitrary requirement to a related derivable requirement.
[33mdd9f28e[m IRGen: Emit protocol conformances on the parallel IRGen path too.
[33m69981a6[m Fix a handful of compiler_crashers were failing on OS X but passing on Linux
[33m28c8d0b[m Remove duplicate compiler_crashers
[33mfb7c13b[m [test] Remove unused input file.
[33mec19ec1[m [CodeComplete] Avoid completing type names in parameters if the parameter names are not given. rdar://21727063
[33m49e5130[m Allow inout closure param type to be inferred from context or usage.
[33me8b85ac[m [test] Add a test that will crash if we end up doing unnecessary typechecking from the secondary file.
[33ma997215[m LICM: Allow hoisting sideeffect-free apply instructions out of a loop.
[33mec35cc8[m CSE: Allow elimination of sideeffect-free apply instructions
[33mb8d8897[m [let-properties-opts] Don't remove assignments to let properties from initializers (part 2).
[33m69ee802[m Clean-up code after copy&paste. NFC.
[33mfe78e77[m silence some warnings.
[33mdd46635[m silence a warning in ClassHierarchyAnalysis.  It isn't clear to me what this code is doing though, a simple "return ProtocolImplementationsCache[P];" seems like a fine implementation of this method.  Someone more familiar with it should check though!
[33md100144[m Add some trivial tests of call graph output.
[33mdbd2a86[m [let-properties-opts] Don't remove assignments to let properties from initializers.
[33m617bd47[m Add an LLVM cl::opt to aid in generating call graph tests.
[33m864cc29[m Remove timeout tests for now
[33mb8c5f50[m Update 'Failable Initializers' proposal with feedback from Jordan Rose and Joe Groff
[33ma0f670b[m Add getMemBehavior utility functions to SideEffectAnalysis.
[33m1bbf62d[m Extend ClassHierarchyAnalysis to collect information about protocols and all their implementations.
[33m65b7666[m Omit needless words: stop introducing "body" for usingBlock/withBlock.
[33m9b00871[m Omit needless words: make "Type" a skippable suffix.
[33m5b4d029[m Add missing macosx requirement to test
[33md466d9b[m SILGen: Re-work C function pointer conversion diagnostics
[33m3f6d881[m Sema: Diagnose @convention(c) conversions that capture generic parameters
[33m533f42d[m Closures and local functions only capture generic parameters if necessary
[33m2afeb10[m SIL: withCaptures parameters were dead, NFC
[33m636d194[m SILGen: This test passes nowadays
[33ma0609ae[m Fix typos
[33m9fcf7f1[m Import latest compiler crashers and regressions from practicalswift
[33m79cf08b[m Release note for rdar://problem/21683348
[33m7ae77cd[m New proposal for designated initialized failure
[33m3ace989[m [CodeComplete] Teach type context analyzer to handle pattern initializer. rdar://22804344
[33m034ec91[m [AST/PrintOptions] Refactor PrintOptions::printInterface(bool) and introduce separate printForDiagnostics() function.
[33m097a30b[m Add release notes for AnyGenerator API change.
[33m9c87df9[m Add a test case for r32148
[33m921a951[m Fix a compiler crasher with replaceAllUsesWith in LLVMARCOpt.
[33mecc7cc0[m Use LLVM RC Identity for LLVMARCOpt Retain/Release code motion.rdar://22774326
[33m2b546cd[m Implement bridgeobject_retain/release merging in LLVMARCContract. rdar://22108790 recommit for r32132.
[33m1c0bb69[m stdlib: add removeFirst() and removeLast() functions to slices
[33m7a255a9[m [CodeComplete] Teach type context analyzer to handle return statement. rdar://22788321
[33m55c6c8b[m Revert "Implement bridgeobject_retain/release merging in LLVMARCContract. rdar://22108790"
[33mc2aee84[m Omit needless words: drop "with" and "using" leading subsequent parameters.
[33m158a2b1[m Omit needless words: remove the Ref/Ptr type-stripping rule.
[33m7d6babd[m Omit needless words NFC: factor out options for OmissionTypeName.
[33md695f35[m StdlibUnittest: rename SpliceTest to InsertContentsOfTest
[33mf761227[m stdlib: simplify AnyGenerator API
[33ma2fa938[m Omit needless words: unspecialized collections have "Object" element type.
[33m0e26956[m Omit needless words: function pointers/references map to "Function".
[33mddd5269[m IRGen: Assume a 'once' predicate has been set after initialization.
[33ma75c28d[m Omit needless words: split first selector after omitting needless words.
[33m3eb7000[m Implement bridgeobject_retain/release merging in LLVMARCContract. rdar://22108790
[33mb9e2e1f[m Make the ctors and create functions for SIL instructions private.
[33mb71ebde[m Omit needless words: "flatten" is a verb.
[33mf3b20a4[m Omit needless words: strip context type from the name prefix consistently.
[33m9bfc4c4[m More conversion to using SILBuilder for instruction creation.
[33m8b869e1[m [CodeComplete] When completing import statements, show all visible modules without filtering out the already imported ones. rdar://22788409
[33ma3bd2b5[m Omit needless words: treat NSObject<Proto> as "Proto".
[33mdfc48c8[m [CodeComplete] Add type relation descriptor when completing return statement. rdar://22788321
[33mc9f43c8[m LLVM level RC identity, strip off pointer casts as well as reference forwarding for some of the entry points. rdar://22774326
[33mad3aa3a[m Let DeadFunctionElimination delete methods which are dead in a base class but not in a derived class.
[33mcdabf64[m [CodeComplete] Make code completion available for returnStmt of global func decls. rdar://22282116
[33m55e93bb[m Omit needless words: map the type id<Proto> to "Proto".
[33m65b7e6d[m Omit needless words: "customize" is a verb.
[33m8e6d766[m Omit needless words: strip result type info from both sides of a zero-argument method.
[33m8185007[m Omit needless words: "file", "name", and "point" are terrible verbs.
[33m9571223[m Update the callee sets in the call graph if dead functions are removed.
[33m48e1bcb[m SILGen: Optionalize NS containers when necessary for a func-to-block thunk.
[33mcfabe23[m Relax the call graph verification for single callees.
[33m130e79f[m KnownIdentifiers: avoid generating 'Id__value', which is a reserved identifier
[33ma5ee957[m Change {reverse_,}subregion_iterator::reference to be unsigned.
[33m8f001ed[m Use a SILBuilder in SILExtract rather than calling a ctor.
[33m865f8c1[m Fix linux build by providing iterator traits for subregion_iterator, reverse_subregion_iterator.
[33m384ec05[m stdlib: stop using Builtin types in UnicodeScalar
[33m6023823[m Revert "Fix linux build and make LoopRegionID a real pod instead of just trivially copyable."
[33ma850654[m Fix for case sensitive filesystems. NFC.
[33mcc00d9a[m Fix linux build and make LoopRegionID a real pod instead of just trivially copyable.
[33m9944479[m Use SILBuilder throughout SILCombine.
[33mbaab544[m [loop-arc] Add in a new analysis called LoopRegion.
[33mf9c45e1[m Fix up comment specification of decl-sil to make it clear that a decl-sil-body is optional.
[33mca8d27e[m Add in EnumeratorRange<T> and swift::enumerate().
[33m33a99b6[m Store a reference to SILBuilder in SILCombine.
[33m48ba32a[m Use SILBuilder to create new instructions.
[33m0b8642e[m Use a SILBuilder rather than calling create.
[33m627a182[m Omit needless words: split the base name when the first parameter is defaulted.
[33m4375a46[m stdlib: rename Int**.value and Float**.value to _value per naming convention
[33m720d49b[m update comments for swift_retain, i.e. it returns no reference now
[33m768a601[m Add retain_n entry points to SwiftAA. rdar://22765670
[33me7ac158[m opt exponent tests for leastNormalMagnitude/2 out on arm.
[33mfa273b5[m Fix the new FloatingPoint prototype to compile and pass on iOS
[33m406fe20[m Add forward declarations for SILInstruction.
[33mefeb814[m Clang importer: Centralize the computation of optionality for parameters. NFC
[33me71531e[m Improve call graph verification.
[33mfde25af[m Callgraph update fixes in the inliner.
[33m33193ef[m Strength reduce unknownRetain to retain. when an object is passed to unknownRetain and retain, the unknownRetain can be strength reduced to retain.  same for unknownRelease and release.
[33m528c700[m Update call graph in FunctionSignatureOpts.
[33mab9c735[m Fix recent build breakage I caused.
[33m75385d0[m merge multiple unknownRetain/unknownReleases to unknownRetain_n/unknownRelease_n rdar://21945003
[33m6fe7d89[m This is part of a series of commits to remove reference forwarding for some of the ARC entry points. rdar://22724641. After this commit, swift_unknownRetain will forward no reference.
[33mdca508b[m This is part of a series of commits to remove reference forwarding for some of the ARC entry points. rdar://22724641. After this commit, swift_retain_noresult will be completely replaced by swift_retain. LLVMARCOpts pass is modified NOT to rewrite swift_retain to swift_retain_noresult which forward no reference.
[33m9d2dd5e[m Zap unused variable; NFC
[33mba64ddb[m Update call graph in dead function elimination.
[33m0e3ef0c[m Revert "Omit needless words: split base names on the last preposition."
[33m44b8d45[m Clean up inference of default arguments from imported APIs (mostly).
[33m774ab5a[m Add some utility functions in CallGraphEditor.
[33m311f75b[m Keep the call graph updated in SILCombine.
[33mbc3fe16[m This is part of a series of commits to remove reference forwarding for some of the ARC entry points. rdar://22724641. After this commit, swift_retain will return no reference and LLVMARCContract pass is modified NOT to rewrite swift_retain_noresult to old swift_retain which forwarded the reference.
[33m090e73c[m Remove return value from recursivelyDeleteTriviallyDeadInstructions.
[33m628b7d7[m Let AllocBoxToStack invalidate the call graph.
[33md9b26bf[m Remove dead function argument.
[33m6545c6a[m Update the call graph correctly when creating a new function.
[33mbafd13d[m Don't store root nodes in the call graph.
[33m1665d2f[m [docs] Write down what @transparent does and doesn't mean.
[33m277483f[m [sil-devirtualizer] Address Mark's review comments
[33ma2e1dc5[m stdlib: remove some workarounds for compiler bugs from ExistentialCollection
[33m2129b65[m Add debug scopes to destructors.
[33m5e14a90[m Re-enable the SIL Verifier for debug scopes of debug instrinsics.
[33mbec486b[m LetPropertiesOpts: Fix this use of SILClonerWithScope to pass the destination instead of the source function.
[33mf7818cf[m Fix these uses of SILClonerWithScope to pass the destination instead of the source function.
[33mcc83aff[m GlobalOpt: Fix this indirect use of SILClonerWithScope to pass the destination instead of the source function.
[33m121ef3e[m Revert the series of commits for removing the return value from swift_retain_noresult.
[33m36f04d1[m fix a build break on linux for swift_retain returns no reference.
[33m4e46dac[m Completely replace swift_retain_noresult with swift_retain. this is part of a series of commits to remove reference forwarding for some of the ARC entry points. rdar://22724641. After this commit, swift_retain_noresult will be completely replaced by swift_retain and LLVMARCOpts.cpp will no longer canonicalize swift_retain to swift_retain_noresult as now swift_retain returns no reference.
[33mdb77b54[m StdlibUnittest: if the stacktrace is empty, don't print "stacktrace:"
[33mcebd289[m fix a build break on linux for swift_retain returns no reference.
[33m955e4ed[m Change swift_retain/swift_retain_n to return no value. this is part of a series of commits to remove reference forwarding for some of the ARC entry points. rdar://22724641. After this commit, swift_retain will be the same as swift_retain_noresult, returning no reference. LLVMARCContract pass is also modified NOT to rewrite swift_retain_noresult to the old swift_retain which forwards the reference.
[33m9335511[m [Parser] Better recovery from parsing errors in RepeatStmt so that indentation works. rdar://22713926
[33m53de8f9[m Add math.h to the Glibc module
[33m087148b[m [sil-devirtualizer] Support devirtualization of methods defined by protocol extensions
[33m120ac75[m Move the glibc module to stdlib/public
[33m4619e24[m Print the known callers of each function when printing the call graph.
[33mf55d67c[m Rename isDead() on call graph nodes to isTriviallyDead().
[33maee2edf[m Use glibc instead of darwin on Linux, remove use of ffs.
[33mf63ab9f[m [ASTPrint] Still print extended types even though they err.
[33m4dd12c6[m Make CallGraph::print do something in release builds.
[33m5af5456[m Unindent code in call graph printer anonymous namespace.
[33m7fea483[m Avoid trying to close stdout twice in sil-opt.
[33m42aeba5[m Suggested by Jordan and Michael, use '=delete' to prevent constructor from being called.
[33m2ba1540[m Make sure a problematic constructor will not be added in future.
[33m8722624[m Move the callgraph nullptr checks to the CallGraphEditor.
[33me9d9242[m Don't patch TypeReprs with the 'DynamicSelf' type.
[33ma2eb979[m The doc builder doesn't like upper case Swift in code-block directive.
[33mbc66481[m First draft of FloatingPointType proposal.
[33m4f598ef[m Put local struct in anonymous namespace.
[33m2e778a5[m Remove unused header.
[33m1434728[m Fix spelling of local variable.
[33m9b2db35[m Add a CallGraphPrinter pass.
[33m452baaf[m Fix call graph construction for class_method.
[33m8fdceea[m Make it clear that this is a proposal and not a plan of record.
[33m979e76c[m Debug Info: Fix a bug in BasicBlockCloner where the cloned debug scopes were replaced with debug scope of the destination BB, losing inline information in the process.
[33mc040e33[m Add a comment describing the conversion from SourceRange to CharSourceRange.
[33mf5a085e[m [test] Make the test case from r31995 exercise the failure path too.
[33mecd8360[m Correct typo.
[33m7f6a8b1[m Remove the constructor of CharSourceRange that takes SourceRange; And add a utility function at lexer that converts SourceRange to CharSourceRange.
[33m62b5490[m Reapply r31960: Use side effect analysis in alias analysis.
[33mf1ceaac[m Add the Swift thread-safety proposal.
[33mcf2ddf8[m Teach the expression-to-pattern mapping not to use getBoundType().
[33mca3e396[m Add back two recently-fixed tests that accidentally got unstaged.
[33m7a3f05a[m Reduce dependency on IdentTypeRepr::getBoundType().
[33m23bb1b8[m Do not count the size of bound generic functions as unbound generic functions.
[33m682e432[m [SyntaxModel] Adjust the end loc when converting from SourceRange to CharSourceRange. rdar://22676599
[33m436f5d9[m re-add some accidentally removed tests.
[33m9a81de0[m Compute the code size of Swift generic functions as a separate category.
[33mea7678c[m Produce separate code size stats for C++ and ObjC.
[33m3648650[m Omit needless words: default more pointer-like types to nil.
[33m54d575e[m Move definite-init test to where they belong.
[33md08fd38[m fix <rdar://problem/20918869> Confusing diagnostic for @convention(c) throws
[33mc426d08[m Dust off the release notes, making way for exciting new content!
[33mf0aa5aa[m revert unintended change.
[33m92fc60f[m fix rdar://22387625 QoI: Common errors: 'let x= 5' and 'let x =5' could use Fix-its
[33m49ceee6[m Remove duplicated word in comment.
[33m7670445[m swift_unknownRetain_n returns no value on linux. we are moving towards returning/forwarding no object for swift_unknownRetain_n on Mac and Linux. rdar://22724641
[33m3fdfd1a[m [CodeCompletion] Fix assertion failure with curried function
[33m42c470a[m Debug Info: Add a testcase for the scoping of patterns bound in an if stmt.
[33m95d3851[m Debug Info: Ensure that patterns bound in a while stmt end up in their own debug scope.
[33m7eccc60[m Debug Info: Ensure that patterns bound in a for stmt end up in their own debug scope.
[33md1ec8a2[m Debug Info: Ensure that patterns bound in a foreach stmt end up in their own debug scope.
[33ma42531e[m Tweak diagnostic message when importing the current module.
[33me1e439d[m Fix test case for unowned retain. weak ref count cant go to 0 before the object is deallocated
[33m524a6f9[m SideEffectAnalysis: avoid recomputing the call graph whenever it is not there.
[33m64b1cd6[m [CodeCompletion] Treat top-level variables as local in top-level completion
[33m275daaf[m recommiting. r31989. Implement weak/unowned retain_n/release_n entry points. rdar://22629226
[33mfff3239[m Revert "Implement weak/unowned retain_n/release_n entry points. rdar://22629226"
[33m206673b[m Implement weak/unowned retain_n/release_n entry points. rdar://22629226
[33m4dcf290[m Add ObjC-specific test cases to separate file. post-commit for r31902
[33m82fe88f[m Improve text dumping of call graph.
[33mfa05c0b[m Allow definition of local generic types inside non-generic functions.
[33mcc3c73a[m [ASTPrint] Add an option to avoid printing unresolved extension decls. rdar://22676315
[33m71284a8[m Omit needless words: Unsafe(Mutable)Pointer and Selector have 'nil' defaults.
[33m14abb4e[m Fix test for dead function elimination.
[33mf805577[m Revert "Use side effect analysis in alias analysis."
[33m1ae7133[m [test] Add more tests to the code completion of assignment exprs.
[33m838759d[m Omit needless words: remove arguments that match the default arguments.
[33mdc82031[m Omit needless words: fake defaulted imported optional and option-set arguments.
[33m2f0fc4c[m Omit needless words: split base names on the last preposition.
[33mafc112c[m CSE: We claim to preserve the call graph - let's make it so
[33mf08a4ff[m SILCombine: Remove stale edges for try_apply instructions from the callgraph
[33m4b8a5cf[m Lex single-quote string literals but emit an error if they're encountered.
[33mdd97410[m IRGen: Check class constraint when casting metatypes to AnyObject.Type.
[33m0a22034[m GameplayKit overlay: add explicit tvOS availability
[33mbd77eea[m ClangImporter: Code review feedback from Jordan Rose for r31924
[33m2d0c1a0[m [CodeComplete] Add type relation descriptors to the member completions of assignment expressions. rdar://22706743
[33mfc1e848[m Copyright year
[33mba677a9[m Implement bridgeObjectRetain_n/Release_n in swift runtime. rdar://22108790
[33m2f6f4a2[m Add a workaround to not produce local variables for capture list arguments like "[weak self]". The better solution would be to require all variables to be described with a SILDebugValue(Addr) and then not describe capture list arguments (tracked in rdar://21185379).
[33m242859e[m [CodeCompletion] Avoid expensive top-level lookups in type-specific completion
[33m253d56c[m Use side effect analysis in alias analysis.
[33ma03da9e[m [CodeCompletion] Show expected nominal types from other modules
[33m415354f[m Add support to the call graph for class_method.
[33m4d18947[m [sil-devirtualizer] Refinements of speculative devirtualization
[33m3c792e4[m Re-factor the computation of indirect sub-classes in ClassHierarchyAnalysis. NFC.
[33m4f11400[m stdlib: fix the comment on removeFirst() to not refer to the 'n' parameter
[33me274f7b[m Don't favor exploring potential bindings of type variable if those bindings only bound the type variable from above with existential types.
[33m5fa75a2[m Avoid collecting type variable types as results, as an attempt to fix the following bot failures:
[33mff7da42[m A first version of the side-effects analysis.
[33mea9117c[m [ClangImporter] Prefer -Xcc options, then -F search paths, then -I paths.
[33me6d0ee0[m Name lookup: add some assertions in an attempt to catch a bug.
[33m0c71c3e[m Update @c proposal with some feedback from Jordan Rose before I forget and lose the e-mail thread
[33m2e1410b[m Add an << operator to pretty-print SILInstruction::MemoryBehavior.
[33mf3f0858[m Keep Passes.def sorted.
[33m2cf8167[m AST: Correct scoping of 'while' condition bindings.
[33m5c2b9f2[m [sil-devirtualizer] Test for a static type of the instance should be the first one when performing a speculative devirtualization.
[33m611a053[m Fix the comment and put it at the right place. NFC.
[33maffab71[m Reformat to reduce indentation. NFC.
[33mb468f9f[m Add a way that SILAnalysis can retrieve (and store) other analysis which they depend on.
[33mf73e2e6[m Register SILAnalysis classes directly in the constructor of the PassManager.
[33me809fbd[m Draft proposal for out-of-process heap object introspection
[33m5c5ed63[m add a use of an unused variable, it seems that an unused 'foreignCandidate' might be a bug?
[33m0780313[m remove some unused variables & member var
[33m6499f44[m [simplify-cfg] Improve checked_cast_br jump-threading
[33m783001b[m [sil-devirtualizer] Make use of the fact that the exact type of the instance is known on a success branch of checked_cast_br [exact]
[33md75d818[m Reformat to reduce indentation.
[33m7ef312e[m stdlib: add comments for Set.contains()-insert() pattern in tests
[33m8d67a4a[m [CodeComplete] Propagate type relation descriptor to the first argument, or the only argument, of call exprs. rdar://22688827
[33m4acbf71[m [CodeCompletion] Expose the code completion kind NFC
[33m0235967[m ClangImporter: Support unnamed struct and union types
[33m7434e7d[m Change PostOrderFunctionInfo::get{PO,RPO}Num() => PostOrderFunctionInfo::get{PO,RPO}Number(). NFC.
[33mcf19c6c[m stdlib: format a code snippet as a code block
[33m2ff89aa[m stdlib: fix comment on ArraySlice.startIndex
[33m16bd644[m [IRGen] Remove an extra null comparison in 'exact' checked_cast_br.
[33m99d98c9[m Cleanup the testcase.
[33m6794458[m stdlib: improve index invalidation guarantees for removeFirst()
[33mda2123c[m [stdlib] Integers Prototype: fix protocol names
[33m45b740b[m [stdlib] Integers Prototype: another test.
[33m3f16528[m [stdlib] Integers Prototype: generalized conversions
[33m9f65201[m [stdlib] Integers Prototype: @transparent/@inline(always)
[33md5661b8[m [stdlib] Integers Prototype: make InPlace the intrinsics
[33m66109c1[m [stdlib] Integers Prototype: renaming
[33md4922f3[m Update to more meaningful param name.
[33m1cb8468[m [CodeComplete] Preserve call expr when code completion token appears in the first arg.
[33mec4e469[m [CodeComplete] Introduce code completion expr to better preserve the context of the code completion token in ASTs.
[33m398e923[m ASTPrinter: when skipping parameter names, indicate argument labels when they aren't the default.
[33m6aa2d88[m swift_unknownRetain forwards the heapobject in the runtime, i.e. in stdlib/public/runtime/SwiftObject.mm
[33m16016ab[m Change the leaks detector to use Lazy so that we leak it on exit rather than invoking a static destructor.
[33mf78fc20[m IRGen: Remove workarounds for rdar://problem/22467267.
[33m12e0e02[m Runtime: Mixed-sign arithmetic is hard
[33m64135ef[m Implement unknownRetain_n/Release_n entry points rdar://21945003
[33m27d6f8a[m fix <rdar://problem/22312114> if case crashes swift - bools not supported in let/else yet
[33m7a638eb[m [stdlib] Integer prototype: expose constituent words
[33md4fd957[m [stdlib] Integer prototype expansion
[33m07c4732[m [stdlib] Integer Prototype: get most signifcant bit
[33me726cf0[m [Parser] Return statement should not expect expression when the following token is one of #if, #elseif, #endif and #else. rdar://21729212
[33m29004fa[m Fix -Wnull-conversion warning in diagnoseCalleeResultContextualConversionError
[33mfd820f5[m Runtime: Factor out _dynamicCastToFunction.
[33mff45147[m Re-enable this testcase after some minor tweaking. rdar://problem/22654702
[33m2115393[m Fix off-by-one error in histogram dumper.
[33me47065b[m Dial back the specificity of these diagnostics a bit to not mention Float80 to avoid breaking test on targets that lack it.
[33m96eaa14[m Fix an arbitrary restriction where we would not propagate the result type of call expression onto a callee when it was a binary expression.  Doing this requires improving the diagnostics for when the contextual result type is incompatible with all candidates, but that is general goodness all around.
[33m108e6d0[m Re-apply r31875: [sil-global-opt] Add a new pass "let-properties-opt" to propagate values of non-static let properties with compile-time known const values into their uses.
[33m5e7b067[m Add an example of a poor diagnostic.
[33m57ba78e[m Runtime: Fix goto-fail-ism in function casts.
[33mf8c6e46[m remove the Failure::IsNotOptional failure mode, as CSDiags does a better job of providing contextual diagnostics (e.g. producing the warning in Constraints/dynamic_lookup.swift).  This drops a specific diagnostic about force casting the result of as! which was added in the Swift 1.2 timeframe to explain the change in cast semantics.  Now that as! has been around for a long time, it is more confusing than helpful.
[33mebe67f3[m fix <rdar://problem/22490787> QoI: Poor error message iterating over property with non-sequence type that defines a Generator type alias
[33m3dfda6c[m remove unused variable in omitNeedlessWords
[33mbde8d3b[m remove an unused variable in SILCombiner
[33m5a6d1c9[m SILGen: Better handle function conversions with both a signature and representation change
[33md313fa7[m SILGen: @convention(block) bridging thunks need to copy blocks in optionals
[33md569159[m [Token] Trim surrounding whitespace when querying the ranges of tokens' associated comments. Need this for rdar://21607719
[33m3d45355[m Install Glibc module.map in the stdlib install component
[33m18e203d[m XFAIL failing debug info test.
[33m1309272[m Revert "[sil-global-opt] Add a new pass "let-properties-opt" to propagate values of non-static let properties with compile-time known const values into their uses"
[33mb2630f5[m Remove old leaks runner, we have a more accurate leak checker in the runtime.
[33ma2d7837[m [sil-global-opt] Add a new pass "let-properties-opt" to propagate values of non-static let properties with compile-time known const values into their uses
[33m83cef73[m Fix no-asserts build.
[33m0bf684c[m Runtime: Fix leak in failure path for dynamicCastClassToValueViaObjCBridgeable.
[33m550bcb1[m Omit needless words: always split the base name/first argument label on "With".
[33m48e9be1[m [sroa-bb-args] Make sure to not use a terminator location for non-terminator instructions.
[33mbec45a8[m [sink] Avoid sinking instructions into loops.
[33mdf7eaad[m [sink] Fix a testcase that the verifier rejected.
[33m458469c[m [sink] Add an optimization pass for sinking code.
[33ma547a35[m Clean up and improve call graph statistics dump.
[33mf596579[m Verify SIL modules at the beginning and at the end of the SIL optimization pipelines, if -sil-verify-all is provided
[33mdbe1230[m When an assignment fails, check isSettable instead of asking for a setter.
[33m4cef619[m Revert "Verify SIL modules at the beginning and at the end of the SIL optimization pipelines, if -sil-verify-all is provided"
[33m141b8f8[m Verify SIL modules at the beginning and at the end of the SIL optimization pipelines, if -sil-verify-all is provided
[33m66e13af[m Add support for whole-module optimizations for SIL files.
[33m29cfc44[m COWArrayOpt: Don't stop looking at other uses just because we deemed one as safe
[33mbc91897[m Remove LLVM_INITIALIZE from swift-demangle.
[33mfeef4be[m [docs] Remove CInteroperability.rst.
[33m255d584[m [docs] Modernize the Access Control doc.
[33maab9094[m [docs] Reflow Access Control document for 80 columns.
[33ma2f4f7d[m Omit needless words: usingBlock/withBlock -> "body"
[33m7b90c4f[m [test] Add several tests suggested by Argyrios.
[33me03ac17[m Do not specialize calls in functions marked optimize.sil.never.
[33m8741999[m Update Swift version for docs to 2.1
[33m5fbdc9c[m Update Swift version to '2.1'.
[33mcf4c20b[m Create a call graph edge for every FullApplySite.
[33m967c2d8[m Dump memory allocation info with call graph stats.
[33mb4dfd33[m Revert "bindings-build-record.swift passes on Linux"
[33mde8c7a3[m Provide muloti4 on all archs, not just arm64.
[33m742f65c[m [stdlib] Fix comment of _ColorLiteralConvertible, NFC.
[33m5ac9e39[m [ASTPrint] Make sure we hide the new literals (color, image, etc.) from the stdlib interface.
[33me72729a[m bindings-build-record.swift passes on Linux
[33m6dd6fff[m [CodeComplete] Rename ExpectedTypeRelation:Undetermined to ExpectedTypeRelation::Unrelated.
[33ma7c0434[m [utils/apply-fixit-edits.py] Fix replacing a string range when there are unicode characters.
[33m484ce04[m Fix the test: Use a fixed sized Int32 instead of Int.
[33m3ff48d9[m Runtime: Fix memory leak when swift_dynamicCast does a copy_on_success bridging cast.
[33m081f647[m Fill in partial comment
[33m686505c[m Runtime: Rename RelativePointer types to be more descriptive.
[33m9eea4d3[m IRGen: Rename TypeMetadataAccessStrategy -> MetadataAccessStrategy.
[33m65ce0a3[m [CodeComplete] Add type relation descriptor to member access syntax. rdar://22629291 By analyzing the context of a member access expression, we can prioritize the member completion results by the expected type. As the initial step, we support call arguments as context.
[33m2921614[m Omit needless words: use hanging "With" as a reason to name the first argument.
[33mc5cb633[m Omit needless words: don't produce parameters with the argument label "with".
[33m406e7c6[m Omit needless words: generalize the scratch space for strings.
[33m0c26b74[m Fix FileMatch careless mistake.
[33m1e1b3e8[m Adopt upstream API change.
[33m34c7d7a[m Determine if an APInt is zero by using bool APInt::operator() rather than APInt::getZExtValue().
[33mb458a5d[m Minor refactoring of call graph construction.
[33mb4ac4ee[m Fix 80-column issue.
[33m046f7b8[m Store DataLayout in IRGenModule rather than just a reference to it. The reference was pointing to an already deallocated local variable (in multi-threaded compilation).
[33med806da[m [test] Tweak test to avoid issues.
[33m3f49f04[m Update modulewrap for changed LLVM API.
[33m6f2a627[m Update lldb-moduleimport-test for changed LLVM API.
[33m1e3a73e[m Update commit for change in DataLayout API.
[33mf6d8a1c[m Handle the case of an OpenMP type from clang by saying we won't handle it.
[33m873c8f4[m Add missing llvm datalayout to two tests.
[33me864f02[m In all executables make sure to completely initialize LLVM.
[33m55e781b[m Add 'distinct' keyword to two llvm ir test cases's debug info.
[33m6d74962[m Adapt all DebugInfo testcases to the new upstream LLVM metadata format.
[33m003ab2f[m [test] Drop check for LLVM function attributes.
[33mc03adef[m Fix "Adjust to InputArgList being a move-only type"
[33mb1ecf97[m More InputArgList troubles.
[33mf9eab62[m Update LoopInfo for changes to LLVM.
[33m59099b6[m [ClangImporter] Make DetailedPreprocessingRecord a first-class option.
[33m0d6cd9b[m [ClangImporter] Remove broken handling of -detailed-preprocessing-record.
[33m05ad340[m [ClangImporter] Update for Clang API changes.
[33mf196771[m Adapt IRGenDebugInfo::emitVariableDeclaration() to new LLVM API.
[33mc7cdf34[m Update module format handling to match upstream API.
[33mb564b41[m Update for DataLayout changes
[33md6cdce1[m Adjust to InputArgList being a move-only type
[33m72f7476[m Adjust to upstream changes in the ModRefResult enum
[33m0606d58[m Remove calls to raw_svector_ostream::flush()
[33mc47a6d7[m [stdlib] BigInt prototype: literal conversion
[33ma48a0b0[m [sil-combine] Re-factor the implementation of propagateConcreteTypeOfInitExistential.
[33m72c5c3e[m Two changes:  - Enhance the branch new argument label overload diagnostic to just    print the argument labels that are the problem, instead of printing    the types inferred at the argument context.  This can lead to confusion    particularly when an argument label is missing.  For example before:
[33md9ea4b9[m remove dead local.
[33madccd0a[m Fix <rdar://problem/19962010> QoI: argument label mismatches produce not-great diagnostic by wiring visitApplyExpr up to diagnose argument label mismatches with the existing diagnoseArgumentLabelError mechanics.
[33m123d749[m remove a dead local.
[33mf820972[m [CodeComplete] Avoid resetting code completion kind except for expected cases. rdar://22619751
[33mb71984b[m Reformat to reduce indentation.
[33m41d84d2[m For direct calls, eliminate a memory allocation in the call graph.
[33m81132b5[m [stdlib] Integer prototype: flesh out basic tests
[33m95a8dc1[m [stdlib] Integer prototype: fix bit-width
[33mdd2c8bf[m [stdlib] Integer Prototype: factor out fixed-width protocol
[33md7b5ea5[m Split off attr_objc_override from attr_override test
[33m3803938[m AST: Get some @objc tests (stupidly) passing on Linux again
[33m9242f6a[m ClangImporter support for bitfields
[33mdf3dfeb[m Allow inout types in foreign function signatures, NFC
[33m7cf7298[m Re-apply "Fix linkage of 'static inline' Clang-imported definitions"
[33mdb4c6e4[m It is not necessary to return a quick look object for range - the summary takes good enough care of it
[33m2f6958a[m Rename canCallAnyFunction to canCallArbitraryFunction.
[33m1dd2b96[m Add a trivial helper function to CallGraphEdge.
[33mc41627f[m [utils] Add a script for picking up all .remap files in a directory and applying the edits therein.
[33m1d5e9e0[m [FixCode] Introduce '-fixit-all' option that, when -fixit-code is enabled, applies all fixits from diagnostics without any filtering.
[33m0e5c4b5[m [stdlib] Integer prototype: names suitable for stdlib
[33m7796e5f[m [stdlib] Integer prototype: more fleshing out LLVM capabilities
[33m8904872[m [stdlib] Integer prototype: flesh out LLVM capabilities
[33m69484f9[m [stdlib] Integers prototype: expose more of LLVM Ints
[33ma4a46e9[m [stdlib] Integers prototype: limit width to double word
[33m8269d81[m Revert "Fix linkage of 'static inline' Clang-imported definitions"
[33m33feabb[m SIL: Hack in getLoweredASTFunctionType() for bitfield accessors
[33mfc0a18b[m Fix linkage of 'static inline' Clang-imported definitions
[33mae6afdd[m Use StdlibUnittest for c_unions test, NFC
[33m0132ba1[m Sema: Move a function next to its only usage and fix a typo, NFC
[33md94674b[m some testcases for diagnostics that are still not good enough.
[33ma171e29[m Reimplement evaluateCloseness in terms of the existing decomposeArgParamType/matchCallArguments logic used by the rest of sema, instead of doing its own home grown (and really bad) argument matching stuff.
[33m52fd1c4[m fix some comments.
[33m5705791[m Fix for case sensitive file systems.
[33mdc6dead[m [simplify-cfg] Teach simplify cfg how to split struct/tuple BB arguments.
[33m3851b85[m [simplify-cfg] When eliminating dead args, remove any instructions that are trivially dead as a result of removing the dead argument.
[33madd135a[m [proj] Add support to projection for getting all first level projections of an aggregate type and reforming from that type.
[33mb22e830[m [local] Add an API that runs simplifyInstruction on all users of an Instruction.
[33m129c2b1[m Convert some 'typedefs' to C++11 'using'
[33m57bf399[m remove a dead method.
[33m4526cf7[m fix a few validation test failures introduced by r31745
[33mcbf1454[m This diagnostic improved causing the validation test to fail.  Instead of nuking the error lines outright, move it to the non-validation suite.
[33m3a50dfa[m improve the diagnostic a bit around non-lvalue exprs that are not lvalues because of the conversions involved.
[33m8ccb551[m fix <rdar://problem/22101775> error: '&' can only appear immediately in a call argument list
[33mb598e83[m don't print @lvalue in a diagnostic.
[33m6d87ec3[m Merge handling of all ApplyExprs into a single visitApplyExpr routine, instead of handling unary and binary ops specially.  NFC on the testsuite with the other stuff that went in.
[33mc9b6ece[m add a somewhat gross hack to CSDiag's to tell it to not retypecheck OverloadedDeclRefExpr or OverloadedMemberRefExpr when there is no contextual type information available.  The problem is that CSRanking will take a look at the various solutions formed by picking each member of the set, and will arbitrarily rank them against each other based on how specific the candidates are.  The problem with this is that the constraints on the candidates are being resolved by UnresolvedType, which means that we end up accidentally pruning the overload set too early.
[33m77caeda[m reduce indentation by using early exits, NFC.
[33mf76cb5b[m Comment cleanups etc, and fix the implementation of Solution::hasUnresolvedTypeVars() which is NFC since it has no callers.
[33m3f7b70e[m Make the testcase target independent.
[33m710ecfc[m [codemotion] Forward cond_br arguments during reference simplification.
[33m75b6282[m Revert "[stdlib] Integers prototype: expose more of LLVM Ints"
[33mffa4919[m Revert "[stdlib] Integer prototype: flesh out LLVM capabilities"
[33m8aeaf22[m Revert "[stdlib] Integer prototype: more fleshing out LLVM capabilities"
[33mda49bf2[m Revert "[stdlib] Move Low-Level Integers into stdlib"
[33m70030c1[m Canonicalize 'retain' instructions and allow roots that inspect non-exact checked_cast instructions.
[33m3c7cc74[m Canonicalize 'release' instructions and make them amenable to code motion.
[33mce7bcc3[m One second thought: keep the interface to computeTupleShuffle consistent: change its implementation to take a list of TupleTypeElt for both the from/to tuple type, but provider a convenience wrapper that takes the from/to tuple type as TupleType's.
[33m17c3ebb[m remove a function that is dead after r31728
[33m21acbd4[m refactor constraints::computeTupleShuffle() to take its first tuple as an exploded list of elements, which is more convenient for at least one caller.  NFC.
[33m9ab54bf[m r31728 fixed 17557899 (and several other) radars as well, add a testcase so we don't regress on it in the future.
[33m51385dd[m Missed a file in the previous commit.
[33mbab9b62[m reimplement the "function produces expected type 'XYZ'; did you mean to call it with '()'?" fixit hint in CSDiags instead of being a FixKind.  This resolves a number of issues with it, particularly that it didn't actually check to see if the function in question takes a () argument or not.
[33m9f01aa2[m revert the fix to rdar://22298549, it is causing a crash on the testcase in rdar://21692808
[33mf571e64[m Enhance visitCallExpr in the face of a contextual type.  Only perform the forced conversion to "_ -> T" if it will refine the type otherwise found by doing a non-contextual type check.  This allows us to diagnose calls to non-function values with more specificity, e.g. adding another case were we recommend "do" when using bare braces.
[33m1cfe994[m Revert "Canonicalize 'release' instructions and make them amenable to code motion."
[33mf831b53[m Canonicalize 'release' instructions and make them amenable to code motion.
[33m92ea1fa[m [CodeComplete] Update enclosed archetypes to the protocols they conform to.
[33mdb5f25d[m fix a compiler crasher that can happen when invalid code causes a SequenceExpr to get to CSGen.
[33mf8b12c6[m merge two tests
[33me7a86e0[m Finish up the last bit of work I plan on <rdar://problem/22333281> QoI: improve diagnostic when contextual type of closure disagrees with arguments
[33m1439bba[m move the special case closure diagnostics to CSDiag out of TypeCheckPattern, since the logic is specific to it and about to get more-so. NFC.
[33m44b35a8[m remove a bunch more Failure conditions that CSDiags ignores.
[33m86b47b8[m remove the TupleSizeMismatch failure mode and diagnose the problem in the mainline expr diagnosis stuff, giving us much better diagnostics on the cases in expr/closure/closures.swift.  This is part #2 of resolving <rdar://problem/22333281> QoI: improve diagnostic when contextual type of closure disagrees with arguments
[33m877fa0b[m remove some dead "Failure" cases that CSDiags already ignores because it handles them better in its expression-driven system.
[33m6619cf7[m Improve the diagnostics generated when the contextual type for a closure specifies some # of arguments but the closureexpr itself disagrees.  This is step #1 to resolving <rdar://problem/22333281> QoI: improve diagnostic when contextual type of closure disagrees with arguments
[33mdfc85ce[m teach the Swift diagnostics engine about the "s" modifier that clang has, used to pluralize integers in diagnostics.  NFC since it isn't used yet.
[33m17623e4[m This got fixed along the way <rdar://problem/22507759> QoI: poor error message for invalid unsafeDowncast()
[33m364cdc3[m fix <rdar://problem/22308330> QoI: CSDiags doesn't handle array -> pointer impl conversions well
[33m758d36f[m update a testcase to enable some commented out tests.
[33m20efd60[m ClangImporter code cleanups, NFC
[33mef18f42[m ClangImporter test cleanups, NFC
[33me06ed15[m [stdlib] Move Low-Level Integers into stdlib
[33m46e8a43[m [stdlib] Integer prototype: more fleshing out LLVM capabilities
[33mfca5e38[m [stdlib] Integer prototype: flesh out LLVM capabilities
[33mece9cd1[m [CodeComplete] Pre-compute generic type params when transforming archetypes in code completion results.
[33m9651b95[m Camel casing: cope with acronym/prefix conflicts when matching names to types.
[33m5b0423c[m Omit needless words: prefer removing leading redundant type information first.
[33m60b770b[m Omit needless words: <context type><preposition> --> <preposition>
[33me05ba14[m Omit needless words: abbreviate, standardize, and resolve are verbs.
[33m73f8b1b[m [stdlib] Integers prototype: expose more of LLVM Ints
[33m778d8d6[m Use isUnresolvedOrTypeVarType more generally, and fix a crash on the new testcase, handling unresolved subscript bases.
[33m7ad6eaa[m the previous patch improved 22308291 enough to consider it done.
[33m34ae9bb[m Fix <rdar://problem/22584076> QoI: Using array literal init with dictionary produces bogus error
[33mc8990c5[m Enhance ArrayExpr to keep track of the locations of its commas, NFC.
[33m69ceb20[m [stdlib] Simplify prototype using [sz]extOrBitCast
[33mc06cb23[m [stdlib] Begin prototyping new Integers
[33m5edf1ce[m [ClangImporter] Allow structs to be declared in multiple modules (too).
[33mb9ef0c4[m fix <rdar://problem/20065892> Diagnostic for an uninitialized constant calls it a variable
[33m6df189b[m [CodeCompletion] Restore scope depth in delayed parsing
[33m06b89db[m Fix typos
[33m977a087[m Documentation pages still had "Swift 1.0" in the title
[33mf12ccd5[m Proposal for @c attribute on function, struct and enum declarations
[33me1de95d[m Revert "[ClangImporter] Allow structs to be declared in multiple modules."
[33m46b89dc[m [test] Add a test for protocol composition type.
[33m1302350[m [ClangImporter] Allow structs to be declared in multiple modules (too).
[33m7960ca1[m Omit needless words: strip out prefixes that are redundant with the result type.
[33m86eb26a[m Factor out the matching of type names at the beginning of a name. NFC
[33mb42a30d[m [CodeComplete] For an archetype that is not Self derived, use the conformed protocol type (if any) instead of the archetype itself.
[33mde3eb70[m Let swift -modulewrap accept a -target option.
[33m5a5a1c9[m Make this test stricter.
[33m1d3af19[m Reformat createSwiftModuleObjectFile() for readability.
[33m63f889a[m clang-format modulewrap_main.cpp
[33mee13581[m Unconditionally use SWIFT_EXECUTABLE_NAME for ModuleWrap invocations.
[33m2fe26c9[m [CodeComplete] Get singly desugared type and update tests.
[33ma9fc83c[m Revert "[test] Update test for needless words." Bogus test failures on my local machine.
[33me6c67dd[m [test] Update test for needless words.
[33m21f3153[m Omit needless words: "Index" in the name matches "Int" or "Integer" in the type.
[33m213c6a5[m [CodeComplete] Teach archetype transformer to handle type alias.
[33m4925d24[m Omit needless words: "toggle" is a verb.
[33mda8959f[m Add an option to dump call graph statistics.
[33m6855398[m Omit needless words: "object" is a terrible verb
[33mc439f0f[m Omit needless words: remove plural forms of element names when the type is a collection.
[33m5d7004a[m hasSingleExpressionBody() returns true for void-coercion closures
[33m11c3f37[m [postorder] Update all passes to use new post order APIs.
[33md449fb5[m [post-order] Add an API to PostOrderFunctionInfo that maps a BB to its RPO and PO number.
[33mf811599[m Rename PostOrderInfo => PostOrderFunctionInfo to match other FunctionAnalysisBase subclass's function info.
[33mf6862e2[m Omit needless words script: set up target appropriately for the selected SDK
[33mc3497fb[m Omit needless words: allow removal of words following a gerund.
[33m271fc20[m Omit needless words: add some verbs found in Cocoa APIs
[33m8cf927d[m fix <rdar://problem/22436880> Function accepting UnsafeMutablePointer is able to change value of immutable value
[33m8c9eb1c[m Omit needless words: don't map a base name or property name down to a keyword.
[33m8ce50fb[m Omit needless words: only omit words when they are preceded by a verb or preposition.
[33md4109f1[m Walk into single-expr closure that have been coerced to void
[33m07a848c[m [CodeComplete] Address Argyrios' review comments.
[33m1b8cd94[m stdlib: Half the size of dictionary get/set operations inlined into user code
[33md90e01f[m [test] Throw away logic for detecting LLVM build directories.
[33m99febda[m Simplify the CMake-generated lit.py invocation.
[33mdf3dd45[m Revert "stdlib: Half the size of dictionary get/set operations inlined into user code" To unblock Swift master Incremental RA.
[33m932bb37[m stdlib: Half the size of dictionary get/set operations inlined into user code
[33me8c4c42[m Have external declarations appear in the bottom-up ordering of the call graph.
[33mc1833c9[m Add an assert in SILFunction.
[33m0de0d43[m Introduce a -modulewrap driver action that wraps a (merged) .swiftmodule inside a swift ast section in an object file so it can be passed to the linker. The driver automatically wraps merged swiftmodules iff the target is ELF.
[33md1e244c[m [Sema] Rename version range lattice operations. NFC.
[33m0a43e54[m [CodeComplete] Don't try to lookup members of null type
[33m1034a94[m reword a diagnostic to be shorter and hopefully more useful as suggested by DaveA.
[33mff93146[m [CodeCompletion] Check for null result from subst()
[33m08eda10[m [CodeComplete] Finish transforming archetypes to actual types in code completion results and update tests.
[33m845513d[m [ClangImporter] Always treat dispatch_block_t as @convention(block).
[33m802995d[m [test] Switch Dispatch tests over to StdlibUnittest.
[33m68b6a44[m [CMake] Make .def files show up in Xcode even if they're in lib/.
[33m1165aca[m [Sema] Suppress deprecation/availability diagnostics in branches with empty availability
[33m22456cf[m Replace operands rather than generating new instructions in a sil-combine.
[33ma17ebe2[m Add check to simplifyLocator for TupleElement.
[33mf75ac75[m [CodeComplete] Try to substitute archetypes with actual types in code completion results. When completing type members, teach the code completion engine to transform the archetypes appearing in code completion results to the actual types. NFC
[33me09bed2[m Omit needless words: stop dropping "With" indiscriminately.
[33me480ac6[m Omit needless words: don't drop the first argument label in initializers.
[33m6358c9a[m Omit needless words: Don't avoid keywords
[33m18ddc1c[m change the "fail to resolve locator to expr" case in overload canddiate emission give up instead of approximating an expr to complain about.  This sort of thing causes the bizarre diagnostics that don't make sense, and it is better to generate a more general ambituity error than something that doesn't make sense.  NFC since diagnoseGeneralOverloadFailure is nearly dead anyway.
[33m4f599f1[m Remove dead parameters from helper functions.
[33ma52434c[m Fix spelling in comment.
[33m605411e[m remove the LvalueObjectType locator, which is never used.
[33m16a5163[m Fix <rdar://problem/22519983> QoI: Weird error when failing to infer archetype
[33m659dde3[m simplify some code, NFC.
[33me991b13[m Linux install tarbal mechanics
[33mc9fb58c[m remove the CheckedCastOperand & AddressOf locators which are no longer needed. NFC.
[33mc26ed58[m remove IfThen/IfElse locators which are no longer needed.
[33mbe6da08[m remove the AssignSource and AssignDest locators, which are no longer needed.
[33md58dd6d[m If type-checking raised any errors, don't attempt playground transform.
[33mafb46aa[m [CodeComplete] When completing call args, not consider those overloads that are unlikely to be selected. rdar://22528276
[33m23b649e[m Change a handful of parameter names.
[33mfff17e6[m [Sema] Add join operation to availability version range lattice.
[33maaf7088[m [loops] Extract out loop simplification routines from LoopRotate.cpp into its own file, LoopUtils.{h,cpp}.
[33m06bfdbf[m Add missing "static" and comment.
[33mc6c9b26[m AliasAnalysis: Corretly handle the case of two global_addr referencing the same global.
[33mc6dda37[m Make some cl options static.
[33maeece6b[m stdlib: DRY and disable inlining of code to curb code growth
[33m314e5d9[m stdlib: Remove dead code
[33m55e4795[m stdlib: Fix formatting.
[33m4702660[m Fix leak of std::function in NominalTypeDecl::DelayedMembers
[33m66a3e8b[m Fix <rdar://problem/22344208> QoI: Warning for unused capture list variable should be customized
[33m18107bf[m fix <rdar://problem/22298549> QoI: Unwanted trailing closure produces weird error
[33m6d1b814[m fix a bug in code synthesized by the clang importer.  The "/*Implicit=*/true" marker isn't actually setting the implicit bit, it was setting the "trailing closure" bit, for something that isn't of function type.  The effect of this was to cause sema to eat the rawValue: parameter without requiring the label.
[33m337b52f[m Use AST function representation info instead of dropping down to SIL.
[33mf062afb[m fix rdar://22240342 - Crash in diagRecursivePropertyAccess
[33m1c3b391[m Don't allow function types that differ in SIL representation to be matched by SameType constraint.
[33m4ea7d1c[m fix <rdar://problem/22491782> unhelpful error message from "throw nil"
[33m6e8140b[m Handle debug-crash options in separate functions.
[33me273ae1[m Generalize lldb-moduleimport-test to accept object format other than Mach-O
[33me5cbfce[m Factor out the ObjC-specific tests of ASTSection.swift into a separate file so they can have separate requirements.
[33m95b5ff3[m Remove dead code.
[33mde90e57[m stdlib: Reformulate to make ARC's job easier
[33mbdb2edb[m With yaks properly groomed and infrastructure in place, we can now improve diagnostics around invalid references to unavailable declarations, resolving <rdar://problem/22491394> References to unavailable decls sometimes diagnosed as ambiguous
[33m379f5df[m Reimplement the diagnostics member resolution for SubscriptExprs to do a member lookup for subscript instead of digging already-looked-up candidates out of the constraint system.  This allows us to produce more specific diagnostics in failure cases and keeps subscripts inline with other decls being looked up.
[33m1e5c13a[m refactor the interface to performMemberLookup to pass in the components of the constraint that it needs, not a constraint itself.  NFC.
[33mb75517d[m fix the regressions on a few validation tests introduced by r31581.
[33m1fd4337[m Update description of the capture promotion pass.
[33m6652796[m Sort the passes in Passes.def.
[33m02396d3[m greatly simplify diagnoseGeneralOverloadFailure now that other stuff is carrying the heavy weight of what it used to do, and make ambiguous subscript references produce a more specific diagnostic.
[33mf148776[m fix a warning about newline at end of file
[33m8a8d8f1[m refactor some code so FailureDiagnosis::visitUnresolvedMemberExpr can use the same logic to diagnose candidate failure as diagnoseGeneralMemberFailure.  Also, add a testcase for a diagnostic we don't do a great job on.
[33m9bb4825[m fix a merge issue which broke r31577
[33mceafc03[m make CSDiags more tolerant of a contextual unresolved type, fixing a regression introduced by r31575
[33m28c7bf0[m Update mem2reg to promote loadable values with destroy_addr uses.
[33m55628a9[m Fix an overactive assertion: <rdar://problem/22470302> Crash with parenthesized call result
[33m7dba174[m Update call graph to allow for edges to external declarations.
[33mdce7a8b[m Remove call graph code for counting apply-of-builtin.
[33m0f4a6a1[m Add a header that we should be directly including.
[33mfbc27c0[m Use the CallGraphEditor to maintain the call graph in GlobalOpt.
[33m4f87158[m [Driver] Fix string comparison that was accidentally a pointer comparison.
[33mccd178e[m Remove unnecessary cast.
[33mea17b8d[m Replace dyn_cast with cast in some fragile code.
[33m01d40c8[m Use ValueBase::replaceAllUsesWith rather than SILValue::replaceAllUsesWith.
[33m7e452c0[m [docs] Bring the Driver docs reasonably up to date.
[33m213716f[m [Driver] Make relative path search cheaper on non-Darwin.
[33mff07c90[m [Driver] Fix comments. NFC.
[33mde2ecbb[m [Driver] Remove the notion of Tools, turn ToolChain into an Action visitor.
[33m4090107[m Fix leak in getDocComment()
[33m54f6bb4[m Fix leak of LookupCache
[33m8d656de[m Fix small leaks in markup parser
[33me4ae6a4[m IRGen: Avoid using the GOT for public symbols in the same TU.
[33m7936484[m Revert "IRGen: Avoid using the GOT for public symbols in the same TU."
[33ma8fb6ae[m IRGen: Avoid using the GOT for public symbols in the same TU.
[33m7e15a0d[m Add rdar references to FIXMEs for rdar://problem/22467267 workarounds.
[33m773eadb[m IRGen/Runtime: Populate the runtime protocol conformance table with relative references.
[33m68048a2[m [Driver] Linux: if you /do/ use -sdk, make sure it's used for linking too.
[33m9699965[m Move option out of #endif so we don't break release no assert builds.
[33m9a51543[m [aa] Add an option -cache-aa-results that turns off caching of AA results.
[33m216eaeb[m Add operator-- support for IntRange. This enables one to perform the operation reverse(indices(Collection)) and get a reverse order of indices.
[33m10f2ee0[m Executable tests for function type conversions
[33m9f7a750[m [CMake] Restore code that was previously guarded by "NOT MSVC_IDE".
[33m23749d2[m Remove the old fuzzer script.
[33m7c5d0f7[m Revert "On Linux, "/" is a perfectly reasonable default SDK."
[33m2b325a1[m [Driver] Remove some essentially-unused helpers from ToolChain. NFC.
[33m6d8e600[m SILGen: Add remaining type conversions to thunk emission
[33m0af82e6[m SILGen: Move optional and existential conversions to SILGenConvert.cpp, NFC
[33meb3d5e4[m Revert "stdlib: Move the darwin String implementation over to use the ICU library." Revert "Add test cases to exercise the native String vs cocoa buffer String path." Revert "stdlib: Add back a test I removed" Revert "stdlib: Fix hasPrefix,hasSuffix tests" Revert "stdlib: Add documentation for the cached ascii collation tables"
[33md9796fa[m implement witness_method support in CSE
[33mfb18dad[m [test] Fix test for new filename.
[33m9fd52b9[m stdlib: Instead of calling reserveCapacity in Array.init(_uninitializedCount)   directly construct a buffer of the right size
[33mf49b3da[m [test] Add test for assignment of unresolved members. rdar://15421477
[33mefb1978[m [InterfaceGen] Not printing '@rethrows' since we print 'rethrows'. rdar://22449614
[33m765fab1[m [CMake] Don't pretend to support MSVC.
[33m7ec4c4f[m Don't suggest using 'xcrun' when not on OS X.
[33mc1ab32e[m On Linux, "/" is a perfectly reasonable default SDK.
[33m442b76f[m [test] Split out Apple parts of Driver/sdk.swift. NFC.
[33m08ec823[m Add comments. NFC.
[33m9ba607f[m Checking substitution failures before retrieving results. rdar://22435209
[33mdc8ff9f[m [sil-global-opt] Remove unused global token variables emitted for use with "once".
[33mb5d964d[m Add a function to remove a global variable from a SILModule.
[33m24b89de[m Update test for non-ObjC runtime
[33m4e7a417[m Sema: Non-trivial function conversions now work
[33m4a09d72[m SILGen: Refactor existentials a bit more for use in thunks, NFC
[33mc58899a[m SILGen: Combine emitOrigToSubstMetatype() and emitSubstToOrigMetatype(), NFC
[33me90b03b[m AST: Remove obsolete FIXMEs from TypeBase::canOverride()
[33m43d620c[m IRGen: Export direct metadata symbols at the address point of the metadata object.
[33m1e4aa27[m fix <rdar://problem/22409190> QoI: Passing unsigned integer to ManagedBuffer elements.destroy()
[33mfa4490f[m Fix a test case that relied on a specific behavior of the optimizer.
[33mb7fea03[m Revert "Revert r31498 "Annotate thunks with the [thunk] attribute during SILGen.""
[33mbbbfae6[m Revert r31498 "Annotate thunks with the [thunk] attribute during SILGen."
[33m9b1ff7d[m stdlib: add a test that shows how to repeatedly call indexOf()
[33mf705c56[m Revert "IRGen: Export direct metadata symbols at the address point of the metadata object."
[33m8e2ce60[m IRGen: Export direct metadata symbols at the address point of the metadata object.
[33m3fc233e[m Refactoring, mainly to reuse code. NFC.
[33mf2e0624[m Support for viewing the call graph as dot graph.
[33m3610254[m Change some dyn_cast to cast.
[33ma24c051[m CMake: Cross compiling requires internal SDK.
[33m7a49d7e[m [codesize] Keep _print_unlocked in the swift dylib.
[33mc96a127[m [codesize] Force _dictionaryBridgeToObjectiveC to stay in the swift dylib.
[33mb932565[m [codesize] Keep _assertionFailed in the swift dylib.
[33mef3b458[m [CodeComplete] Complete arguments of call expressions. When users invoke code completion at an argument position, we suggest argument names, if required however not specified, or a list of argument values. These values are annotated with their type relation to the expected argument types, so that Xcode can prioritize those values that apply over those that do not. This also fixes: rdar://21727063
[33m1b9f63c[m Remove dead function elimination hack for main.
[33m14e04a9[m [REPL] Use llvm::outs() instead of printf.
[33m38261ce[m Pull the integrated REPL out into a separate source file.
[33m6015bf1[m Remove cruft from utils/.
[33mce616a8[m [unittests] Remove empty and unreferenced unit tests.
[33m8b725a9[m Annotate thunks with the [thunk] attribute during SILGen.
[33m19f761d[m Adding a separate method for visiting subscript references in SourceEntityWalker.
[33m2277086[m stdlib: Add documentation for the cached ascii collation tables
[33m5edbd46[m stdlib: Fix hasPrefix,hasSuffix tests
[33me1131ce[m stdlib: Add back a test I removed
[33me4935d0[m Add test cases to exercise the native String vs cocoa buffer String path.
[33m502f1e3[m stdlib: Move the darwin String implementation over to use the ICU library.
[33m2d8f29e[m Revert "stdlib: Fix hasPrefix,hasSuffix tests" Revert "stdlib: Add back a test I removed" Revert "Add test cases to exercise the native String vs cocoa buffer String path." Revert "stdlib: Move the darwin String implementation over to use the ICU library."
[33ma49198c[m SILGen: FunctionConversionExpr now uses thunking logic, NFC
[33me1f0f02[m SILGen: Three-parameter re-abstraction thunks
[33mffd2dc9[m add a source range to diag::use_unresolved_identifier, no testcase because we don't have tests for highlighted ranges.
[33md167dfb[m When typechecking the callee of a CallExpr, and when we have a contextual type, use that contextual type to guide typechecking of the callee.  This allows us to propagate that type through generic constraints effectively, making us produce much more useful diagnostics within closures taking methods like "map" (for example).
[33m9c1f3e9[m Revert "Transform EditorPlaceholderExpr into trap if executed in playground mode."
[33m1ce4511[m add a TCC_ForceRecheck flag to typeCheckChildIndependently to factor handling of the "isExprBeingDiagnosed" bit.  NFC.
[33m0addd80[m Transform EditorPlaceholderExpr into trap if executed in playground mode.
[33m6c944a6[m SIL: Move checkForABIDifferences() from SILFunctionType to TypeConverter, NFC
[33m725cd97[m add some more sub-casses of the rdar://20491794 testcase.
[33m7e71914[m AST: Split off a new replaceSelfParameterType() method and clean up some code, NFC
[33m3cc2dae[m stdlib: Fix hasPrefix,hasSuffix tests
[33m2588f44[m stdlib: Add back a test I removed
[33m65f6b84[m Add test cases to exercise the native String vs cocoa buffer String path.
[33m5a25a00[m stdlib: Move the darwin String implementation over to use the ICU library.
[33m7f09fbc[m Revert "CMake: don't hide symbol names in bitcode for debuggability"
[33m811b779[m stdlib: Cache the unicode collation values for the ASCII range and use this cache instead.
[33mf6224bd[m Allow libraries to specify to be compiled against the internal variant of the SDKs
[33ma75b083[m Automatically infer Equatable conformance for plain C enums
[33m3ec9325[m stdlib: Don't hash in the length of the string
[33m41119cb[m stdlib: Don't crash on strings that require a bigger buffer on normalization.
[33me5d7247[m remove the unused ExprTypeCheckListener::solvedConstraints() listener hook, NFC.
[33m1aa2612[m Properly handle cases where an object file contains code for multiple architectures.
[33mec600e2[m fix <rdar://problem/22322266> Swift let late initialization in top level control flow statements
[33ma3048cf[m fix <rdar://problem/22414757> "UnresolvedDot" "in wrong phase" assertion from verifier
[33mbe818c6[m Adjust how diagnostics synthesize decls (e.g.) when printing overload sets, to print them with their interface representation.  This squelches attributes like @_inline and @semantics.
[33mcdc5590[m Distinguish between generic specializations and function signature specializations.
[33m64b531e[m Allow for upper-case hexadecimals.
[33m1977b9e[m Better handle object files generated from Objective-C sources.
[33mdd5489a[m When diagnosing overload set candidates, pass the decl into diagnose instead of the location of the decl.  This matters when the candidates are coming from the stdlib because they have no location, and we can synthesize a prototype from the decl.  Before we'd get:
[33m855d661[m Factor the conformance lookup table into a separate .h/.cpp. NFC
[33m9ea0514[m Reverted: Allowing SourceEntityWalker to skip visiting subscript end location
[33mbabdb9e[m Delay loading the witnesses of a protocol conformance.
[33mc707382[m [Parser] Mark parsed getter/setter of lazy vars invalid. rdar://22284278
[33m62d6c3a[m Add alt/title tags to rendered markup images
[33mfa860f0[m Allowing SourceEntityWalker to skip visiting subscript end location
[33mb10c56b[m Reapply: Some improvements in ArrayBoundsCheckOpts
[33m6e1b832[m Revert "Omit needless words: don't drop the first parameter name for failability initializers."
[33m419fc39[m Extend -Womit-needless-words to warn about uses as well.
[33m532ff92[m Factor out the decision of whether to omit words from the actual Fix-Its. NFC
[33mc6f09dd[m Tweak code comment.
[33m57e0d24[m Revert r31439 "Some improvements in ArrayBoundsCheckOpts".
[33md5a876c[m [sil-simplify-cfg] Fix a try_apply simplification bug.
[33m2a848d3[m [sil-devirtualizer] Move the return value casting functionality into a utility function. NFC.
[33mb2cecca[m Some improvements in ArrayBoundsCheckOpts
[33m3088128[m Refactor DenseMapInfo<ASTNode> to ASTNode.h
[33m7156582[m [USR] Add prefix for generic type parameter decl. rdar://22394418
[33mbd08663[m Mark script as executable
[33ma21010e[m [SyntaxColor] Teach syntax model walker not to walk into active regions inside #if config stmt twice. rdar://22224993
[33m79d4e7b[m Omit needless words: Map stable Clang builtin type names to their Swift equivalents.
[33m8ac1084[m Omit needless words: don't drop the first parameter name for failability initializers.
[33md41e3b3[m Make NSCoding's -initWithCoder: failable, to match the current SDKs.
[33mf3d623b[m DRY: Use the imported initializer's type to compute failability
[33m2531127[m Omit needless words: skip some type suffixes to make it more likely we'll match.
[33m2b229aa[m [PrintAsObjC] Fix infinite loop on typedefs of CFTypeRef.
[33m95ab61b[m Don't print @opened when AST printing types, unless we're generating a SIL file. We don't want these to poke out in diagnostics.
[33m1c1d074[m un-XFAIL a test that got "temporarily" disabled and never reenabled after the radar tracking it got duped to another bug.
[33m5a16405[m Fix compile errors from r31420
[33m689be69[m SILGen: Split off cleanup of transforms code from bigger patch
[33m074a557[m SIL: Extract SILFunctionType::checkForABIDifferences(), NFC
[33mb766676[m Fix comment typo. NFC.
[33m0276d86[m Add Analysis.def to allow for metaprogramming with Analysis names.
[33ma9a5780[m Standardize style and eliminate trailing whitespace. NFC.
[33m74a984d[m Rename SILValue::stripAggregateProjections => SILValue::stripValueProjections.
[33md074d6f[m [cmake] Add an option SWIFT_EXPERIMENTAL_EXTRA_NEGATIVE_REGEXP_FLAGS
[33me94ddb2[m fix @warn_unused_result to work with unused operator results.
[33m712d344[m improve some diagnostics around inout expr.
[33mea813c6[m assign some dead results to _.  NFC.
[33md044bb3[m remove some special case code that is now not necessary, NFC.
[33m152f1a9[m remove dead condition: TypeCheckExprFlags::AllowUnresolvedTypeVariables never leaves around typevars anymore, it always binds them to UnresolvedType.
[33m76a26ae[m make ParenExpr handling more consistent, which is basically just a cleanup.  This wraps up 22102895
[33m2c22cdc[m Teach CSDiag how to propagate contextual type information through TupleExpr, one more step towards 20491794.
[33m217ef5a[m stdlib: fix legacy Mirror for ArraySlice
[33m6360a59[m Revert "Fix a problem where the legacy Mirror for ArraySlice would cause an out-of-bounds access if the slice is not zero-based"
[33m3a03435[m Now that we have various infrastructure improvements in place, we can remove some unprincipled code from typeCheckChildIndependently that was special casing some expr nodes.
[33m186fa8e[m Eliminate the TCC_AllowUnresolved flag by having typeCheckChildIndependently automatically pass down TypeCheckExprFlags::AllowUnresolvedTypeVariables IFF we have no contextual type.  This gives us UnresolvedTypes in more cases, which improves diagnostics in various situations, and also simplifies CSDiag.  The change to misc_diagnostics.swift is a particularly nice progression.
[33mb6de061[m Rework assignment diagnostics to be built in terms of contextual types, where we type check the destination first, then apply its type to the source.
[33m6402fda[m stdlib: remove a bunch of dynamic initializers from the library and overlays
[33mb660cb3[m Enhance the general parameter list matching logic in CSDiags to know about argument list mismatches, and diagnose them with a very specific error when they occur in member lookups.  This fixes <rdar://problem/22356434> QoI: Missing diagnostic for invalid arguments passed to enum case constructor
[33m7b1dcd9[m Add execution tests for C union fields
[33m7a2018e[m SILGen: fix conversions from @convention(c) to @convention({thick,block})
[33mfe27790[m Fix a problem where the legacy Mirror for ArraySlice would cause an out-of-bounds access if the slice is not zero-based
[33m36620d8[m stdlib: add an overlay for sem_open(), which is variadic in C
[33me21e1c4[m Import fields for named C unions
[33m32bcecb[m Use Defaultable constraint instead of disjunction for last-resort type.
[33m18057b6[m Get rid of static. NFC.
[33m42d8da6[m LICM: hoist some array semantic calls out of loops. Which are: get_count and get_capacity
[33mc93bf3b[m stdlib: remove 58 global initializers from the Darwin overlay
[33m19155fc[m Change #if __APPLE__ to #if defined(__APPLE__). NFC.
[33mb7e023c[m [swift-runtime] Use vm_page_mask if we are compiling for an Apple OS.
[33m9ed7a57[m [Parser] When parsing error occurs on arguments, we still try to preserve the call expression. This allows tools, like code completion or jumping to definition, to be able to resolve function names even though the argument is wrong.
[33mf7c0c57[m stdlib: remove emacs commands left over from this file being a gyb file
[33mcd7d638[m refactor "evaluateCloseness" and related machinery to be defined in terms of an array of TupleTypeElt's instead of an array of Type's, exposing information about varargs and parameter labels to it.  NFC.
[33mbb3b00a[m stdlib: work around type checker not being able to deduce RandomAccessIndexType.Distance
[33m0004011[m Eliminate special handling of deserialized inherited protocols.
[33m6a07b8a[m Factor out functionality that visits the inherited protocols/class types in the ArchetypeBuilder. NFC
[33mcab3202[m Stop recording protocol lists in nominal types.
[33m8b17f71[m Update another test to remove specifics unrelated to the test.
[33me2b9f3c[m Use static typing rather than dynamic.
[33m8f0d0d3[m build out the infrastructure for diagnosing calls that have contextual type information and use this to improve the UnresolvedMemberExpr errors.
[33m59ddbef[m [Driver] Don't pass swiftmodule files directly through to the linker.
[33m208f647[m [Driver] Be more explicit about the inputs to the merge-module action.
[33me416bfb[m SILGen: Refactor code for existentials
[33m779444e[m stdlib: rewrite the comment on CustomPlaygroundQuickLookable
[33m951e651[m stdlib: document that unsafe pointers should be suitably aligned
[33m800807f[m Properly propagate debug scopes.
[33m3865a6a[m [CodeComplete] Add type relation enum to the code completion results. We use an enum to describe the relationship between a code completion result and the expected type at the code completion site. We can use this relationship to prioritize candidates on the SourceKit side.
[33m3062b04[m ABI: Push the "special protocol" bits in protocol descriptors down to avoid clobbering ObjC-reserved bits.
[33ma01d981[m CSE: do CSE for some array semantic calls on high-level SIL.
[33mf6e23d4[m stdlib: fix a bug in Character._SmallUTF8
[33mb94a0e4[m IRGen: Prepopulate class ObjC metadata with a null pointer instead of &_objc_empty_vtable.
[33m54aca7e[m AST: OpaqueValue::isUniquelyReferenced() is always true, NFC
[33m07df0fb[m Re-apply "IRGen: Fix stupid oversight in emission of fixed multi-payload enum vw_getEnumTag()"
[33m3e0cf08[m [Serialization] Support factory initializers.
[33m340716d[m Fix deserialization of SIL alloc_ref_dynamic.
[33m6358c30[m Now that we consistently propagate contextual type information when it is available, use it to start producing useful diagnostics for contextually typed member references.
[33me9b49f1[m add test static factory method diagnostic, NFC.
[33me39a2eb[m Remove overly specific test output matching.
[33m70f9c79[m Update FileCheck variable names to make test easier to read.
[33m0e326db[m Exclude private decls from interface token hash.
[33mc33e3ef[m [CodeComplete] Complete the right hand side of assignment expressions. When users complete the right-hand side of an assignment expression, we only show the results whose types are convertible to those of the left-hand side.
[33m0604d88[m InstrProf: Emit the counter for falling out of a do-catch immediately after the body
[33m032f753[m Don't bind unlabeled type variable to single labeled argument.
[33m5a82ddf[m [ClangImporter] If a name contains "unsigned", import NSUInteger as UInt.
[33maabc229[m [ClangImporter] When importing types, "in system module" means "use Int".
[33m0cb122b[m FunctionSignatureOpts: correct removal of release_value in throw blocks.
[33m2f2c7d5[m Verify that a SILFunction has not multiple throw instructions.
[33ma86e7a9[m Remove some overspecificity from a test.
[33mee7803a[m Eliminate the list of protocols from ExtensionDecl. NFC
[33m83cb1e6[m Serialize the list of inherited types for all nominal types.
[33mdd68b9f[m Start serializing the "inherited" list of extension declarations.
[33m53b1cf2[m [CMake] Fix dependencies for CloudKit.
[33m88564e8[m SIL: Shed dynamic 'Self' when lowering reference storage types.
[33m6017480[m Revert "Start serializing the "inherited" list of extension declarations."
[33m9fbbf36[m Use let instead of var in a few tests.
[33m1393ee1[m Start serializing the "inherited" list of extension declarations.
[33m3f7d64c[m Diagnose invalid arguments for '#if _runtime()'
[33m0188a69[m Revert "IRGen: Fix stupid oversight in emission of fixed multi-payload enum vw_getEnumTag()"
[33m95416ea[m Sink TypeDecl::getProtocols() down into NominalTypeDecl.
[33mf0fcd59[m Stop using TypeDecl::Protocols within abstract type parameters.
[33mf898887[m Eliminate getConformsTo() callback from the archetype builder.
[33mdd93c63[m Teach name lookup to cope with missing archetypes on associated types.
[33m61de97b[m Switch string literal type checking to work more like other literals: if it already has a type, don't re-type-check the literal.  This improves a diagnostic involved with 20491794.
[33m0bdf7d1[m two pretty unhelpful diagnostics relating to sub-problems of rdar://20491794.
[33m2be7dc0[m IRGen: Fix stupid oversight in emission of fixed multi-payload enum vw_getEnumTag()
[33m458534f[m fix <rdar://problem/22320758> QoI: collection literals don't handle substitutions well in csdiag
[33mf6baaa8[m Remove scheduleAnotherIteration() from the pass manager.
[33mf823a69[m [ClangImporter] Typedefs of NSUInteger may import as UInt or Int.
[33m7dcb4e7[m remove some redundant code Slava noticed
[33m4c62204[m Remove the stand-alone generic specialization pass.
[33m53aa84a[m [sil-prespecialization] Whitelist the  Swift._allocateUninitializedArray
[33mdb07476[m Add missing single quotes in AST dump.
[33mf72b213[m simplify and rebrand diag::invalid_relation now that it can only produce two messages.
[33m2487277[m Now that enough yaks are cleanly shaven, completely reimplement how we process contextual constraints when producing diagnostic.  Formerly, we would aggressively drop contextual type information on the floor under the idea that it would reduce constraints on the system and make it more likely to be solvable.  However, this also has the downside of introducing ambiguity into the system, and some expr nodes (notably closures) cannot usually be solved without that contextual information.
[33m0c288e0[m introduce a new UnresolvedTypeConversionExpr implicit conversion node for conversions to and from UnresolvedType.  This will allow UnresolvedType to be used more aggressively and predictably by CSDiags.  This is NFC, but used in the next patch.
[33m33d7324[m Removed/changed some outdated info in the Arrays.rst document.
[33m88b83fd[m SILGen: Don't clobber variables from other pattern bindings in a PatternBindingDecl's initialization.
[33m1446615[m stdlib: rename ImplicitlyUnwrappedOptional's parameter to Wrapped
[33mf2ad7be[m [PrintAsObjC] Add PrettyStackTraces. NFC.
[33m167f4fa[m CMake: don't hide symbol names in bitcode for debuggability
[33mb9e97ed[m Fix the constraint ranking predicate to produce a correct partial ordering w.r.t to favored bit.  Also, ignore disjunction constraints now that we drop them on the floor here.
[33m4306502[m Update graphics in array doc.
[33m0b5157b[m Reduce the amount of memory required for caching protocol conformances.
[33m49970aa[m [test] Tests for __attribute__((overloadable)) support in r31249.
[33m6c9a403[m [PrintAsObjC] A nested array of Swift closures is not @objc-compatible.
[33mb5372d5[m Sema: User-facing diagnostics should not talk about "existentials"
[33m4f15bce[m refactor a bit of the code filtering UnresolvedTypes, NFC.
[33m2111b6b[m WIP proposal for addressing heterogeneous comparison in the stdlib
[33m447b909[m Fix a few ReST issues.
[33maf1e0b3[m Sema: Your monthly dose of minor @objc fixes
[33mab70e9b[m ASTDumper: Fix crash when printing invalid conformances
[33m880f06a[m Enhance FailureDiagnosis::diagnoseGeneralOverloadFailure to more correctly handle try/try? exprs between the overload set and the CallExpr (previously we'd blow by the CallExpr walking the parent map) and make some other diagnostic generation stuff more careful about handling type variables.
[33m045c453[m remove a now-redundant flag, which is implicit in typeCheckArbitrarySubExprIndependently.
[33m505ff58[m Make conversion diagnostics between as? and as! expression consistent by allowing diagnoseGeneralConversionFailure() to handle them (instead of it handling as? but special code handling as!).
[33m9c82081[m Reduce type parameters and associated types' dependence on "getProtocols()".
[33me78b3dd[m Proposed new architecture for the declaration type checker.
[33m40abcd0[m Generalize TypeChecker::resolveInheritanceClause().
[33mfa6dcfe[m rework how diagnoseConstraintFailure sorts through constraints that it is considering, making it a bit stronger at handling disjunction constraints as well as fixing it to stop sending non-conversion constraints down into diagnoseGeneralConversionFailure.
[33m8e758ba[m Make the "type of expression is ambiguous without more context" diagnostic more specific when it fails, by printing a potentially partially resolved type for the ambiguous expression in question, which it carries information.  This can at least tell what the ambiguous parts of the resultant type *are* in some cases (e.g. in the Constraints/array_literal.swift case).  That said, this diagnostic is still admittedly not great.
[33mc34fb19[m fix a regression on Swift.compiler_crashers_fixed.26134-swift-constraints-constraintsystem-solverstate-solverstate.swift
[33meb0131f[m refactor all of the constraint system "Fix" processing logic out of ConstraintSystem::applySolution into its own helper function to reduce indentation and make ConstraintSystem::applySolution much more simple and obvious.  NFC.
[33m1ad24fd[m rework how 'as' casts are diagnosed, removing a special case from CSApply and allowing these failures to hook into other diagnostic goodies (e.g. the "did you mean to use '!' or '?'?" cases showing in the testsuite).  That said, by itself this doesn't have a huge impact, but avoids regressions with other pending changes.
[33m609a464[m a test I apparently forgot to svn add a long time ago.
[33mff1680c[m stdlib: expand the test boilerplate from Slice.swift.gyb
[33m8c57b7c[m Improve diagnosis of implicit match expressions
[33mb74557e[m Simplify code in FunctionSignatureOpts by using FullApplySite.
[33mf6ce68a[m remove ConstraintKind::Conjunction, it is unused and unnecessary - after all, the whole system is a conjunction!
[33m265f91f[m Allow string literals in string literal interpolation.
[33mb38067b[m Revert "Teach SILPrinter/Parser how to parse the conformances associated with an init_existential_metatype."
[33m44cd2fa[m Support try_apply in function signature optimization.
[33m831470c[m [CodeComplete] Properly handle extensions during name lookup. rdar://22289974
[33mba7ebdc[m Fix an overzealous assert.
[33mb1f336b[m Teach SILPrinter/Parser how to parse the conformances associated with an init_existential_metatype.
[33m8b28640[m Tail Allocate the array of protocol conformance pointers on init_existential_metatype.
[33m2de1343[m Fix whitespace errors and sort some imports. NFC.
[33m40a9d61[m [CodeComplete] when completing unresolved members, we also perform name lookups for enum elements, var decls and nominal types in addition to functions. fixes: rdar://22282057, rdar://22282116, rdar://22282224, and rdar://22282278
[33mcc2fad1[m remove some unnecessary code that produces unfortunate effects when other changes go in. The fallthrough path that this enables does ambiguity checking and simplifies active constraints that are left into the system, before jumping into diagnoseFailureForExpr. By jumping into diagnoseFailureForExpr directly, CSDiags can produce the wrong diagnostic because the constraints are still on the active list.
[33mb51e9cf[m micro code cleanups, nfc.
[33maaff09e[m When CSApply applies as Builtin type to a literal, use shallowClone to allocate a new node, abandoning the old node.  This cuts of places where we'd end up retypechecking the original expr and getting things like Builtin.Int2048 into the diagnostic.
[33m17dbf6f[m Mark proposal as :orphan:
[33m6ea6d2d[m add a new LiteralExpr::shallowClone method, to be used by upcoming work. NFC.
[33m402dcbc[m rename forEachChildExpr to forEachImmediateChildExpr, since that is what it does, and add a more general forEachChildExpr that walks the entire expr tree.  Allow both of these to mutate the expr in question by allowing the lambda to return a new expr.
[33m7e4d792[m Proposal for revamping enum style
[33mb889fb4[m every time I commit this I get closer to doing something about it...
[33m6c39760[m If a contextual type is available when type checking collection literals, use it to produce specific diagnostics about individual elements being incorrect instead of complaining about the whole thing in aggregate.
[33m3bc83d7[m SIL: Fix lowering of inout types with opaque abstraction pattern
[33m6014f1d[m SILGen: just for fun let's do toll-free bridging for <T : NSError> archetypes too
[33me5cb73f[m SILGen: Clean up ErasureExpr lowering, NFC
[33m27fec84[m SILGen: Peephole for lowering OpenExistentialExpr with an Initialization
[33m9b74a4b[m SILGen: Fix memory leak when sub-expression of ErasureExpr throws
[33m81bd700[m Comment fixes, NFC
[33mf183beb[m Add missing doc comment requested by Greg Parker and a random typo, NFC
[33m5f8c122[m [CodeComplete] Perform function name lookup to complete unresolved members. For completing unresolved members, if constraint solver does not have solutions, we look up the function names appearing in the same line of the code completion tokens, and use their parameters that are of enum/optionset type to deliver the code completion results.
[33m11376ca[m Convert IVInfo to be based on FunctionAnalysisBase.
[33m5a16d37[m [CodeComplete] Address Ben's comments on r31063, r31083 and r31195.
[33m9e4d52c[m Reinstate watchOS and other SDK overlays to build against the public SDKs.
[33ma450a08[m [CodeCompletion] Collect the identifiers appearing before unresolved members. We can use these identifiers to perform manual look up.
[33ma1ad290[m Use Clang's mangler for __attribute__((overloadable)) functions.
[33mca394f3[m Make sure to IRGen all static functions.
[33mc75fc00[m Revert "CMake: build all platforms except watchOS using the public SDK"
[33mf2fce43[m Revert "Switch SDK overlays to use the public SDK"
[33mb9ef882[m Switch SDK overlays to use the public SDK
[33mdd38372[m CMake: build all platforms except watchOS using the public SDK
[33m5c8f327[m [ASTPrinter] Remove redundant accessibility filtering.
[33m7546727[m IRGen: Fix spurious "divergent emission" assertion
[33m8311c05[m stdlib: add a default implementation for MutableCollection.subscript().set
[33m83a2b5c[m Provide renamed fixit for Optional.T -> Optional.Wrapped
[33m44f2dfe[m Follow-up for r31237, address feedback by Jordan.
[33m298124a[m [Driver] Emit valid YAML. Use spaces instead of tabs.
[33mab9375a[m [Sema] Add a diagnostic fixit for the "print(_:appendNewline:)" -> "print(_:terminator:)" change.
[33m71cb5e6[m Add checks for erroneous extended type. rdar://22277406
[33m561d5fd[m Add an opt-in warning to complain about needless words in declarations.
[33mc02cd1a[m Factor omit-needless-words logic out of the Clang importer.
[33m51f08e0[m Add FileReference object literals and _FileReferenceLiteralConvertible protocol.
[33m5430b80[m [test] There are no more non-generic Objective-Cs.
[33mfa2211d[m [PrintAsObjC] Print 'strong' on properties with class type.
[33me4ff8fd[m Make image literals non-optional by routing delegation of non-failable literal initializer to underlying failable initializer through implicitly-failable initializer (proper solution is covered in 22276505).
[33m0c39ec0[m Don't use materializeForSet when accessing properties or subscripts defined in protocol extensions.
[33mf493ab2[m [test] Fix up demangling tests.
[33m406b3a8[m Handle apply [nothrow] properly in FunctionSignatureOpts
[33mcb2c6a6[m Demangle 'So' as '__ObjC' rather than 'ObjectiveC'.
[33mf1b04be[m Don't complain about missing witnesses if they're available in extensions.
[33m146d2da[m [stdlib] Add missing nullability to reflected NSString API
[33mf880ee1[m Kill some dead code
[33m100d38d[m Omit needless words from property and nullary-methods producing values of the enclosing class type.
[33m903d98a[m Use REQUIRES: objc_interop properly.
[33ma81ba27[m omit-needless-words.py: make --diff-tool= work.
[33m86f64d3[m Don't simplify argument tuple conversion constraint $T1 < (T2, ...) to $T1 < T2 if there are other required params in the tuple.
[33m73197e9[m Revert a change from r31177 - in this testcase we actually want the variable-sized Int type.
[33m215eef9[m CSDiag: Set CTPurpose in right place when typechecking function argument independently.
[33m5f56f10[m [stdlib] de-gyb a test
[33ma7be48c[m Use getValueProvidingExpr instead of getSemanticsProvidingExpr in some cases and use KnownProtocolKind::BooleanType instead of a string compare against BooleanType, as suggested by Jordan.
[33m87f1166[m SimplifyCFG: convert try_apply to apply if the error block is unreachable. Also: moved another try_apply->apply peephole optimization from SILCombine to SimplifyCFG.
[33m1f0bd30[m add the missing note.
[33m7f7b78e[m Fix <rdar://problem/22263468> QoI: Not producing specific argument conversion diagnostic for tuple init
[33m5731646[m fix <rdar://problem/21601687> QoI: Using "=" instead of "==" in if statement leads to incorrect error message
[33me922008[m update test for diagnostic changes, not handling sametype constraints well is a known issue.
[33me55cdc1[m [CodeComplete] Avoid unnecessary walk path.
[33m33631ca[m stdlib: Fix a bug in split()
[33m616dbb2[m fix <rdar://problem/22255907> QoI: bad diagnostic if spurious & in argument list
[33m4efa7f4[m stdlib: fix the docs to refer to the actual parameter name
[33m42d53dc[m Fix: <rdar://problem/18397777> QoI: special case comparisons with nil <rdar://problem/18042123> QoI: Fixit for "if !optional" should suggest "if optional == nil"
[33ma52fdae[m print type variables as $T0 when dump()'s various kinds of AST nodes.
[33mda78112[m Fix test, oops.
[33m77d8a07[m Special-case trying to force a 'try?' expression.
[33ma690885[m Properly parenthesize 'try?' in fix-its.
[33ma267162[m When adding " != nil" to an optional in an 'if', we may need parens.
[33m7e81f7e[m Fix a number of bugs with the new materializeForSet SILGen, including one which triggered only for non-subscripts and a number which triggered with different cases of classes.
[33me56e489[m When performing a simple 'set' operation on an l-value, peephole reabstraction components by applying them to the r-value instead of materializing to a temporary and then assigning to that.
[33m8a435da[m Un-XFAIL tests for partition()
[33m0bab239[m [CodeComplete] Refine the code completion results for unresolved members by using constraint solver. Before this commit, for unresolved members, code completion suggests all visible enum elements  and option set types. To refine the results, this commit uses constraint solver to infer the type of unresolved members by analyzing parental expressions. If the solver has solutions, we complete the unresolved member, otherwise abort. rdar://16659653
[33ma067fb0[m stdlib: re-add the part of the comment that was dropped during a refactoring
[33m91f51cd[m Minor tweak to referenced filename.
[33mb667b1f[m Turn on the materializeForSet-in-protocol-extensions fix from r31072 (<rdar://21836671>).
[33m06bb064[m [stdlib] String.init(data: NSData, encoding: UInt)
[33ma8d56c3[m [stdlib] Shuffle methods to keep comments in sync
[33mf76bc10[m Don't omit words down to "get", "set", or a Swift keyword.
[33mee20926[m stdlib: rename join() to joinWithSeparator()
[33m22b15bd[m stdlib: loosen the type signature of join()
[33md6f04ad[m stdlib: convert join() into a protocol extension
[33m34f6bd0[m Make it possible to skip parameter names when printing interfaces.
[33m46fed81[m Add a simple utility to diff the results of automatically omitting needless words.
[33m713ae47[m [stdlib] Explicitly document how to print without trailing newline.
[33m1f0d262[m SDK overlay: weak-link to frameworks introduced since our API sunset.
[33m47541b9[m Replace use of -sil-inline-threshold with @inline(__always).
[33m284d8e5[m Introduce an option to omit needless words when importing from Clang.
[33m4f11ecc[m Get rid of Int in the debug info tests and preform some general cleanup.
[33m10afd15[m Following up on r31169, take Jordan's CR feedback and uncomment the two currently disabled migration aid overloads for 'print'.
[33mf5b1efb[m Move client-affecting configuration options into a generated Config.h.
[33mc5161a9[m Add another test for rdar://problem/17060110.
[33m2ac99bc[m Uncomment a few tests that were commented out, revealing unawesome diagnostics.
[33mcd492d9[m Fix a type checker crash when the object type of a ForceValueExpr is an 'Any'.
[33mc6f96ea[m Sorry did not mean to commit this.
[33m8759b79[m [arc] When checking if a BB is an ARC Inert Trap BB, first check if the end is unreachable before you do anything further.
[33m2ee4586[m Handle recursive substitutions in optimizeCastThroughThinFunctionPointer
[33mff7b6b7[m Foundation overlay: Add a generic NSCoder.decodeObjectOfClass(_:forKey:).
[33m50c0cf5[m [IRGen] Casts to an ObjC-class-bound archetype are not casts to the bound.
[33m880f28b[m [stdlib] Add missing 10.10 NSString APIs.
[33m388bc31[m Add a nothrow flag to the SIL apply_inst.
[33maee63ec[m [ClangImporter] Allow importing from CarbonCore's UnicodeUtilities.h.
[33md598e32[m SIL: Fix conditional destroy generation for delegating initializers
[33ma92cb57[m Remove the ErrorHandling option from the Clang importer.
[33m8446df9[m Serialization: Bump format minor version number
[33mad62a99[m Didn't mean to add this, NFC
[33m1628bfc[m SIL: Split dealloc_ref into [constructor] and [destructor] kinds
[33m5797115[m SIL: Fix self cleanup with self.init() delegation
[33m89f2af6[m Random comment fixes split off from another patch, NFC
[33m9757294[m [Lex] Use clang::isIdentifierBody instead of checking for '_' separately.
[33mf2f16de[m remove a patch accidentally committed with r31130
[33m54ace25[m fix test, this actually successfully completes now.
[33m8a9a238[m [SIL] Allow all ASCII identifier characters in SIL variable names.
[33m654cb86[m fix <rdar://problem/21886435> Swift compiler crashes on "()=()" ... which was just a pair of over-conservative SILGen assertions.
[33me254d17[m RecursiveTypeProperties is a bitfield, so its core operations are & and |, not - and +. Resyntax them, NFC.
[33mf52f2bc[m fix a warning about an unhandled case
[33m83d6cfc[m Yet again, didn't mean to check this in...
[33ma899872[m Reapply r31105, with some fixes to invalid unconstrained generics.  These fixes correct the regressions that r31105 introduced in the validation tests, as well as fixing a number of other validation tests as well.
[33m66c8598[m [test] Check another kind of cross-file dependency.
[33me584e5b[m Expand upon a comment to keep me from chasing ghosts in the future.
[33md9a5ee3[m IRGen: clear error slot only in errorblock
[33m08a7c2e[m Update some tests to remove -sil-inline-threshold in favor of @inline(never).
[33m410b171[m Change var to let in a few tests to silence diagnostics.
[33m40dd888[m [docs] Fix up formatting so that we use "::" and so that we follow the flow of the document better.
[33m5fd76f1[m [docs] Fix indentation to make sphinx happy (even though it won't match lldb exactly anymore).
[33ma2bcc33[m [docs] Wordsmith a little bit to make things clearer.
[33m3c930a4[m [docs] Move sections about LLDB usage under Advanced LLDB Usage.
[33mafe39b3[m Allow hoisting of uniqueness check in array.append
[33meb0cae2[m SILCodeMotion: Move a release to predecessors if a matching retain is available in some but not all predecessors.
[33mb92811d[m [docs] Show how to lookup the mangled name of a demangled swift function name in lldb.
[33m66b571c[m [docs] Change the phrase "vended ... as needed" to the more precise "lazily created ... as required".
[33m84252dc[m [docs] Add a section to DebuggingTheCompiler that shows how to use the '-s' command to lldb to script complex debugger workflows quickly and easily.
[33m2f91bf2[m [docs] Add the large ignore count technique to the breakpoint part of DebuggingTheCompiler.
[33m1e4629c[m More changes for specializing partial applies during inlining.
[33m71953dd[m [CodeComplete] Add a new decl kind for module and update the code completion results of import decl to belong to this kind. This allows Xcode to add special icons for completing module names.
[33m4b96cba[m Fix <rdar://problem/22143680> QoI: terrible diagnostic when trying to form a generic protocol
[33m2204dbc[m revert r31105, it causes some regressions on validation tests.
[33mbc0ef07[m a diagnostic case that got better with my recent patch.
[33mde79b60[m Introduce a new UnresolvedType to the type system, and have CSDiags start to use it as a way to get more type information out of incorrect subexpressions.  UnresolvedType generally just propagates around the type system like a type variable:  - it magically conforms to all protocols  - it CSGens as an unconstrained type variable.  - it ASTPrints as _, just like a type variable.
[33m48276ec[m whitespace tweak, nfc.
[33m8354139[m fix 80 column issue, nfc.
[33mb17aa9f[m Change ConstraintSystem::print to print the constraint system using symbolic TypeVariables instead of _'s.  For example, before:
[33mcf270dc[m line some comments up, NFC.
[33mb670236[m One of the recent Sema changes fixed rdar://problem/22003613
[33m5237e5f[m adjust two places to deal with the ParamDecls in closureexprs that have no type set on them.  This is the minimal fix to address the regressions on two validation tests, but another approach (not involving null types) seems like it would be a good idea to investigate on mainline.
[33m442de4d[m fix  <rdar://problem/22162441> Crash from failing to diagnose nonexistent method access inside closure
[33m31e804a[m [Pygments] allow whitespace in generic param lists
[33m99cf3dc[m Rename Devirtualizer.cpp to SpeculativeDevirtualizer.cpp.
[33m77e0b77[m Remove the stand-alone devirtualizer pass.
[33md5e9bde[m Don't use private functions in the CG overlay
[33m1abfc74[m Update comment in coerceClosureExprToVoid. NFC.
[33m8c27e4b[m Fix test in previous commit.
[33m410083d[m Warn on unused results in single-expression closures coerced to Void.
[33mbd031d1[m Always warn when 'try?' is discarded.
[33m65cb6bc[m [CodeCompletion] Don't show editor placeholders as completions
[33m833fd57[m Support generic specialization of partial_apply during inlining.
[33m27a65e0[m Now that the ambiguity diagnostics are better, we can remove a bunch of complexity handlng CC_ExactMatch overloads, resolving a poor diagnostic in the testsuite.
[33m5292a30[m Include try_apply when building the call graph.
[33mb6e5bba[m Skip try_apply in function signature opts.
[33m8b10d15[m Fixit Typo: CGRect.integralRect -> integerRect
[33mc260dc8[m [CodeCompletion] Add visible option set type to the code completion results of unresolved members.
[33mbb35cbc[m Teach CSDiag how to resolve SubscriptMember locators, fixing <rdar://problem/21364448> QoI: Poor error message for ambiguous subscript call
[33m6dc013a[m testcase showing a poor diagnostic.
[33m807f7f5[m Reimplement materializeForSet emission in SILGen instead of the type-checker.  The strategy for now is to just use this for protocol witness thunk emission, where it is required when generating a materializeForSet for storage that is either implemented in a protocol extension or requires reabstraction to the requirement's pattern.
[33m9f10b69[m Reviewed: Containers should use debug description of their elements in both description and debugDescription
[33m5091dc2[m Really fix the Optional map/flatMap mismerge
[33m697d0db[m Build fix: mismerge in Optional.swift
[33m4848235[m Rename Optional type parameter from 'T' to 'Wrapped'.
[33m9aa7663[m Always debugPrint containers' elements
[33m8d441c0[m Simplified demangling: continue to print context names
[33m45a88b0[m Now that the top level "diagnoseConstraintFailure" engine can handle multiple constraints of each kind, enhance FailureDiagnosis::diagnoseGeneralConversionFailure to ignore conversion constraints that are either trivially resolvable (like Int conforming to IntegerLiteralConvertible) or constraints that cannot be resolved because a type variable is ambiguous.
[33m050a2cd[m Foundation overlay: adopt @warn_unused_result
[33m0df1031[m [CodeCompletion] Add the initial support for unresolved members. This commit completes an unresolved member with all visible enum elements. We need future work to reduce the list to those that are guaranteed to be resolved under the current context.
[33m383a056[m Warning suppression in tests
[33m6ab8d49[m fix radar number in comment, nfc.
[33m74c6345[m Pull 'try' et al inside RebindSelfInConstructorExprs.
[33m1853267[m 'try?' is supposed to stack optionals, not merge them.
[33m481efb6[m [sil-devirtualizer] Fold a variable declaration into conditional. NFC.
[33m493ae52[m Kill some dead code
[33m251938d[m [sil-devirtualizer] Re-factor the code. NFC.
[33me587ef0[m SDK overlay: adopt @warn_unused_result
[33m255d222[m stdlib: remove erroneous @warn_unused_result annotations
[33mc358f8e[m [stdlib] Tiny doc fixup
[33mdd3194a[m stdlib: adopt @warn_unused_result
[33m10bdef0[m Revert "CMake: build all platforms except watchOS using the public SDK"
[33m8c88ebc[m now that we have a simpler structure for the overal CSDiag algorithm, change diagnoseGeneralFailure to be named diagnoseConstraintFailure and change how it works: Now it ranks unresolved constraints  in the system based on kind (e.g. whether they are favored, member constraints ahead of conversion constraints, etc) and then tries to emit a diagnostic for each failure kind one after another.
[33m680b2b0[m the UUID changes with every build, remove it from the expected- line.
[33m1fe2883[m another NFC refactoring: CSDiags is now split into 3 really separate pieces: Failure diagnosis (which should shrink over time), Expr diagnosis (which should grow over time), and constraint diagnosis (which should shrink over time but be the ultimate backstop).  This sets up the layers so that all but the last can "return false" with impunity if they have no bright ideas based on the context they know about.
[33mdaa24e5[m now that the computation of conversion constraints is detangled, we can localize the FailureDiagnosis::conversionConstraint state to be a local variable in diagnoseGeneralConversionFailure(), unblocking other progress. NFC.
[33m271acdf[m CMake: build all platforms except watchOS using the public SDK
[33mf9a621e[m [SyntaxHighlight] Highlight #line as keyword. rdar://22163375
[33m3a68a6c[m [sil-devirtualizer] Fix a bug related to sinking of retains
[33m21e8a93[m [CodeCompletion] Add specific semantic context kind to 'super', 'self' and 'nil'. This change gives these keywords a boost of priority when SourceKit sorts code completion results. rdar://21796980
[33m072868d[m Simplify the implementation of visitCoerceExpr/visitForcedCheckedCastExpr, and diagnoseGeneralConversionFailure().  The previous approach of trying to dig into anchors would often lead to complaining about types at different levels in the same diagnostic, and the complexity of the former code isn't needed now that other changes have landed.
[33m69342b8[m Disable Interpreter/SDK/archiving_generic_swift_class.swift on TVOS, watchOS.
[33m6b12b91[m Disallow nesting 'self.init' or 'super.init' inside other expressions.
[33m0dbf9b2[m Add 'try?' (and 'try!') as statement-level completions.
[33me2197b6[m Add SILGen support for 'try?'.
[33m5b98703[m [SILGen] Simplify ForceTryExpr generation a bit.
[33m2801d47[m Add Parse and Sema support for 'try?'.
[33mb0410ff[m Remove dead code left around in previous commit.
[33m7bfe2eb[m Pull the diagnostics for noescape and throws function type violations onto the expr infrastructure, resolving rdar://22158167.
[33m4a5be36[m add a new ContinueAfterFailures default argument to ConstraintSystem::simplify, and use it in the diagnostics path (only!) to revisit active constraints that are left in the system after a failure is found.  This improves a number of otherwise sad diagnostics in the testsuite and resolves rdar://22083115.
[33m0c7a1aa[m make ConstraintSystem::dump print the contextual type if there is one.
[33mf59279d[m [stdlib] Fix a couple of availability message
[33m827224f[m stdlib: clarify the behavior of sequences and for loops
[33me0d069a[m stdlib: Call _print_unlocked directly in String.init
[33m729b0ca[m Remove unnecessary expect checks in Index tests expected to trap
[33mdf60ecc[m unbreak compiler_crashers_fixed/26558-swift-constraints-constraintsystem-gettypeofmemberreference.swift, I'll reduce a testcase later.
[33m8ef04bd[m Make callee analysis of UnresolvedDotExpr more specific by looking for candidates have have been directly resolved.  This has very little impact on the testsuite right now, but unblocks other progress.
[33m33d44ea[m Rework diagnoseGeneralOverloadFailure a bit, making it more self contained and to handle disjunction constraints by printing an overload set.
[33mf46b8a7[m [IDE] For clang header interface printing, adjust the cc1 triple string we got from clang, to make sure it will be accepted when it goes throught the swift clang importer.
[33m75b8a57[m Update SceneKit test for nullability change
[33m0fa6d7b[m Revert "Move GameKit overlay to GameCenter."
[33mc011b9f[m Add method to get first chunk in code completion string with punctuation
[33ma587c3b[m Check if an extended type is null before further look up. rdar://22036358
[33m87018e5[m [CodeCompletion] No crashing when function name is empty. rdar://21149908
[33m54cca1a2[m Restore fully-general signature for IntervalType.overlaps.
[33m7e44476[m Allow ArchetypeTypes to appear in same-type requirements.
[33m9f28569[m [emacs] Update sil.rst for new instructions.
[33mc197c62[m Add some missing instructions to SIL.rst and order it more along the lines of SILNodes.def.
[33mada5487[m add fixit tests to random other tests.
[33me078c8c[m add fixit checks to stdlib tests.
[33mb6206ab[m add fixit checks to various type checker testcases
[33m98169c5[m add fixit checks to ClangModules.
[33mfc64acb[m Add fixit checks to various test/attr tests.
[33m8eec4b6[m RangeReplaceable: document and enforce count >= n for removeFirst(n)
[33m9c77c05[m stdlib: Call a private specialized version in String.init
[33m6164542[m [castle] Correct byte transfer logic for large transfers.
[33m92feced[m add some code that causes -verify to error when a fixit was generated, but not specified in a testcase.  Currently disabled, pending discussion.
[33m1300dcd[m make test lines more specific.
[33m8c112d1[m stdlib: Always inline the _UnsafePartiallyInitializedContiguousArrayBuffer builder functions
[33mb6fbccc[m Fix <rdar://problem/21544303> QoI: "Unexpected trailing closure" should have a fixit to insert a 'do' statement
[33m54a5784[m add a radar # for a non-optimal diagnostic.
[33m7a73392[m improve diagnostics relating to closure result types, both when they are explicitly written and disagree with context, and when context provides a non-explicitly written type that disagrees with the body of the closure.
[33m7e31460[m fix an off-by-two in the previous patch.
[33m738ccaf[m teach -verify mode to automatically update incorrect fixit requirements when autoApplyFixes is enabled, because, well, we can.  NFC since noone uses this.
[33m1ea9886[m Add a testcase for a fixed radar.
[33m0540b57[m [test] Temporarily disable Interval tests to go with r30977.
[33m313a4c9[m Review: Index protocol extensions
[33m8febbc1[m Suggest NSURL path methods instead of NSString
[33m03e3dc2[m stdlib: Workaround for IntervalType.overlaps to avoid a SIL parser error.
[33m828eb68[m Commit DaveA's API changes to 'print', along with the compiler changes necessary to support them.
[33mc5bc10a[m stdlib: Update a comment I missed on Strideable.
[33m83e2e0b[m Move the 'stride' family into methods on Strideable.
[33m1ee08fe[m stdlib: Move 'overlaps' into a method on IntervalType.
[33mf8e418d[m Add renamed fixits for CG overlay API change rdar://problem/19788137
[33m748845a[m Now that we have contextual type information more generally available, start using it to improve closure diagnostics by inferring the types of otherwise untyped closure paramdecls from this context information.  This resolves:
[33m9534240[m Guard "object literals" feature with SWIFT_ENABLE_OBJECT_LITERALS.
[33mc8acc85[m [test] Try fixing test/IDE/print_clang_header.swift for the iOS bots by passing the right clang architecture and platform version.
[33md7e07b1[m [CodeCompletion] When code completing import decls, we only show the module names that are not yet imported in previous import decls.
[33m3a73be8[m stdlib: add a rationale for the design of removeFirst() and removeLast()
[33m7f12c9f[m [CodeCompletion] Add the initial support for code completing import declaration. When a user invoke code completion after import keywords, the names of visible top level clang modules were recommended for finishing the import decl.
[33me4d1ac9[m Revert "[CodeCompletion] Add the initial support for code completing import declaration."
[33mcd947e3[m Make CoreGraphics overlay naming consistent with the Standard Library
[33m311baf7[m Index protocol extensions
[33m5e0014b[m [CodeCompletion] Add the initial support for code completing import declaration. When a user invoke code completion after import keywords, the names of visible top level clang modules were recommended for finishing the import decl.
[33ma41c1fe[m [stdlib] Don't try to swap an element with itself in 'partition'.
[33m9a77d84[m stdlib: update references to 'isEmpty' in comments
[33m688028e[m Use the product of RangeReplaceable tests, not the zip.
[33m7863673[m COWArrayOpt: Remove now dead code
[33m6d3a1cc[m improve a diagnostic, resolving a fixme.
[33m4bde024[m Only add this debugging option in assert builds
[33m47d3f9a[m Uniqueness hoisting: Always perform type based analysis
[33m442715b[m COWArrayOpt: Not safe to continue here
[33m7463086[m COWArrayOpt: Debugging flag
[33m9dc0c8a[m Importer: Prefer more available convenience factory initializers over less available convenience initializers
[33m2ec7a31[m [IDE] When doing ObjC header interface printing, ignore forward references to protocols as well.
[33m292db32[m [sil-combine] Be more careful when removing convert_function instructions.
[33ma2f2f70[m Re-apply "[sil-combine] Add peepholes for try_apply(convert_function(...)) patterns."
[33m2c49ba8[m Re-apply "[sil-combine] Extend optimizeApplyOfConvertFunctionInst to work with try_apply."
[33m881a98b[m [IDE] When doing ObjC header interface printing, ignore decls in that header that are forward references.
[33m88b3125[m fix <rdar://problem/22108568> Infinite recursion in typeCheckChildIndependently()
[33mb3dd0fa[m [IDE] When doing ObjC header interface printing, make sure to handle -include properly.
[33me605b93[m [IDE] For swift file interface generation, print the active parts and ignore IfConfigStmts.
[33m23e942f[m Reimplement the "multi-statement closures require an explicit return type" as a proper error, and change it to not be incorrect.  Multi-statement closures *only* need a return type if they cannot be inferred.
[33m733f29d[m SIL: Fix DI crash with chaining initializer in class with no properties
[33m0bb52f0[m [IDE] Fix the 'preamble' top-comment printing when printing the swift source interface.
[33m3485a97[m Diagnose ambiguous initializer resolution.
[33m0c9de6e[m Diagnose ambiguous overload resolution correctly in more cases.
[33mbd03e48[m teach typeCheckArgumentChildIndependently how to propagate type information down to call argument lists that have more than one operand (heavily leveraging "computeTupleShuffle").  This resolves a great number of QoI radars, including things like: <rdar://problem/19981782> QoI: poor diagnostic for call to memcmp with UInt length parameter
[33m799c366[m Fix some issues where replacing multiple sequential diagnostics could lead to an "overlapping diagnostics" assertion because two fixits were zapping whitespace.  NFC, since noone except me uses this.
[33m2da632d[m add a helper function, NFC.
[33m4230520[m Work-around to keep a bot happy.
[33mbb6dfa4[m remove extraneous ;,  NFC
[33m3fe5416[m Do not copy a SliceBuffer when we have the full native buffer. Just return it.
[33m0b0a903[m remove a now-dead diagnostic.
[33m9e7f602[m Handle diagnosing unbound archetypes in the outer level ambiguity diagnostics machinery, instead of in multiple places in CSSolver and CSDiags.  This leads to more predictable behavior (e.g. by removing the UnboundGenericParameter failure kind) and eliminates a class of "'_' is not convertible to 'FooType'" diagnostics.
[33md4a9aba[m Expand upon r30921 to allow for remapping against parameter tuples consisting of a single vararg entry. (rdar://problem/18083599)
[33m3fab0eb[m Consider varargs in the first function parameter position when remapping argument constraints to accommodate default values. (rdar://problem/22056861)
[33m9d9b8aa[m move protocol conformance errors away from being diagnosed as a Failure, instead putting it into the expr diagnostics path, allowing more contextual messages.
[33mf02a16f[m refactor diagnoseFailureForExpr and the code surrounding it to make it clear that it *always* produces a diagnostic.  NFC.
[33m5deadfb[m didn't mean to comit this...
[33mbdaf954[m when recursively type checking an expression with its contextual type and other constraints intentionally ripped off, tell the recursive solution that we can tolerate an ambiguous result.  The point of this walk is not to produce a concrete type for the subexpression, it is to expose any structural errors within that subsystem that don't depend on the contextual constraints.
[33m3ace22f[m change the constraint system dumper to use words instead of archaic symbols when dumping out constraints.  I could never remember what <oac meant, for example.
[33mcc2643c[m [stdlib] kill off a missed ".array"
[33m08f1421[m Import latest compiler crashers from practicalswift
[33m48fe3e1[m SILGen: Fix static computed properties in protocol extensions
[33m54c7521[m when diagnosing an invalid conversion between two function types, strip off irrelevant noescape/throws bits to avoid confusing the issue with folks who don't know that you can pass a nothrow closure to a throw parameter (which are going to be pervasive in the stdlib)
[33m84e27fa[m [IDE] Properly annotate subscript brackets as references to subscript decls and enable jump-to-definition for them.
[33m76f1a06[m [sdk-analyzer] Remove modules that have become unavailable for swift.
[33mdcfc618[m improve QoI of inout argument failures, and strip some single element tuple labels.
[33m5ea5ce0[m Source range of backtick-escaped identifier token should include backticks.
[33md3b1bcb[m update validation tests for diagnostics changes.
[33m97e6a50[m Start using contextual information from function calls to diagnose issues in their argument.  For now we start with some of the most simple cases: single argument calls.  This dramatically improves the QoI for error messages in argument lists, typically turning a error+note combo into a single specific error message.
[33m7a91af8[m Revert "[sil-combine] Extend optimizeApplyOfConvertFunctionInst to work with try_apply."
[33m7c05776[m Revert "[sil-combine] Add peepholes for try_apply(convert_function(...)) patterns."
[33mad43a59[m [stdlib] Retire the old lazy subsystem...
[33md7caf06[m stdlib: rename generic parameter of _SliceBuffer from T to Element
[33md822a90[m stdlib: fix warnings
[33m4f5c57f[m [test] Fix IDE test for r30895.
[33m65d804f[m Minor cleanup. NFC.
[33m3b1383c[m Disallow overriding a throwing @objc method with a non-throwing one.
[33m136cc5a[m Always look through vararg parameters when performing overload resolution. (A step towards a fix for rdar://problem/22056861)
[33mcd3d98c[m [Serialization] Don't look at extension members when resolving XREFs.
[33m91d1821[m Explode Algorithm.swift.gyb into separate test files
[33m7b6b26a[m [CodeCompletion] Only filter out non-required inits for class type.
[33m529432f[m Runtime: Reflect through nested existential containers.
[33m8a0b1a7[m Updated PlaygroundTransform to call a function after print() is called. We no longer try to change the print() statement.  I updated the tests, too.
[33m3c7c165[m Add tests for previous commit.
[33m1473828[m [Driver] Don't crash on a bad swiftdeps file.
[33m29fcee3[m [CodeCompletion] Show only required init() as members of dynamic metatype. rdar://22074073
[33m7849123[m Sema: Base whether the base of a property lookup needs to be 'inout' on whether any of its accessors is mutating.
[33mfecf0c0[m teach autoApplyFixes how to remove diagnostics that are no longer produced. NFC since noone uses this.
[33mc551ec6[m Add support for emitting sib files to _compile_swift_files.
[33m5c5e993[m teach the logic in FailureDiagnosis::diagnoseFailure to retypecheck inner expression nodes when contextual type information is provided for them.  NFC since this type information is never provided yet.
[33m509ff78[m Fix in <rdar://problem/21600924> Typo "be be" in live issue
[33m20ff9df[m Sema: More robust in the face of missing stdlib protocols
[33m1ca5607[m Sema: Fix crash if subscript return type cannot be resolved
[33mb894980[m AST: Include metatype representation in dumps
[33m10c4245[m ArchetypeBuilder: Pointer -> Reference
[33mc474f96[m [sil-combine] Minor code clean-up. NFC.
[33m8246848[m add some testcases for situations that produce unpleasant errors.
[33m31ef950[m add a special case diagnostic for invalid uses of 'nil' in certain contexts, so we complain about 'nil' instead of NilLiteralConvertible.  This doesn't have much effect on the testsuite at the moment, but will when other changes land.
[33m8364944[m [sil-closure-specializer] Add try_apply support to the closure specializer.
[33m1b75233[m [sil-combine] Add peepholes for try_apply(convert_function(...)) patterns.
[33m819abef[m [sil-combine]   Add a peephole (try_apply (thin_to_thick_function f)) -> (try_apply f)
[33m71d6b73[m [sil-combine] Extend partial_apply optimizations to work with try_apply.
[33m1afaa8c[m [sil-combine] Extend optimizeApplyOfConvertFunctionInst to work with try_apply.
[33mb02120d[m [sil-combine] Peephole for the convert_function
[33mb937aba[m Add a callback parameter to the eraseUsesOfInstruction function. NFC.
[33m8959a2e[m During overload resolution, if all other things are considered equal, consider empty protocol compositions when comparing refinement, and favor concrete types.  (rdar://problem/22044607)
[33m7d5bb5f[m [stdlib] new print: move "toStream" argument to end
[33ma863f05[m remove dead code.
[33m5ece5ca[m the onlyFailures argument to savlageExpr is always false, constant prop it away.  NFC.
[33me626331[m Infrastructure for passing type information from call sites down to argument expressions.  This is currently diabled, so NFC.
[33maca1a9a[m actually, remove typeIsSpecialized entirely.  With other changes that have gone in, it is the same as !hasTypeVariable.
[33m3524fda[m Fix placement of '!' in fix-it for chaining to a failable initializer.
[33m0d2b2ff[m invert the sense of typeIsNotSpecialized to typeIsSpecialized to avoid double negatives in client code, NFC.
[33m253a0ca[m Don't replace BB args with them self in unreachable code
[33m0830f36[m add some testcases from radars fixed by recent work, NFC.
[33mb2086fd[m AST: Fix false positives in ConstructorDecl::getDelegatingOrChainedInitKind()
[33m20a50ef[m ConvertFunctionInst preserves RCIdentity.
[33m1f1de2e[m [ls-opts] strong_retain_unowned, unowned_retain, is_unique, is_unique_or_pinned should not stop load->store forwarding.
[33m7a49dda[m Add @warn_unused_result to map, flatMap, and filter
[33mf6f3bec[m [CodeCompletion] Remove duplicate results from protocol extensions
[33m6171df6[m Sema: Don't favor extension methods over protocol requirements
[33md1d5bcf[m Small cleanups to overload-related code, NFC
[33mc988712[m don't abort on this failure mode, even though nothing in the testsuite provokes it.
[33m5a2577a[m improve the diagnostic for invoking a method on an exsitential that is not allowed, fixing <rdar://problem/22020088> QoI: missing member diagnostic on optional gives worse error message than existential/bound generic/etc
[33m034d0cf[m Fix three-way mid-air collision around Array buffers and RangeReplaceable tests
[33m7851d34[m merge the ErrorDoesNotHaveInitOnInstance complexity into the normal "member not found" diagnostic machinery.
[33m4007369[m make test more specific, nfc.
[33mf924e8e[m ArraySlice indexes no longer zero-based
[33md9088af[m stdlib: add MutableSlice
[33m61b9356[m Eliminate UnsafeMutableBufferPointer from _withUnsafeMutableBufferPointerIfSupported
[33m67b8b6f[m Sema: Base lvalue-ness of storage access on whether setter is mutating, not on kind of type.
[33mf11c861[m Memcpy, Memmove, Memset do not decrement ref counts.
[33m8e06e59[m Add BuiltinInst::{getIntrinsicID(),getBuiltinKind()}.
[33m61c1e99[m [IDE] Expose an API to extract plain text from given comments. rdar://22021120
[33m78e67fc[m [test] Add missing REQUIRES.
[33mded145d[m copyArray does not decrement reference counts.
[33m26438e4[m [ClangImporter] Handle -Xcc -include, sort of.
[33ma2ec277[m Don't crash when a property and a member type have the same name.
[33m1e84e57[m [ClangImporter] Remove dead code after r30814.
[33m4718f29[m testcase fixed by recent changes.
[33mb53f380[m refactor/localize some constraint ivars into local variables, NFC.
[33m73b7f89[m Also, don't test for a trap message in release builds that don't trap with messages.
[33md06a078[m [stdlib] Move _playgroundPrintHook into OutputStream
[33mb428dc8[m [stdlib] wire _playgroundPrintHook into legacy print
[33m7f86227[m Don't expect crash output if test isn't expected to crash.
[33m50be7e4[m reapply r30789, r30795, r30796, r30797, without r30787 which causes a compile time hit:
[33mc2ec35e[m [stdlib] Add _playgroundPrintHook
[33m8edbbef[m [ClangImporter] Use real negative literals for imported constants.
[33m4f87b6e[m Fix <rdar://problem/18063644> [SWIFT] XCTAssert(Non)Nil should work on any optional type
[33m6410001[m Allow capturing from another TopLevelCodeDecl.
[33m76cf178[m [SILGen] Emit all TopLevelCodeDecls in a single scope.
[33m931fed0[m [stdlib] "end:" => "terminator:" in new print
[33mc28dc93[m Remove useless constructor call.
[33ma705e0f[m Clean-up the code. NFC.
[33m5e760ca[m Fix copy forwarding header. NFC.
[33mc1a2955[m Revert r30787, r30789, r30795, r30796, r30797
[33mc5ebe15[m [CleanUp] Use DC as the abbreviation of DeclContext.
[33m33611bf[m [Test] Update test to use locally defined types instead of those from stdlib.
[33m4cb3441[m stdlib: Don't reserve capacity for filter result array.
[33m4d2db34[m [sil-devirtualizer] Update the tests and convert them into SIL.
[33m1539be7[m [sil-devirtualizer] Fix propagateConcreteTypeOfInitExistential to properly support try_apply.
[33md8b55d2[m [sil-devirtualizer] Some missing pieces for the devirtualization of try_apply during inning.
[33mf293e84[m revert part of my previous patch.
[33m98a4453[m Produce more specific diagnostics relating to different kinds of invalid member references:
[33m1d9bd69[m add a testcase, nfc
[33m0c39db2[m stdlib: Implement strict 'map', 'filter', and 'flatMap' as 'rethrows' operations.
[33meec5947[m stdlib: Factor _copy*ToNativeArrayBuffer into a general-purpose "builder" for ContiguousArrayBuffer.
[33mf62d95d[m stdlib: Add 'rethrows' to more SequenceType and CollectionType algorithms.
[33mce94497[m stdlib: Mark short-circuit operators as 'rethrows'.
[33m1d49d92[m stdlib: Mark many higher-order function interfaces as 'rethrows'.
[33mfe04ebf[m - Reimplement FailureDiagnosis::diagnoseGeneralMemberFailure in terms of   performMemberLookup, eliminating a ton of duplicated logic, but keeping the   same general behavior.
[33m7ebe973[m AST: Preserve hack to consider 'defer' function bodies to be @noescape.
[33m4fb19ad[m Fix places in the constraint solver where it would give up once a single constraint failed, leaving a bunch of other solvable constraints laying around in the system as inactive.
[33m9df95e8[m Simplify logic in simplifyMemberConstraint, NFC.
[33m25eb645[m [ls-opts] Make sure to invalidate StoreMap stores when we fail to eliminate a dead store.
[33m3028dc8[m Failure to load a bridging header -> failure to load a module.
[33md0b61a8[m [Test][CodeCompletion] Add a test for dynamic type.
[33m5a1946e[m [CodeCompletion] Add init() to the code completion results after metatype + dot. rdar://21474100
[33m903bf97[m Chop overly long lines.
[33m1f8ef25[m For types imported from Objective-C, convenience initializer inheritance may result in two seemingly identical initializers being added to the overload group of an initializer application. In such cases, rather than raise an ambiguity error, we should favor the most derived type's initializer. (rdar://problem/21979968)
[33m1a01fee[m [stdlib] Strip comments and other distractions from unavailable APIs
[33mb698a08[m [stdlib] Add new print functions (underscored)
[33m17ca02f[m split the meat of simplifyMemberConstraint out into a new performMemberLookup helper function, this makes it simpler and enables reuse by CSDiags.
[33m29409b4[m Add testcase for a bug that seems to be fixed
[33mf97f331[m We shouldn't be using -verify in compiler_crashers
[33m0743f07[m [CodeCompletion] Address Argyrios' and Ben's comments.
[33m70ea919[m Remove potential stdlib interaction from test
[33m78efe5d[m [Test][CodeCompletion] Add test for "super" appearing in extension.
[33mef99521[m IRGen: Only omit the partial apply forwarding thunk if the callee is not polymorphic
[33mf435510[m Add testcase for a bug that seems to be fixed
[33m6ccee9c[m s/redundent/redundant/g
[33m3a5e3b2[m testcase for radar fixed earlier today
[33m3218595[m Fix: <rdar://problem/21560309> inout allowed on function return type <rdar://problem/21949448> Accepts-invalid: 'inout' shouldn't be allowed on stored properties
[33m63dae0a[m simplify this testcase, which (sadly) makes the test run much faster but still provokes the bad behavior
[33md3e1f2b[m testcase for a bug fixed by r30746
[33mbca4b12[m [PrintAsObjC] Handle blocks whose parameters come from a typealias.
[33m0711371[m [stdlib] Update FIXMEs to place the blame correctly
[33m1f3bf27[m Warning suppression in tests
[33mb6d4007[m [stdlib] Fix incorrect comment
[33m32667fd[m [CodeCompletion] Add "super" keyword to code completion results when "super" is meaningful in the current decl context. rdar://20401979
[33me6a3b0c[m [PrintAsObjC] Add a test for bridging Array<NSRange>.
[33mb3a4e11[m ImplicitlyUnwrappedOptional is bridged to ObjC, but it's not @objc-friendly.
[33mf2746ea[m Add inout expr validation to the SyntacticUseRestrictions checker in MiscDiagnostics, allowing us to correctly and consistently reject InOutExprs that do not appear in argument contexts.
[33m694a821[m [sil-devirtualizer] Enable witness_method devirtualization when invoked via try_apply.
[33m41af0ee[m [sil-devirtualizer] Enable try_apply devirtualization also during inlining.
[33mb52fafe[m IRGen: Fix emission of optional dynamic self type when bound to a generic argument
[33m62bae87[m [ClangImporter] Import typedefs of block types as fully-bridged closures.
[33mf777b59[m Remove unnecessary 'const' from CodeCompletionString
[33m7215709[m use llvm_unreachable.
[33m8a9c93d[m With the previous fix, all of the tests from: https://twitter.com/practicalswift/status/625429628107255808?refsrc=email&s=11
[33m794f9d9[m fix <rdar://problem/18496742> Passing ternary operator expression as inout crashes Swift compiler
[33md31911e[m fix <rdar://problem/21974772> SegFault in FailureDiagnosis::visitInOutExpr
[33me079d52[m Move test from r30724 to a more appropriate place.
[33m1a0a031[m wordsmith a diagnostic, NFC otherwise.
[33m1f39e3c[m Fix bad warning suppression
[33m87b1e35[m Clean up fallthrough warnings
[33meaac7bb[m Treat debugger functions as top-level code for the purposes of throw-without-try error checking.
[33m791a7bf[m [IDE] Make sure we are printing documentation comments for enum elements, when printing the interface.
[33m715af1b[m [swift-ide-test] Enable keeping track of documentation comments if we intend to print them.
[33ma0c07f1[m Disallow @objc in extensions of classes with inherited generics as well.
[33md4e1656[m When opening the type of a member reference for a given overload, and the context of the self type is a class-constrained existential, do not automatically wrap the self type in an inout. Doing so leads to mismatched expectations during constraint application, which will result in a compiler crash. (rdar://problem/22012606)
[33m3e9357a[m [CodeCompletion] When completing init calls, stick to the type alias name given by the user instead of (smartly) showing the underlying type name. rdar://18586415
[33mef3a73d[m Until Adrian gets back from vacation, just turn off this assertion.
[33m5b9bffe[m Prefer error about inheriting from NSObject over error about generics.
[33mb887f79[m Give better error messages for use of @objc in extensions.
[33m177588d[m Only allow collections to contain @objc types in @objc methods and properties.
[33mb1e496a[m [swift-ide-test] Consolidate the printing options for doPrintAST().
[33mf3816e6[m DebugInfo: Do not infinite loop on indirect enums.
[33mb722188[m update a test I failed to update, and add a hack to avoid a regressing a validation test.
[33mede0c50[m Revamp how value & type member constraint failures are diagnosed, eliminating the "unavoidable failure" path, along with Failure::DoesNotHaveNonMutatingMember and just doing some basic disambiguation in CSDiags.
[33me94e282[m fix a couple of testcases I failed to update
[33m922a7f5[m consolidate the diagnostics produced by the "Failure" case and the expr walker in CSDiags to get the same wording, fixing <rdar://problem/21964599> Different diagnostics for the same issue
[33m06cc05d[m reword a diagnostic, as suggested by Jordan
[33m21b7dcf[m stdlib: mark one of the global sort() functions unavailable
[33m696da80[m [sil-devirtualizer] Support devirtualization of try_apply instructions.
[33m8536742[m [CodeCompletion] Adjust archetype depth so that mangler is always consistent with type checker. rdar://21435993
[33m11600e1[m [CodeCompletion] Add checks for erroneous extended types to prevent crash. rdar://21436558
[33m20781df[m SILGen: Fix crash when opening boxed existential lvalue
[33m4dcc3f1[m [CodeCompletion] No crash on a terribly wrong code completion position. rdar://21796881
[33m4ed4497[m Updates to the index invalidation rules: indices are composites of offsets
[33m3d64776[m [sil-devirtualizer] Fix a bug with covariant optional return types.
[33m9d5352d[m Fix the test to be independent of the fragile stdlib details.
[33m0c88bd9[m stdlib: more tests for {Set,Dictionary}.removeAtIndex
[33mb75f5f2[m Type-check catch patterns in closures as necessary in order to decide whether they're exhaustive.
[33m63b0cf6[m [test] Remove -verify from former compiler_crasher.
[33mee08177[m Tweak diagnostics for non-self-conforming protocols.
[33m9e5631c[m [test] More type annotations for faster builds.
[33mb378a50[m [stdlib] Dictionary and Set's removeAtIndex should return the element.
[33mc712ce3[m simd overlay: drop label from second parameter in distance, distance_squared
[33mf37d607[m Revert "stdlib: remove FlattenCollection -- it does not model CollectionType properly."
[33ma112e54[m stdlib: Underscore global functions that operate on _SwiftNSOperatingSystemVersion
[33ma9742a2[m Add a comment to explain why we can't just use getMethodFamily(), as requested by Jordan's review.
[33mccf21ff[m Revert "Sema: Fix infinite recursion when associated type default references itself"
[33m0dd3495[m IRGen: Hack for fixed-size arrays in GenClangType
[33m29d3f8f[m Sema: Fix infinite recursion when associated type default references itself
[33m6ec1447[m stdlib: Add more APIs to _stdlib_AtomicInt
[33m380fc28[m Sema: Use correct expression for location info
[33mb24671c[m Sema: Fix false positives for 'storing property in willSet' diagnostic
[33m8e380a6[m [Test] Correct stale coloring.swift test. After re-enabling this test by removing "REQUIRES", there are several bogus fails. This commit fixes them.
[33mda69adb[m [SyntaxHighlighting] Fix a issue when detecting multiple urls exist in one line of commit.
[33mf51335a[m [SyntaxHighlighting] Highlight platform keywords inside available attributes. rdar://21905215
[33mf2d73df[m [Test] Rmove "REQUIRES" in the test file; this word unintentionally disabled the test.
[33m49adc5b[m Allow running iOS tests that don't require a device without a device attached
[33m3bead78[m ArchetypeBuilder: Fix infinite recursion with recursive requirements
[33m65b317f[m Sema: Fix infinite recursion when checking if class with circular inheritance has failable initializer
[33m1a34667[m AST: Fix a couple of crashes with nested generic types
[33m7dd4726[m Sema: When recursively visiting a BoundGenericType, it may not have a generic signature yet
[33m7bca00a[m Sema: When adding implicit constructors, bail out if superclass is invalid
[33m5cc4f2b[m Sema: Use isTypeChecking() to avoid recursively validating EnumElementDecls
[33m56c2577[m SILPasses: Fix typo, NFC
[33ma4c6c37[m missed updating this testcase
[33mf360dec[m refactor CSDiag a bit to prepare clients of typeCheckChildIndependently to be able to provide a contextual purpose.
[33m8c3e62d[m Provide contextually sensitive conversion failure messages for situations in which we have a contextual type that was the failure reason.  These are a bit longer but also more explicit than the previous diagnostics.
[33meb01d5d[m word-smith a diagnostic in preparation for it becoming a family.
[33mafe762c[m remove diagnostic messages from expected- markers that change.  If the specifics being tested are important, they should be tested in the main testsuite.  Leave the 'word' validation messages.
[33md24cb2d[m didn't mean to commit this...
[33m66683f9[m Eliminate the "IsReturnExpr" bit from the AST - it was a poorly maintained version of the new CTP_ReturnStmt conversion, used to generate return-specific diagnostics.  Now that we have a general solution, we can just use that.
[33maa68b5a[m add a 'purpose' for convertType in typeCheckExpression which will allow us to produce more specific and helpful diagnostics.  NFC since it isn't used yet.
[33meff5cb3[m remove a -verify line from a validation test.
[33m3255371[m err, fix r30661
[33mf38888a[m remove some dead code, NFC.
[33mad501d6[m move ExistentialEraser (awesome name btw, I do not read it as an eraser of existentials :-) into CSDiags, its only client.  Make the class private as well.  NFC.
[33m5f97044[m more refactoring: bubble handling of ConvertTypeIsOnlyAHint out of solveForExpression (so that only typeCheckExpression itself has to care about it) and eliminate the dead convertType argument from getTypeOfExpressionWithoutApplying().  NFC.
[33m4cba61f[m Refactor things a bit, NFC: typeCheckExpression takes a convertType and a contextualType, but the only client of contextualType is pattern binding initialization that wants to provide a hint to the initializer, but the type may not be fully formed (e.g. just Array instead of Array<Int>) so it can't provide a full convertType to that type.
[33m449e835[m this went with the former patch, bad cherrypick
[33m645a9e5[m strength reduce storage for contextual type in ConstraintSystem, since there can only be one.  NFC.
[33m69531fd[m Restore FixedPointDiagnostics.swift.gyb, it is a useful test
[33mee93229[m remove this abandoned and xfail'd test from the tree, because it keeps causing me trouble.  I attached it to the radar tracking fixing its XFAIL, rdar://19422987 so that its absence would not cause us heartburn.  It has been XFAIL'd since apr'14
[33mcd3cf3d[m If no contextual type is specified, but a conversion type is, save the conversion type as the contextual type.  This drives CSDiags more strongly towards favoring it.
[33mdc7b137[m didn't mean to commit this
[33ma8d9aec[m revert r30641, it wasn't correct.  We produce better diagnostics for the cases I was worried about anyway now.
[33m467cd07[m Two changes:  - Improve handling of if_expr in a couple of ways: teach constraint simplification    about IfThen/IfElse and teach CSDiags about the case when the cond expr doesn't match    BooleanType.  This is rarely necessary, but CSDiags is all about cornercases, and this    does fix a problem in a testcase.  - Be a bit more specific about the constraint failure kind (e.g. say subtype) and when    we have a protocol conformance failure, emit a specific diagnostic about it, instead of    just saying that the types aren't convertible.
[33m622b646[m rename a local variable, nfc
[33mfe16d7d[m CollectionTransformers prototype: remove redundant types and return statements
[33md91f586[m Change diagnoseFailure() for unavoidable failures to stop doing anything with conversion failures, making a bunch of diagnostics more specific and useful.
[33mb1f77b5[m the default args recovery change fixed this crasher.
[33mffc3554[m fix error recovery when parsing an invalid default argument to drop the default argument, this avoids having downstream errors perturbed by their illegal presence.
[33m551873a[m CollectionTransformers.swift uses modules that are not available on Linux
[33m7a5e95a[m stdlib: add my prototype for collection transformers that support parallel execution
[33m0a31973[m Various changes:  - Don't "aka" a Builtin.Int2123 type, it just makes a bad diagnostic worse.  - Split out the predicate that CSDiag uses to determine what a conversion    constraint is to a helper fn, and add subtype constraints to the mix.  - Move eraseTypeData into CSDiag (its own client) as a static function.  - Make eraseTypeData be a bit more careful about literals, in an attempt to    improve diagnostics when literals get re-type-checked.  It turns out that    this still isn't enough as shown by the regression on the    decl/func/default-values.swift testcase, and the    Constraints/dictionary_literal.swift testcase where one bad diagnostic turns    into another different one, but I'll keep working on it.  - Beef up diagnoseContextualConversionError and the caller to it to be more    self contained and principled about the conversion constraints it digs out    of the system.  This improves the diagnostics on a couple of cases.
[33mbabcbe0[m fix a bug in the type checker handling references to instance methods with metatype bases.  Consider this example (reduced from NameBinding/name_lookup.swift):
[33m31e91a0[m consolidate a duplicate diagnostic id into an existing one, and convert some code to use a standardized approach to emitting "no arguments" call issues.
[33m30e8a3c[m SILGen: Add test that 'defer' bodies can capture generic context.
[33m0b1283b[m Have 'defer' statements cons up func decls instead of closure literals.
[33m2b90306[m remove ConversionTypes from ConstraintSystem and simplify code now that noone uses it.
[33mb0449d5[m Change typeCheckCondition and solveForExpression to stop using setConversionType along with the constraints they install.  The constraints should be enough by themselves, and CSDiags shouldn't need them to bias the solution.
[33m0af2b47[m Sema: Fix crash with protocol erroneously nested inside generic class
[33mec603ce[m Sema: Nuke some duplication, NFC
[33m8215394[m Sema: Remove redundant call, NFC
[33me373a55[m Sema: Fix type member lookup if generic signature validation fails
[33m6256158[m Sema: Fixes for stored let property access from constructor
[33mb68379d[m add a helper "dump()" function on ConstraintLocator that takes a ConstraintSystem, because that's what we usually have around.
[33m72e3c30[m Change getBoundTypesFromConstraint to use simplifyLocatorToAnchor which is more correct and general than "getDiagnosticTypeFromExpr".  Eliminate the old function.
[33m3181ea3[m implement the mechanics for -verify mode to auto-apply the fixits it generates, this isn't wired up to anything yet though.
[33m746e5aa[m remove this test, it isn't a good test.
[33m5e4cd16[m Have -verify mode emit the expected diagnostic text as a fixit to avoid confusing and redundant output, e.g.:
[33m7d61186[m Revert "fix the validation test failure due to producing 'aka' more often."
[33m9f0eb24[m reimplement the Errors array in terms of the more general llvm::SMDiagnostic type, and use a lambda to simplify the code manipulating errors to emit. NFC.
[33mbe933f8[m For diagnostics where the message changed, instead of producing something like:
[33m649e5f9[m generalize the existing ? and + constraints on expected diagnostics to a simpler and more general * constraint.  This paves the way for other improvements.
[33mc469bd3[m fix a buildbot breakage due to a dangling pointer.
[33mfc44598[m rework -verify mode to parse the list of expected diagnostics into a temporary data structure, before verifying matches.  NFC.
[33m57634fe[m fix the validation test failure due to producing 'aka' more often.
[33mc6de78b[m stdlib: add fixit-based migrations for appendContentsOf and insertContentsOf
[33m7822223[m stdlib: remove FlattenCollection -- it does not model CollectionType properly.
[33m739cceb[m stdlib: lazy FlattenCollection: don't invoke the closure as frequently
[33ma42ff82[m Handle optional return for UIGraphicsGetImageFromCurrentImageContext too.
[33m94bf2be[m Add the ability for clients of typeCheckChildIndependently to specify a contextual type.
[33m5fae58c[m remove getUserFriendlyTypeName.
[33me77e058[m Enforce maximum allowed access for extensions with 'where' clauses.
[33mb0debdc[m Take requirements into account when checking an extension's explicit access.
[33ma8ead42[m Take requirements into account when computing an extension's default access.
[33m622ea5e[m wind down most of CSDiag's uses of getUserFriendlyTypeName to pass the Type directly into the diagnostics subsystem.  This ensures a more consistent treatment of type printing (e.g. catches a case where a diagnostic didn't single quote the type) and gives these diagnostics access to "aka".
[33m4b008e6[m stdlib: rename RangeReplaceableCollectionType.splice() to insertContentsOf()
[33md97ac3e[m stdlib: rename RangeReplaceableCollectionType.extend() to appendContentsOf()
[33m1a61bab[m with recent changes, we can significantly simplify getUserFriendlyTypeName... before eliminating it completely.
[33m7ff6866[m Fix overrides of ObjC methods returning CF types by inferring owned/autoreleased results correctly.
[33meab2b55[m Fix a couple test issues found by running the module verifier.
[33m3023a5f[m Introduce a simple dedicated SIL pass to fetch and use pre-specializations at -Onone.
[33mb0ec0d6[m Revert "stdlib: Mark many higher-order function interfaces as 'rethrows'."
[33mf50fad6[m Remove redundant assignment. NFC
[33m4e69aeb[m Introduce a new TCC_AllowLValue bit to inform typeCheckArgumentChildIndependently when we want an lvalue back, instead of it always producing an lvalue.  Provide it in a couple of places, the most interesting of which is when forming a call to an operator where an InOutExpr is implicitly provided by the fact that the operator is an 'assignment' operator (something we don't actually model right in the language at the moment for unary operators).
[33me78bc00[m split the collection and filtering of the CalleeCandidateInfo list into two parts, allowing the collection of the candidate list to be done before the argument expression is type checked.  NFC.
[33m8592d90[m Don't apply module-shadowing rules to protocol members.
[33m4be02ca[m stdlib: Mark many higher-order function interfaces as 'rethrows'.
[33m897c34a[m [stldib] Add missing comments for new reverse collections
[33m87442c6[m remove dead code, nfc
[33m06d59f3[m Suppress a warning
[33mc46b80d[m [stdlib] _prext_reverse -> method
[33m5d989c9[m HighLevelSILOptimizations.rst: change Slice<T> to ArraySlice<T>
[33m5b7ba8d[m HighLevelSILOptimizations docs: Clarify the semantics of check_subscript/get_count
[33mcecf904[m generalize a bool into an option set, NFC.
[33maf589eb[m [InterfacePrinting] Print missing import decls from Swift module instance. rdar://20695897
[33m6a27182[m two unrelated changes:  - Have DiagnosticEngine produce "aka" annotations for sugared types.  - Fix the "optional type '@lvalue C?' cannot be used as a boolean; test for '!= nil' instead"    diagnostic to stop printing @lvalue noise.
[33m62fda94[m SIL: Lower box types from the AST.
[33m902f486[m Don't allow superclass constraints to involve type parameters.
[33m07135ac[m Handle initializer delegation in a protocol extension with a class-bound Self.
[33m629a352[m reapply r30570, now that Sema preserves type sugar more correctly:
[33m56c1f9d[m preserve type sugar more aggressively on result types of constructor calls whose metatype carries sugar and calls to functions whose functiontype carries sugar.
[33m2503266[m Add -isysroot path for PrintAsObjC/swift_name.m
[33m81881ee[m Elminate some dead code; the parser handles this now. NFC
[33mf880276[m Revert "type check the subexpressions of a callexpr more consistently, always checking the arguments independently (not just if one argument is inout).  This routes around issues handling tuples, and brings more consistency to the experience.  Factor this logic out and use it for operators and subscripts as well."
[33me28c907[m type check the subexpressions of a callexpr more consistently, always checking the arguments independently (not just if one argument is inout).  This routes around issues handling tuples, and brings more consistency to the experience.  Factor this logic out and use it for operators and subscripts as well.
[33m77cd337[m make more check lines for diagnostics specific.
[33mc68aa56[m make error messages checks specific.
[33mb947f60[m merge 4 diagnostics into 2 by changing the diagnostic to take a bool. In a CallExpr, evaluate the function subexpr before the argument subexpr, in prep for being able to use this type info to propagate them onto the arguments when available.  NFC.
[33m5d22239[m stdlib: fix warnings
[33m39adf6d[m fix unused variable warning introduced by my last patch
[33mf5de875[m stdlib: remove Word and UWord
[33mef553f4[m fix a FIXME by having diagnoseGeneralOverloadFailure() re-typecheck the argument of a failed call with typeCheckArbitrarySubExprIndependently, which exposed some cases where ErrorType from outer solutions would be left around on ParamDecls in ClosureExprs.  Fix this all, which has NFC on the testsuite.
[33m76c6cf5[m [stdlib] Add missing public inits to LazyMapXXX
[33m940a3eb[m another poor diagnostic.
[33md06290b[m [Serialization] Give a better warning for "module too old".
[33m1dbe753[m stdlib: add more tests for flatMap
[33m4c82fe3[m Tweak diagnostic text for 'rethrows'-related mistakes.
[33m58ccc8e[m Sema: Check mutating-ness of methods irrespective of reference semantics.
[33m2d86296[m When converting a closure's function type to a non-escaping function type, only propagate the 'throws' ExtInfo bit if necessary. (rdar://problem/21881995)
[33m6281557[m add some more closure testcases, some of which are pretty good now, others still not.
[33mea8c410[m [stdlib] Use new lazy collections in implementations
[33m55b0495[m [stdlib] Eliminate redundant eager "filter" implementation
[33mfde48e0[m [stdlib] "count" property passthrough for LazyMapCollection
[33m878445a[m [stdlib] Use a nicer generic parameter name...
[33m9421aa8[m [stdlib] Expose `base` of the new reverse indices
[33mbfd30db[m [ClangImporter] Be more careful about stripping 'k' from enum constants.
[33mdac6052[m Use RemoveFirstNTest for CollectionType.removeFirst APIs
[33m04cca60[m Start peering through the fog of ClosureExprs, using ambiguously typed subexprs to diagnose problems inside of them instead of punting on them completely.
[33m61ccc5f[m Move radar number out of source file.
[33m72df884[m [SyntaxColoring] Correct the node kind of attributes and comment on the special case.
[33m8e44a2f[m [InterfacePrinting] Address Jordan's comments on 30520. We discussed this morning and agreed that the best way to fix rdar://20680375 is to differentiate between printing testable interfaces and printing general interfaces, where the former includes internal decls and the latter does not. Also, we always print accessibility keywords to be consistent.
[33mf00e5bc[m Allow a variadic parameter anywhere in the parameter list.
[33mfdc927e[m [PrintAsObjC] Add missing SWIFT_COMPILE_NAME for classes renamed with @objc.
[33m0e299cd[m CoreMedia: add a test for CMTimeRange(start:duration:)
[33m16735a3[m Fix local variable lookup for names in if/while/guard conditions.
[33mf44901d[m CoreMedia overlay: change camel-casing of preferredTimeScale
[33m953ad53[m Revert "Revert "Unify FindLocalVal across UnqualifiedLookup and lookupVisibleDecls.""
[33m6325cdd[m StdlibUnittest: give unique names to tests
[33m0c89428[m Document more index invalidation rules
[33md926fbe[m Re-apply "Runtime: Enable reflection for multi-payload enums with non-trivial layout"
[33mdf65a19[m Runtime: Fix memory safety violation in getEnumMirrorInfo()
[33mabfcf63[m Sema: Break recursion leading to 'Already set generic signature' crash
[33m0033bda[m AST: Correct handling of ErrorType in TypeBase::getMemberSubstitutions()
[33m3fae9ff[m Sema: Correct handling of ErrorType in TypeChecker::resolveTypeInContext()
[33m226ada6[m Sema: The function may already have a type by this point
[33m685f2e3[m Revert "Unify FindLocalVal across UnqualifiedLookup and lookupVisibleDecls."
[33mce71984[m stdlib: add the missing initializer to NonObjectiveCBase
[33ma3d63a2[m Attempt to fix @objc failures on Linux.
[33m8a2e338[m Unify FindLocalVal across UnqualifiedLookup and lookupVisibleDecls.
[33m95dc5b5[m [SyntaxColoring] Address Jordan's comments. Highlight all decl modifiers for enum element decls, not just "indirect", as keywords.
[33m0733ba4[m Allow @NSManaged to be applied to methods.
[33md980700[m [SyntaxColoring] Add syntax coloring to indirect keyword of enum element decl. rdar://21927124
[33m6471303[m [InterfacePrinting] Alter PrintOptions for interface printing so that user-defined internal decls are visible in the generated interfaces. Also, we always print accessibility keywords in the printed interfaces, so that users can differentiate public and internal decls. rdar://20680375
[33m4cdac3f[m Don't add variables declared in 'guard let' to a SourceFile's Decls.
[33m9bedabe[m add some tests for some (currently horrible) diagnostics generated in closure examples.
[33m842b3c7[m [cast-optimizer] Use a stricter pre-condition
[33m4a3b5ba[m <rdar://problem/17541074> [SWIFT] Should XCTAssertEqual and friends take optional/nullable types?
[33m9d06ac8[m [cast-optimizer] Do not try to optimized a bridged cast if it involves an unbound generic type.
[33ma20bfb0[m Correct 'throw' to 'throws' in function signatures and types.
[33md33f404[m [ClangImporter] Allow importing modules even if there's a fatal Clang error.
[33m9aa5ff1[m Clarify SequenceType.forEach's doc comment
[33m598cf7e[m Add test for SequenceType.split for the separator overload
[33m0001dc2[m remove support for the experiemental "character literals" feature.
[33mbbed5aa[m StdlibUnittest: fix the definition of a 'slice type'
[33m1f2390f[m Drop APIs from NSPathUtilities.h on String
[33meb8d11b[m 25847-emitsimpleassignment.swift crashes with -emit-silgen
[33m4affeb6[m Don't log to /tmp/xx in test/SILGen/reabstract_lvalue.swift
[33mf15745b[m Add 622 new practicalswift tests
[33m4fc6cf2[m Update test for r30500.
[33m05d695f[m stdlib: Fix Linux build breakage from r30493
[33mb63d07f[m Review feedback for r30494 from Jordan Rose
[33md609aa4[m Always serialize absolute search paths.
[33m5cabb04[m SILGen: Handle indirect payloads in if/guard case patterns.
[33mb666b1a[m Un-XFAIL Unicode.swift in optimized mode
[33m7578e2d[m [stdlib] underscore names that were prematurely not underscored
[33m5eb9f39[m Default removeFirst for Slice, ArraySlice
[33m56cde6c[m stdlib: Another simplification in HashedCollections.swift.gyb
[33m871d71a[m Sema: Differentiate between 'class is @objc' and 'class has implicitly @objc members'
[33m3175c90[m stdlib: Clean up HashedCollection FIXMEs now that generic subclasses of @objc classes work
[33m7bcd2eb[m Update validation test diagnostics for r30491
[33mdff93b5[m Now that we have the notion of an uncurry level, we can do a lot more detailed analysis of callees, which give us overload sets in more cases, producing notes more consistently, and producing much better diagnostics for the curried cases in test/Constraints/diagnostics.swift.
[33ma806943[m IRGen: Allow empty-type enum payloads to be projected.
[33m0525573[m stdlib: use syntax sugar for Array
[33m2392e74[m Fix a warning in a test
[33meaa1ef8[m stdlib: Fix sign bug in Float*(integerLiteral:).
[33ma900fd7[m Fix a couple of common crashers related to functions with default arguments. (rdar://problem/21799331 and rdar://problem/21643052, plus dupes.)
[33m69e9229[m Add disabled failing test for <rdar://problem/21933630>, NFC
[33md1c33b9[m AST: Tighten up AbstractStorageDecl::isSettable()
[33mea19773[m SILGen: Reabstract result of 'get' when materializing lvalue to temporary.
[33m6869276[m [test] Use cross-platform-compatible sed invocation.
[33m1f9e445[m Actually add the comment extensions test
[33m5b16185[m Fix -Wnullability-declspec issues in GameplayKit overlay.
[33ma1cd5b5[m [test] Squash warnings in r30462.
[33m963c442[m [Driver] Add support for interface-hash.
[33mfbb8d3f[m Add "interface hash" for improved incremental builds.
[33m50a667b[m Instead of assuming that the return type of a closure with no returns *must* be (), add a defaulting constraint so that it will be inferred as () in the absence of other possibilities.
[33ma7dcff9[m [DocComment] Add test for bogus image URLs and enable all tests
[33mdf93e36[m [PrintAsObjC] Make sure to use a class's custom name when extended or subclassed.
[33mcf0c0c1[m Preference protocol inheritance when comparing two declarations as overloads.
[33m524810f[m [stdlib] Documentation touch-ups for LazyCollection
[33m6be395d[m [stdlib] Documentation touch-ups for flatten
[33mb184e6d[m [stdlib] Document complexity of flatMaps
[33m771761f[m Re-apply "stdlib: eliminate unused typealias and tidy up the doc comment""
[33m3f41e17[m Revert "stdlib: eliminate unused typealias and tidy up the doc comment"
[33m2088a71[m [stdlib] Document the lazy flatMaps
[33ma10ef17[m [stdlib] Document flatMap in terms of map + flatten
[33me52fb06[m [stdlib] Unbalanced braces in gyb'd source makes my indentation unhappy.
[33ma32947c[m Introduce the notion of an uncurry level to CalleeCandidateInfo to start rationalizing how it handles members and curried functions, also paving the way for future improvements.  This implements the infrastructure but keeps the functionality the same (the only functionality change is that it works a bit better with vardecls of function type).
[33ma3cd6ea[m [stdlib] Fix-up for r30458
[33m6f47a4a[m Fix bug in runtime test for installCommonValueWitnesses_pod_indirect.
[33maa3b870[m fix a comment.
[33mbccf396[m [stdlib] Lazy filter: expose critical base properties + API tweaks
[33m4177888[m [stdlibunittest] Suppress a warning
[33m8d4866a[m stdlib: eliminate unused typealias and tidy up the doc comment
[33m1d9cdbb[m PlaygroundTransform now forwards print() arguments to $builtin_print() exactly. We put the argument to be printed (so not the stream or the appendNewline:) into a temporary variable to avoid type-checking nastiness.  I also made the test case considerably more comprehensive.
[33md356a2f[m a few more diagnostics.
[33me891417[m add some testcases for curried function diagnostics.  These aren't totally horrible, but aren't exactly inspirationally great either.  NFC.
[33m9c5cdaa[m IRGen: Register class property accessors with the metaclass, not the class object, in JIT mode.
[33ma5e2a15[m refactor closeness computation to share code between SubscriptExprs and everything else. NFC
[33mdaccec3[m Re-apply "Make pre-specialization enabled by default at -Onone."
[33mdba819e[m Revert "Revert "Fix a bug in pre-specialization when it comes to re-use of specializations.""
[33mdbfe42f[m Revert "Revert "Remove conditional compilation, which is not needed anymore.""
[33ma27bc42[m [test] Unstick the Linux bot on compiler_crashers.
[33m036650b[m This got fixed yesterday, add some testcases: <rdar://problem/19658691> QoI: Incorrect diagnostic for calling nonexistent members on literals
[33m3944a16[m Sema: Update diagnostic text for when @available cannot be applied to a variable.
[33mc16d2f7[m refactor the code for collecting callee candidate lists and reporting available overload sets out to a new CalleeCandidateInfo class in prep for other changes. NFC.
[33m8edb45a[m Turn off the guaranteed optimization for now.
[33m86439e9[m Improve some diagnostics around invalid calls to ClosureExprs and random values of function type, fixing: <rdar://problem/20789423> Unclear diagnostic for multi-statement closure with no return type <rdar://problem/21829141> BOGUS: unexpected trailing closure <rdar://problem/21784170> Incongruous `unexpected trailing closure` error in `init` function which is cast and called without trailing closure.
[33m79838f6[m fix a case in CSGen where it gets an ErrorType back and splats it onto the AST, instead of treating it as an erroneous subexpr.  This was causing <<error type>> to pop out in diagnostics, and had a hackaround that dissolves now from CSDiags.
[33m30ce630[m Fix for assert trying to devirtualize a try_apply during inlining.
[33mdb49e9f[m -verify mode in compiler_crashers isn't a good use of broken bots.
[33m9db78ee[m Revert "Fix a bug in pre-specialization when it comes to re-use of specializations."
[33m8e530fa[m Revert "Make pre-specialization enabled by default at -Onone."
[33mdfa90e3[m Revert "Remove conditional compilation, which is not needed anymore."
[33md51a922[m Returning false from an expression-specific diagnoser is apparently not what you're supposed to do.
[33m4a062f9[m Remove conditional compilation, which is not needed anymore.
[33m7e8ca51[m Make pre-specialization enabled by default at -Onone.
[33m26ce43a[m Fix a bug in pre-specialization when it comes to re-use of specializations.
[33m1ee392e[m Do defensive coding properly this time.
[33maf957bc[m [InterfacePrinting] Add a print option to specify whether members of a decl should be separated by empty new lines. By doing so, SourceKit can print Swift intefaces in the same fashion of what Xcode conventionally does. rdar://21710381
[33m5d3dc0d[m Now that sufficient complexity is pushed into the right corners of the compiler, we can start taking advantage of ambiguously typed subexpressions in CSDiags.  We start by validating the callee function of ApplyExprs, which substantially improves our abilities to generate precise diagnostics about malformed calls.
[33maaba211[m [SILGen] fix rdar://21883752. Make sure that dealloc_stack instructions are inserted in the right place.
[33m90631a9[m Silence a warning in Release mode
[33ma7b65ae[m stdlib: Use shim functions to avoid name+type collisions with CoreFoundation functions.
[33m9fd3f3b[m Reimplement checking for incorrect partial applications in MiscDiagnostics (instead of CSApply).  The code is somewhat simpler there, more correct (fixing the FIXME in the testcase) and doesn't run afoul of CSDiags trying to type check partial AST subexpressions.
[33m0ea7b2f[m Fix some validation-test regressions, mostly by tweaking tests but also by being a little more defensive during recovery.
[33mb46aa33[m Type witness inference: rank solutions based on selected value witnesses.
[33m6ecaca2[m Sema: Remove leftover availability lookup from treating unavailable symbols as optional. NFC.
[33m91975c0[m Introduce a new "ExprCleanser" class and use it in typeCheckExpr to ensure that no old expressions from the pre-type-checked AST are left around with dangling type expressions pointing into the temporary inner constraint system formed by typeCheckExpr.
[33mbc3b47b[m Infer the return type of a closure to be () if it contains no return statements, or a return statement with no operand.
[33m78c0874[m [InterfacePrinting] Print @convention when printing module interfaces. rdar://21196514
[33m9e3e8fe[m [InterfacePrinting] do not leak private stdlib decls in quick help. rdar://20858548
[33mea18bc0[m Rename -dump-trc option to -dump-type-refinement-contexts
[33mada08bd[m SequenceType.split enhancements
[33m7b9404b[m fix broken validation test exposes by recent elimination of implicit conversions, instead of comparing pointers for equality, use strcmp.
[33mc3d4ced[m Runtime: Don't try to trim the nonexistent mangling prefix from protocol descriptors defined in ObjC.
[33mbc96c40[m Fix SceneKit test on iOS.
[33m0e3e08f[m [ClangImporter] Use Clang's -fembed-bitcode mode when under -embed-bitcode.
[33m9dccd49[m [test] Add a tiny test for frameworks containing only explicit submodules.
[33me99d635[m Combine deprecation tests into existing StringDiagnostics test.
[33m740d0c8[m CMake: simplify PassKit dependencies
[33mab487a1[m Introduce a new TypeCheckExprFlags::AllowUnresolvedTypeVariables option, which allows solving of a constraint system to succeed without emitting errors in the face of ambiguous solutions.  This is important for CSDiag because it is in the business of trying to solve subexpressions of a global expression - and it wants to know the difference between a subexpression that is inherently impossible to solve, vs one that is simply ambiguous because its context has been removed.
[33m7010fb8[m Re-enable unittests for libswiftDemangle
[33ma7190bf[m Build the Contacts overlay for watchOS
[33ma6a1725[m Remove duplicated comment.
[33m33c6de5[m disable array/string -> pointer conversions in operator contexts that lack an &. They are still allowed in non-operator calls.
[33m364176d[m stdlib: make crash tests more strict
[33m603dc59[m Revert "Runtime: Enable reflection for multi-payload enums with non-trivial layout"
[33m839a4d7[m Track retain_n and release_n in dtrace as single retains, releases.
[33m8e9bc84[m Perform the RRN optimization early/clear when we see an unknown call.
[33m0db8d77[m Refactor LLVMARCContract => LLVMARCContract.cpp.
[33m3ddaf10[m Refactor ARCEntryPointBuilder => ARCEntryPointBuilder.h
[33m41f19e7[m add some testcases that are currently rejected with poor diagnostics, NFC.
[33mbab6865[m add newline at end of file
[33m6b7647c[m Sema: Don't set type of AssociatedTypeDecl until we have an archetype
[33m78bbcce[m Factor out some code duplication with setting EnumElementDecl types, NFC
[33me748908[m Sema: Don't set type of TypeAliasDecl until we resolve the alias type
[33m1fbe423[m Sema: Update TypeRefinementContext to be able to handle more kinds of introduction nodes. NFC
[33mb1adbe0[m Remove unused -enable-availability-checking-in-implicit-functions frontend flag
[33mb427975[m Add a -dump-trc frontend option to print the type refinement context hierarchy
[33m6ab7b14[m SILGen: Fix crash with @objc override of non-@objc property
[33m4b8fe27[m Sema: If a property type was inferred, copy it to the accessor before checking generic signature
[33mbe17941[m Sema: Build type refinement contexts for functions without bodies.
[33m08a84ca[m stdlib tests: simplify map() calls with currying
[33m7fbfe24[m stdlib: Sequence tests: prefix test name with the type name
[33m3ef09f3[m stdlib: make trap tests more strict
[33m420337a[m stdlib: move forEach() test to the SequenceType testsuite
[33mdeb6997[m Clarify equivalence between SequenceType.forEach and for-in loops in doc comment
[33me930494[m Don't copy ring buffer in SequenceType.suffix
[33mda670c5[m libswiftWatchKit depends on libswiftCoreLocation
[33m0d1b030[m Add slicing extensions to SequenceType and CollectionType.
[33m03f879b[m [stdlib] Lazy flatMap
[33m29aa6dd[m teach FailureDiagnosis::typeCheckChildIndependently not to recurse into DiscardAssignmentExpr's, because they require context to typecheck anyway and doing so triggers bogus errors about _ needing to be on the LHS of an assignment.  There is a correct way to fix this, but layers of issues need to be peeled off before that can happen.
[33m8b9d9a3[m [stdlib] LazyCollection commenting and cleanup.
[33mcc1ee51[m [stdlib] Make new Reverse*Collection not drop laziness
[33m9a20f55[m change SubscriptExpr::getLoc() to return the location of the [ instead of the start of the subscript base expression.
[33m0fd6fd1[m CoreMedia overlay: add an initializer CMTimeRange(start:end:)
[33m1e7e471[m CMake: record that PassKit overlay depends on the new Concacts overlay
[33m48c901c[m Foundation overlay: use the new selectors for NSCoder APIs
[33m24f930e[m [stdlib] Add ._prext_flatten for sequences-of-sequences
[33me3bcd90[m [stdlibunittest] Warning suppression
[33m9f59c9d[m [stdlib] More lazy doc comment updates
[33m373c872[m Revert "Ignore certain NS_SWIFT_UNAVAILABLE attributes in Foundation"
[33mc4f141a[m Reapply "Add test cases for isUnique sanity checks."
[33md6f1178[m Foundation overlay: Deprecate String "PercentEscapesUsingEncoding" methods.
[33mc1cadda[m Remove experimental support for treating unavailable symbols as optional.
[33m4f6bedf[m stdlib: mark some _HeapBuffer APIs public/@testable so that they can be used in tests
[33m9392d76[m Additions to the SceneKit overlay
[33m1d8a25e[m Fix spelling. NFC.
[33me4b209d[m Require the optimized_stdlib for the test.
[33m3ba51ad[m Foundation overlay: fix coding style
[33m6cef570[m Remove the SDK overlay for Security
[33m6608221[m stdlib: Remove _UnitTestArray.
[33mff1cd57[m Typo in comment
[33mc783def[m [CodeCompletion] Add code completion for platform names inside #available() condition. The code for generating the code completion string reuses that of the @available attribute. rdar://21467109
[33m6ba6de2[m Revert "Eliminate the NSError -> error enum bridging from Contacts."
[33me009e43[m Use a code of "1" for non-enum types conforming to ErrorType.
[33m89ff140[m Move the default implementation of ErrorType._domain into the standard library.
[33m80ce752[m Provide default _code/_domain for any nominal type conforming to ErrorType.
[33m38b99f3[m Move enum ErrorType synthesis test under decl/protocol/special
[33m6672ea0[m Revert "Add test cases for isUnique sanity checks."
[33m59909cb[m Add test cases for isUnique sanity checks.
[33m539e924[m Correct a comment pasto.
[33m028c920[m Comment parsing: skip gyb line markers in comments
[33medcd279[m Sema: Fix infinite loop in lookThroughIdentityExprs()
[33m82ec7ea[m CoreMedia overlay: make CMTime Comparable, and CMTimeRange Equatable
[33m5c71b75[m Add @warn_unqualified_access, and apply it to imported methods named 'print'.
[33m8624834[m Clean-up of the stdlib file forcing pre-specializations.
[33m6edbc8b[m Use DEBUG for debug output. NFC.
[33m61b155d[m A few small coding style clean-ups.
[33mcfb1893[m Revert "change SubscriptExpr::getLoc() to return the location of the [ instead of the start of the subscript base expression.  NFC on the testsuite."
[33mc3960bc[m Re-enable UIViewControllerAdditions
[33m705246b[m Add checks for erroneous extended type to prevent crashes. rdar://21859941
[33m2f3a77a[m Address Ben's comments on r30290
[33m4e1efd5[m stdlib: move the implemnentation comment for AnyObject out of the doc comment
[33ma5a5aea[m Fix the prespecialize test for Linux
[33m965285f[m Move GameKit overlay to GameCenter.
[33m78c1961[m Sema: Add Fix-It suggesting @available() to lazy properties
[33mf1c6d98[m change SubscriptExpr::getLoc() to return the location of the [ instead of the start of the subscript base expression.  NFC on the testsuite.
[33m538df11[m Sema: Update availability diagnostic for accessor override to mention accessor kind
[33mf3dc974[m introduce a "diagnose" forwarding helper function on the FailureDiagnosis class to avoid having to use CS->TC.diagnose everywhere.
[33m2796635[m SimplifyCFG: simplify a cond_br which branches to a cond_fail which has the same condition.
[33m4e26069[m Parse: Fix EndLoc of #if without #endif in parseDeclIfConfig(), and clean up duplication
[33m310d92e[m [stdlib] Add RawOptionSetType as unavailable with a 'renamed' fixit to OptionSetType.
[33m66b5a4e[m [sil-opt] Properly set the SILOpt.Optimization flag
[33me024f7f[m Add sanity checks to the _isUnique_native API.
[33m5511d9b[m Fix Builtin.reinterpretCast to properly retain its result value.
[33m19a3821[m Implementation of the pre-specialization for the most popular stdlib generic types.
[33m9f3a35a[m Roll back in a minor fix to emitImplicitValueConstructorArg.
[33mf69c175[m Add the ability to lookup/link a SILFunction in the SILModule by its mangled name.
[33mbd1c3ba[m Revert "ManagedValue forwardInto and assignInto should not always "take" their value."
[33m09cc2c8[m Teach subscript candidate matching about the fact that self can mismatch with its available value, and use that to rank a problem as very specific.  This required indicating a difference between singular argument mismatch vs self mismatch and single-argument mismatch (which is very specific) as being different from the argument list in general mismatching (which matters to differentiate argument lists that contain a single argument).
[33mc1b3569[m Parse: Fix crash with invalid protocol compositions, and improve error recovery
[33mab95d48[m fix comment header
[33mb49c9de[m [IDE] Make sure to print documentation comment of a var in a pattern binding.
[33mc83cc8c[m Parser: Fix a couple of crashes when parsing invalid enum cases
[33m632a451[m Tests: Additional run-time tests for Obj-C weak linking.
[33m85262ff[m stdlib: restore the doc comment on AnyObject
[33m109add8[m Foundation overlay: add NSCoder.decodeObjectOfClasses(_:forKey:)
[33m7b37043[m Fix some but not all of the errors that had been fixed by the reverted commit.
[33m97d1387[m Just be more conservative in seeing if a redeclaration check is a cascading dependency.
[33m2177a75[m Revert "Validate decls before doing redeclaration checking."
[33m6765a76[m Validate decls before doing redeclaration checking.
[33maac0342[m [stdlib] More type annotations to reduce compile time.
[33m4182c44[m Runtime: Provide prefab value witness tables for unowned and weak references.
[33m42ecad7[m [SyntaxModel] Improve the efficiency of url regex search. We improve the efficiency through two ways: 1. read the protocol keywords, such as http, radar, or im, to select the right regex pattern to search for instead of trying every known patterns; and 2. reduce the regex search space by truncating text before protocol keywords. rdar://21009781
[33m2a2d25a[m [docs] Add a fair amount of description of the intra-module dependency system.
[33mcfe2053[m Dependencies: Make sure we count redeclaration checking as a dependency.
[33m59ea2fc[m Dependencies: Make sure we mark cascading depends-nominal entries correctly.
[33m2ad0ffd[m Dependencies: teach the Driver about the new member-based dependencies.
[33m806aac2[m Dependencies: Break out provided members from other ways to provide/extend a type.
[33m2441ab0[m Dependencies: Break out member lookups by the name of the member being looked up.
[33mc799523[m Dependencies: rename entries in the .swiftdeps file to something sensible.
[33mcdb5ced[m Fix up r29815 to correctly handle properties in extensions.
[33m96c19e5[m [Driver] Don't crash when the .swiftdeps file formats change.
[33mad544b7[m Deal with recursion when walking extensions in the conformance lookup table.
[33m6d3119e[m strip _prext_ from inside doc comments
[33m241de1a[m Add popFirst/popLast implementations for some collections
[33m205ba19[m [stdlib] Revamp doc comments for new LazySequence
[33mfdf5c64[m Force implicit unwrapping in self.init/super.init within the AST
[33m8e131c9[m Add a simple runtime test for forcing a self.init of a failable initializer
[33m82ea289[m Add some tests for forcing self.init/super.init calls to failable initializers.
[33mce86d23[m Generalize tests not to depend on exact number of extra inhabitants in object references.
[33mfda0971[m ManagedValue forwardInto and assignInto should not always "take" their value.
[33m71c5bb9[m CoreMedia overlay: change CMTimeMakeWithSeconds into an initializer
[33m25f0dc3[m IRGen: Fix up layout generation for reference storage types.
[33me5e4335[m stdlib: Slice: trap on out-of-bounds indices
[33m82c6b23[m SDK overlay: use AnyObject instead of AnyClass to pass an id-compatible Class representation
[33mc772380[m stdlib: Rename IsOrderedBefore to EscapingBinaryPredicate
[33mec61fa4[m IRGen/Runtime: Use only the 'layout' subset of the vwtable to perform value type layout.
[33ma41d7b7[m SDK overlay tests: disable a certain SceneKit test on non-OS X
[33m108227c[m Let SILCodeMotion sink unowned_to_ref through basic block arguments.
[33m4c2dd3e[m Remove redundant typealias
[33m57c5de4[m [llvm-arc-opts] Optimize strong_retain_unowned/strong_release pairs.
[33m672d32e[m [llvm-arc-opts] Merge together multiple retains/releases in the same BB into retain_n/release_n calls.
[33m123dbc6[m [llvm-arc-opts] Extract out single BB analysis/opts into its own method. To shrink the size of SwiftARCContractImpl::run.
[33mcd0e84a[m [llvm-arc-opts] Extract out the implementation of SwiftARCContract into SwiftARCContractImpl so we can store global information more conveniently without polluting the public header where the actual LLVM pass is declared.
[33m3c86d00[m Small style fixes. NFC.
[33m89ce119[m Add support to ARCEntryPointBuilder for emitting RetainN and ReleaseN calls.
[33m6099e15[m Add RangeReplaceableCollectionType.removeFirst
[33md072199[m Driver: getToolChain()'s DarwinArchName parameter was never set, remove it together with some associated dead code, NFC
[33ma043ae7[m IRGen: Small cleanup in GenEnum.cpp, NFC
[33ma3d8826[m Revert "IRGen/Runtime: Use only the 'layout' subset of the vwtable to perform value type layout."
[33m31913f9[m teach isSelfInitUse about self.init! forms of failable initializers, supporting Doug's work.  Testcases are on him :-)
[33m56cb80c[m Importer: Apply protocol availability to imported mirror decl members
[33mf1c5e50[m Doc review: tweak SequenceType.forEach's doc comment
[33m86f1a70[m Review: Rename SequenceType.forEach parameter to 'body'
[33m9963996[m [stdlib] Move lazy filter prototype into stdlib
[33mb460aa0[m Further shorten demangled names in simplified mode
[33m0b4173c[m Start inferring type witnesses dependent on other type witnesses.
[33ma7c5b57[m Stop dropping the associated type when transforming a dependent member type.
[33m5274af3[m Importer: Synthesize inferred availability for members mirrored from unannotated Obj-C protocols
[33m2641d56[m IRGen/Runtime: Use only the 'layout' subset of the vwtable to perform value type layout.
[33m8f78e7a[m Make ExtensibleCollectionType diagnostic use "renamed" for better fixit
[33m42304ee[m Minor fix to the copy&paste error in one of my previous patches. NFC.
[33m248bfd1[m [global-opt] Support for tuples in constant initializers.
[33mf2d59ad[m [global-opt] Simplify the isSimpleType predicate. NFC.
[33m92246b3[m [irgen] Support static initializers for tuples.
[33me6969a0[m [silgen] Emit tuple initializers for global variables of trivial tuple types using tuple instructions.
[33m91b89b8[m Add SequenceType.forEach requirement and default implementation
[33m9d27519[m SDK overlay: fix a bug in the SceneKit overlay and re-enable the test
[33m9f1e9ce[m Look through try expressions when identifying self.init calls in DI, this allows enabling dougs work on failable inits.
[33mb9fe9ee[m Explicitly mark GameKit -> simd overlay dependency
[33m1ca854d[m Make Decl::isPrivateStdlibDecl() return true if the decl comes from the SwiftShims module. rdar://20919984
[33mb809473[m Fix typo in comment.
[33m37a70ef[m Fix conditional branch generation for switch_enum.
[33m27f792f[m Re-@noescape the isOrderedBefore closure argument to sort
[33mc643bfe[m Fold unneeded reabstraction thunks
[33m7f98df2[m Serialize whether a function is a reabstraction thunk
[33ma0ee7b2[m Don't look through 'try!' in getSemanticsProvidingExpr().
[33me689ab3[m Mark AppKit -> CoreData dependency in the overlays
[33maa0e572[m unbreak the swift-incremental-RA bot.
[33m57489ce[m [SyntaxHighlighting] Give ASTWalker the option to walk into generic params of function decls. Therefore, generic params can also benefit from syntax highlighting and semantic annotation in SourceKit. rdar://20529255
[33m90e5fba[m Start allowing self.init/super.init calls to be forced with '!'.
[33m3e742bb[m [global-opt] Bug-fixes and improvements for the let values propagation.
[33mdd26a22[m Builtin.reinterpretCast should retain any references it generates.
[33m198bf80[m [stdlib] Put "Lazy" in the names of new lazy things
[33mf456f0c[m Runtime: Enable reflection for multi-payload enums with non-trivial layout
[33mcdd5a41[m IRGen: Generate value witnesses to get enum tag and project payload
[33m91f17ec[m [stdlib] ReverseCollection isn't implicitly lazy
[33m34bc406[m [stdlibunittest] Suppress some pesky warnings
[33m5a14368[m remove the allowFreeTypeVariables argument to typeCheckExpression. Given that it applies the solution, the only argument to it that makes sense is "disallow".  NFC.
[33md2c40df[m Build Fix: Update KVO tests for NSObject.observeValueForKeyPath API change
[33me96251b[m stdlib: document complexity requirements for some CollectionType APIs
[33m334e53f[m These FileCheck lines were intended to be put inside comments
[33m6cf9576[m Use preferred pattern for operator| on the enum used in a swift::OptionSet.
[33mde882db[m [Serialization] Fix improper handling of intermediate files.
[33m09546a0[m Validate protocol members when we validate the protocol declaration itself.
[33m4ce5cda[m [llvm-arc-opts] Implement swift_{retain,release}_n.
[33m2315c8f[m [llvm-arc-opts] Rename SwiftARCExpand => SwiftARCContract.
[33m3edab3d[m When walking overload groups during constraint analysis, defend against function/decl type mismatches. (rdar://problem/20162476)
[33m1100a92[m Lock down on the special no-'try' language mode so that it only applies to top-level code.
[33m65dd63c[m Don't suggest '()' after a protocol reference, because it doesn't make sense.
[33mbb19420[m Add no-longer-recursing test from rdar://problem/21514140.
[33mae290e1[m Add a missing null check. rdar://21790830
[33mc52f920[m Fix an over-eager assertion.
[33m442d58e[m Simplify TypeChecker::fixAbstractFunctionNames and eliminate a silly crash.
[33m6d77b99[m Don't complain about Objective-C method conflicts with unavailable requirements.
[33m497e990[m Handle UIGraphicsGetCurrentContext's return value becoming optional.
[33m0ad5915[m Revert "[InterfacePrinting] Print stdlib internal protocols whose names start with no '_'"
[33m6ae3d5d[m Only force immediate closure of an open existential when we opened one.
[33mda6d8c1[m add radar # to testcase, NFC
[33m24fffb5[m +1 testcase
[33me1ef962[m improve the DI diagnostic for uses of self in a non-delegating protocol initializer, which is most likely because someone forgot to chain to self.init completely.
[33mb0bcad7[m Add a utility script for displaying the CFG of SIL or LLVM IR. It is useful if you have the SIL already in a file (instead of calling viewCFG() while running the compiler in lldb).
[33m77ff5b7[m Convert the new ArrayBuffer assert to _sanityCheck. We don't need it at -Onone.
[33m53104ac[m simplify TypeNullifier by using the new walkToTypeLocPre hook of ASTVisitor, and nest it inside the TypeChecker::eraseTypeData since that is its only client. NFC.
[33m6d03fe0[m Add an assert to ArrayBuffer.getElementSlowPath.
[33m59f912a[m Speculatively change PlaygroundTransform to stop using FreeTypeVariableBinding::GenericParameters, there are two possible situations here:
[33m29b4948[m Emit writebacks during error-handling cleanup.
[33mbf3a53c[m Remove accidentally-committed file.
[33ma6e4317[m [InterfacePrinting] Print stdlib internal protocols whose names start with no '_' rdar://21515803
[33md7ccd18[m Split ConstraintSystem::solve() into a top-level and a recursive entrypoint.
[33m2bae64c[m Remove accidentally-reintroduced tests.
[33m04890c9[m [llvm-arc-opts] Remove retainAndReturnThree.
[33mc0c4b9f[m Handle 'Self' in nested types.
[33m778012c[m Handle SIL unchecked_addr_cast conservatively when promoting to a value cast.
[33m5a16f5d[m Allow Builtin.isUnique to take implicitly unwrapped optional for completeness.
[33mf739f85[m StdlibUnittest: Keep qualified type names in failure output.
[33m3855bb8[m Sort protocol conformances for serialization and SILGen emission.
[33m8bd093d[m Eliminate the "ambiguous implied conformance" error.
[33mf9f2762[m Teach SILGen to only emit witness tables for conformances ascribed to the type declaration.
[33mdb0fea5[m stdlib: Use unqualified names in 'print'.
[33madab465[m Follow on to 30163.
[33mc86e8bc[m use default argument, NFC.
[33m85be767[m introduce a new ConstraintSystem::solveSingle helper function to simplify some clients.  NFC.
[33mdab4855[m Fix the build. Don't use -primary-file when running the tests.
[33mf050d24[m Simplify SubstOptions down to an OptionSet<>. NFC
[33m161f309[m Improve recursion-breaking when resolving type witnesses.
[33m0e35bad[m Revert "[stdlib] Remove workarounds for fixed bug"
[33m7573aeb[m Tests: Make availability_weak_linking.swift require enable_target_appletvos
[33m7ecc6d2[m [globalopt] Propagate values of global let variables and global variables assigned only once into their uses.
[33m51ed070[m [globalopt] Propagate values of global let and static let variables into their uses.
[33m2278ed9[m [globalopt] fptrunc(float_literal) can be considered to be a simple static initializer.
[33m104fe59[m [constant-propagation] fptrunc (float_literal) -> truncated float_literal
[33md5650ae[m Propagate a "let" flag from VarDecl into resulting SILGlobalVariables.
[33m94e9535[m genericize a note to allow the test to pass on all targets (incl those without Float80), fixing rdar://21795868
[33m60250e2[m Recast the suppressDiagnostics() bit on ExprTypeCheckListener into a bit in the TypeCheckExprFlags set.  NFC.
[33mb72a12d[m GlobalARCOpts: Set debug locations for newly created retain/release calls.
[33mc0399e2[m [stdlib] Remove workarounds for fixed bug
[33m79656d6[m [stdlib] Test _prext_MapSequence|Collection for passthrough to base.
[33m6bc816c[m [stdlib] Test that _prext_MapSequence/Collection are lazy
[33me729d79[m [stdlib] Remove redundant _prext_FilterGenerator from lazy prototype
[33m88aaed0[m [stdlib] Move most of the lazy prototype into the stdlib
[33m5335df7[m [stdlib] Lazy prototype WIP
[33mba27455[m [stdlib] 80-columns
[33m7ae303a[m Update Unicode data files to 8.0.0
[33m6bb2ba9[m [stdlib] Finish testing LazyCollection prototype
[33mfc029a6[m [stdlib] Uncomment the rest of the Lazy prototype
[33m7221cd8[m [stdlibunittest] Add expectations to TypeIndexed
[33m1fe0e7d[m [stdlib] Add ".reverse" property to Lazy prototype
[33mb8868d2[m testcase update to go with r30135
[33mcf14158[m When type checking an arbitrary subexpression of the current node, we can run into trouble when we dive into a subexpr of a ClosureExpr, because that subexpr may refer to type variables on the closureexpr's parameters.
[33m7ac6765[m rename two methods to indicate that they must only be used on immediate children, NFC.
[33mff69c54[m Updating enum reflection tests for new style
[33mdd2b4a9[m IRGen: Fix emission of categories with @NSManaged properties
[33m0243346[m AST: Don't crash when we get a vararg TupleTypeElt with ErrorType
[33m24c9c75[m [llvm-arc-opts] Refactor the ARC call constant caches and ARC call creation code into a builder class.
[33ma05dce7[m Move two canonicalizations that create instructions from SimplifyInstruction -> SILCombine.
[33mfeebd56[m IRGen: Reorder the extra inhabitant value witnesses so that the count and flags go first.
[33m45e9c71[m Fix paste-o.
[33m3494d95[m Remove dead code.
[33m30730c1[m Remove documentation for a parameter that was removed
[33m4cfe818[m StdlibUnittest: extract collection tests into a reusable generic testsuite
[33m5b043a2[m Fix <rdar://problem/21783334> compiler crashes on "{ x in x = 42"
[33m9ae1ff7[m Add a new DisableStructuralChecks option to typeCheckExpr which allows CSDiag to avoid emitting this diagnostics.  They are always irritating to it because they are duplicative with whatever the actual type constraint problem is.  It also interferes with there recursive structure of the problem.
[33m3edd828[m remove the isDiscarded bool from TypeChecker::solveForExpression and getTypeOfExpressionWithoutApplying and change typeCheckExpression to take it as a single-entry OptionSet, in prep for getting other options.  NFC.
[33m598d590[m testcase tweak for previous patch.
[33m63290f1[m my diagnostics changes have provoked a preexisting CSGen crash regressing this test, move it until I can investigate.
[33m1072822[m two changes:
[33mdd7c634[m fix <rdar://problem/18800223> QoI: wrong compiler error when swift ternary operator branches don't match
[33mae4aa79[m fix <rdar://problem/18776073> Swift's break operator in switch should be indicated in errors
[33m1d38db5[m StdlibUnittest: add {Minimal|Default}***MutableCollection types
[33m9e9daa0[m stdlib: move a test for join() into a focused test file
[33mb4ec45d[m stdlib: make Slice.init(base:bounds:) public
[33mbe5ef02[m Revert "stdlib: make Slice.init(base:bounds:) public"
[33m26ebe14[m stdlib: make Slice.init(base:bounds:) public
[33m069ba3e[m [stdlibunittest] Gyb-away code duplication in logging wrappers
[33m1210a55[m [stdlib] Basic LazyCollection tests
[33m645e627[m [stdlibunittest] LoggingCollection should log *all* SequenceType operations.
[33med06810[m Remove the almost-pointless Materialize type from SILGen, and stop forcing optionals to memory in a bunch of places where the callee is perfectly capable of handling a non-address value.
[33m6289061[m Exercise all permutations of file order in multi-file test.
[33m62bb17e[m [stdlib] Factor LazySequence passthrough test...
[33m9d07acd[m [stdlib] SequenceType's _initializeTo should return the end position
[33m2c2b45d[m [stdlib] Test LazySequence passthrough
[33m9e7e96d[m Test requires ObjC interop.
[33mb1af9fb[m Regression test for rdar://problem/17489254.
[33mec98293[m [ClangImporter] Import 'NSObject <FooProto> *' as 'id <NSObject, FooProto>'.
[33mad43abd[m Scale back the restriction on extending protocols via typealias.
[33mfabd029[m SILGen: Make the materializeForSet closure for Clang-imported properties shared.
[33m0000179[m Importer: Fix bad indentation introduced in r30096. NFC.
[33m259b547[m Importer: Synthesize inferred availability for unannotated Obj-C protocols
[33m60620fc[m fix <rdar://problem/21753262> Bug in DI when it comes to initialization of global "let" variables by teaching SILGen how to emit MarkFunctionEscape instructions for let values that are initialized outside of their initializer.
[33m82295e6[m Revert "Debug Info: Shadow-copied debug_value_addr instructions need an extra"
[33m5e29e9b[m SILGen: Set the context generic params of block-to-func thunks.
[33m88e3c41[m Provide a specific (legacy) Mirror for NSString
[33m6c49a12[m [stdlib] lazy prototype: Incorporate some testing
[33m56a3ddb[m Make UIEdgeInsets and UIOffset conform to Equatable.
[33mb41785e[m Update the SIL verifier to require an empty local stack when we hit throws.
[33md56ad1d[m Fix casing Objc => ObjC in test
[33m55bbcb0[m SIL: Use castAs instead of cast on clang::Type abstraction patterns.
[33mcc6abd4[m Move some tests above "don't add any tests after this line" NFC
[33m7b5c8bf[m Several cleanups:  - Remove all uses of CleanupIllFormedExpressionRAII from this file, which are now    unnecessary since this is handled at a higher level.  - Stop splatting ErrorType in the diagnostics stuff.  This was formerly needed to    indicate that a diagnostic is emitted, but is now handled other ways.  Removing    this enables the type checker to produce other follow on warnings in some cases    (e.g. var should be marked let).  - Remove an arbitrary limitation on unop and binops that didn't print an overload    candidate set with one entry, leading to better consistency in diagnostics, now    that all the pieces are in place to make this not be super annoying.
[33m0e05d51[m [stdlib] Delete an obsolete prototype
[33mc2e9cdc[m Fix a test for ARM
[33m1b2941f[m start dialing back some of the arbitrariness with our overload notes, producing them in more cases.
[33m557f70c[m [ClangImporter] Import __unsafe_unretained struct fields as Unmanaged.
[33m5f4ad87[m Unmanaged<T> is ObjC-compatible if T is an Objective-C-compatible object type.
[33mb17da68[m [CodeCompletion] Avoid crash completing switch case at top-level
[33m6ab88e2[m [stdlibunittest] Add/use checkRandomAccessIndex
[33m7e78f0d[m Add missing return.
[33m29764dc[m Remove the ability to access the "0" member of a scalar.
[33ma1a00e7[m Runtime: Fix incorrect implementation of pod_indirect_initializeBufferWithTakeOfBuffer.
[33m5da9911[m Fix failing test case on arm - there is no Float80
[33m24f2c7d[m Disable test that fails on targets without float80
[33mec686f2[m FixedPointDiagnostics.swift.gyb update expected error/note output
[33m21ce6cd[m XFAIL while I update the expected diagnostic strings
[33mc1f371a[m [stdlibunittest] Add checkStrideable
[33m5cc3238[m Teach the diagnostics machinery another special case for RebindSelfInConstructorExpr, which gets issues related to self.init and super.init onto the CallExpr best path, instead of in the generic overload constraint failure morass.
[33mcbda31e[m [stdlib] Underscore the 'value' members of DarwinBoolean and ObjCBool.
[33mcd6715b[m start performing type candidate matching based on the independently type checked argument list for a CallExpr instead of matching a gang of typevartypes against them.
[33mf2a40da[m fix FailureDiagnosis::collectCalleeCandidateInfo to look at the entire disjunction candidate set for a constraint that fails to match, not just a single Bind within it.  This eliminates the arbitrary nature of picking one match, allowing us to diagnose the entire candidate set.
[33mceeb309[m update validation test for diagnostics change.  I still think that these are massive overkill...
[33mbe261f2[m simplify and strength reduce some code, NFC.
[33m00d6b27[m ArchetypeBuilder: Attempt to reconcile differing superclass requirements when one is a subclass of the other
[33m8eeaeea[m Sema: Infer availability for unannotated Obj-C protocol requirements when diagnosing conformance
[33mdddbd0f[m [test] Add tests for the API and conformances of DarwinBoolean.
[33mcb3b03d[m [test] Fix objc_bool_bridging.swift on platforms where ObjCBool /is/ Bool.
[33m63f99a4[m Move CallExpr diagnostics over to the same overload candidate diagnosis facilities used by operators etc.  This required a bunch of changes to make the diagnostics changes strictly an improvement:
[33m710df51[m ArchetypeBuilder: Only infer requirements for the innermost set of generic parameters
[33m734891e[m IRGen: Don't store the masked refcounted payload when copying multi-payload enums.
[33m40cd9e4[m [Driver] Always quote file paths in the build record.
[33mbee5114[m Update validation-test/stdlib/Unicode.swift for DarwinBoolean.
[33m51ad3de[m Tests for the previous two commits.
[33m0b5428f[m Import DarwinBoolean as Bool in fully-bridgeable contexts.
[33me1ffbbb[m Import MacTypes.Boolean as a dedicated DarwinBoolean type.
[33m487e0c0[m Fix the rest of <rdar://problem/20409366> Diagnostics for init calls should print the class name
[33m3b4e8ce[m CMake: use the just-built libLTO to link the bitcode
[33ma725d1e[m Fix a comment in a test
[33m47734bb[m Fix weird indentation in test file from previous commit.
[33m498ab24[m [ClangImporter] Allow performSelector... methods, but make the result Unmanaged.
[33m7c75752[m Don't emit recursive-associated-type diagnostics from outside the protocol.
[33mc2b3005[m [stdlibunittest] Add/use checkComparable that tests laws
[33ma6341c0[m Debug Info: Shadow-copied debug_value_addr instructions need an extra indirection.
[33mbf143bf[m Detect recursive associated type requirements more robustly.
[33mce8e513[m [stdlib] Remove a redundant and un-specific protocol extension
[33m6b3e674[m [stdlib] Once more, with feeling: don't repeat stdlib component in test
[33m6e1183d[m [stdlib] Again, don't duplicate stdlib in test
[33m913f098[m [stdlib] Add a default generate() for generators...
[33m92936de[m [stdlib] Don't repeat stdlib component in test
[33mda98319[m Add a specialization of extend for collections.
[33m1eac287[m [InterfacePrinting] Move utf8 sanitizer from SourceKit to ASTPrinter. We sanitize comments by replacing invalid utf8 subsequence with � .
[33m16c8a3b[m Runtime: Fix crash when first allocation for a metadata cache is page-sized or greater.
[33m6c980c0[m When complaining about overload failures involving init methods, print the class name, satisfying the request of <rdar://problem/20409366> Diagnostics for init calls should print the class name
[33m55bcdb9[m Reapply the fix for <rdar://problem/21369926> Malformed Swift Enums crash playground service
[33m1870bb7[m [stdlib] var => let suppresses a warning
[33mbfbc614[m rework CleanupIllFormedExpression some more.  It now makes sure to find typevars hiding withing TypeLocs in expressions as well, and handles closures with a simpler model.
[33mb023c10[m [stdlib] Concatenate.swift.gyb cleanups/optimizations
[33m68a86ca[m Clean up a test slightly.
[33m7a614f7[m [stdlibunittest] Add/Use checkBidirectionalIndex
[33m84d46df[m This test is sensitive to SDK changes and is currently failing
[33m97faefa[m Tests failing on linux
[33m60cad2b[m Add a small peephole for removing alloc_existential_box that are initialized but never used for anything.
[33m0e3143c[m fix <rdar://problem/21447318> dot'ing through a partially applied member produces poor diagnostic
[33m0df5099[m Sema: Erase type variables from closure types more eagerly
[33m482c82c[m Runtime: Don't rewrap an NSError when trying to dynamic cast to NSError.
[33m522640f[m Allow the performance inliner to inline functions that throw.
[33mba95019[m Silence a warning
[33m007dfe1[m Runtime: Allow protocol extensions for weakly-linked Objective-C classes
[33m6ab4cae[m Add tests for unavailable diagnostics and wraparound behavior of integer vector arithmetic.
[33mb8fded0[m Test: Fix copy-paste error in availability_weak_linking.swift
[33m644c81c[m IRGen: Un-XFAIL test on Linux again.
[33mae7f8bd[m simd module: Only provide '&+', '&-', and '&*' variants of arithmetic operators.
[33m1a237b0[m Sema: Allow @available attribute to provide both a rename and a message.
[33m0b54e21[m simd overlay: Use LLVM vector types.
[33mecc7307[m Test: Emulate deployment on older OSes to test weak linking to Objective-C
[33mfedf765[m [ASTWalker] Allow client to specify whether SourceEntityWalker should walk into inactive regions.
[33m70cbf82[m Revert "Update test for new iOS behavior"
[33maf0745b[m Fix test from r29970
[33mdb023b9[m Add getEnumDecl() and getElementNo() to unchecked_enum_data{,_addr}.
[33mab1f459[m Runtime/stdlib: Non-verbatim bridging of metatypes.
[33mc749f51[m Don't include class metatypes in the "canBeClass" bucket.
[33m190251f[m Sema: Don't diagnose casts from NSObject to potentially-class metatypes.
[33m217d17d[m Sema: Consider availability of protocol declaration when diagnosing protocol witness availability.
[33m93ec002[m Update test for new iOS behavior
[33m8632caf[m [InterfacePrinting] Separate printed major decls by empty lines, rdar://21710381.
[33m9c71355[m Remove a work-around from extend().
[33mf21b67f[m Rip out usages of CFunctionPointer in the frontend, NFC
[33m6f33efd[m [InterfacePrinting] Printing non-doc comments at the beginning of a file, rdar://21710187. When printing the interface extracted from a Swift file, we print every comments before Swift code starts.
[33m76ec395[m [stdlibunittest] WIP Adding axiom checking
[33mc20b471[m TypeLoc is a struct.
[33m85c8f4f[m Emit -Onone shadow copies for debug_value_addr instructions.
[33m081425f[m Small clean-up.
[33m200663e[m Verify the sanity of the nested types of archetypes.
[33mc114dc9[m generalize ASTWalker to allow clients to visit TypeLocs, not just TypeReprs. NFC, since nothing is using this functionality yet.
[33mb650ca7[m [stdlib] Fix a bug in advance(start, n, end)
[33mbd63ceb[m Fix splitting of try_apply edges.
[33mfc523b2[m Add formerly-crashing test case from rdar://problem/19840527.
[33m7e5282c[m reapply part of r29978, wherein we simplify CleanupIllFormedExpression, and stop it from nuking types on decls inside of closures, which needlessly pessimizes some IDE tests.
[33m31facf7[m revert r29932, which is triggering a problem on the ASAN bot that I need to investigate.
[33mcef669a[m Collect inherited associated type conformances.
[33mfacf122[m stdlib: replace some overflow with non-overflow additions/subtractions in hashed collections.
[33m55bf9ac[m Disable broken test from r29970.
[33m03b1afc[m Don't revert the generic parameter list unless we're going to fill it in.
[33m72b2e39[m Break recursion when substituting into same-type-to-concrete constraints.
[33m086c2d4[m InstrProf: Handle IfExpr correctly for coverage maps
[33m34ff1c8[m AST: Whitelist certain types for bridging even when Foundation is not imported
[33m12b393c[m AST: Clean up ASTContext::get*Decl() methods
[33mfd141be[m Sema: Remove unused inExpression parameter from ASTContext::getBridgedToObjC(), NFC
[33m2b0df48[m Fix an unused variable from r29965
[33m7ac6831[m [func-sig-opts] Eliminate dead arguments that are dead besides an @owned release.
[33m80f4156[m InstrProf: Fix coverage mapping for GuardStmt
[33m79d70ab[m [emacs support] transpose two characters in a regexp
[33m8b0e39d[m SIL: Casts from class types to potentially-class metatypes may succeed.
[33m1775755[m Runtime: Additional fix for casting class types to existential metatypes.
[33me6a535a[m The dice has been casted^H^H
[33md8beed1[m [gyb] Fix line directive generation
[33mf93515f[m Sema: Allow types to conform to protocols that are less available than the type itself.
[33mc410bce[m We cannot validate a declaration while its context is being type-checked.
[33m6760567[m Runtime: Handle casting from class types to class metatypes.
[33mef198da[m [stdlibunittest] Finish threading new trace facility through
[33m3179f78[m Fix up stdlibunittest validation test
[33md190ee0[m Honor the swift_error attribute during import.
[33m1edf9b3[m Check access for associated type requirements, too.
[33mce93b0a[m [stdlibunittest] Still more de-boilerplating WIP
[33m09c1d8f[m [DocCommentPrint] For quick help, print objc declarations in Swift. rdar://21097812
[33m31787b6[m Generalize the "is being type checked" check to consider the type context.
[33m9fb2080[m Parser: Fix AST verifier failure with missing braces on struct and enum decls
[33mfe32357[m Teach IRGen's archetype uniquing to handle same-type constraints more generally.
[33m3023a71[m Split TypeBase::isDependentType() into isTypeParameter() and hasTypeParameter().
[33mc3a6bca[m Compute recursive properties of ReferenceStorageType.
[33mbb064da[m Sema: Fix AttributeChecker crash if getDeclaredTypeInContext() returns an ErrorType
[33md9476d3[m Handle in_guaranteed properly in CopyForwarding.
[33m8517b7b[m Revert "Un-XFAIL test on Linux." Revert "simd overlay: Use LLVM vector types."
[33m8a06715[m Need Foundation for these tests
[33md22a8be[m when applying the solution for an expression fails, do not run syntactic checks on the resultant expression.  This can only produce follow-on diagnostics on top of what the type checker produced, which is at best pointless noise, and at worst super-distracting.  That said, this doesn't perturb anything in the testsuite... so perhaps this is a theoretical concern.
[33m5d3d653[m remove unused field.
[33macecd18[m fix <rdar://problem/21553065> Spurious diagnostic: '_' can only appear in a pattern or on the left side of an assignment
[33m70ee2ad[m [stdlibunittest] More de-boilerplating WIP
[33mee2aacc[m SILGen: Fix vtable thunk generation for overrides changing Optional to IUO
[33m5c76bb3[m SILGen: Simpler fix for crash when protocol witness is unary method with default argument
[33me598bfb[m Sema: Fix typos in comments, NFC
[33me8877e9[m Several changes:  - Fix a diagnostic to not include redundant ''s around a type name.  - Rework CleanupIllFormedExpression to be simpler and to not    unconditionally destroy data when it doesn't.  This makes a code    completion test a bit more precise.  - Completely revamp getTypeOfIndependentSubExpression, to return the    subexpression produced by type checking instead of just a type.  This    is important for cases when type checking changes the root of the AST    (e.g. resolving an unresolved_dot_expr) and allows us to eliminate    grungy and unsafe recovery code that was in place to work around this.
[33mc62b54f[m Fix inout deshadowing so that it kicks in on throwing functions.
[33m183c279[m change visitAssignExpr to only get retypecheck one side of its subexpr at a time, and change it to get the source before the destination.  This is the right thing to do and also conveniently works around a bogus:   '_' can only appear in a pattern or on the left side of an assignment
[33m9abf32d[m [stdlibunittest] WIP uniformity/de-boilerplating
[33m4d17bf0[m Remove SinkType and SinkOf
[33m0a6beae[m [Serialization] Still write to stdout directly.
[33m34cd734[m ArraySpecializer: Don't clone loops with open_existential instructions that are used outside the loop.
[33med1b021[m Un-XFAIL test on Linux.
[33m20bfc1e[m [Serialization] If the output swiftmodule hasn't changed, don't touch the previous one.
[33m9a23fa9[m simd overlay: Use LLVM vector types.
[33m0950afd[m AST: Tuple types with default arguments should not be materializable
[33m07b669c[m fix <rdar://problem/21684837> typeexpr not being formed for postfix !
[33m573a3cf[m Try to make test pass on platforms with 32bit pointers
[33m4603431[m StdlibUnittest: implement more strict checks for using invalid indices
[33mb075f81[m Reimplement error recovery in C-style for statement, where we'd turn a ClosureExpr into the body of the for statement.  Instead of ripping the body of the closureexpr out and putting it into the C Style for, wrap up the closureExpr into a call.  This avoids breaking AST invariants because the ClosureExpr will be the DeclContext for anything inside of it.
[33mda4ea30[m Make the parser handle #if directives better when skipping due to error recovery.  Previously, we would blow past a #endif directive, which leads to bad things later.
[33m8637bb4[m fix <rdar://problem/21679169> compiler crashes on "{(=_=_)in"
[33m6992dfc[m AST: Start unifying UnqualifiedLookup and lookupVisibleDecl()
[33mb03a77f[m Sema: Fix some compiler crashes related to ErrorType handling
[33m942b44d[m SILGen: Fix comment wording I found while reading code, NFC
[33mca8cb3d[m fix <rdar://problem/21244068> QoI: IUO prevents specific diagnostic + fixit about non-implicitly converted bridge types
[33m3a750fb[m Handle strong_retain_unowned in instruction identity comparison.
[33m47a1a2c[m fix <rdar://problem/20905802> Swift using incorrect diagnostic sometimes on String().asdf
[33m7c29047[m ARC optimizer: disable one optimization
[33me7d8c3c[m Sema: Fix synthesis of materializeForSet for subscripts in protocol extensions
[33m402bbd3[m RangeReplaceableCollectionType review changes
[33m6e30d61[m SILGen: Reabstract values when passing by pointer to C functions.
[33mc619fd0[m fix <rdar://problem/21087089> Fixit for <RawOptionSetType>.allZeros to improve swift 1 -> 2 migration.
[33m612a412[m Teach TypeMember constraints to suggest force unwrapping optionals, the same way value member constraints do.
[33m35e5594[m SILGen: Fix miscompile if witness is a property defined in base class
[33m8d9180e[m InstrProf: Match clang's behaviour and pack this struct
[33m59527f0[m Fix for 21643437.  Because of weirdness in this test (tracked by 19434979), the diagnostics on these lines are different on iOS and the Mac, so just relax the checks back to the way they were.
[33m880ad40[m Pick the potential archetype we use for the actual archetype more intelligently.
[33mec8a602[m Start tracking the complete equivalence class on each PotentialArchetype.
[33m1b0ff78[m [stdlib] Drop now-unneeded test.
[33mfb241ac[m [stdlib] kill __ArrayType
[33md44651f[m Allow type witness resolution for unqualified lookups.
[33me692c87[m Revert "simd overlay: Use LLVM vector types."
[33mb1c4ae4[m [ClangImporter] Expose getEnumConstantName for use in the debugger.
[33m8103dfb[m simd overlay: Use LLVM vector types.
[33m6c3efc0[m IRGen: Use opaque Builtin.IntNN metadata for Builtin.Vec types.
[33m0a7e9d3[m AST printer: Fix printing of Builtin.Vec types.
[33m701f31f[m Make test for r29838 not depending on stdlib internals.
[33m1edcc49[m stdlib: remove Slice.Element typealias
[33md16c278[m stdlib tests: Doug fixed the blocking bugs, so we can simplify tests
[33m6f797f5[m docs: rename Slice -> ArraySlice
[33mac6306c[m vim integration: recognize /// comments for indentation purposes
[33m9f66a12[m Add test from rdar://problem/21333511 that no longer crashes.
[33m2038a8e[m Handle nested types of concrete types in the constraint solver.
[33mbf75dfe[m Handle potential archetypes nested inside concrete types.
[33m24eee30[m update for diagnostic change.  Remove -verify, validation tests should not be checking diagnostics.
[33m35d0b01[m improve QoI for enums that need to be marked indirect, but suggesting a fixit and having a more specific diagnostic.
[33mf04d2bb[m Implement <rdar://problem/20336036> QoI: Add cast-removing fixit for "Forced cast from 'T' to 'T' always succeeds"
[33m2b7e7d9[m Remove extra braces for symmetry with the above function.
[33m975847d[m Mangler: Auto de-sugar protocol-lists when mangling types for the debugger.
[33m0f80934[m Fix <rdar://problem/19774755> Incorrect diagnostic for unwrapping non-optional bridged types
[33m4ce98a2[m Fix RUN line; this isn't passing
[33m9479679[m Add test from rdar://problem/21621421.
[33m87b4eec[m Make same-type requirements prefer to be rooted at outer generic parameters.
[33m1a92b78[m Drop ArchetypeBuilder's conformsToProtocol callback. NFC
[33m0b33741[m Add a testcase for rdar://21362748 [WWDC Lab] QoI: cannot subscript a value of type '[Int]?' with an index of type 'Int'
[33ma9e69dd[m IRGen/Runtime: Mark indirect cases in an enum's field type infos.
[33m59b6dff[m Temporarily disableFixedPointDiagnostics test on iOS.
[33m060b1ab[m Remove redundant MinimalCollection for RangeReplaceable tests
[33m7916aa0[m Make sure we check access for substituted dependent types as well.
[33md0a6713[m [stdlib] Make some typealiases more public, since they're used in public ways.
[33m7962f71[m [Serialization] Add more PrettyStackTraces.
[33m2afc0db[m Minor improvements:  - Remove a weird special case for literals from TypeChecker::typeCheckCondition.  - Enhance FailureDiagnosis::getTypeOfIndependentSubExpression to know about situations    where recursive type checks fail (in some nested situation) but still produce a type    for the top level of the expr tree.  - Remove dead code from CSApply now that you can't branch on Builtin.Int1.
[33m59997ef[m [stdlib] Make _CollectionWrapperType usable
[33m22bb16c[m [emacs support] Resilient indenting
[33m438119d[m Fold ExtensibleCollectionType into RangeRaplaceableCollectionType
[33m4d08538[m Move sil-opt pass names and definitions into Passes.def.
[33m84a6cdc[m remove an unused method.
[33m300e006[m fix a testcase that escaped the previous commit
[33mc2c6306[m cleanups. Update docs and method names.
[33me678147[m Chane flag name and test to reflect pass rename
[33m93fff21[m Rename the InlineCaches pass to Speculative Devirtualization
[33m7b8ed86[m Address some feedback on the WMO document.
[33m45dc17d[m move some expected-error lines onto the line of their expr to make it easier to read dumps, nfc
[33ma3f7446[m stdlib: remove an explicit Slice.generate(), it is supplied by a protocol extension
[33mfc0fa96[m stdlib: de-underscore Indexable and add tests for it
[33m76f5706[m stdlib: de-underscore the Slice type and add tests for it
[33m80b1380[m stdlib: fold Sliceable into CollectionType and de-underscore SubSequence
[33m3745b46[m Zap the unused PolymorphicFunctionType::getAllArchetypes(). NFC
[33mb646af0[m Eliminate some unnecessary uses of getAllArchetypes(). NFC
[33m872a1c8[m Sequester expressions the PlaygroundTransform adds, isolating type-check errors.
[33m9fe5103[m Allow lazy resolution of nested archetypes within the archetype builder.
[33m21e66ee[m Relax testcase so it works on Linux.
[33m8ceef6f[m Don't try to match up accessors when inferring associated types. NFC
[33m11705b3[m Fix wrong call graph update when deserializing a vtable. The callback (which is used for creating CG nodes) was lost when deserializing the functions of a vtable.
[33m35486db[m DIMemoryUseCollector: Track uses of the container ref for alloc_box insns.
[33md7d3ff2[m IRGen/Runtime: Keep the payload offset inside both compiler- and runtime-generated box metadata.
[33mbd9a3ce[m IRGen: Break recursion when lowering indirect enum cases.
[33m4eb24da[m stdlib: underscore MirrorType
[33mc5dd8be[m Debug Info: Migrate from MDModule to DIModule. MDModule was a bitcode-incompatible internal-only extension that has since been replaced with a blessed IR node on trunk.
[33mdd44dad[m Add 'throws' keyword to doc comments
[33m7b98fbf[m Forbid defining @objc class methods +alloc and +allocWithZone: along with +load.
[33md9ddc21[m [ClangImporter] Fix underscore handling from r29673 to handle plurals.
[33mec97f37[m [sil-devirtualizer] Properly handle devirtualization of functions with tuple return types, e.g. materializeForSet.
[33m9da16e5[m stdlib: underscore reflect() and unsafeReflect()
[33m8d79d9e[m stdlib: underscore MirrorDisposition
[33m6bc93d4[m stdlib: finish renaming QuickLookObject to PlaygroundQuickLook
[33m7ee84ed[m stdlib: rename Reflectable.{getMirror() -> _getMirror()}
[33mcd9a274[m [test] Update test from r29816 to not use the linker.
[33m762cb3f[m start loosening up getTypeOfIndependentSubExpression() to walk into more kinds of expressions.  Broadening from callexpr to apply expr (picking up operators) improves several diagnostics in the testsuite, and is important to avoid regressions from an upcoming patch.
[33m77fce6b[m update notes to go with r29810
[33m80b734d[m [Driver] -driver-show-incremental: avoid showing duplicates.
[33m6275c78[m [Driver] -driver-show-incremental: fix printing of protocols.
[33m729e599[m SILGen: Project boxed payloads when switching indirect enums.
[33m83f9ed4[m [Driver] Don't assert when some files /don't/ get rebuilt but we still merge modules.
[33mf8f939d[m [Dependencies] Private extensions should not be considered part of a file's interface.
[33m80ebf97[m [stdlib] Add _SequenceWrapperType and _CollectionWrapperType
[33m10d7c3d[m [stdlibunittest] Use a legitimate TypeIdentifier
[33mbb4e2ad[m Eliminate the ability to 'if' branch directly on a Builtin.Int1 value, instead always require BooleanType.  It isn't necessary and it is in the way of progress.
[33ma8b7ff8[m Add test case for rdar://problem/21598514.
[33m79563ff[m Several conflated changes:  - Enhance subscript diagnostics to chase into the constraint system to find    overload candidates that failed to match so we can rank and diagnose    subscript ambiguities using the same mechanics we have for operators.  - Implement a copy of suggestPotentialOverloads based on the new mechanics    for overload set resolution.  This allows us to diagnose these in a more    detailed way, but for now we're keeping it as similar to the old system as    possible.  The old version to be removed once the last client moves off it.  - Add a bunch of testcases to decl/subscript/subscripting.swift where we are    doing unfortunate things still.
[33m0c1b625[m Propagate error types out of specialized conformances.
[33m8f31e03[m Completely check the requirements of a protocol as part of validation.
[33ma744b87[m Factor the checking of generic arguments into its own function (again). NFC
[33m1ad05c0[m Add a write-up of future work for whole module optimization.
[33m06d9bfe[m Add a tool to generate DOT graphs from a set of .swiftdeps files.
[33m45189f9[m [Driver] Add a basic tracing mode to determine why files are getting rebuilt.
[33m9a39d71[m [Driver] Add Job::dump.
[33mee07ddc[m Sema: Fix crash calling protocol extension methods returning Self on existential
[33m7ee8b36[m Be more defensive when looking up associated types.
[33m57265ac[m Revert "Updated the playground transform's error handling. Specifically, we now report type-checking errors in added instrumentation to llvm::errs() and try to restore the ASTs to their former state."
[33m1a3d3b0[m teach resolveImmutableBase about BindOptionalExpr, making some mutability diagnostics more precise.
[33m789eff2[m Updated the playground transform's error handling. Specifically, we now report type-checking errors in added instrumentation to llvm::errs() and try to restore the ASTs to their former state.
[33m3c7cb83[m Now that diagnoseGeneralOverloadFailure() has a correct notion of the ApplyExpr involved in the overload failure, wire it up to some of the mechanics we have for more specific situations, including diagnosing the last (known to me) mutation issues that weren't being specifically diagnosed, as well as printing the candidate set in these cases.
[33mad81277[m stdlib: remove Set<T>.GeneratorType
[33m480a55c[m IRGen: Fix the address type of empty boxes.
[33m2ff79e8[m SILGen: Box indirect payloads in enum constructors.
[33m8a26662[m Use the generic signature to check specialized uses of generic types.
[33md5aaf13[m fix <rdar://problem/21459429> QoI: Poor compilation error calling assert This teaches overload constraint diagnosis to look at the resolved anchor expression that fails (instead of assuming that it is the expr itself) and walks up the AST to find the applyexpr in question.  This allows us to give much more specific diagnostics for overload resolution failures, and to give much more specific location information.
[33m4bc3815[m [stdlibunittest] Missed update to CMakeLists.txt
[33m4b4510e[m [stdlib] Simplifying filter tests (WIP)
[33m8c855e1[m [stdlibunittest] automatic LifetimeTracked checking/setup
[33me3ab9d4[m [stdlibunittest] Make some globals class static
[33m7aed411[m [stdlibunittest] Automatically reset common test environment
[33ma35204c[m [stdlibunittest] logging sequence/generator wrappers
[33mbd891ea[m Extend the heinous hack for overloading with redeclared protocol requirements.
[33m93c0137[m Modified the PrintingDiagnosticConsumer to take a stream argument, and also to record whether it has ever seen an error.
[33m275d4f5[m SIL: Payloads of indirect enum cases are boxed.
[33mc209c12[m [func-sig-opts] Fix lifetimes are no longer needed.
[33m21bbb73[m [func-sig-opts] Use bottomup SCC order.
[33m5b6a76d[m [func-sig-opts] Expand the definition of a singleton tree to include trees with multiple levels of single field types.
[33m877ed60[m CMake: remove commented out code
[33mafe47fd[m Ensure that cast optimizer properly invalidates analyses in both ConstantPropagation and SimplifyCFG.
[33m66ba682[m Parse the 'indirect' attribute on enums and cases.
[33m367f0a9[m add tests for some fixed radrs.
[33mcb90745[m fix the bounce-back of rdar://19343997, where a fixit isn't adding a space right.
[33mbe90649[m Teach CSDiag how to recursively walk into an arbitrary expression, to produce its diagnostics in post-order.  Notably, this picks up support for if-expr, which gives up much better diagnostics in ternary operators.  For example, rdar://17224804 used to produce:
[33m767e1ff[m Update SIL.rst to discuss @box types.
[33m1df3190[m add a helper function to enumerate the immediate children of an expr node.
[33mb2ac2b8[m add some testcases for radars fixed.  the return diagnostic improvements are due to my recent patch, 16375647 is an older fix.
[33m163e515[m Move a test that uses AutoreleasingUnsafeMutablePointer into a separate file
[33mffea453[m Enable watchOS builds by default
[33m8d43abf[m Make this test use a temporary file
[33mbc55c4e[m ClangImporter: Remove -enable-simd-import staging option.
[33m55a830d[m ClangImporter: Remove -enable-c-function-pointers staging option.
[33m2630dba[m Runtime: Rename Box2 functions to Box.
[33m9bdac15[m SIL: Remove EnableTypedBoxes staging option.
[33m8a04d67[m IRGen: Strip out dead code for untyped boxes.
[33m8106a11[m Disallow @objc on non-ObjC-rooted classes.
[33md45acfb[m Fix typo in comment.
[33m65edf25[m Fix typo in optimization tips document.
[33m5b31f94[m Enhance diagnoseGeneralConversionFailure to understand that constraints have a path associated with them, and to dig the expression the constraint refers to out of the locator.  Also teach simplifyLocator how to simplify closureexpr results out.
[33m82122f9[m stdlib: fixit-based migrations for generic parameter renames
[33m18cfd2e[m Quote the new symbol name in the diagnostic for unavailable renamed APIs
[33m3bf7708[m Put backquotes around reserved argument labels in fixits.
[33m0c05b71[m make it easier to dump constraints in the debugger.
[33mdcd46ea[m [stdlib] A system for concise testing of customization points.
[33mc8241b0[m [emacs support] Fix regexps for matching StdlibUnittest failures
[33m6babfe3[m SIL: Enable typed boxes.
[33mac46f00[m Introduce a recursive type matcher for structurally matching two types.
[33mc67cc47[m [test] Missed a spot in previous commit.
[33m67e1ba9[m [test] Merge objc-generics-sdk back into clang-importer-sdk.
[33m285ee60[m [ClangImporter] Generalize the hack from r29212 to cover any unavailable members.
[33mf06fe9e[m Sema: Fix non-@objc AnyObject on Linux, again...
[33m3be416b[m [ClangImporter] Recognize Swift classes and protocols renamed with @objc.
[33mb4d6a47[m [PrintAsObjC] Use @objc for compile-time names of classes and protocols.
[33m99058b4[m Only strip implicit self parameter from func decl type if the func decl has an implicit self decl. Follow-up to r29732.
[33m025c35d[m Don't invalide Substitution invariants in ill-formed code.
[33mb410da5[m Diagnose associated type inference ambiguities involving defaulted associated types.
[33m913a03c[m Update test for r29737
[33mbff16e6[m remove some special case code that is no longer needed, resolving the @noescape QoI regression in the last patch.
[33m9a65927[m Sema: Another fix for protocol self-conformance
[33m8636b00[m Sema: Formatting fix, NFC
[33mc033da9[m IRGen: Implement emission of ExistentialMetatypeInst for boxed existentials
[33m8e8013f[m IRGen: Enable a test now that the FIXME in question has been fixed
[33me41c238[m A bunch of conflated changes:  - Fix TypeCheckExpr.cpp to be more careful when propagating sugar from an    argument to the result of the function.  We don't want to propagate parens,    because they show up in diagnostics later.
[33mfd5812b[m Don't assume that a ValueDecl in a type DeclContext with function type is an instance method. Make sure it's a non-static function before attempting to strip the implicit self parameter from the type.
[33mbd915d3[m two changes here:  - When diagnosing an error passing a noescape function to an escapeing function pointer,    return 'true' to avoid follow-on bogus error messages and notes being produced.  - Start classifying the closeness of overload matches, to allow future diagnostics to be    improved.
[33m36d46b8[m [Sema] Look through SubstitutedTypes when diagnosing for availability.
[33m2208554[m rework some of CSDiags to be more type based and simplify some things.  No major win from this other than simplification.  Some minor wins are that we handle varargs better and don't get extraneous ()'s in types in some cases.
[33mcb6a59e[m Partially revert "Remove two XFAIL's now that <rdar://problem/21547909> is fixed."
[33mf77d6d4[m [stdlib] Quick fix
[33m8e0b5bd[m [stdlib] Cleanups based on commit-list feedback
[33m1b79092[m [stdlib] Use StdlibUnittest to test Generator
[33mfefc726[m [stdlib] Use a clearer protocol conformance
[33mf646b70[m [stdlib] Add missing parameter name
[33md73cbf5[m [stdlib] Add missing comments
[33m68dc42f[m [stdlib] Move IndexingGenerator for readability.
[33m65179cf[m [stdlib] Add missing comment.
[33m1b3c9d9[m [test] Sprinkle type annotations throughout Lazy.swift.gyb.
[33m753ca13[m [Driver] Don't assert that all Compile jobs have only one input.
[33m8ec59e5[m Runtime: Implementation for generic typed boxes.
[33m4a3f397[m Runtime: Suppress warnings about extern "C" symbols with C-incompatible types.
[33m553c2d8[m refactor some common code out to a collectCalleeCandidateInfo helper, NFC.
[33m1dcd78a[m Remove two XFAIL's now that <rdar://problem/21547909> is fixed.
[33ma327114[m Resolve the merge failure of test/IRGen/typed_boxes.sil that I accidentally committed
[33m2e42a61[m Drop the correct 'Self' constraint for a protocol member.
[33m25fc2d0[m Improve dumping of solutions to constraint systems.
[33mec9af44[m Adjust for new macro API in Clang
[33m89a87c3[m Revert "[test] Disable/remove tests that rely on iterating over all Clang macros."
[33m30bedf8[m [test] Disable/remove tests that rely on iterating over all Clang macros.
[33mbc371ec[m [ClangImporter] Update for changes to how Clang manages macros in modules.
[33m3a6ed77[m Adjust to the reshuffle in the LLVMModuleProvider API
[33m502d0d5[m Adjust to the new ParseArgs API
[33m37a4335[m Replace swift::Range with llvm::iterator_range
[33m7cdcb16[m CMake: LLVMParseArguments.cmake was removed, migrate to cmake_parse_arguments
[33m8f61538[m Adjust to llvm::Location -> llvm::MemoryLocation rename
[33mc5185d6[m Adjust to the new LLVM APIs
[33m320068c[m Adjust to the new clang::CompilerInstance API
[33mf08d1c9[m Adjust tests for the new scheme of name conflict resolution in LLVM
[33m5032ea5[m Make the test more robust so that it passes with stronger optimizations in the new LLVM
[33m2fc1cbe[m Adjust to the new IRBuilder APIs
[33m03c44ad[m [stdlib] Fix one more test
[33mf2ab03c[m [stdlib] Patch up a test I missed fixing...
[33m1c5f805[m [stdlib] Protocol Extension-ize CollectionType
[33m4056d22[m Squash warnings in tests
[33m3ce2df9[m Squash a release build warning
[33maafd3d9[m [stdlib] Prototype Result<T>
[33m905d7e9[m [stdlib] Improve reporting on test failure
[33m79bd9b3[m [stdlib] Move "first" _CollectionDefaultsType -> CollectionType
[33m814a2d6[m Don't build temporary variables of InOutType. This only appears in the print logging for now. I've got to figure out a way of transforming print() calls without building temporary variables left and right.
[33m1d2374e[m Fix the IRGen/c_globals.swift test on Linux
[33m39bdb54[m Fix the IRGen/c_globals.swift test for i386
[33mfde613d[m move the FailureDiagnosis class into CSDiag.cpp, since it is an implementation detail of that file.
[33mff4f2c0[m Handle default argument mismatches in vtable construction.
[33m02b1b1c[m IRGen: Save the private heap metadata we emit for a HeapLayout.
[33ma7cb073[m remove redundant test case.
[33m92897ea[m IRGen: stop using the DisableFPElim target option
[33m630a637[m move diagnoseAssignmentFailure from FailureDiagnosis to ConstraintSystem, NFC.
[33meb1ea2a[m Harden the PlaygroundTransform against type-checking errors.  These errors are now printed to errs() and the data they produce is not used, avoiding crashes later in SILGen when we encounter ErrorTypes.
[33me900823[m [ClangImporter] Tweak enum import rules to remove more underscores.
[33m719996e[m merge FailureDiagnosis into GeneralFailureDiagnosis.
[33mdbedb88[m Switch FailureDiagnosis to use the standard CRTP ASTVisitor instead of rolling its own thing.  NFC.
[33m22c2585[m Add now-fixed test case from rdar://problem/21087186.
[33mc0a3220[m Add a testcase for rdar://problem/21247536.
[33m036b083[m [Driver] Eliminate the JobList class.
[33m482cfac[m [Driver] Store all Jobs in a flat list in the Compilation object.
[33m6fce6d3[m [Driver] Better separation of concerns in the Tool hierarchy.
[33m4af8295[m [Driver] Put all jobs in a single task queue.
[33m53c9dc9[m Forgot to add this test to the previous commit.
[33mb0ac163[m Fix a crash when cloning an init_existential with multiple conformances.
[33mef1886a[m Fix crash generating IR for select_enum with payload that has no extra inhabitants.
[33madd4dee[m add special diagnostics handling for ParenExpr: without this, we would handle them with diagnoseGeneralFailure() which would miss out on the common cases where the subexpr of the ParenExpr is the issue.
[33m48551a1[m more tidying up, mark a bunch of helpers "static". NFC.
[33ma88acbe[m remove unused diagnostic
[33md919b45[m SILGen: DiverseStack defines stable iterators; let's use them
[33m9891d11[m simplify some code by inverting nesting etc, NFC.
[33m7e7aa85[m Remove stale test/IRGen/generic_same_type.swift test.
[33m627db03[m Minor documentation tweak - replace switch with select.
[33m4a4557c[m In Onone mode, an instruction is not considered dead if it is used by a debug_info
[33m251bda4[m Add a field to SILOption to represent the current optimization level.
[33mcb85eac[m WatchKit Overlay: Remove temporary hack to disable availability checking
[33m0178453[m [ClangImporter] Pretend dyld.h's DYLD_BOOL was declared with NS_ENUM.
[33m550b9fe[m [Sema] Improve clarity of fix-it hint to add #available.
[33meb8c9ac[m Handle "do { }" statements in playgrounds.  Also added a testcase.
[33m5a71aae[m [Sema] Update availability fix-it to be consistent.
[33m5a26908[m Fix a sloppy test case that failed on the simulator.
[33m3e96e1f[m [Sema] Suppress warning about useless availability checks in playgrounds and immediate mode.
[33m786141f[m resolve-crashes.py now "supports" resolving compiler_crashers_2 as well
[33m7b2aa2c[m SILGen: Fix lvalue reabstraction
[33m63fb583[m stdlib: fix coding style in Interval.swift.gyb
[33mdc2f89f[m stdlib: fix coding style in Unmanaged.swift
[33m0d954c3[m stdlib: rename the generic parameter from T to Instance on Unmanaged
[33m4e9b6b8[m stdlib: rename generic parameters from T to Bound on intervals
[33m0622e17[m stdlib: add tests for generic parameter names on ManagedBuffer and friends
[33m42ee904[m stdlib: add tests for generic parameter names on DictionaryLiteral
[33m4cdf37a[m stdlib: rename the generic parameter from T to Element on unsafe pointers
[33mba208cd[m stdlib: rename zip generator and collection to a common naming convention
[33m60ba7be[m stdlib: rename the generic parameter from T to Element on GeneratorSequence
[33m71022a4[m stdlib: rename mapping sequence and collection wrappers to a common naming convention
[33mdeac6d7[m stdlib: rename generic parameters from T to Element
[33mc2162f0[m stdlib: rename mapping sequence and collection wrappers to a common naming convention
[33mc83fcf0[m Rename GeneratorOf and SequenceOf in the docs
[33m6be11fe[m stdlib: rename filtering sequence and collection wrappers to a common naming convention
[33mfdd73a5[m stdlib: add tests for generic parameter names on EnumerateGenerator, EnumerateSequence
[33m9dff1aa[m stdlib: rename generic parameters from T to Element
[33mbd99957[m stdlib: rename generic parameters from T to Element
[33m5b8837f[m stdlib: change Range.{startIndex,endIndex} into stored properties
[33m585553a[m stdlib: Range: remove declarations that can be inferred
[33mf11f494[m stdlib: rename generic parameters from T to Element
[33m09ab3c1[m stdlib: rename generic parameters from T to Element
[33md3dff3e[m stdlib: rename generic parameters from T to Element
[33md013644[m stdlib: rename generic parameters from T to Element
[33ma884263[m stdlib: rename Repeat's generic parameter from T to Element
[33md9726ef[m stdlib: rename Set's generic parameter from T to Element
[33m51e236c[m stdlib: rename Array's generic parameter from T to Element
[33m57d85f7[m stdlib: eliminate redundant implementations of 'generate()'
[33md396eb9[m stdlib: fix a spelling mistake in a doc comment
[33mde937eb[m stdlib: add unavailable String.{count,subscript()} APIs
[33ma32a0af[m Allow unchecked_trivial_bit_cast to cast to smaller types.
[33me2ec207[m Make sure test case does not collide with private discriminators.
[33m3c2ee54[m IRGen: Implementation of typed box operations.
[33me19987d[m Do not treat unchecked_addr_cast result as RC-identical to its input.
[33m3aa3fab[m Tests I forgot for r29604.
[33m149d4bc[m Disallow unnamed function parameters written without the "_:".
[33m54979b7[m Remove uses of complete-unnamed function parameters from the testsuite.
[33m17884f1[m Stop declaring function parameters without names, e.g., "func f(Int)".
[33m9e0b290[m Parser: Always parse '.foo' as expr-postfix when possible.
[33m2be344a[m Revert "SILGen: Make witness parameter translation handle single-element tuples."
[33m67091f9[m [const-prop] Propagate if we potentially invalidated branches or calls.
[33md730ba0[m [const-prop] Convert for { if-else-if-else chain } into for { if-continue if-continue }.
[33meb6857a[m Revert "Revert r29594 "Implement verification of dominance analysis.""
[33ma6f8177[m SILGen: Fix crash when protocol defines instance and static property with same name
[33m7088b2f[m Revert r29594 "Implement verification of dominance analysis."
[33md285549[m [const-prop] Refactor out worklist initialization into its own function. NFC.
[33m9565577[m Convert some TYPE *x = dyn_cast<TYPE>(y) => auto *x = dyn_cast<TYPE>(y). NFC.
[33m844d999[m "Fix" IRGen/objc_type_encoding for tvos by duplicating CHECK-ios strings
[33ma39102c[m Fix incorrect invalidation in inlinecaches.
[33m6300f26[m Add an option -sil-verify-without-invalidation that verifies functions and modules with -sil-verify-all even if the functions, modules were not invalidated.
[33m0cc8706[m Implement verification of dominance analysis.
[33m7ee456a[m [dead-func-elim] Invalidate analyses when a function is changed from a def -> a decl.
[33mbf91d01[m [dead-func-elim] A few small fixes.
[33m7e875e0[m [analysis] Make sure to check if an analysis has been created for a function before attempting to verify it.
[33m779480a[m [IRGen] Disable LLVM's MergeFunctions pass.
[33m2acb640[m [test] XFAIL Driver/Dependencies/bindings-build-record.swift on Linux for now.
[33m460b03d[m [ClangImporter] Remove a hack put in for the Security framework.
[33maae8ef2[m Harden against malformed extension manglings.
[33m0ad94eb[m [stdlib] WIP applying protocol extensions to Lazy
[33m2b7b78d[m [Driver] A .swift file should be rebuilt if its mtime has changed.
[33m8e071b1[m Revert "[Sema] Suppress warning about useless availability checks in playgrounds and script mode."
[33m200b55b[m [Sema] Suppress warning about useless availability checks in playgrounds and script mode.
[33mbc8593c[m Change PostOrderAnalysis to use FunctionAnalysisBase.
[33m40d2b99[m fix: <rdar://problem/21414023> Assertion failure when compiling function that takes throwing functions and rethrows <rdar://problem/21432429> Calling rethrows from rethrows crashes Swift compiler <rdar://problem/21427855> Swift 2: Omitting try from call to throwing closure in rethrowing function crashes compiler
[33m98b3e55[m Add SILAnalysis::verify(SILFunction *) so analyses can attempt to verify their state related to a single function.
[33mcc2e283[m Turn on sil analysis verification by default when -sil-verify-all is enabled.
[33mc8c5c64[m [ClangImporter] Also strip "WithError" like we do "AndReturnError".
[33ma77192d[m Sema: Functions with varargs cannot be represented in Objective-C
[33mb7e57b6[m Bump iteration limit in inliner.
[33m81d8fa3[m Tweak coding style.
[33mda10333[m fix <rdar://problem/20912019> passing unmaterialized r-value as inout argument
[33m7a4b80c[m SILGen: Make witness parameter translation handle single-element tuples.
[33m4602d51[m Improve the diagnostic for an init in a protocol extension that doesn't chain to another self.init, hopefully resolving confusion about what has to be done here.
[33m38c3bce[m Tweak diagnostics for invalid instantiation expressions.
[33m51cfd7b[m [ClangImporter] Blacklist 'NSEDGEINSETS_DEFINED' macro.
[33m4ac4315[m Fix wrong simplification of switch_enum - enum.
[33m665b870[m Sema: Fix yet another crash when accessing nested types of an existential
[33m3e3ff0b[m add improved diagnostics for another bad return path.  CSDiag is a maze to me, this really fixes the case in rdar://14096697.
[33mf25e14e[m fix <rdar://problem/14096697> QoI: Diagnostics for trying to return values from void functions by propagating the 'is return expr' bit more carefully in sequence folding, and by adding another path for handling the return diagnostics better.
[33m7ce4fdd[m Remove SIMD usage from test/Interpreter/repl_17597453.swift
[33mf0d98f3[m Sema: Fix problems with coerceClosureExprToVoid()
[33m4d7feb7[m Revert "SILGen: Make witness parameter translation handle single-element tuples."
[33m87ba8f5[m SILGen: Make witness parameter translation handle single-element tuples.
[33m3ad022b[m [test] Revert r29558. ArrayBridge is not yet cleanly split objc vs non-objc.
[33m79f293c[m Address Argyrios' comments on r29520 and r29528
[33m4317559[m [test] 1_stdlib/ArrayBridge.swift requires objc_interop.
[33mfd5da7f[m [test] Run an NSArray class method on a Swift array bridging class.
[33m46a32b5[m SILPasses: Teach DI about delegating constructors
[33ma64d505[m SILGen: Fix some problems when generating delegating init calls
[33m886bc27[m tidy up some code, NFC.
[33m04048b8[m Fix the AST dumper to only call IntegerLiteralExpr::getValue() when it will succeed, finishing the rest of <rdar://problem/21387308>
[33mf3a03ae[m Make the diagnostic for a guard whose 'else' clause falls through more explicit to nudge people in the right direction of how to use it. Fixes <rdar://problem/21355414> Error on forgetting to return on a guard
[33mb375a0b[m Remove unneeded 'if' resulting from copy/paste error.
[33mf68161e[m Have LLVMArcOpts preserve the debug locations when lowering calls to retain and release operations.
[33m5b2a16f[m [CodeCompletion] Don't look at null subpattern of "is T.Type"
[33m2f03a39[m swift_native_objc_runtime_base test requires ObjC interop.
[33m52af220[m Further refinement for rdar://21434158, I missed the point in the original patch.
[33m741b750[m fix <rdar://problem/21434158> Error message fail in Swift
[33m2a2d1a3[m IRGen: Set the metaclass superclass properly for root Swift classes with @_swift_native_objc_runtime_base classes.
[33md849931[m SILGen: Emit Clang-imported witness tables by need too.
[33m8d4edf3[m Finish commenting a type in the previous commit.
[33m8b3d4ac[m Allow enum elements with string raw values to default to the name of the element.
[33m006c362[m update test for a diagnostic change.
[33m9d5a5a9[m XFAIL this on linux to bring the bot back.
[33m884de4b[m testcases fixed by r29538
[33m9a65aff[m Two changes:  - In name lookup, if we find a decl that is already being type checked    (which only occurs on illegal code) just assume it is acceptable instead    of blowing up with an assertion checking access control that hasn't been    evaluated yet.  - In checkInheritanceClause, make sure that the we mark the decl being    resolved as being type checked when resolving the types involved.  That way,    cyclic references are detected as invalid, instead of causing assertions and    other explosions.
[33m876c156[m add some crazy overly defensive code to avoid crashing when printing a type while in the middle of the type checker.  NFC unless you're a compiler hacker we'd hope.
[33mf58ce3e[m SILGen: Only emit implicit and Clang importer decls by need.
[33m77f6228[m [ClangImporter] Warn on and ignore invalid swift_name attributes.
[33m4fda02e[m [ClangImporter] Follow swift_name more closely when error params are involved.
[33m7d0f0dc[m [stdlib] internal Box<T> should be final
[33mc34d71a[m Debug Info: Ensure that shadow copies for arguments also described by debug_value intrinsics are only emitted once.
[33m462fb4b[m Remove an overly strict assertion.
[33mcc74abe[m Remove a redundant assertion.
[33m8098f2c[m [ASTPrinting] Print the types of named patterns appearing in VarDecl.
[33m1be2a77[m [CodeCompletion] Avoid choking on a doubly-typechecked expr
[33maa354e3[m [callgraph] Instead of returning "const llvm::SmallVectorImpl<T *>" use canonical ArrayRef<T *> for read only views.
[33m94805ba[m When type-checking ExprPattern, set MatchExpr even when typechecking failed so the verifier knows to walk it instead of SubExpr.
[33m54444c3[m [sil-combine] Lower {retain,release}_value of @sil_unowned types to unowned_{retain,release} not strong_{retain,release}.
[33m48bf8a8[m [verifier] Tighten the verification of "requireReferenceValue" to confirm that a value is a non-optional, non-owned reference-counted type.
[33md7e9061[m Add in a DeletedInstSet to SILCombine to prevent dangling deleted instructions from being added to the Worklist.
[33m9a52f54[m [ASTPrinting] make VarDecl respect accessibility filters in PrintOptions.
[33m62d1f87[m IRGen: Map Optionals to Clang types using their lowered payloads.
[33m4199ee5[m SILGen: Lower capture arguments using box types when typed boxes are enabled.
[33md5be2db[m AllocBoxToStack: Relax assertion to allow typed boxes.
[33mc7d1c0a[m [ls-opts] Properly distinguish in between Stores with read dependencies which can not be dead but still can be forwarded from and those stores which can still be dead.
[33m811abfb[m Move LSValue/LSLoad/LSStore earlier so I can use their definitions in the feasability analysis.
[33m67eedb1[m [ls-opts] Standardize on LSContext being passed first as an argument.
[33m7b5430b[m [ls-opts] Use LSStore/SSAUpdater in StoreMap instead of the StoreList/PredecessorOrderList.
[33mc1efb56[m Update test/SILGen/objc_bridging.swift for watchos ABI change.
[33m910badf[m SIL: Stage in a typed-boxes dialect.
[33m7565a65[m Introduce unchecked_bitwise_cast SIL instruction.
[33md102720[m Fix crash when unchecked_enum_data-enum is simplified but the enum types do not match.
[33m0e20f24[m fix <rdar://problem/18734297> Reject access to local variables from local types
[33m1b49bc3[m improve coding style: remove unneeded llvm:: qualifications, use isa instead of dyn_cast when ignoring the results, etc. NFC.
[33m80743ca[m fix <rdar://problem/21387308> Fuzzing SourceKit: Parser::parseTopLevel(...) crashes in Parser::parseStmtForEach(...): Assertion failed: (InVarOrLetPattern == IVOLP_NotInVarOrLet && "for-each loops cannot exist inside other patterns")
[33m7eb2e49[m EncodedSequence: rename some functions, improve some assertions, and fix a couple of bugs about how many bytes to copy that were caught by ASan.
[33m3069841[m SDK overlay: simplify implementations of unavailable functions
[33m491e774[m stdlib: redeclare requirements from underscored protocols in public protocols
[33m4873f77[m Fix test for diagnostic change caused by (probably) r29494
[33md46cb9d[m Foundation overlay: remove initWithObjectsAndKeys:_,...
[33m43d1925[m Fix an incorrect static_assert on 32-bit targets.
[33m328182c[m various 80 column fixes, NFC.
[33mab440ad[m fix <rdar://problem/21444509> Crash in TypeChecker::coercePatternToType
[33m0e05470[m Take care to preserve parentheses when opening generic types. Consider lvalues when compiling list of partial-match overloads in diagnosis. (This is a reapplication of commits r29462 and r29469.)
[33m563d105[m Verify mode: Add support for 'expected-error?{{..}}' annotation that matches zero or one instances of the diagnostic.
[33m2a516e6[m Remove linking from various passes.
[33m821b0f4[m SIL: Add a project_box insn to project the address of the value from a box.
[33me57c470[m Introduce a "@box T" type for SIL.
[33m7bf9961[m ABCOpts should not remove a redundant bounds check where it did not do a safety check.
[33m524c2a5[m Fix a few verifier messages to be consistent and correct.
[33m75b5b12[m Small clean-up. Add createUncheckedBitCast to SILBuilder.
[33ma065ae9[m Add a data structure for efficiently storing a byte-encoded sequence which can be read with a forward iterator.
[33mf7ce9aa[m Revert "Take care to preserve parentheses when opening generic types. Consider lvalues when compiling list of partial-match overloads in diagnosis."
[33mf3a86f6[m Revert "Make sure the generic and non-generic argument acceptance semantics are the same, re 17875634."
[33m39087cd[m Revert "Introduce a "@box T" type for SIL."
[33mf56ca1e[m Revert "SIL: Add a project_box insn to project the address of the value from a box."
[33m0747745[m fix indentation nfc.
[33mf7e0f31[m [stdlib] WIP Refactoring tests
[33m46e6f76[m StdlibUnittest: debugDescription for MinimalSequence
[33me8dbf7b[m [stdlib] Squash a warning in a test
[33m4036074[m Revert "Add a data structure for efficiently storing a byte-encoded"
[33m15c29e5[m SIL: Add a project_box insn to project the address of the value from a box.
[33m7b0045c[m Introduce a "@box T" type for SIL.
[33mf05670b[m [PrintAsObjC] Avoid using C/C++ keywords in methods and properties.
[33m29cebb8[m [SyntaxModel] Ensure syntax-coloring does not crash when the last token is a DeclAttribute. This may happen to rethrows, rdar://21324493
[33m49e1a74[m [IRGen] Bitcast SIL globals that don't have the right LLVM type.
[33mf0fac67[m Revert "[stdlib] join() => protocol extension"
[33mae06188[m Make sure the generic and non-generic argument acceptance semantics are the same, re 17875634.
[33m705e3ee[m Remove line that I committed by mistake.
[33m3299e1b[m [stdlib] join() => protocol extension
[33md6721fc[m [ls-opts] Remove ForwardingAnalysis failable initializers in favor of just using constructors.
[33mb550d1f[m [ls-opts] Rename ForwardingKind => ForwardingAnalysisResult.
[33m3ba2a3b[m [ls-opts] Extracting LSBBForwarder's load forwarding loop into separate methods one for forwarding from loads and the other for forwarding from stores. NFC.
[33m66301da[m Fix cut off comment.
[33m8d4f705[m Take care to preserve parentheses when opening generic types. Consider lvalues when compiling list of partial-match overloads in diagnosis.
[33m2f83732[m Static lets are never mutable.
[33m62fd203[m Make _swift_allocNilObjCError public so that it can actually be found by the runtime.
[33m1f80de3[m Restore the original intent of our IRBuilder to not provide functions to create load/store instructions without alignment.
[33mc099ec8[m Add a data structure for efficiently storing a byte-encoded sequence which can be read with a forward iterator.
[33mc03c042[m fix <rdar://problem/21392677> for/case/in patterns aren't parsed properly
[33m8e14bba[m fix <rdar://problem/21110580> `guard let` in top level code doesn't work
[33m96cc406[m Debug Info: Ensure classes report their storage size correctly by wrapping them in a pointer-sized struct as we do for all things passed by reference.
[33m4613548[m Remove a stale fixme comment.
[33m27b8451[m Ensure that generic parameters always have a valid access level.
[33m8ad5297[m Don't complain when using '@testable import' on a Clang-only module.
[33m006a016[m [test] Remove a hackaround for supporting last year's SDKs.
[33m3ad108b[m Reapply r29419: Enhance fixItRemove() to be a bit more careful about what whitespace it leaves around: if the thing it is removing has leading and trailing whitespace already, this nukes an extra space to avoid leaving double spaces or incorrectly indented results.
[33m9deaf6c[m Sema: Fixes for partial application of protocol methods
[33m72c44b4[m Sema: Fix getTypeOfMemberReference() for unbound instance methods
[33m5bbc879[m Fix simd overlay after previous revert.
[33m99768eb[m Revert "Switch overlays from using @exported to -import-underlying-module."
[33mf335128[m [IRGen] Don't wait until we find libswiftCore to autolink libobjc.
[33mc516ef9[m [IRGen] Remove unnecessary IRGenOptions flag HasUnderlyingModule.
[33mc8bfc87[m Switch overlays from using @exported to -import-underlying-module.
[33m955e130[m Diagnose self-imports of the module being compiled.
[33mff7c3f0[m Make overlay dependencies explicit.
[33md329151[m Make the 'simd' module build like the rest of the overlays.
[33m98ed31f[m Make -import-underlying-module automatically export that module.
[33m5d79c41[m SIL: Remove unnecessary isObject() assertions from ValueBuffer instructions.
[33m636e5a1[m [test] attr-swift_private requires ObjC interop
[33m9dc736b[m Re-apply "[ClangImporter] Don't import subscripts with swift_private getters/setters."
[33m2714262[m Revert "[ClangImporter] Don't import subscripts with swift_private getters/setters."
[33md13549e[m Revert "enhance fixItRemove() to be a bit more careful about what whitespace it leaves around:"
[33m5df67ed[m [sil-combine] Remove from sil-combine the code which was moved into sil-simplify in r29418. NFC.
[33m418cc9e[m [ClangImporter] Don't import subscripts with swift_private getters/setters.
[33m34f6949[m [ClangImporter] Import swift_private rules for methods and initializers.
[33m8410a9b[m [ClangImporter] Teach lookupValue to find top-level swift_private declarations.
[33m615a32a[m [ClangImporter] Handle swift_private renaming for a variety of imported decls.
[33m7cc910b[m [ClangImporter] Add a version of importName that takes a clang::NamedDecl.
[33ma696730[m [ClangImporter] Remove suffix appending from importName.
[33m6658c94[m [ClangImporter] Consistently name Swift->Clang helpers "export*".
[33m87ec098[m watchSimulator ABI: Change ObjCBool from Int8 to Bool
[33m4d62c4f[m Add tests for try! traps.
[33m2dce54d[m AST: unexpectedError and errorInMain aren't 'readnone'.
[33m3be5bfa[m revert accidental commit in r29419
[33m6b3167a[m enhance fixItRemove() to be a bit more careful about what whitespace it leaves around: if the thing it is removing has leading and trailing whitespace already, this nukes an extra space to avoid leaving double spaces or incorrectly indented results.  This fixes <rdar://problem/21045509> Fixit deletes 'let' from non-binding 'if case let' statements, but leaves an extra space
[33m62767a9[m [sil-combiner] Move a peephole for the enum inst from sil-combine into sil-simplify. NFC.
[33m10b6a86[m Revert "[sil-combiner] Move a peephole for the enum inst from sil-combine into sil-simplify. NFC."
[33me91b59f[m Debug Info: Also treat tuple types like all other composite types and create a replaceable forward declaration while building it. This fixes a crash when building generic enums a tuple element recursively referenceing the enum.
[33madda8a9[m Foundation overlay: add throwing and generic variants for NSCoder APIs
[33ma485121[m [sil-combiner] Move a peephole for the enum inst from sil-combine into sil-simplify. NFC.
[33m9270949[m Fix crasher in the protocol conformance checker.
[33m44f7885[m Debug Info: Treat subroutine types like all other composite types and create a replaceable forward declaration while building it. This fixes a crash when building generic enums with a constructor function.
[33mab4467d[m Debug Info: Set the mangled name for temporary composite types and use DIBuilder::replaceTemporary() to RAUW temporary debug nodes. This enables more opportunities for IR debug type uniquing.
[33m2eb8688[m Revert "Disable LLVM's MergeFunctions again"
[33mbd2a67d[m Fix Objective-C encodings for Swift-defined @objc classes and protocols.
[33m60eb279[m Properly map Swift protocol and protocol-composition types to their Objective-C equivalents.
[33m6ef872d[m SILGen: Handle optional variance in overrides before abstracting lowering their signatures.
[33m8cc9f3a[m [sil-devirtualizer] Make sure that devirtualization maintain invariants of fragile functions.
[33m3892220[m [sil-devirtualizer] Fix a segmentation fault when a class_method cannot be devirtualized for a subclass.
[33m5bdbd2f[m [sil-devirtualizer] Fix a verifier crash when a generic callee gets devirtualized and replaced by non-generic callee.
[33m492b52f[m Test that message throwing from main identifies error.
[33m5cdc9f3[m Runtime/stdlib: Slightly better implementations of errorInMain and unexpectedError.
[33m8504517[m Sema: Fix opened existentials leaking out in diagnostics
[33mc354a7c[m IRGen: Relax assertion that C parameter ABI types match size of Swift struct representation types.
[33md64d9d1[m Docs: Fix typos in ARCOptimization.rst
[33mffe4de6[m Small fixes per Jordan's review
[33m57ee3c6[m watchOS: Disable autolinking against CoreText in PassKit/UIKit/WatchKit overlays.
[33m5769021[m Allow per-SDK SWIFT_COMPILE_FLAGS.
[33mc8e3438[m Add frontend option -disable-autolink-framework <framework>
[33mb034468[m [stdlib] Fix indentation
[33m80abf39[m [bitcode] Don't check r29387 on Linux, where it doesn't happen.
[33me5d6771[m SIL verifier: Don't try to judge ABI compatibility of dependent types.
[33m48e2f23[m Fix spelling. NFC.
[33me40dc7f[m [bitcode] Pass -bitcode_bundle to the linker when linking via swiftc.
[33m6b59ff8[m [bitcode] Don't allow -Xcc or -Xllvm arguments to bitcode backend jobs.
[33m8cc285a[m Fix Fix-It location for removing attributes with '@' on them.
[33mc67ac0d[m [Sema] Add source location for synthesized designated initializer overrides.
[33mbbd5035[m Add a document which contains some tips and tricks on how to debug the swift compiler.
[33m24e0627[m AST: Fix typo
[33m0bea0b8[m Sema: Remove an unused function parameter
[33m6c1ee55[m Sema: Moved ExprWalker class out of applySolution()
[33m7797a45[m Sema: Minor constrained extensions fixes
[33m20f2488[m Sema: Don't allow access to instance members of an existential metatype
[33m1052d09[m Sema: Fixes for conformance between higher-kind metatypes
[33m6a9790e[m Sema: Fix compiler_crasher with FixKind::ForceOptional
[33md7b9ae7[m Sema: Require '.init' when constructing from a dynamic metatype.
[33m2e8ee5a[m Add in some comments to LoadStoreOpts. NFC.
[33m69de2fb[m Remove trailing whitespace. NFC.
[33m2852a39[m IRGen: Mark metadata loads as invariant.
[33me22908f[m IRGen: Peephole (copy_addr to [initialization] (init_existential_addr)) as well.
[33mf003bc7[m validation-test: Make this test pass in optimized mode
[33m9df3ccc[m make the error message and diagnostic location for throwing operators not marked "try" more specific.
[33mf345ca3[m Fix unused variable warnings in Release builds.
[33ma321938[m IRGen: Peephole (copy_addr to [initialization] (alloc_stack)) operations to use initializeBuffer value witnesses.
[33m1aa561a[m Cleanup internal options in SIL pass manager.
[33m9703e34[m Add dump-to-file convenience functions in SILModule and SILFunction.
[33ma8edb34[m Runtime: Allow for "throws" variance in dynamic casts.
[33m7388b56[m Mangler: Include the error result of SILFunctionTypes in their mangling.
[33m6e9ffc7[m SIL: Dynamic casts from non-throws to throws may succeed.
[33mcc6fd43[m Re-apply r29356: SIL code motion: consider block arguments when sinking code from predecessors.
[33m67a1f24[m Sema: 'dynamic' attribute now diagnoses if Foundation is not imported
[33m9e1f0c3[m Sema: Fix a compiler_crash when the generic signature is invalid
[33m1067c55[m Revert "SIL code motion: consider block arguments when sinking code from predecessors."
[33m902328f[m SIL code motion: consider block arguments when sinking code from predecessors. Example:
[33m79967e6[m Add the possibility to compare SIL instructions with a custom operand compare function.
[33m2ae659b[m Make this test actually run sometimes and pass
[33m2f56073[m IRGen: Slather attributes on indirect arguments.
[33mb7d448e[m Revert "Sema: 'dynamic' attribute now diagnoses if Foundation is not imported"
[33m637a088[m Sema: 'dynamic' attribute now diagnoses if Foundation is not imported
[33md464a63[m Annotate 0803-void.swift as passing on Linux
[33m6550c7a[m Sema: Fix subtyping between metatypes and existential metatypes
[33md9fbef1[m Resolve fixed crashers.
[33m58af187[m Expect 'unused initialization' warnings in FixedPointDiagnostics.swift.gyb
[33m65fb461[m Treat curried parameter lists as separate parameter contexts.
[33mbf2b265[m SILGen: Allow partial applications of initializers.
[33mbebfa96[m Sema: Allow 'x.init' references on metatype expressions.
[33m1479a56[m Sema: Move semantic constraints on super/self.init out of the parser.
[33m29bacaf[m typo
[33mfee95a3[m AST: Fix a compiler_crash
[33m3277bb2[m Sema: On Linux, AnyObject is not @objc
[33m623642c[m IRGen: Remove dead code
[33m086b996[m Sema: Don't allow static member access on protocol metatypes
[33m322f58d[m Sema: Tighten up existential vs generic type parameter distinction
[33mc1e3876[m Permit () as an @objc parameter type when it replaces an NSErrorPointer parameter in a foreign error override.
[33m62f5128[m Remove stale comment too.
[33m93ca410[m Enable a _sanityCheck that doesn't appear to cause leaks anymore.
[33m0303d4e[m SILGen: Project 'let' properties from address-only structs at the proper abstraction level.
[33m0f65907[m SILGen: Copy block block parameters before turning them into Swift closure closure parameters.
[33mc068868[m Remove unnecessary casting for STDIN/OUT_FILENO.
[33m88ba249[m [InterfacePrinting] Print document comments for enum element decls. rdar://18457785
[33m93d29b9[m [sil-devirtualizer] Properly handle devirtualization of methods that differ in optionality.
[33mebd9a88[m Fix archiving_generic_swift_class.swift test on simulator.
[33m80caa5a[m Runtime: Fix assertion failure in Casting tests.
[33m9c867b4[m "if true" -> "do" in test/1_stdlib/Runtime.swift.
[33m9a33c50[m Runtime: Look through artificial subclasses when generating metatype names.
[33m5619b5d[m [apinotes] Remove information that has been migrated into the SDKs.
[33m79d849d[m Disable archiving test on iOS while I investigate getting it working on simulator.
[33md929f41[m SDK test archiving and unarchiving a generic Swift class.
[33m491aa6a[m CMake: acknowledge that Remangle.cpp is conditionally compiled.
[33m66f1ecc[m Parser: Fix type argument disambiguation lookahead to recognize "throws" and "rethrows".
[33m2bf783d[m Runtime: Generate a mangled name as the ObjC runtime name of generic class instances.
[33m0386c7f[m [test] Fix some watchOS test failures.
[33m04e0197[m Address Argyrios' comments; use interface print option when printing document comment.
[33m768b4c7[m [DocCommentPrint] avoid printing private standard lib decls. rdar://20858548
[33m885468c[m Do not generate unchecked_ref_bit_cast from unchecked_enum_data.
[33m556c849[m Undo local hack
[33m1ab995b[m Runtime: Don't try to reuse integer value witnesses for under-aligned tuples.
[33m41934b5[m stdlib: Add some basic array bridging tests
[33m35dac3b[m Debug info: Ensure that function arguments are only declared once. Caught by an assertion in LLVM.
[33md3ffe07[m Add a more complex test.
[33m0b81431[m Clean-up generated code at the end of the optimization pipeline.
[33mae41b1d[m Fix a nit
[33m7319a97[m Sema: Rewrite witness method calls as ApplyExpr + DeclRefExpr
[33m93881c9[m stdlib: fix grammar inside of a comment
[33m572b08b[m Dictionary test: use more precise autorelease pool placement
[33m8387fc4[m StdlibUnittest: add a facility to activate autorelease pools only on platforms that don't implement the return-autoreleased optimization
[33m918c61f[m stdlib: fix coding style in LifetimeTracked.swift
[33mc743842[m [emacs support] Deal with playground //: comments
[33mde81a3e[m Prefer using known-identifiers to using getIdentifier.
[33m2d66428[m Clean up KnownIdentifiers.def.
[33m76fea83[m [sil-combine] Improve folding of enum instructions.
[33ma48116a[m Don't crash when enum element syntax is used while switching on a tuple.
[33medf20fb[m Change test to not depend on being compiled with -Onone
[33m515983b[m SILGen: Route the cleanup state management through the failure chain of IsPatterns.
[33m5811152[m Consider modules-hidden declarations when looking for a type with the same name as an Objective-C protocol.
[33me0d434f[m This fails in optimized mode
[33mb9b0032[m This fails in optimized mode
[33m2c617bf[m This test case assumes to be compiled without optimizations
[33m859fbc0[m More executable_test for the test directory
[33mee0a1d1[m More executable tests in validation-test
[33m4d4329b[m Add executable_test to the validation test suite
[33mb4224ac[m SILGen: Only specialize 'is' patterns one type at a time.
[33m8aaf89e[m [test] Make test objc_methods work with BOOL = bool or BOOL = signed char.
[33mb9bf943[m [stdlib] Fix some reflection bugs on armv7k.
[33mcca4f4e[m Revert "stdlib: Add some basic array bridging tests"
[33m73258f2[m Generate method/property @encodings from the foreign SILFunctionType of the method instead of its formal type.
[33m8d8a462[m Revert "Generate method/property @encodings from the foreign"
[33m76e9ab8[m stdlib: expand an abbreviation in an internal function
[33m687a704[m Fix a warning in the SDK overlay
[33m6b9e73a[m stdlib: Add some basic array bridging tests
[33m04549ce[m Dictionary test: add more assertions
[33med68d26[m Generate method/property @encodings from the foreign SILFunctionType of the method instead of its formal type.
[33md4986aa[m Fix broken tests due to oversight
[33md43cef4[m Sema: coerceImplicitlyUnwrappedOptionalToValue() can't return nullptr
[33m02b6753[m Sema: Diagnose overrides of an @objc declaration that cannot be @objc
[33m6bcaeae[m Sema: Allow @objc on some generic things
[33mec6b6b5[m IRGen: No longer refuses to emit @objc thunks for stuff in generic context
[33m0c88c13[m IRGen: Brazenly nuke -enable-dynamic-value-type-layout flag
[33m56dec64[m IRGen: Trying to get dynamic layout for @objc working
[33m3330b5e[m IRGen: Support polymorphic @objc_method functions
[33m2e3bc8d[m The test Foundation_NewGenericAPIs.swift requires ObjC runtime
[33m12745ce[m Small fix based on Joe's suggestion. NFC.
[33m0fd24e9[m Updates for SDK nullability fixes
[33mdc29fca[m Update the Dictionary test for a performance improvement in Foundation
[33m854a197[m Update to the new GameplayKit API
[33m445ab98[m Ignore certain NS_SWIFT_UNAVAILABLE attributes in Foundation
[33mcd968aa[m HomeKit overlay: adjust for new SDK
[33m6c93623[m This test no longer fails
[33m5b130fd[m Improve exhaustiveness diagnostics for optional Bools.
[33mf94a02a[m Disable LLVM's MergeFunctions again
[33mb2c6f4e[m Added support for do-catch blocks to the playground transform.  Also added a testcase.
[33m45686da[m This test case fails with an optimized stdlib on armv7
[33m98e53b4[m This test case also fails in unoptimized test mode but with an optimized stdlib
[33mfe303f1[m [stdlib] Fix vararg processing on armv7k.
[33me309586[m swift-mode.el: add "throws" and "catch".
[33m760baa4[m Debug Info: Fix the line table entry generated for the jump out of a do or do-catch block to point to end of the do body rather than the location of the "do" keyword.
[33m2cd2d9c[m [test] Remove XFAIL lines from still-crashing compiler_crashers.
[33mbfcc848[m Re-apply "[ClangImporter] Ban a few deprecated methods of NSDocument."
[33m08a337b[m Revert "Add optimized stdlib + cpu as a feature"
[33m9ac6b9b[m This is an executable test
[33m563d1a2[m This test case fails in optimized mode on armv7
[33m17e8ddb[m Add optimized stdlib + cpu as a feature
[33md97b76e[m [test] Un-XFAIL a test that no longer fails on asan.
[33m60d9c22[m [test] Fix OS X side of test 1_stdlib/NewArray.swift.gyb.
[33md833ef8[m [test] Fix some watchOS test failures.
[33m48817b7[m [test] Add watchOS to StdlibUnittest.
[33mb2fa002[m Revert "[ClangImporter] Ban a few deprecated methods of NSDocument."
[33m0b432d1[m [test] Reinstate test 1_stdlib/VarArgs.swift on iOS.
[33mb6a15d6[m My error recovery fix improved types, likely because something wasn't handling a tok::invalid correctly.
[33m90a830f[m Check in two testcases that were improved by r29222 that I somehow failed to commit
[33m8478742[m fix <rdar://problem/21196171> compiler should recover better from "unicode Specials" characters
[33mda4864a[m This test no longer fails after Roman's fix
[33mbd91081[m This test currently fails in optimized mode
[33m6c52447[m [test] Remove the without-crash-reporting utility.
[33m57ea78e[m Don't print decorators in code completion briefs
[33m3ddfb2f[m [sil-devirtualizer] Fix a bug related to devirtualization of bound generic classes.
[33md75c6b4[m Add regression test from rdar://problem/20891471.
[33mf777185[m Rename the optimize_test feature to executable_test and document that feature.
[33mba8d1a5[m [ClangImporter] Ban a few deprecated methods of NSDocument.
[33mc104acf[m Enable NSError bridging code blocked by rdar://problem/21027215.
[33m7cb6fa3[m AST: Mangle the generic params of constrained extensions.
[33mefcbf64[m Interpreter/generic_class.swift test fails in optimize mode
[33m3643c61[m Run tests in optimize test modes
[33m9b7d2aa[m [sil-simplify-cfg] Fix a correctness bug in the checked_cast_br jump-threading.
[33m76b9838[m IRGen: Peephole improvements for enum switch codegen.
[33m1f7eac9[m Debug Info: Do not attempt to reconstruct function arguments for functions without a DeclContext. Currently this cannot happen, but future SILPasses may rewrite functions in a way that it is meaningless to preserve the function's DeclContext.
[33m20e0a04[m Foundation overlay: make registerUndoWithTarget work with Swift classes
[33m16b4ad5[m Generalize r29106 to handle all of the different kinds of statements that have patterns in a more robust way.  Also, add testcases for them all.
[33m37135f4[m XCTest requires objc_interop
[33m29ec6ab[m Re-enable the XCTest overlay for OSX
[33m212989e[m [stdlib] Underscore a parameter name to hide its initializer from the interface.
[33m19933c5[m [AST] Remove an unnecessary check in Decl::isPrivateStdlibDecl.
[33m7ca6470[m fix  <rdar://problem/21176945> mutation through ? not considered a mutation
[33mb6e002c[m Revert "Revert "Don't emit debug info for SILUndef values.""
[33m767a57b[m Debug Info: Ensure that an alloca is described by exactly one dbg.declare.
[33m1daaf31[m Revert "Reverting commits 29181-29187 to investigate buildbot breakage."
[33mb994bde[m Reverting commits 29181-29187 to investigate buildbot breakage.
[33mf2530ac[m Revert "Don't emit debug info for SILUndef values."
[33mabeaf2b[m Don't emit debug info for SILUndef values.
[33ma17e639[m Debug Info: Unique Archetypes. With all the previous bugfixes it is no longer necessary to keep separate copies because inlining and generic specialization is now handled correctly so each specialized variable has its own specialized version of the archetype.
[33mc08207e[m Debug Info: Don't emit dbg.declares for SIL-optimized code. A dbg.declare is only meaningful if there is a single alloca for the variable that is live throughout the function. With SIL optimizations this is not guranteed and a variable can end up in two allocas (for example, one function inlined twice).
[33m7c4de1f[m Debug Info: Do not keep abstract variables until we can actually unique them.
[33m6ad0679[m Make a deep copy of SILDebugScopes when doing a SILBasicBlock::splice()> The cloned abstract variables may end up having different types so they need to be distinct from the originals.
[33m738c4db[m SILPasses: Add a couple of assertions about the validity of debug scopes.
[33mff87787[m SILCloner: Drop all debug intrinsics without a valid debug scope. If they describe function arguments there is no way to determine which function they belong to.
[33m983ad37[m SILCloner: Factor out the debug scope cloning into a reusable ScopeCloner. NFC.
[33m6830021[m Debug Info: Use the AST instead of SIL to determine the argument ordering. The old SIL-based approach failed to recognize function arguments of SIL-inlined functions as arguments.
[33m2fc2e50[m Reapply "Add initial support for eliminating nontrivial dead objects."
[33m658d852[m [IDE] When printing stdlib interface, hide underscored members of protocols, and subscript decls that have underscored parameters.
[33m15ff698[m IRGen: Give ClangCodeGen a chance to emit its translation unit's global state
[33mff82328[m Revert "Add initial support for eliminating nontrivial dead objects."
[33mbf04a15[m Revert "Disable the dead array test on Linux, because I don't know how to handle the symbols."
[33md335a6a[m Disable the dead array test on Linux, because I don't know how to handle the symbols.
[33m6200a76[m Add initial support for eliminating nontrivial dead objects.
[33me017e03[m SIL/Projection: support for index_addr.
[33m3f37538[m Cleanup ClosureSpecializer.
[33m92dcf18[m Introduce a ValueLifetime utility and migrate some clients.
[33meae74e7[m 80 col
[33m98cc02d[m UIKit overlay: fix a warning
[33m96638e3[m SILGen: Properly type reabstracted overrides in calls and witness thunks.
[33m4a77e48[m IRGen: Fix implementation of storeSpareBitExtraInhabitant.
[33maf66dfb[m SIL verifier: Check that a class_method's type matches its override abstraction level.
[33m86b4cf9[m whitespace
[33me878cdc[m Don't build the XCTest overlay for watchOS
[33m2b77b21[m Revert "Revert "Use signed char for 32-bit Watch Simulator""
[33ma154ae2[m Revert "Revert "Revert "IRGen: Support polymorphic @objc_method functions"""
[33m7c24079[m Revert "Revert "IRGen: Support polymorphic @objc_method functions""
[33m0c8f640[m Be more consistent about when we can find types and type witnesses.
[33mbf310f5[m Compute outer generic parameters even when 'self' already has a type.
[33mac40acc[m Revert "IRGen: Support polymorphic @objc_method functions"
[33meaa0f93[m Revert "IRGen: Trying to get dynamic layout for @objc working"
[33mdad92b0[m Revert "IRGen: Brazenly nuke -enable-dynamic-value-type-layout flag"
[33maa7f47d[m Revert "IRGen: No longer refuses to emit @objc thunks for stuff in generic context"
[33m6f69472[m Revert "Sema: Allow @objc on some generic things"
[33m8afb67b[m Revert "Use signed char for 32-bit Watch Simulator"
[33m812ac37[m Use signed char for 32-bit Watch Simulator
[33m05ae0db[m Sema: Allow @objc on some generic things
[33m2eac5bc[m IRGen: No longer refuses to emit @objc thunks for stuff in generic context
[33m9da369b[m IRGen: Brazenly nuke -enable-dynamic-value-type-layout flag
[33m83b789e[m IRGen: Trying to get dynamic layout for @objc working
[33m70db2c1[m IRGen: Support polymorphic @objc_method functions
[33ma3f0119[m Fill in nested types of an opened existential type.
[33m492309e[m Revert "IRGen: Fix implementation of storeSpareBitExtraInhabitant."
[33me2bec43[m Don't allow existentials to be used where we need a witness table.
[33m2979357[m Partially applying a throwing function requires a thunk, even if the only partially-applied argument is a Swift-refcountable pointer.  However, it doesn't require a new heap allocation, so teach partial-application forwarding how to emit a thunk when the only capture is directly usable as the context.
[33mc45dccb[m Runtime: Handle dynamic casts from ErrorType classes to NSError.
[33mffe26aa[m stdlib: dissolve the Array.swift test in other tests
[33m12283b4[m IRGen: Fix implementation of storeSpareBitExtraInhabitant.
[33mceedc93[m [test] Remove spurious -sdk passed to %target-sil-opt.
[33m5baee3e[m [test] verify_all_overlays.sil doesn't require ObjC interop.
[33m52947de[m [test] Update parse_stdlib_* "automatically generated from" header.
[33me33f4f6[m Validation for patterns involving unbound generic types must consider initializers.
[33m57b341a[m [IRGen] Eliminate ObjCBoolTypeSize.
[33mac5fa67[m [Serialization] Only serialize witness tables for the current file or module.
[33mbb35361[m Add test for rdar://problem/20508671.
[33ma7225aa[m Add compiler crasher from rdar://problem/19519590.
[33m67624d0[m Add a testcase for rdar://20256475
[33m546dd63[m Sema: Reject @objc functions with generic parameters
[33m3a01e46[m IRGen: Fix miscompile when storing empty payloads represented as large extra inhabitants.
[33m10089ca[m SILGen: Apply forwarding substitutions when generating @objc thunks
[33mf26ab5c6[m Long-overdue REPL test for <rdar://problem/17597453>
[33m0735aa5[m stdlib: don't build AssetsLibrary for tvOS
[33m6cd5c0c[m Members of constrained generic class extensions cannot be @objc.
[33m26dfec4[m Add a test for constrained extensions of a generic class.
[33m6a0382c[m Add test from rdar://problem/20270240.
[33m48e0db2[m Add a script to run 'sil-opt -verify' on the swiftmodule files against the public SDK
[33m0f7f247[m Add a -F option to sil-opt
[33m2dc383d[m Allow constrained extensions to any generic type.
[33m514a57d[m [Sema] Find the 'var' location of 'catch' variables so that the warning "variable x was never mutated; consider changing to 'let’ constant", can add a fixit for it.
[33mc15b2e2[m Revert "Diagnose property ownership mismatches for protocol witnesses/requirements."
[33m023b6d5[m Sema: Fix @nonobjc diagnostic
[33m9c1ebe5[m The -enable-dynamic-value-type-layout flag isn't needed for these tests
[33m7b5c7cc[m Sema: Remove unused diagnostic
[33mdca9d06[m ASTDumper: Print @objc attribute
[33m6ae2933[m AST: Formatting fix
[33m306b811[m SIL parser: print an error instead of crashing if the number of substitutions is wrong
[33mfd36169[m Make test independent from stdlib implementation of _Incrementable.
[33m1b26e1a[m Diagnose property ownership mismatches for protocol witnesses/requirements.
[33m18ad549[m Add another protocol-conformance-via-extension example, from Dmitri.
[33ma72a161[m Override checking: ignore members found in non-class/class extension contexts.
[33me033734[m Add test case from rdar://problem/21081557.
[33mabf953e[m SILGen: No longer recursively emit inherited conformances.
[33m2831e84[m Update AppKit overlay to match AppKit headers.
[33mcba965b[m @nonobjc silences "non-@objc method cannot satisfy optional requirement".
[33m349ba32[m Mark two tests as requiring ObjC interop
[33m9c06958[m SIL: Casts that may be to NSError must use indirect cast instructions.
[33md4448b5[m Re-enable test/IDE/complete_exception.swift with 32bit fix
[33m9ce2b99[m [test] Disable test IDE/complete_exception.swift.
[33mf2b5056[m [stdlib] Touch files with missing build dependencies
[33mfa1ba12[m Revert "Revert "[stdlib] Finish Underscoring the legacy Reflectable protocol""
[33m1c27893[m Revert "[stdlib] Finish Underscoring the legacy Reflectable protocol"
[33mda5903f[m Be careful when comparing tuple pattern labels with tuple type labels, in case the tuple type has fewer elements.
[33m3b7c0d4[m Switch unqualified lookup over to the LookupResultBuilder.
[33ma326cae[m [stdlib] Finish Underscoring the legacy Reflectable protocol
[33m4c83738[m Address review feedback on r29070
[33mb041a34[m [test] Add another -embed-bitcode test with multiple files.
[33m55bc947[m Remove OpenAL.AL check from submodules_smoke_test.swift
[33m7aec3c2[m Remove TypeInfo::isIndirectArgument() since it is unused.
[33m1175d36[m [stdlib] Underscore the legacy Reflectable protocol
[33m15b0520[m Remove support for Clang without Objective-C generics
[33mac456cc[m Fix spelling in comment.
[33mb3c67d7[m RemovePin: Tighten the condition under which a mark_dependence is safe
[33macf4ee6[m Update test for newer SDK (on behalf of Jordan Rose).
[33m8ccaa86[m [CodeCompletion] Complete variables bound by catch
[33m03adc12[m RemovePin: Only array methods that don't potentially call NSArray methods are safe
[33md7b2bba[m Remove stale FIXME.
[33mec3dfc2[m SILGen: Mark the stack slot for '_' assignments uninitialized.
[33md65f696[m Kill off [_]RawOptionSetType
[33m8efffef[m [stdlib] Remove now-unneeded implementation hack
[33m3092f3c[m Document the utility functions for handling debug_value instructions, introduced in r28872.
[33m16041fe[m Re-enable function argument explosion in limited cases.
[33me94877c[m Minor clean-up in Projection code.
[33mca29fd9[m Start cleaning up member name lookup.
[33mfb6cef4[m Build fix: GameKit depends on SpriteKit and GameplayKit
[33md3eaad8[m Look through CaptureListExpr when checking C function pointer conversions.
[33m4f46476[m stdlib: note that the CFXyzCreateCopy bugs were fixed
[33m418f9b3[m stdlib: remove bogus code that claims to be avoiding optimizations
[33m6a975f2[m stdlib: remove dead code from ArrayBuffer
[33macdd877[m stdlib: update the doc comment to the new 'as!' syntax
[33m6c812d0[m [stdlib] Reinstate r29043 "strip final from protocol extensions".
[33mfacdd42[m Silence "never used" warning for r29049 test.
[33m16a3b8e[m [stdlib] Revert "strip final from protocol extensions".
[33m52d441b[m Have a bit per PatternBindingEntry saying whether the corresponding initializer has been type-checked, rather than a bit for the entire PatternBindingDecl.
[33m7841005[m Fix a bug in the function signature optimization: Instructions in the specialized function would still have a debug scope pointing to the original function, so function arguments would be created with the wrong scope, which led to an interesting crash in the backend when the specialized function was inlined into the thunk.
[33m8683e41[m Disable argument explosion in function signature optimization.
[33mc06a378[m ClosureSpecializer: Fix lifetime management of captured arguments
[33m4b5217e[m Revert "Disable LLVM's MergeFunctions pass"
[33m1a54bb1[m Fix printing of @warn_unused_result attribute.
[33m1f16432[m [stdlib] strip final from protocol extensions
[33ma78fe02[m Fix typo in a comment.
[33mdc70099[m Stop requiring 'final' on members of protocol extensions.
[33maf49aa6[m [Driver] Don't crash when a new file is added to the build.
[33m7a47bab[m [test] Un-XFAIL a fixed compiler crasher that now works under asan too.
[33m477ea48[m [CodeCompletion] Avoid assert when top-level if contains an autoclosure
[33m794d9ed[m Check both ends of doc comments before trimming
[33m190208b[m Update compiler crashers after r29031
[33maad6bc8[m IRGen: Pass large explosions as indirect arguments.
[33mbb78a4d[m QoI: handling of leading '.' in an enum case declaration
[33m3f9ef14[m [CodeCompletion] Don't try to add enum cases with missing names
[33ma8e54c1[m [test] Disable an ObjC test on non-ObjC platforms.
[33m7e6a40d[m QoI: Improve diagnostic when protocol witness is less available than protocol requires.
[33mc60b51b[m Revert "IRGen: Peephole improvements for enum switch codegen."
[33md6b3a2d[m WatchKit Overlay: Add availability and temporarily disable availability checking
[33m4f6186c[m Adjust relaxed IBAction checking to apply to watchOS as well.
[33m9e23ebc[m [test] Un-XFAIL GameplayKit tests. Reverts r29021.
[33mc8238ff[m IRGen: Peephole improvements for enum switch codegen.
[33m63c1b4d[m UIKit overlay: on watchOS, don't use unavailable types
[33md7f9210[m [test] Temporarily XFAIL GameplayKit tests on iOS until the test devices update
[33m784fe6d[m Normalize some diagnostics by walking into tuple expressions. Doing so can result in slightly more descriptive diagnostics in some cases. (Specifically, for diagnostics involving binary operators.)
[33m1058f68[m Foundation overlay: add overlays for new NSString APIs
[33m7a5b199[m Revert "IRGen: Pass large explosions as indirect byval arguments."
[33mabba73c[m IRGen: Pass large explosions as indirect byval arguments.
[33mf0c4321[m IRGen: Use the function signature's attributes to form calls.
[33me98d962[m IRGen: Remove dead functions.
[33ma33ac57[m [CodeCompletion] Loosen an assert that's firing in closure bodies
[33m77c7607[m stdlib: fix coding style
[33m1d334f0[m Remove asserts that cause compilation failures on Linux.
[33mba25a87[m stdlib: fix code that should be rejected by the complier
[33m7cc0e4b[m PassKit no longer needs to link against Contacts
[33med6c0dd[m [stdlib] ~>_distanceTo() => method
[33m186fe53[m Eliminate the NSError -> error enum bridging from Contacts.
[33mfbfa056[m [stdlib] ~>_initializeTo(ptr) => method
[33mabf8e2f[m [stdlib] ~>_copyToNativeArrayBuffer() => method
[33m8a5726d[m Revert 28997
[33mf1243f5[m [stdlib] Pattern match Ranges efficiently again.
[33m05a038e[m Make it so that the runtime demangler does not print the Swift standard library module name
[33mb8843cb[m fix <rdar://problem/21087069> Unexpected Error calling delegating initializer from delegating initializer marked with throws
[33mc037e2c[m Remove a bogus warning due to the fix for rdar://problem/21091625 going in, I didn't notice this because it was in a new change I hadn't 'svn up'd.
[33mdd594f6[m fix <rdar://problem/21091625> Bogus 'never mutated' warning when protocol variable is mutated only by mutating method
[33m560d264[m fix some funky indentation, NFC.
[33m5e03616[m Sema: Admit partial applications of non-'mutating' methods.
[33ma14b83b[m SILGen: Allow partial applications of enum cases.
[33m762b8f6[m [ClangImporter] Don't even try to import methods with C-style parameters.
[33mfab5e74[m Unrevert "Sema: Make derived conformances work from extensions"
[33ma2c4ea9[m Revert "Foundation overlay: add overlays for new NSString APIs"
[33mcc3060e[m pedantic cleanups, NFC.
[33m79dc6db[m IRGen: Redesign enum codegen to break payloads into word-sized chunks.
[33md45413e[m Foundation overlay: add overlays for new NSString APIs
[33mbbf6121[m Revert "IRGen: Redesign enum codegen to break payloads into word-sized chunks."
[33m3691991[m IRGen: Redesign enum codegen to break payloads into word-sized chunks.
[33m44b8f02[m CopyForwarding: simplify DebugValue handling.
[33m0fdc73b[m [stdlib] Minimize and rename _UnsignedIntegerType
[33mcb2ca7d[m [ClangImporter] Remap factory methods according to the swift_name attr.
[33m5db7e85[m [ClangImporter] Don't use 'Self?' for a throwing method.
[33m6115efa[m Fix parameter indexing when a non-removed error param is followed by blocks.
[33mbc1500d[m Revert "[stdlib] Kill _UnsignedIntegerType"
[33mcda6cd2[m [stdlib] Kill _UnsignedIntegerType
[33m924f5b9[m [stdlib] Kill _Comparable
[33m7f8cea2[m [stdlib] Kill _ExtensibleCollectionType
[33m1bcd3ff[m [stdlib] Kill _Sequence_Type
[33md9032c0[m [IDE] Make sure that ClangImporter::lookupDeclsFromHeader forwards to the passed in filter function and that filter receives macros as well.
[33mf56efcb[m [stdlib] Kill _RandomAccessIndexType
[33m4d4e626[m Kill _BidirectionalIndexType
[33mffddcf1[m update validation test for diagnostic change.
[33md1b092e[m change "cannot assign to variable" diagnostic to "cannot assign to value", since in some cases the problem is that you're trying to assign to a constant, not a variable.
[33m8cdf88c[m fix <rdar://problem/21088517> throw in an initializer causes bogus error
[33mcf1cb14[m recommit 28958/28959, there was a testcase that didn't get updated correctly but it was between the two revisions.
[33ma575727[m Revert "Sema: Make derived conformances work from extensions"
[33m9917e74[m [IDE] Support printing the header interface for a header, that belongs to a clang module that the clang invocation is importing.
[33m054ebaa[m [IDE] Handle properly the clang flag '-fmodule-implementation-of' when doing header interface printing.
[33m42cc79b[m [test] Move inputs for test/IDE/print_clang_header.swift to their own subdirectory. NFC.
[33mb4b81ff[m Revert "merge assignments to UnresolvedDotExpr onto the common path,"
[33m381eb52[m Revert "Further consolidate mutation code, this time for DeclRefExprs.  With that"
[33m291d7ea[m Further consolidate mutation code, this time for DeclRefExprs.  With that done, the rest of the infrastructure is all common and can be simplified.  This leaves us with a quite small and maintainable subsystem for diagnosing these kinds of problems.
[33m3b64718[m merge assignments to UnresolvedDotExpr onto the common path, this is neutral w.r.t. diagnostics quality, but deletes a ton of code:
[33m568fa2f[m remove an xfailed testcase, I moved it to the radar.
[33md5f68b4[m Teach the recursive part of the diagnostics to handle the various things that make vardecls and subscripts immutable.  This makes the indirect cases a lot more specific ("this is a get-only property" instead of "this is immutable") and allows us to consolidate a bunch of code:
[33m585cf17[m don't use the term "r-value" in a diagnostic, use immutable value.  Thanks to Jordan for pointing this out.
[33m6f4e8f4[m Eliminate _MutableCollectionDefaultsType. NFC
[33m79d7523[m Eliminate _OutputStreamDefaultsType
[33m24740be[m Eliminate _IncrementableDefaultsType, _BidirectionalIndexDefaultsType
[33m9831477[m Allow a protocol extension to define a default implementation for a requirement of its own protocol.
[33m1b0dbd0[m Fold the unnecessary _RangeReplaceableCollectionDefaultsType into RangeReplaceableCollectionType.
[33md1c25dd[m Add missing dependency: XCTest depends on AppKit or UIKit.
[33m33b0079[m Made the PlaygroundTransform instrument the print()/ debugPrint() APIs correctly.  PlaygroundLogger implements APIs that always take a boolean as their second argument. If print()/debugPrint() are called with just one argument, we add "true" as the second argument and replace the call with a call to the appropriate PlaygroundLogger API.
[33m1b8741d[m Remove references to C{Const,Mutable}VoidPointer and CString.
[33m859e505[m [IRGen] Don't eagerly look up and cache "NSString".
[33md29d030[m this is the code that went with r28942
[33mf31c58d[m unify the constraint solver path for assignment lvalue failure with the CSGen path for assignment lvalue failure.  No significant win other than simplifcation.
[33m9388a95[m Sema: Make derived conformances work from extensions
[33m5dbc33f[m Don't crash the frontend if a bad target is given
[33m7d881f8[m - Switch "&x", "++x" and "x+=1" onto the new style mutability diagnostics,   which tell you what the problem is, not just that you have one. - Enhance diagnostics to be more specific about function calls producing   rvalues.
[33mef9d112[m consolidate some diagnostics in a helper in prep for making them more rich, consistent, and pervasive.
[33m3f0ca3e[m - Change the general assignment failure diagnostic to include the type of the   result and make it more specific. - Move the 'assignment failure' diagnostic logic to CSDiags.cpp where it belongs.
[33m012cfa8[m Improve mutability diagnostics when the top level is a ForceValueExpr.
[33mc5fbbc0[m [SourceEntityWalker] Pass module DeclRef through visitModuleReference
[33mefd2876[m Kill _ForwardIndexType
[33mf750954[m Make scalar arguments to SIMD vector initializers anonymous.
[33m1e31d0c[m AST: Move DerivedGlobalDecls from NominalTypeDecl to InterableDeclContext, NFC
[33m0affd67[m AST: Kill dead method, remove unnecessary mutable, NFC
[33m5899e62[m AST: Add dynamic cast from Decl to IterableDeclContext
[33mb92e0c9[m [ClangImporter] Implement NS_SWIFT_NAME for enumerators.
[33mb0df3ef[m Improve mutability diagnostics for parameters to add a note inserting/changing a 'var' modifier on the parameter, e.g.:
[33m759df1e[m Wrap a throwing superclass initializer call with 'try' when synthesizing an override.
[33m4a8bba2[m Add a little utility to help update resolved crashers.
[33m72d82d1[m Darwin/Glibc overlays: Conditionalize SIG_* tokens.
[33ma6300df[m "Properly" compute the depth of Self in ill-formed protocol declarations.
[33mdb13a71[m Darwin overlay: Add SIG_* constants.
[33m4fd7fb8[m Fix another test that depends on _debugPrecondition
[33m57d88a0[m On arm we flush subnormals to zero so testing subnormals won't work.
[33md41100f[m On arm we flush subnormals to zero so the subnormal test will not work.
[33m2a3998f[m Fix test case - destructor order is not guarantueed
[33mb6d3472[m Driver: fix a crash with -wmo, -num-threads, -embed-bitcode and -parseable-output.
[33mb99cae5[m Make test more stable.
[33m342d31f[m Minor naming style tweak - downcase the first letter of a function name.
[33m84e14ef[m Warn about non-@objc potential witnesses for optional requirements.
[33m32fb006[m Clang Importer: Enable OptionSetType import.
[33md1b6fa3[m Revert "Revert "[stdlib] Land OptionSetType et. al.""
[33meef3fab[m SIL printer: Sort same-type requirements to the right depth.
[33me9ef518[m Sema: Register accessors for synthesized properties of Clang-imported types as external too.
[33m1e416c3[m Fix the 'bots
[33maf25b38[m Teach SILFunctionType substitution to handle foreign error conventions.
[33m1334f0a[m Suppress warning about useless 'try's when they contain calls that failed to type-check.
[33m7f60c22[m Kill _SequenceDefaultsType
[33m21b9a97[m Revert "[stdlib] Land OptionSetType et. al."
[33m6e7d6b9[m [stdlib] Eliminate OptionSetDispatchType
[33m6fbb0cb[m Clean out a FIXME
[33md4baf3f[m stdlib: comments: Don't use markup in code listings in comments
[33mad7f7c6[m [stdlib] Land OptionSetType et. al.
[33m570e5ac[m Make extension-related DeclContext queries more robust.
[33m1efc143[m Followup to r28883: pack SavedTypeVariableBinding::Options with TypeVar and do less work in setMustBeMaterializableRecursive().
[33m6a4bb88[m Use Int32 to follow common practice
[33m73e2dba[m Fix test case for 32 bit
[33m1d277c1[m Retain the 'self' type and generic signature in overload signatures.
[33m28792f4[m stdlib: add an API AnySequence.init(() -> Generator)
[33m48597a4[m Print 'throws' in a more sensible place when dumping function types.
[33m55bb9a8[m stdlib: replace implementations of unavailable functions with fatalError()
[33mdf9136e[m When unifying two type variables, make sure the new representative type variable has the must-be-materializable bit set if the old one does. When assigning a fixed type to a type variable that must be materializable, transfer the bit to any type variables within the fixed type, as appropriate.
[33me0ac419[m IRGen: Don't mark addresses of offsets of NonConstant field accesses as constant.
[33mfa5bd4c[m [ClangImporter] Allow apinotes to affect inherited initializers.
[33mfea40a4[m Rank conformances implied by synthesized conformances as "synthesized".
[33m14822d2[m Sema: Put code shared by DerivedConformance*.cpp into DerivedConformances.cpp
[33m8872986[m These tests don't crash deterministically with -Ounchecked
[33m6bd9b39[m stdlib: Tweak how empty enum cases are printed
[33m888132e[m IRGen: get unchecked_ref_cast working with class existential operand
[33m8aca63b[m Don't delete debug_value/debug_value_addr in dead code elimination unless their definitions are dead.
[33mc7a245e[m SIL: Add utility functions to handle debug_value/debug_value_addr instructions.
[33mf392917[m Remove const_use_iterator from SILValue and ValueBase.
[33m1519c85[m stdlib: annotate sort() method with @warn_unused_result
[33ma85422d[m Use the correct gyb expansion in the documentation for sort()
[33m8853d19[m Dramatically improve the diagnostics when a store is invalid, by taking into account accesibility, assignments to self in a non-mutating method (consistently), recursive components of an lvalue that makes it non-settable, etc.  Now we tell you what the *problem* was, instead of just whining.
[33mec097fa[m add an accessor, NFC.
[33m812e95c[m generic_metatypes.swift requires the tvOS target
[33mccc6e55[m Zero out the 'self' box immediately before the delegating call in order to make delegations to throwing initializers work.
[33m0c77785[m [Parser] Explicitly reject "try" before a statement with a specific diagnostic.
[33mcb868cd[m Use SmallSetVector instead of SmallPtrSet in ReleaseTracker.
[33ma8a6924[m Deserialize the @warn_unused_result attribute.
[33mb5ada19[m [ASTPrinter] When printing interface hide @inline attribute.
[33m7ff1e80[m make these error message checks more specific, NFC.
[33m29128d0[m two testcase updates that went with r28854
[33mdf19d03[m When diagnosing invalid assignment errors, dig into the constraint system to see if it has already resolved a member binding of an UnresolvedDotExpr.  This allows us to give tailored diagnostics to indicate whether the destination is not an lvalue because the property itself was immutable or when the base is immutable.
[33m2ad7966[m Revert "Prefer compiler-provided conformances  to those required by other protocols."
[33mcb4a1ad[m StdlibUnittest: Add another silly type annotation to make compiles faster.
[33m1ad7651[m Prefer compiler-provided conformances  to those required by other protocols.
[33mb5e477e[m Allow passing arbitrary enums as diagnostic arguments.
[33ma795e87[m Revert "IRGen: get unchecked_ref_cast working with class existential operand"
[33m6374588[m [IRGen] Mark Objective-C Watch simulator images as simulated in IRGen setModuleFlags().
[33mb738470[m Upgrade warning about '#' in parameters to an error.
[33m2b01e74[m Remove uses of parameter ‘#’ from the validation testsuite.
[33m3926c34[m Eliminate uses of ‘#’ from the testsuite.
[33mb8f15cf[m Debug info: Fix a bug in the argument numbering for exploded arguments that manifested itself as tuple arguments having multiple entries.
[33m8e179d6[m IRGen: get unchecked_ref_cast working with class existential operand
[33mfe239e3[m stdlib: de-underscore sort() and partition() methods
[33m280d6b8[m add tests for initializers that both throw and return nil, to show that we produce the right diagnostics for early failures based on what the user did wrong.
[33m2e67af5[m Add the file I forgot to commit in r28833
[33m05bf794[m missed a file :-(
[33m4deba17[m fix the "super.init must be called before returning nil" note to also refer to "throwing".
[33mf5853fd[m fix <rdar://problem/21003797> too-early throw in an init produces "must be initialized before returning nil" diagnostic
[33m3cc2161[m SDK overlay: add generic API overlays for NSUndoManager
[33m419ad24[m IRGen: don't consider @objc protocols when looking for a path
[33m8c41d4d[m SDK overlay: actually request new APIs from CoreImage
[33m077f3d3[m WatchKit needs to be weak-linked due to missing availability info in the headers.
[33m53f3ccf[m stdlib: change CollectionType.count() into a property
[33mb0f87a0[m Highlight documentation comments and some syntax
[33m4bcb2d0[m [Sema] Add a compiler fixit for erroneously returning an unnecessary cast of a raw value of a RawOptionSet.
[33m72f522c[m Compute the source range of a TrailingWhereClause without tripping assertions.
[33m1ae67e3[m Explicitly weak-link the Contacts framework into its overlay.
[33md6ba866[m various parts of the compiler are doggedly trying to figure out whether a getter is mutating or a setter is nonmutating, centralize it into methods on AbstractStorageDecl, NFC.
[33ma6f143b[m [AST] Add AST walking for the TypeLoc of IsPattern.
[33mca1cdef[m tests: fix the names of fake collections in tests for partition()
[33mde9212f[m [CMake] Make gyb sources show up in Xcode's Open Quickly.
[33m6b00e2a[m objc_enum_errortype.swift test requires ObjC runtime
[33m258f91f[m revert: r28801 - improve the source location information for { and } in a ClosureExpr.
[33m233b193[m [test] Add a test mimicking Objective-C throwing a Swift error.
[33m4a67719[m stdlib: move partition() to a protocol extension
[33m308f966[m StdlibUnittest: use correct assertions in MinimalRandomAccessIndex
[33m30149ca[m Fix some demangling bugs with curried and throwing functions.
[33mef213fd[m [ASTPrinter] Add an extra print option to control printing 'internal' keyword if accessibility printing is enabled.
[33m5e74224[m [test] Move stdlib/Algorithm test to validation-test suite.
[33m72188fc[m [Serialization] Show types when XREF resolution fails.
[33m41fedd9[m stdlib: add an API AnySequence.init(() -> Generator)
[33m44e672e[m Use a more general message about skipped tests. NFC.
[33m2dd14db[m Skip some tests at -Ounchecked, if they expect crashes.
[33m66e1047[m revert two changes I didn't intend.
[33m20d161c[m fix <rdar://problem/18123596> unexpected error on self. capture inside class method
[33m7405064[m Make @objc enums that conform to ErrorType also conform to _ObjectiveCBridgeableErrorType.
[33mdb53a22[m fix <rdar://problem/19756953> Swift error: cannot capture '$0' before it is declared
[33m6691668[m improve the source location information for { and } in a ClosureExpr, by actually tracking it. NFC.
[33m52bf662[m improve typing, NFC.
[33m10a8416[m InstrProf: Handle profiling of member initializers as part of the constructor
[33m278d342[m Remove "materializable" language from diagnostic for 20807269.
[33m169aa6a[m [CodeCompletion] Print 'throws' on types in override completions
[33m180dec1[m Fix the test to use the correct availability attribute
[33m36a0c43[m Generalize _BridgedNSError to RawRepresentable types with any integral RawValue.
[33mc60c6d9[m Dependent member types are always dependent.
[33m19029be[m Test 'rethrows'.
[33m5905d07[m Don't bind generic type parameters to non-materializable types.
[33m7fcd0ee[m [CodeCompletion] Add 'throws' and 'rethrows' to call descriptions
[33m3740e9b[m Rely on ASTVisitor::visit for Decl visiting in the AST walker and provide some guidance for implementers in the file comment.
[33mf64d08c[m Prevent inlining of a function that binds dynamic Self.
[33m73700aa[m Added ObjectLiterals to the SyntaxMap
[33me162416[m Prevent dead argument removal when that argument provides self metadata and dynamic Self is bound to a generic parameter somewhere in the method.
[33m1ba9b58[m Add SILFunction::hasSelfMetadataParam() and getSelfMetadataArgument().
[33m6f20771[m Add MayBindDynamicSelf to CallGraphAnalysis.
[33mb8ad66e[m PrintAsObjC: Print property getter/setter names when they differ from the defaults.
[33ma6fa12a[m PrintAsObjC: use getObjCPropertyName() consistently for property name
[33m7f94cbe[m More CMake support and #ifs for hiding tvOS
[33m004c02a[m stdlib: doc comment: use monospaced font for code
[33md8e0683[m Tell SIL not to try to lazily initialize DebuggerVars.  The debugger handles this in its own way.
[33m1cf4974[m Remove a noescape and bitcast that were causing extra thunks to hang around
[33m4875a12[m [Driver] Stop pretending that incremental builds work without build records.
[33m4dacca9[m [Driver] Don't full-rebuild when a new file is added.
[33m31b3099[m [Driver] Always write a build record, even if there's only one input.
[33m4b4f909[m Several tangled up changes:  - Enable 'catch is NSError' and 'catch let e as NSError {' patterns to    a) work, and b) be considered to be exhaustive catches.  This enables    people to catch an error and *use* it as an NSError directly, instead    of having to do boiler-platey cases.  This is particularly important    for the migrator.
[33m7e8f929[m [ASTPrinter] When enabling printing accessibility, use the accessibility keywords instead of comments.
[33mbf402b3[m Add fix-it to change @availability to @available.
[33m4e4a73f[m [AST] Use the short-form @available() syntax in the AST printer where possible.
[33m09b6048[m CMake: rename allow-bitcode-section to embed-bitcode-section
[33ma34a45e[m CMake: rename allow-bitcode-section to embed-bitcode-section
[33m4e9cc49[m [Sema] Handle multiple guard #available() statements in same block.
[33m678b99f[m Fix <rdar://problem/20985280> QoI: improve diagnostic on improper pattern match on type
[33m8fa4d77[m rework "resolvePattern" to perform name lookup of UnresolvedDeclRefExpr's during resolution.  This allows us to produce better QoI and simplifies code.  This would be a lot simpler if not for our weird representation of clang enum aliases. :-(
[33m15b99a2[m Test: Add %target-clang substitution.
[33mf3eba9a[m Remove a test change that I forgot to revert before committing
[33m94aafe1[m De-underscore _MachError, _POSIXError, _NSCocoaError, _NSURLError.
[33mbddf134[m Factor _NSCocoaError into a struct whose values are split across frameworks.
[33mdef3b0d[m Append "AndReturnError" rather than "WithError" to initial error parameters.
[33mea17483[m Add CMake options and #ifs to hide tvOS
[33mb5b787b[m [Driver] Reordering inputs should not force a rebuild.
[33m39c0e64[m [test] Make sure incremental build tests are actually testing -incremental.
[33m338e243[m Move the BindName static function to being a TypeChecker::resolveDeclRefExpr method, NFC.
[33me5f1fcf[m SILGen: Don't crash on DoCatchStmt with non-throwing body in non-throwing context
[33m14dd0a4[m SILGen: Refactor emitOrDeleteBlock() to take a JumpDest rather than a BB
[33mf37b768[m GameKit depends on SceneKit
[33m49a6cec[m Revert "[AST] Use the short-form @available() syntax in the AST printer where possible."
[33ma714959[m [sil-combine] Improve devirtualization of methods from protocols and protocol extensions.
[33mdf2d779[m silence a warning by removing the unused 'shouldBeConsideredAsUse' function
[33mb1cd88b[m rename the implicitly generated temp variable for 'defer' from tmpClosure to $tmpClosure.  This is NFC, but should help with rdar://20968266, a debugger QoI issue.
[33madf7bca[m tests: stop subclassing SKScene in non-GUI apps
[33m4f13143[m Update SDK overlay for nullability annotations in the new SDK
[33mabc7677[m GameplayKit overlay: adjust to SDK changes
[33m485b4fc[m Update test for nullability annotations in the new SDK
[33m47595ee[m stdlib: change sort() and sorted() into protocol extensions
[33m974973e[m [AST] Use the short-form @available() syntax in the AST printer where possible.
[33m26a9a4d[m SILGen for 'rethrows'.  WIP; committed to get broader testing of an assertion.
[33m155507d[m Teach ASTWalker to walk some more implicit expressions and declarations generated by the type-checker.
[33m9e5898e[m SIL: Don't crash when casting something known to not be a metatype to a metatype
[33m41b030c[m Tests: Split off cast_folding_objc.swift from cast_folding.swift
[33md368700[m SILGen: Object to metatype casts have to take the slow path
[33m7e01085[m After Slava's changes this test now passes check-swift-optimize.
[33m4d71001[m Provide 'Simplified' demangling mode
[33m0295b24[m stdlib: don't use doc comment markup for non-doc comments
[33m17cafb6[m Revert "stdlib: don't use doc comment markup for non-doc comments"
[33me964eb7[m stdlib: don't use doc comment markup for non-doc comments
[33m39e5552[m JumpThreading: When threading a terminator make sure that we are actually jumpthreading on the dominated value
[33m9448a78[m [sil-combine] Fix a potential correctness problem in the apply{partial_apply(x,y)}(z) -> apply(z,x,y) peephole
[33mfa5109a[m [casts-optimizations] Properly handle casts to protocol compositions.
[33mf0f8787[m Generalize the 'transparent' flag passed around to various emitApply routines.  NFC.
[33m0d2fce4[m [CodeCompletion] Add throw/catch/try keywords to completions
[33m5aee5e7[m [Runtime] Enable run-time availability checks on watchOS.
[33mfb7dd76[m Fix linux testing after r28716
[33m882959b[m [CodeCompletion] Remove incorrect special-casing for throw/catch
[33m30c52d1[m Fix typo.
[33medb4e08[m SIL: Verifier now checks dynamic cast source/destination types with same predicate as the optimizer
[33m085d1fe[m SIL: Use scalar casts more
[33me6f8195[m IRGen: Get scalar casts with existential result type working
[33mf7635e4[m IRGen: Small cleanups in GenCast.cpp
[33m23d474c[m Fix documentation build
[33m9882449[m Flesh out the foreign-override testing a bit.
[33m715bece[m Parser: Finish factoring out periodPrefixIsFollowedByBuilderPatternLikeExpr().
[33mbded19d[m Parser: Extend the "builder pattern" hack for properties and generic types.
[33m7231191[m Make the order of block predecessors deterministic.
[33m5021360[m Make the iteration over the list of loaded modules in ASTContext deterministic.
[33m4b43c6a[m Move 'NSObject : Hashable' conformance to the ObjectiveC module in IRGen tests
[33mb4aea08[m Fix the test in the configuration with a separate SDK build
[33m7556a12[m SpriteKit depends on AVFoundation
[33m8f75af2[m fix spello in diagnostic.
[33m5b49a63[m Fix an egregious lack of QoI: <rdar://problem/16990885> support curly quotes for string literals
[33me49c66d[m fix <rdar://problem/19833424> QoI: Bad error message when using Objective-C literals (@"Hello") in Swift files
[33m4fa6201[m Make sure to close existentials that come from constructions.
[33md80baf7[m stdlib: fix coding style
[33m44efd2d[m MsgPack: use throw for backtracking instead of optionals
[33m3f1f5b8[m Fix a nit
[33mb06c45b[m Attempt to document checked_cast_addr_br and unconditional_checked_cast_addr
[33me1e8b9e[m SIL: look at lowered function type when diagnosing issues with returns
[33ma9d97bb[m SIL: propagate @noreturn while uncurrying function type, just like throws
[33m2098c60[m SIL: Generate emitRawApply()'s @guaranteed cleanups with CleanupLocation
[33m42d7c72[m SILGen: better diagnostic for code after break and throw
[33m7649092[m Fix serialization of TryApplyInst
[33m538790a[m Fix IRGen test to use target-swift-frontend instead of target-build-swift
[33mea0c35c[m SILComine: UncheckedRefCast does not handle class existentials
[33mcbb6d71[m Sema: Register synthesized accessors for protocol witnesses as external decls.
[33m541e0bf[m Fix optimizeUnconditionalCheckedCastInst
[33maf5a49f[m Fix test case to work in optimized mode
[33m1301212[m Fix test for optimize mode
[33m3b3f895[m This test case only works in unoptimized mode
[33me517ad9[m Fix unreachable code handling to properly diagnose things like:
[33m0a1f7c0[m Revert "Fix unreachable code handling to properly diagnose things like:"
[33m5ead976[m Fix unreachable code handling to properly diagnose things like:
[33mdd08b8c[m PrintAsObjC: Stop avoiding using parameterized Foundation collections.
[33mc2c0e5d[m Dynamic 'Self' is only valid in an @objc method of an @objc class.
[33m28616fb[m This test relies on inlining not to happen. Disable inlining.
[33mc9e0657[m fix <rdar://problem/20941576> SILGen crash: Failable struct init cannot delegate to another failable initializer
[33m05bd8a2[m XFAIL test for optimized swift_test_modes
[33ma4376cd[m XFAIL test for optimized swift_test_mode until we have a fix
[33m7ef38ac[m Disable test for optimized swift_test_mode until we have a fix
[33m580315d[m fix <rdar://problem/17652759> Default arguments cause crash with tuple permutation
[33m5b66bb6[m Use REQUIRES instead of XFAIL for test case
[33m1f7c57f[m Disable test Serialization/basic_sil.swift in optimized swift_test_mode
[33m796fa37[m Remove a bit of ugliness that went it to silence a var->let warning, now that we don't warn in this case.
[33m4394127[m Fix type in Serialization def_basic.sil test case
[33m507aacf[m Enable auto-applying of a fixit for "Variable 'x' was never mutated; consider changing to 'let' constant" in migrator.
[33m1bd917e[m Revert "PrintAsObjC: Stop avoiding using parameterized Foundation collections."
[33m5eaea5d[m [PrintAsObjC] Expose the domain for @objc enums conforming to ErrorType.
[33m6aa84e1[m stdlib: clean up some FIXMEs for protocol extensions
[33m4c80e21[m Fix the syntax error that I just introduced.
[33m3137012[m stdlib: Various punctuation and markup improvements to the comments.
[33m1867b14[m Support escape sequences in @available() messages.
[33m891ac31[m Remove availability information from WatchKitErrorCode because
[33m6048306[m Add availability information to the WatchKit overlay
[33mba4c959[m stdlib: correct the comment on Unsafe{,Mutable}Pointer.memory
[33ma2096f1[m Add the WatchKit overlay
[33meac4266[m Add a failing test case for rdar://20985062
[33m84c7951[m Fix UnsafePointer.swift stdlib unit test to pass at -O
[33m149ccd1[m PrintAsObjC: Stop avoiding using parameterized Foundation collections.
[33m75617df[m PrintAsObjC: Stop printing SWIFT_NULLABILITY(keyword).
[33mdbd7864[m Build fix: Adventure triggers nullptr dereference
[33mc995264[m Support short-form @available attributes.
[33m239eb58[m Fix stdlib ManagedBuffer.swift test at -O
[33m8476af5[m Don't build SDK overlays for frameworks that don't exist on watchOS
[33mc6d00c7[m Disable SILCombine's dead-but-stored-to array elimination.
[33m64d837d[m Don't emit a Fix-It adding an argument label for a trailing closure.
[33m2e55416[m Fix the FloatingPointIR.swift so that it also passes when compiled optimized
[33mbed8389[m Fix the stdlib test ExistentialCollection.swift to pass when compiled optimized
[33mfdecf29[m Enable auto-applying of a fixit for "'#' has been removed from Swift; %0 already has an argument label" in migrator.
[33me4b6afb[m Start moving the testsuite to the "_ = foo()" idiom for evaluating an expression but ignoring its value.  This is the right canonical way to do this.  NFC, just testsuite changes.
[33m9f4233b[m Move validation of #available() from Sema to Parse
[33m0651643[m [sil-devirtualizer] Support concrete subclasses of generic base classes.
[33me2d3e87[m Expect descriptive crash output only if stdlib is compiled with assertions enabled.
[33m80571cf[m Check base expr when determining mutability of a member
[33m9bbce68[m fix <rdar://problem/20894455> "variable was never mutated" diagnostic does not take #if into account
[33m19017a2[m Even more testcase tweaking: Make this a C module so it can be imported on Linux.
[33mc386a21[m testcase update that was meant to go with r28629
[33mcf564c2[m More testcase tweaking. 1. Require objc_interop (the Linux bot currently fails to import    Objective-C modules. 2. Generalize the testcase to also accept ELF containers so it works when    (1) is resolved.
[33m1e934dd[m fix <rdar://problem/20927707> QoI: 'variable was never mutated' noisy when only part of a destructured tuple is mutated
[33mda2ad48[m Cleanup: Remove the dependency on SwiftShims from this testcase and relax the prerequisites.
[33m1d6602e[m Add bridging for the Mach error domain.
[33maf6d4c5[m Map the NSError POSIX domain into our error-handling scheme.
[33m70279d1[m Disable module debug info generation when -detailed-preprocessing-record is enabled.
[33m32935bd[m Sema: Build refinement context for bodies of while loops
[33m312a9c1[m Clean up correctly if a variadic argument throws.
[33m02041a9[m Revert "Revert "fix <rdar://problem/20883210> QoI: Following a "let" condition with boolean condition spouts nonsensical errors""
[33m7c69b07[m [IDE] Add enum elements in the document structure.
[33m1ebfc0a[m [sdk-analyzer] Update OSX module list.
[33m3ab7517[m Revert "fix <rdar://problem/20883210> QoI: Following a "let" condition with boolean condition spouts nonsensical errors"
[33m2c3d030[m Revert "Map the NSError POSIX domain into our error-handling scheme."
[33m6a6f0ec[m Make the idempotence hack in error-checking more robust, because apparently lazy accessors get enqueued multiple times somehow.
[33m1fa59f4[m Map the NSError POSIX domain into our error-handling scheme.
[33mbb0ab47[m Add more missing dependencies for SDK overlays
[33m7cca196[m Place 'try'-specific diagnostics on the 'try' location.
[33mb4d7680[m Consider constrained protocol extension signatures in overload signatures.
[33mc989950[m Add missing WebKit -> AppKit dependency.
[33m7500da4[m WatchKit depends on UIKit and CoreGraphics
[33md8d50e1[m stdlib: in Array bridging code, use the same pattern as Set and Dictionary use
[33mdb7857c[m GameKit depends on AppKit and UIKit
[33m9c87e39[m EventKit depends on AppKit
[33m424b442[m Sema: Don't suggest Fix-It to mark stored property as potentially unavailable
[33m815816f[m Add more dependencies between SDK overlays
[33m0d569c8[m AVFoundation depends on CoreMedia
[33m8d055ef[m CloudKit depends on CoreLocation
[33m59b1db7[m [test] Build the Foundation IRGen overlay in context of the ObjectiveC one.
[33ma329c7a[m Microoptimization: get parent module from a source file instead of a decl.
[33mc129637[m Name lookup: avoid even calling lookup code on Clang submodules.
[33m63eb2d0[m ClosureSpecializer: Only specialize if the partial_apply and its user are in the same block
[33me6344e4[m fix <rdar://problem/20883210> QoI: Following a "let" condition with boolean condition spouts nonsensical errors
[33m5d4fa0b[m A better fix: stop storing the address of a type in the constraint system in the first place, because it's totally immutable on all access paths.
[33m1b61cef[m The ObjectiveC test requires objc_interop
[33maa92cbd[m Avoid a crash-on-invalid by passing contextualType by reference to solveForExpression.
[33m25d9a4f[m stdlib: protocol extensions: de-underscore filter()
[33m7c8a394[m Move NSObject extensions to the ObjectiveC overlay
[33md8d4e49[m Correct target SDKs for new overlays introduced in r28585.
[33m250f682[m Fix a comment typo.
[33m0fbbe18[m [CodeCompletion] Fix crash completing method with associated type
[33m1d86203[m [CodeCompletion] Add some tests and FIXMEs for protocol extensions in the stdlib
[33m114fd8f[m [sil-combine] Re-factor the implementation of the peephole apply{partial_apply(x,y)}(z ) -> apply(z,x,y). NFC.
[33m3561cfc[m Bridge 15 NSError error domains into their corresponding enums.
[33m69fdca4[m Fix assertion failure code completing after nil literal
[33m5685121[m fix <rdar://problem/20911927> False positive in the "variable was never mutated" warning with IUO
[33m7d089a9[m IRGen: Map bridged container types to their specific ObjC Clang types.
[33md1e202b[m Comment LifetimeTracker.
[33m9d8e5df[m [Serialization] Preserve the order of basic blocks in SIL deserialization.
[33m21bc219[m [Serialization] Turn an impossible case into an assertion.
[33m6786158[m [ClangImporter] Always sort top-level value lookups from Clang.
[33maadcf86[m Always initialize 'Expansion' field in SILDeclRef.
[33m9ef66a3[m [Serialization] Avoid some non-determinism in the serializer.
[33m0990446[m Update SDK mocks to have the correct definition of ObjCBool for TVOS sim target. Update IRGen/abitypes.swift for TVOS x86_64, arm64 targets.
[33mb61754d[m Remove stale comment that was mistakingly committed. NFC.
[33m561082b[m [Parse] Update comment describing statement condition grammar.
[33m60eb978[m SILGen: fix generation of switch containing try
[33mcbbde47[m SILGen: remove dead diagnostics for error handling
[33m3721ee9[m [sil-combine] Fix a bug in the peephole apply{partial_apply(x,y)}(z) -> apply(z,x,y)
[33me97d2f8[m Don't specialize Apply instructions that return the Self type.
[33m75f88af[m Make NSError error domain enums Equatable and Hashable.
[33m7449c3b[m Use protocol extensions to eliminate boilerplate in bridged NSError domains.
[33m9153e22[m CoreGraphics overlay: Comment that the @transparent definitions really want to be @fragile.
[33me4bb04d[m Disabled auto-applying of a fixit for "" in migrator.
[33m79e93e3[m Add _NSURLError enum to cover the NSURLError error domain.
[33m88b6799[m Get availability annotations right for NSCocoaError.
[33mef5187f[m Do not allow inliner to work top-down unless we have new opportunities.
[33mb1b9a91[m stdlib: push Array's specialization of filter() to CollectionType
[33mcfbe2e0[m Hard-code the Cocoa error domain mapping using the results of a simple script.
[33m4b23d4a[m Update clang importer and target platform detection for watchOS.
[33m6274168[m stdlib: move _SequenceDefaultsType extensions to SequenceType
[33m71ef0c2[m stdlib: rearrange declarations to be more logically grouped together
[33m518391f[m Search for the right conformance and early exit early if none found. NFC.
[33ma81fe1a[m CMake: don't eliminate dependencies on SwiftPrivate ... when building the overlay separately
[33m98e243f[m Fix specialization of protocols that return Self type.
[33m5da2aa7[m c_pointers.swift test works on recent AppleTV SDKs
[33mc8488f9[m Use objc_interop feature to distinguish non-ObjC platforms
[33m1404fed[m [test] Linux doesn't have CoreImage.
[33m9b7ea14[m Disable the CoreImage overlay for watchOS
[33m847e321[m [test] Undo Linux XFAILs.
[33medce320[m Fix copy-paste error when detecting TVOS simulator environment in stdlib unit tests.
[33m9bf1f91[m Prevent the type checker from going exponential on straightforward bindings of named patterns to nested array literals. I have a more principled fix for these kinds of issues in the works, but this will unblock a lot of users until those changes land. (rdar://problem/19810828)
[33m9ac141e[m Add TVOS device testing support to the Swift project:
[33m94958e1[m [test] XFAIL two tests on Linux because swift-ide-test is crashing.
[33m313c30a[m Prohibit specialization on DynamicSelf type.
[33m5f06269[m Fix -generic-specializer output
[33md5ecef1[m remove a pointless return type, silencing a warning.
[33m2bf88fe[m [stdlib] OptionSet: keep "final" on its own line
[33m08eb003[m Start including LLVM bitcode sections in Swift dylibs
[33m2d14ab9[m Don't use Shared linkage for specialized stdlib_binary_only functions
[33mf8c52ca[m Revert "Disable module debug info generation when -detailed-preprocessing-record"
[33m95dc298[m ForeignErrorConvention ctor was not setting ErrorParameterIsReplaced correctly
[33ma1f4be0[m When mapping bridgeable enums to codes, move availability guard inside the #if.
[33m06f379b[m Make the order of associated type witness inference deterministic.
[33mbd526cf[m Use 'internal' rather than 'private' in the Cocoa error domain hack.
[33m7cd80ec[m Factor creation of enums for the Cocoa error domains into a reusable gyb template.
[33m2c8fa18[m [test] Remove an `XFAIL: asan` that no longer fails.
[33md030808[m [stdlib] OptionSets - final pre-API-review tweaks
[33m0b9b998[m CoreGraphics overlay: Make most CGPoint/Size/Rect operations transparent (again).
[33mb1a965f[m Clang Importer: Import struct elementwise constructors as transparent.
[33m3529102[m [stdlib] OptionSets fix a comment
[33m2e88d66[m [stdlib] OptionSets - prepare for API review
[33m3437786[m Fix inclusion of TypeRefinementContext.h
[33mce37291[m Update NSCocoaError to contain the entire Cocoa domain.
[33m8a7b3f4[m Revise the parser and AST representation of #available to be part of StmtCondition instead of being an expression.
[33mc97ba8e[m IRGen: Allow concrete subclasses of generic base classes.
[33mb94c4ce[m SDK overlay: add more dependencies for the CoreMedia overlay
[33m032eefa[m Make the PlaygroundLogger be able to deal with all the strange and wonderful new ways of printing things.  Also addeed a testcase.
[33m5042316[m Driver: fix a few things to get -embed-bitcode working with multi-threaded compilation.
[33m0857b69[m [sil-combine] Bail earlier, if emitSuccessfulScalarUnconditionalCast cannot be applied.
[33m93dc28b[m Revert "Unused binding analysis now recurses into type declarations"
[33mf262b13[m Handle try_apply in the diagnostic unreachable-code pass.
[33m3a2bb97[m Fix tests for expectCrashLater() for iOS
[33m5b29ebf[m [sdk-analyzer] Update the module lists.
[33m35fc1a0[m Track whether an ApplyExpr throws in the AST.
[33m330fb77[m InstrProf: Fix a crash when instrumentation hits an implicit return
[33me315581[m StdlibUnittest tests: use a runtime trap to test expectCrashLater
[33m9a81121[m SDK overlay: there's no GameplayKit in current watchOS, disable it for now
[33m66e1f37[m SILGen: Reabstraction for vtable entries.
[33m5a20c4d[m Disable module debug info generation when -detailed-preprocessing-record is enabled.
[33m843d8a4[m stdlib: protocol extensions: de-underscore map()
[33m6884540[m Revert "Re-enable validation-test/stdlib/SceneKit.swift."
[33m7f1119f[m Underscore properties of ErrorType.
[33m7a5ffed[m Implement 'rethrows' checking in Sema.
[33m9b67c6b[m stdilb: Document the new policy about complexity and properties vs. methods
[33m86dc008[m Adjust test to new #available syntax.
[33mefed32e[m stdlib: indent doc comment per coding style
[33mc8e1ac8[m Add the GameplayKit overlay
[33mb564dd5[m Re-enable validation-test/stdlib/SceneKit.swift.
[33m945259f[m SDK overlay: add a smoketest for the CoreMedia overlay
[33m6951e46[m If 'throws' is written after the result type in a function decl, suggest moving it to before the arrow.
[33m07251be[m Revert "Implement 'rethrows' checking in Sema."
[33m9be9444[m Adjust overlay to CoreImage nullability changes.
[33m0e52761[m Integrate the CoreMedia overlay for CMTime and CMTimeRange
[33m3e4bcab[m Implement 'rethrows' checking in Sema.
[33mcedaafb[m Don't consider invalid enum entries when looking up enum cases by name; they may have been marked invalid because they're duplicates.
[33m62feb5c[m Change @availability to @available.
[33mcdeb582[m Disable LLVM's MergeFunctions pass
[33maa856fc[m Don't allow overloading on @noreturn, @noescape of function parameters
[33m8eabf84[m Sema: diagnose capturing type declarations for now
[33m80140b0[m Unused binding analysis now recurses into type declarations
[33mfc3f490[m Runtime: get some multi-payload enum reflection
[33m50842e1[m SILPasses/cse.sil imports Foundation and doesn't run on Linux
[33m224286e[m Fix warnings in NSStringAPI test
[33m82beaf3[m Dependencies: De-duplicate the list of extended nominals.
[33m74f4827[m Dependencies: add tests for protocol extensions.
[33m3ffe42a[m Dependencies: Don't crash if an extension couldn't be resolved.
[33m68ef59e[m stdlib: Convert comments to use '- requires:' instead of 'Requires:'.
[33m5c55682[m [stdlib] Capitalize keywords in doc comments
[33m106b39a[m [stdlib] Indent bullet continuations in doc comments
[33m340e4d8[m Simplify parsing and representation of extension declarations.
[33m9858969[m Ban generic parameters on extensions.
[33mfcf0404[m [fixit] Avoid picking up the fixit which adds a bang.
[33ma8ee153[m Add periods and blank lines between abstracts and discussions.
[33m1bc7b4c[m Move requirements out of abstracts.
[33m631a4ef[m Move return descriptions out of abstracts.
[33mda652bf[m Fix test, for real.  It actually passes.
[33mb12830b[m Fix up test case for real.
[33m3bcb2ca[m Fix up test case.
[33mf97f7b6[m Fix up test case.
[33m42cccf0[m Make CFunctionPointer, GeneratorOf, SequenceOf unavailable.
[33md10a53c[m Fix the CollectionDiagnostics test
[33ma01e7c2[m [fixit] Apply the 'forced_downcast_coercion' warning automatically.
[33m4925bda[m stdlib: make 'first' dynamically dispatched so that it can be made fast on Dictionary and Set
[33m810631d[m Do emit diagnostics on UnreachableInst that result from mandatory inlining.
[33m33276a4[m stdlib: make _prext_filter() return an Array<Element> for all collections
[33mee8daf6[m Yon semicolon doth offend mine eye
[33md92a039[m Make the CoreImage overlay (nee QuartzCore) work for both 10.11 and older OSs.
[33m64ec51a[m Convert a few 'var' to 'let' in the SDK overlay.
[33m0e3bb2d[m SILGen: Implement ErrorType-to-Any erasure.
[33mb29220a[m Add a Requires field to doc comments
[33m296f0c9[m Added BodyRange to DictionaryExpr and ObjectLiteralExpr
[33m68ba7a7[m Revert the reversal of Mirror for Mirror
[33m61214ec[m stdlib: remove Sliceable conformance from String
[33me590a9b[m [sil-devirtualizer] Fix handling of covariant return types if they are optionals.
[33md136b13[m Remove an unused declaration from a test case.
[33mdae2922[m To preserve source level copies, is_unique must appear to decrement the refcount of its object.
[33maa58b91[m [stdlib] WIP on the new OptionSet prototype
[33m2d54685[m Don't test for objc string in non-objc runtime.
[33mf610875[m Make the bitcast test flexible to %Sq numbering.
[33mf8e5d28[m [stdlib] Remove needless "let"s
[33m42fb70a[m [sil-verifier] Allow upcasts between optional types.
[33me63d851[m stdlib: fix up a doc comment
[33ma90887d[m [sil-cse] Fix a small bug when doing CSE for objc_protocol instructions.
[33md2a5fbd[m Implement reflection on instances of empty and single-payload enums
[33md395316[m stdlib tests: Split off Reflection_objc.swift from Reflection.swift
[33me6dbc2a[m IRGen: Don't emit enum case names for C-compatible enums
[33mfd256e7[m EmitGuaranteedSelf is always on now
[33m0ad2696[m Don't pass -enable-guaranteed-self in tests
[33mbfc90f1[m Runtime: nuke a bit of dead code
[33mdaaea37[m Fix a debug-info bug in multi-threaded compilation mode.
[33m6a48379[m tests: remove unused import
[33m918b323[m [stdlib] Suppress some new warnings
[33m9c6114b[m Disable SIMD tests on linux pending implementation.
[33mb201282[m Use requires rather than explicit target.
[33m2207f65[m Minor flag changes to tests for linux compat.
[33m7ac7eba[m stdlib: make map() dynamically dispatched
[33mc2ff0f8[m Fix a crash in GlobalLoadStoreOpts in Interpreter/SDK/GLKit.swift when compiled with -O.
[33m2c68b35[m StdlibRationales: document one more reason against map() returning Self
[33mf000fcd[m [IDE] For header interface printing, include macros and module imports.
[33mddd6192[m Implement 3 prominent feature requests: <rdar://problem/15975935> warning that you can use 'let' not 'var' <rdar://problem/18876585> Compiler should warn me if I set a parameter as 'var' but never modify it <rdar://problem/17224539> QoI: warn about unused variables
[33macf5a42[m as a tiny QoI improvement, parse "#if 0" and recover as if the user wrote "#if false" while producing an error + fixit.
[33m39dc866[m tweak a couple of more files in the build to strength reduce from var -> let.
[33m4366da9[m more testcase updates for upcoming diagnostics change.
[33mab65f6e[m IRGen: Remove redundant release barrier from type metadata accessor.
[33m0348bbc[m Take -sil-serialize-all off of CoreGraphics overlay again.
[33m7059871[m Convert some 'var' bindings to 'let' when they are not mutated, some var/let bindings to _ when they are never used, and use some values that are only written.  This is a testsuite cleanup, NFC. More to come.
[33m03cff11[m IRGen: Don't try to pack a nonexistent empty payload from a single-payload enum nested into an outer enum.
[33m0d42ed3[m StdlibUnittest: provide explanatory output about failing crash tests
[33m0f79c71[m IRGen: Fix incorrect result type when doing trivial "checked" cast to AnyObject.Type.
[33m94eb4cb[m AST printer: Use the type substitution map to print archetype parents.
[33m7e61a77[m [module-interface] Add "/*not inherited*/" in-front of factory initializers to distinguish those from normal initializers in a clear manner.
[33mbdfc836[m CoreGraphics overlay: Provide concrete definitions of CG*Zero and CGAffineTransformIdentity.
[33m3ee5bbc[m Build CoreGraphics overlay with -sil-serialize-all.
[33m30200dd[m IRGen: Remove stale "MaxScalarsForDirectResult" hack for arm64.
[33m0c8667f[m whitespace
[33m0940d2a[m Test case comment cleanup.
[33m91ade94[m Sema: Allow mutual recursion of local functions.
[33m934bbd0[m more stdlib hygiene
[33mc1df892[m improve stdlib hygiene a bit.
[33m1968b85[m Revert "CoreGraphics overlay: Make most CGPoint/Size/Rect operations transparent."
[33me12cc2d[m Account for typeExprs as arguments when diagnosing CallExpr failures. This is surprisingly common, and accounts for (rdar://problem/19750901&19471376&19615313&19686369&19823567 and likely many more dupes I've yet to dig out.)
[33mc6b30d9[m Prioritize generalized conversion diagnostics over generalized overload diagnostics when diagnosing an error in a return expression. (rdar://problem/19735220)
[33m23e47a6[m fix indentation, nfc.
[33me910c14[m CoreGraphics overlay: Make most CGPoint/Size/Rect operations transparent.
[33mcef754d[m Update ClangImporter to map SIMD types to their C-like Swift counterparts.
[33m0722dd2[m stdlib: Roll the SIMD module back to C++ parity.
[33m95d1cf5e[m Revert "ClangImporter etc.: Remap C vector types to nested BaseType.VectorN types."
[33m1af4659[m Enable interface type mangling.
[33m3f0abf9[m AST: Don't bind generic context of decls with error type.
[33m38e114d[m AST: Fix nondeterminism in same-type mangling order.
[33mab4e578[m AST: More robustly grab a Module for ArchetypeBuilder to canonicalize generic signatures.
[33mb06b4e9[m grammar-fix
[33m64caa64[m AST: Use the canonical generic params in the canonical mangling signature.
[33m22e34ab[m AST: Interface type mangling for protocol conformances.
[33ma0993c0[m AST: Fix mangling generic signature with multiple params at depth.
[33mca6e909[m Use a MapVector for the conformance tables we plan on iterating, instead of DenseMaps. Not having stable ordering of conformances results in non-deterministic type checker behavior, and causes all sorts of other mischief. (This unblocks rdar://problem/20824955, and also seems to address some other fishy things we've been seeing.)
[33mc344006[m tighen up testcase.
[33m1fec424[m fix comment typo, nfc.
[33m3814b70[m Implement support for arbitrary pattern matching in for-each statements, which composes straight-forwardly on top of the existing stuff for if/let and guard.
[33m3a9020f[m Add an on-disk code completion cache
[33m59533a1[m Split off CodeCompletionCache into its own file
[33mf3ecb63[m Move caching logic into the code completion consumer
[33m922db01[m Initializers in protocol extensions are convenience initializers.
[33m2f0c1b1[m Use the archetype for unqualified lookup within protocols and extensions thereof.
[33mbdd9250[m stdlib: add tests for ${ArrayType}.init(SequenceType)
[33m5dede59[m stdlib: add tests for Lazy{Sequence,Collection}.array
[33m47bdbfb[m fix <rdar://problem/20883147> Type annotation for 'let' condition still expected to be optional
[33m3df7a35[m [IDE] Speed up header interface printing.
[33m0bca421[m stdlib: remove workarounds from _replPrintLiteralString()
[33m98d69ab[m Move ObjC portion of test to a separate file to unbreak Linux testing.
[33m8c2248a[m Don't embed LLVM bitcode into  the XCTest overlay
[33m5691b95[m stdlib: Algorithm test: use more precise names
[33mdb34787[m Add an AppleInternal path to framework search paths
[33mc8351a2[m stdlib: fix the Unmanaged test under -O
[33mf808190[m Add tests for 20087517 and 20596042.
[33mf12f104[m Two tests stop crashing and two start crashing due to parsing the pattern of a let decl as an irrefutable pattern.  The crashers in the new ones are in the generics system.
[33m4921603[m Revert "Provide a Mirror for Mirror - take 2"
[33me7713f5[m [ARMv7k ABI] add testing cases.
[33me8c5729[m Fixed missing body length in Array literals
[33mc8078cb[m Demangle: Tweak how dependent types are demangled to make them look more like archetypes.
[33ma5d9fe1[m AST: Bind generic contexts when we mangle interface types.
[33mae1f3af[m AST: Add the ability to dyn_cast a ValueDecl to DeclContext.
[33m2f0729b[m Typo
[33m78ec65c[m Sema: Remove unused TC.LocalFunctionCaptures cache.
[33m58b6319[m Implement support for 'where' clauses on foreach loops, part of <rdar://problem/14482451> Allow refutable patterns & 'where' in 'for-each' loops
[33m7b57672[m Extend the fix from r28200 to all UnresolvedMemberExpr instances in CSApply.
[33mcf30e07[m Provide a Mirror for Mirror - take 2
[33m7776ba5[m stdlib: clean up capitalization in doc comments
[33m0749486[m Let unqualified lookup find members of protocols and extensions thereof.
[33md239d44[m Added IDE support for Object Literals Expressions
[33m5c2d123[m Stop classifying results in UnqualifiedLookupResult.
[33m31b00de[m Remove the migration logic for let/else -> guard.  We don't need it at WWDC, and there are crashers that it admits (e.g. rdar://20866942).
[33m89cef81[m Add support for LLVM bitcode sections
[33mf35677d[m Revise SILGen of foreach loops to only drop the optional generator result value in memory when it is address-only. This leads to better -O0 performance and  easier to read silgen output. This is ongoing progress towards rdar://20642198.
[33m46b5257[m Recognize imported enum case aliases in TypeCheckPattern.cpp.
[33m21b8312[m [stdlib] Make a bunch of standard library functions compile faster.
[33mc9d34f2[m Print the storage decl associated with an accessor in a crash trace.
[33md681852[m stdlib: remove extra 'Self.' qualifications that are not needed now
[33m52f4f4e[m Apply a fixit for a warning 'parameter_pound_double_up' in migrator
[33m5e7a45f[m revert r28318, it is causing a problem on perftests.  I'll investigate after lunch.
[33md5700e8[m simplify code by using FullApplySite, suggested by Mark.
[33ma444f78[m [sil-combine] Fix a verifier assertion triggered by compiling the objc_bridge_cast.swift test with -O
[33mf379b1e[m Revise SILGen of foreach loops to only drop the optional generator result value in memory when it is address-only.  This leads to better -O0 performance and easier to read silgen output.  This is ongoing progress towards rdar://20642198.
[33m74c2cb7[m Sema: more robust diagnostic for circular inheritance
[33m8bd6b33[m [stdlib] Fix DRY violation
[33me24c262[m Foundation overlay: add String.stringByApplyingTransform()
[33m58d532f[m Remove more merge conflict markers to fix the build.
[33m947c702[m Mark two compiler crashers as fixed
[33md702f44[m Update the test for _ErrorType -> ErrorType rename
[33md55de38[m Remove merge conflict markers that I accidentally committed.
[33mf46f16a[m stdlib: implement new print() API
[33m6dfbd87[m SIL: remove unused function findEdgeValueIdx()
[33mf797473[m IRGen: fix partial application of witness methods
[33m2f7d793[m Sema: fix @noreturn and throws for curried functions
[33mb294e50[m ASTPrinter: print 'throws' for generic and polymorphic function types
[33m8281868[m replaceBBArgWithStruct: Also handle cases where the same value is propagated along several argument indexes
[33m115c17a[m Switch the last caller over to TypeChecker::lookupUnqualified().
[33m7918853[m Add TypeChecker::lookupUnqualified() and use it in lieu of UnqualifiedLookup.
[33mb5bc4c2[m Start encoding a base declaration in name lookup results.
[33m237b3ec[m Factor out a visitor for walking a function body and tracking interesting things about error handling.  NFC.
[33mb562694[m When diagnostic Objective-C method conflicts, prefer decls with source locations.
[33m54d3d5f[m Stop randomly stripping IdentityExprs from recursive positions within accessors.
[33m8dac375[m Loosen the assertion a bit to make the test suite  pass with -O.
[33m9f8fd4e[m AST: Compress the mangling for generic signatures a bit.
[33me0684ec[m [sil-combine] Make cast optimiser less fragile
[33m97136fa[m Remove the module representation from ComponentIdentTypeRepr.
[33m9f9bb72[m Rename '_ErrorType' to 'ErrorType'.
[33m8b392ee[m Revert "Remove Array.count, it is redundant with protocol extensions"
[33m10ab07a[m Revert "Remove {Dictionary,Set,UnsafeMutableBufferPointer,UnsafeBufferPointer}.count"
[33m4461d97[m Revert "stdlib: some more count -> count() replacements."
[33m1f9e958[m Fix vtable thunk generation for cases with optional return values.
[33medbb75e[m Eliminate the 'Module' variant from UnqualifiedLookupResult.
[33m2653a65[m Eliminate ModuleExpr; DeclRefExpr is good enough for anyone.
[33mb8995b0[m Transform the Module class into ModuleDecl.
[33ma550503[m Switch TypeChecker::lookupMemberType() over to NameLookupOptions. NFC
[33mda47d23[m Teach TypeChecker::lookupConstructors() to use NameLookupOptions. NFC
[33m297c9e2[m Introduce NameLookupOptions for TypeChecker::lookupMember(). NFC
[33m1e74c1e[m teach DI about try_apply instructions when looking for self.init and super.init calls, resolving <rdar://problem/20850517> throwing initializers that call super.init trigger DI errors about not having called super.init
[33m94834dc[m Debug info: Cleanup. Actually test for the type + sugar instead of just casually mentioning it in a comment.
[33m919ae95[m Runtime: Make Lazy defaulted initializer constexpr to satisfy is_literal_type.
[33mde7de7d[m Debug info: Don't emit externally defined global variables.
[33m38be24c[m Runtime: Change static_asserts on Lazy to check is_literal_type.
[33m2fa0359[m AST: Improve how canonical mangling handles concrete same-type constraints.
[33m65965f7[m Update diagnostic to say 'guard' instead of 'require'.
[33mbf60957[m Added ZExt attribute for isUniquelyReferenced runtime calls.
[33m9c4d1a5[m Move some definitions so I can add a helper without forward declaring it.
[33m23b1186[m Removed _swift_isUniquelyReferenced shims. Don't call these from swift.
[33m7589255[m Update test cases for Builtin.isUnique.
[33ma692475[m Remove an accidentally committed character.
[33m9fdecb4[m Remove a stale comment from a debug info testcase.
[33m5a76f7b[m Remove a redundant debug info test. This is covered by Imports.swift.
[33mf99da03[m Remove a redundant debug info test.
[33m8361ba4[m Revert "Revert "[+0 self] Teach SILGen how to avoid emitting extra rr pairs when emitting RValues with Nominal Types and Tuples.""
[33ma32b14e[m SILGen: Don't try to witness-dispatch extension inits that delegate to other extension inits.
[33mea99bea[m SIL: Handle decl refs into protocol extensions in SILPrinter.
[33m7a96e55[m Revert "Foundation overlay: add String.stringByApplyingTransform()"
[33m9d0d7be[m SILGen: small refactoring. NFC
[33m38f6a09[m SILGen: fix crash when a local function references another local function without captures.
[33m27cbf6b[m Fix 'seealso' comment in AnyGenerator
[33m15a558f[m Foundation overlay: add String.stringByApplyingTransform()
[33m94a3cf8[m stdlib: some more count -> count() replacements.
[33md938b93[m stdlib: doc comment: use monospaced font for code
[33m50ccf82[m AST: Try to reduce and canonicalize order of same-type constraints in mangling signature.
[33m1a602e9[m Fix names of intrinsic type trait fallbacks for IsTriviallyConstructible/Destructible.
[33mb10105d[m Make test DebugInfo/Errors.swift word-size independent
[33mcfd4503[m Don't mutate defaultArgsOwner with getCallerDefaultArg() directly, so we can make a more precise assertion that all default arguments have the same owner.
[33m35c55f3[m help out poor emacs users with 'guard'.
[33mddddc88[m simplify some code.
[33m8ac6c7c[m Remove {Dictionary,Set,UnsafeMutableBufferPointer,UnsafeBufferPointer}.count
[33m58601fa[m Remove Array.count, it is redundant with protocol extensions
[33mc109ec9[m stdlib: protocol extensions: de-underscore count()
[33me253881[m stdlib: protocol extensions: de-underscore indices
[33mf76ca62[m stdlib: protocol extensions: de-underscore indexOf()
[33m25e74d2[m stdlib: protocol extensions: de-underscore last
[33md790954[m stdlib: protocol extensions: de-underscore first
[33me96ade8[m stdlib: protocol extensions: de-underscore isEmpty
[33m275cfc0[m stdlib: protocol extensions: de-underscore underestimateCount()
[33m97db2de[m stdlib: protocol extensions: de-underscore flatMap()
[33ma474641[m stdlib: protocol extensions: de-underscore reverse()
[33m270ec3b[m stdlib: protocol extensions: de-underscore reduce()
[33m035d72d[m stdlib: protocol extensions: de-underscore contains()
[33m822ad74[m stdlib: protocol extensions: de-underscore lexicographicalCompare()
[33m78d1196[m stdlib: protocol extensions: de-underscore elementsEqual
[33me43ad56[m stdlib: protocol extensions: de-underscore startsWith()
[33m62aa1f0[m stdlib: protocol extensions: de-underscore minElement(), maxElement()
[33m7e9063a[m stdlib: protocol extensions: de-underscore enumerate()
[33m3382f06[m Add throw and try to swift-mode.el.
[33mf18d802[m Debug Info: Emit the error result argument.
[33mf2e66d1[m Break recursion when deserializing constrained protocol extensions.
[33m36c605f[m Remove ScalarToTupleExpr in favor of a flag on TupleShuffleExpr.
[33m660f844[m [ClangImporter] Handle missing cases introduced in r28216.
[33m04d6928[m [stdlib] Pinging the compiler doesn't usually help
[33m37f5452[m require -> guard.
[33ma99e995[m Validate an associated type before looking at its default definition.
[33m3b57cab[m Consider default argument patterns, as they relate to actual arguments, when deciding on a specific overload to favor for a function application. Doing so addresses another class of exponential behavior bugs in the type checker (rdar://problem/19779591 and rdar://problem/20772053). There's still some work left to do, though - hence the change to Concatenate.swift, to work around rdar://problem/20789500.
[33mea52d4f[m fix <rdar://problem/20749592> Conditional Optional binding hides compiler error
[33mab09922[m Runtime/IRGen: Replace the _SwiftNativeNS*Base +load hack with a compiler hack.
[33md51acde[m Runtime: Add back +[SwiftObject initialize].
[33mbe33b9e[m [InterfacePrinting] Avoid duplicating @autoclosure and @noescape when printing module interfaces. rdar://20657950
[33mcc346aa[m [ClangImporter] Handle CF_RETURNS_[NOT_]RETAINED on parameters.
[33ma6bf5f9[m Revert "[test] Use '-target' for cc args as well."
[33m8b814d3[m Runtime: SwiftObject doesn't need +load or +initialize.
[33m73dfea0[m ClangImporter: Import option sets as conforming to OptionSetType.
[33mf3670d3[m When adding '!' in fix-it, make sure that it doesn't fall into the optional evaluation context that produced the optional.
[33mf506d1e[m Don't import stdlib_binary_only declarations as shared_external since we don't link the body. Mark such declarations as public_external.
[33mc52a019[m Quiet warnings about new KnownProtocolKind.
[33m2105aa7[m Remove extraneous 'Self.' from constrained extension where clauses.
[33ma924e06[m Don't require 'Self.' within the where clause of a constrained extension.
[33m83d336e[m Stop using TupleTypeElts in the type checking for arg/param matching.
[33m2b8b244[m [test] Use '-target' for cc args as well.
[33m608e844[m AST/stdlib: Stub out _OptionSetType as a known protocol.
[33m92cb2d1[m Staging option for NS_OPTIONS importer changes.
[33m301aae1[m Promote the "true"-Scope of a condition to an actual lexical scope.
[33mcd652bf[m stdlib: canonicalize 'x.count == 0' to x.isEmpty
[33m92e6051[m Revert "[stdlib] NSStringAPI: add stringByApplyingTransform"
[33m6263024[m Coerce UnresolvedMemberExpr to its assigned type if it has an argument, since the type might not match the return type of the function exactly in that case (CSGen only emits a conversion constraint).
[33m9b4dc24[m Runtime: (Almost) cleanse of global constructors and destructors.
[33m0de049b[m [test/IDE] Fix the test for non-osx targets.
[33m9cff70a[m More robust IRGen tests
[33mc31330e[m stdlib: canonicalize 'x.count == 0' to x.isEmpty
[33m3386d89[m When demangling as string type names that come from module names of the form __lldb_expr_<something> in a Swift program, hide the module The __lldb_expr modules are special as in they are autogenerated by LLDB and meant to not be user-accessible, so showing them adds visual noise for no user benefit
[33m984fcef[m Produce an error for generic parameters of functions if those parameters are not used in function signature.
[33ma3a2500[m Revert "Produce an error for generic parameters of functions if those parameters are not used in function signature."
[33mbbf2e6d[m Revert "IRGen: Use acquire semantics to load the inline "once" predicate."
[33me7547ad[m AST: Initial work to canonicalize generic signatures for mangling.
[33m898f8c5[m Add a staging option for interface type mangling.
[33m7ab0f98[m stdlib: fix coding style
[33mf0d5dfe[m stdlib: correct comment
[33m6068512[m Don't rely on incidental stdlib details in tests
[33me94aae0[m [Function Attribute] add target-cpu and target-features sets if they're non-null.
[33m0453656[m Adapt to Foundation API modernization: NSRectEdge is now an enum
[33m373b571[m [Bitcode Driver] add testing case for r28146.
[33m067d112[m Don't rely on incidental stdlib details in tests
[33m29e08e8[m [stdlib] Fix up Mirrors for the Linux bot
[33mebe3fdd[m Produce an error for generic parameters of functions if those parameters are not used in function signature.
[33m88c9ab5[m Make sure we validate the synthesized accessors for NSManaged properties.
[33medf1958[m Sema: ParamDecls never get accessors.
[33m8e4c83f[m IRGen: Use acquire semantics to load the inline "once" predicate.
[33me603126[m Factor out copying code completion results from one sink to another
[33mc40100a[m Factor use of the CodeCompletion sys::Cache into get() and set() methods
[33m563cd0a[m Lift the code completion cache interface into the header
[33me39fb72[m Expose a libIDE function to lookup the completions for a module
[33m6a15456[m Eliminate uses of println() where it is irrelevant
[33ma3270c1[m [stdlib] NSStringAPI: add stringByApplyingTransform
[33m96634b4[m Add a SILBuilder::emitDestroyAddr API that returns a pointer union and use it to implement SILBuilder::emitDestroyAddrAndFold.
[33m834b1f0[m Remove code I didn't mean to commit in r28167.
[33m220dc2c[m IRGen: Make the target OnceDone predicate value 32-bit-safe.
[33m6e114e3[m Reinstate r26814: Allow 'var' parameters in @objc methods.
[33m7b2a6e5[m IRGen: Emit the "done" check for Builtin.once inline.
[33m6c77b45[m [stdlib] Hide swift_ObjCMirror_count() from non-ObjC platforms.
[33m12a3879[m [test] Fix 1_stdlib/Reflection.swift for iOS (NSResponder => UIResponder).
[33m3abc8c4[m [test] Interpreter/return_from_main.swift requires the interpreter.
[33mf80c5bf[m [stdlib] Test new mirrors more portably
[33m5741bdc[m [stdlib] Prototyping progress for new Option Sets
[33m65be672[m [stdlib] Adjust expected output of legacy mirror tests
[33mc5b64b3[m [stdlib] Fix another bug in _getSuperclass
[33ma1f3ae3[m [stdlib] Properly reflect Objective-C superclasses
[33m85d681a[m strength reduce some non-performance sensitive code :-)
[33mf117756[m [stdlib] Fixes a bug in mirrors for ObjC superclasses
[33mb3c5883[m [stdlib] Kill redundant definition
[33m6f4e1bb[m [stdlib] Fixes for _getSuperclass
[33m6a5009e[m implement <rdar://problem/17013042> T! <-> T? conversions should not produce a diamond
[33m9038593[m remove some dead code, change the text of a theoretically dead diagnostic in case it ever comes up.
[33m9eb115f[m revert r28150, the perftestsuite isn't happy.
[33m1ffe86b[m implement <rdar://problem/17013042> T! <-> T? conversions should not produce a diamond
[33m6f7caf8[m fix a past-o in the dox.
[33m2aff7e7[m Debug Info: Mangle the AST type instead of the SIL type for local variables and function arguments.
[33m1499260[m [test] Add type annotations to Algorithm.swift.gyb.
[33mac15eed[m [Bitcode Driver] we allow -parse-stdlib in BackendJobAction.
[33m11f2a4f[m fix IRGen/bitcast.sil on the iOS bots.
[33m841c4c7[m Be more aggressive about access control consistency when offering warnings.
[33m61d6222[m Revert "Generate an empty Mirror for Mirror itself - the internal cruft of our reflection magic is not that interesting, and looks quite ugly in playgrounds"
[33m71198a2[m Test error-coverage diagnostics more completely.
[33m6fcc308[m Generate an empty Mirror for Mirror itself - the internal cruft of our reflection magic is not that interesting, and looks quite ugly in playgrounds
[33m23cc507[m Fix trivial markup bug.
[33m753b101[m Propagate return values from main() in -interpret mode.
[33m6a31cb2[m IRGen: use concrete inherited conformances for archetypes
[33mf925efc[m [ClangImporter] Don't import macros named "true" or "false".
[33m3c30738[m Adjust to SpriteKit nullability annotations in the new SDKs
[33m5d96abc[m Revert "Adjust SpriteKit overlay to SDK change."
[33me40e6eb[m Update the test for modernization of QuartzCore APIs
[33mb186be4[m Catch errors in top-level code.
[33m413cfa2[m [test] Rename union.swift to enum.swift.
[33m3cf2915[m [serialization] Force-serialize derived decls for local types too.
[33m2f1f9b5[m Rename SIMD.swift -> simd.swift for case-sensitive filesystems.
[33m249239e[m [Bitcode Driver] make sure -embed-bitcode works with -force-single-frontend-invocation.
[33m43c96de[m Sema: slightly better diagnostics for @objc
[33m222781b[m Sema: Rename ObjCReason::DontDiagnose => DoNotDiagnose
[33m58f0b46[m Implement @nonobjc attribute
[33m12d835c[m Sema: clean up @objc attribute handling a bit
[33m33b74a0[m GLKit depends on simd through ModelKit
[33m11b820d[m Ban extension of the 'AnyObject' protocol.
[33me31b915[m fix <rdar://problem/20800015> Fix error message for invalid if-let
[33m88258ed[m Allow substitution^2's to look up the conformance for a class to AnyObject.
[33mc3302be[m Adjust SpriteKit overlay to SDK change.
[33m3940797[m IRGen: Do a better distribution of functions to multi-threaded compiled modules.
[33m94b3f8c[m IRGen: improve debug logging for multi-threaded compilation
[33m40c1160[m Revert r28111 "rework the peephole for optional-to-optional casts to be more specific" and r28105: "implement <rdar://problem/17013042> T! <-> T? conversions should not produce a diamond"
[33m8a28d46[m Sema: Teach availability checking about require/else.
[33me2962ed[m SILGen: Implement recursive local function references.
[33m92ec219[m rework the peephole for optional-to-optional casts to be more specific.  Peepholing on inject_into_optional/bind_optional_expr isn't safe because we don't know what optional_evaluation_expr is actually being bound, or if it is bound to the result of the injection.
[33m6094880[m tighten up test, NFC.
[33m7724e92[m this test is fixed.
[33mf3416ab[m fix a bug introduced in r28104: we need to create a PBD to hold the vardecls we parsed, otherwise the type checker gets confused later.  This fixes these regressions:
[33m7733b06[m Enhance IRGen to know a simple heuristic in emitValueBitCast to avoid going to the stack when two explosions will end up with the same elements. This helps with optional to optional conversions.  We now compile:
[33m0286c01[m remove some dead cases.
[33madd4909[m implement <rdar://problem/17013042> T! <-> T? conversions should not produce a diamond
[33mb6a6627[m stdlib: replace let-else by require-else
[33mb6ad8d5[m Teach emitBindOptional() to disable the cleanup for the optional it is testing on the nil path.  This avoids emitting a "release" operation on an optional temporary that is always guaranteed to be dynamically nil.  This cleans up the generated code for x?.foo().
[33mfec2f22[m Enhance SILGen of InjectIntoOptionalExpr/BindOptionalExpr/OptionalEvaluationExpr to not drop optionals in memory all the time.  We now generate a lot better code for them in many cases.  This makes generated SIL more readable and should help -O0 perf.
[33m7927a23[m remove compiler support for let/else.  This simplifies PBD back to being an unconditional binding, yay.
[33md834f44[m more let/else -> require to help out the bot.
[33mba4186b[m remove parser support for let/else.  I left in a cheesy fixit to help migrate code, but it isn't great.  It needs to be removed before wwdc (tracked by 20794825)
[33m079e8b9[m move stdlib from let/else to require.
[33m61e1e4a[m add accessors for a member, NFC.
[33md04cc58[m Sema: Refine availability context in IfStmt guard conditions following #available()
[33m2d3eba9[m IRGen: Reuse value witness table projections.
[33me340bf4[m stdlib: fix coding style
[33me5e4b38[m Eliminate a use of println() where it is irrelevant
[33m204bb04[m In closure 'throws' inference, infer 'throw' as throwing.
[33m1c64eee[m Add testcase for <rdar://18996669> which seems to be fixed already
[33ma18b016[m stdlib: Make SceneKit and SpriteKit overlays depend on simd.
[33mfaf085c[m Enable SIMD import by default.
[33m11fcbda[m Add Steve Canon's simd module to the stdlib.
[33md047375[m ClangImporter etc.: Remap C vector types to nested BaseType.VectorN types.
[33mf386a58[m CMake: fix dependencies for libSwiftIDE
[33m5c171fd[m Parsing, type-checking, SILGen, and IRGen for try!.
[33mbde7daa[m Revert "[stdlib] NSStringAPI: add stringByApplyingTransform"
[33ma620961[m Add FIXMEs to tests affected by rdar://problem/20788802
[33maf07713[m [stdlib] NSStringAPI: add stringByApplyingTransform
[33mfd9f274[m Update tests and remove XFAILs
[33me4f2cef[m Eliminate archetypes from interface types.
[33mbdc1e10[m [stdlib] 80-column fixups
[33m68b4314[m [stdlib] Move String.CharacterView's implementation...
[33m1198e2a[m [stdlib] Fix a bug I committed.
[33m58b5e1d[m Implement error handling in protocol witness and reabstraction thunks.
[33m1947d70[m [stdlib] add some // @testable comments...
[33m5d1da8d[m [stdlib] Update String doc comments...
[33m8782859[m [stdlib] Add a caveat to doc comment
[33mb08a57f[m stdlib tests: fix coding style
[33m0388c87[m Fix validation tests for error-handling import.
[33m2864585[m [load-store-opts] Improvements to let-propagation based on the comments by Chris, Michael and Arnold.
[33mb641cd9[m When stripping "AndReturnError" causes a conflict, don't do it, but do continue to remove the error parameter.
[33m8d9556c[m Fix this test, again.
[33m9065880[m When an error import would conflict with another method, preserve the original method name.
[33m4ce1891[m [stdlib] String is no longer a SequenceType
[33m54519ea[m [test] Update test/IDE/print_clang_foundation.swift for error handling.
[33ma586753[m [IDE] Implement generating the Swift interface for an C/ObjC header
[33md72ae21[m When building the SDK overlay separately, build SwiftPrivate
[33m0011b3a[m rename "unless" to "require" and give it an 'else' keyword.
[33m5bc23ac[m Add wrappers around Builtin.isUnique.
[33m2d872dc[m Fix linker_options_objc test: incorrect REQUIRES and options
[33md5073d9[m rework StmtCondition to be based on patterns initializers and boolean conditions instead of being wrapped around PatternBindingDecl.  When let/else goes away, PatternBindingDecl will become a lot simpler.
[33mdf55a22[m Update for error-import.
[33m15dbf5e[m Properly invalidate non-local stores in global load/store opts.
[33m91c64fd[m Stop re-exporting the Objective-C library
[33macba19a[m Debug Info: Remove an early exit that prevented the swift frontend from emitting indirect pieces — LLVM (ToT, 700) now supports this.
[33m5a153b6[m Remove the affirmative -import-error-handling option.
[33mac50cbc[m Enable error-handling in import by default.
[33mfbd7673[m Clang Importer: Rename the special vector type module to "simd".
[33m0bd4502[m IRGen: Cache the result of local metadata accessor calls.
[33m82b190c[m refactor type checking of initializers in PBDs a bit, this exposes functionality better and silences a few follow-on errors by applying ErrorType to decls more consistently.
[33mb33994f[m [Driver] Bump required versions of the SDKs.
[33m95856c0[m If the generated header doesn't change, don't touch the original file.
[33m60c3154[m Add swift::moveFileIfDifferent.
[33m4ca28df[m Test suppression of warn_unused_result with "_ = ".
[33mb2f1ffb[m stdlib: constrain CollectionType.SubSlice further
[33m8beb642[m Remove uses of println() from test/DebugInfo/closure-multivalue.swift
[33m155fa0a[m Speculatively revert my change to test/DebugInfo/closure-multivalue.swift
[33m401a3f0[m stdlib: protocol extension tests: check that we don't leak users' closures
[33m331b570[m Remove reverse subtype constraint between Objective-C classes when type checking checked cast via bridging. It prevented bridging upcasts using 'as!' from typechecking; we should emit an 'as!'->'as' warning instead.
[33mf138a84[m Instead of making a temporary uncurried function type, just handle curried method types directly in AbstractionPattern.
[33m6c3dbab[m [ASTPrinter] Make sure to print keyword arguments for subscripts.
[33macf0c49[m Revert "Remove reverse subtype constraint between Objective-C classes when type"
[33m9f5437e[m Make 'toInt()' unavailable instead of deprecated.
[33m7d41305[m Remove reverse subtype constraint between Objective-C classes when type checking checked cast via bridging. It prevented bridging upcasts using 'as!' from typechecking; we should emit an 'as!'->'as' warning instead.
[33mfbbd834[m Add test case from rdar://problem/20750480, which no longer crashes.
[33m5cfe5b3[m Diagnose attempts to extend a protocol via a typealias.
[33m37088d4[m Parse: Update parsing of #available(...) to no longer user >= version comparison
[33m0c82636[m Runtime: Enable run-time availability checks for tvOS
[33mec95a37[m rework the disambiguation logic that determines whether a token stream is likely to be a c-style for loop or a for-each loop.  NFC except in one recovery cases where we already spray crazy diagnostics.
[33m9638611[m Use AbstractionPattern to find Clang types for inputs and results when finding bridged types, rather than reinventing (well, pre-inventing) the same thing elsewhere.
[33m5a54545[m Make deprecated protocols 'Printable' and 'DebugPrintable' unavailable.
[33mde635a8[m Implement the 'warn_unused_result' attribute.
[33m82364d6[m tests: remove uses of println() that are not relevant to the tests
[33m2ffb5bb[m diagnose always-true conditions.
[33m0fce5c7[m tests: remove uses of println() that are not relevant to the tests
[33m71faa43[m Update the comment for r28005.
[33m4f366b1[m Do not treat iOS as active on tvOS.
[33m09c8271[m tests: remove uses of println() that are not relevant to the tests
[33mdf6823e[m tests: remove a useless println() call
[33m21b8a93[m tests: don't use println() in the BridgeStorage test, it is not FileCheck-based
[33mc35e7d4[m tests: don't use print() in tests where it is irrelevant to the thing being tested
[33m142f41f[m [Bitcode Driver] implement whitelist of compiler options for Swift.
[33m26b3f38[m Fix a bug with importing inherited factory methods with foreign-error conventions.
[33m3cad008[m stdlib: Comment out NSArray: CollectionType conformance.
[33mc7b9805[m Clang importer: Rename buildGetter/SetterThunk to buildSubscript.etterDecl.
[33m2f2b936[m Change Printable/DebugPrintable to CustomStringConvertible/CustomDebugStringConvertible in docs.
[33mb666752[m stdlib: Uncomment FIXME'd NSArray: CollectionType conformance.
[33mfa8e2aa[m ClangImporter: Associate imported subscript accessors with Clang nodes.
[33m2151cf8[m UIViewMirror should factor in device scale factor
[33me1e83eb[m Reject 'unless' blocks that fall through.
[33me2a7ec2[m implement SILGen support for 'unless'
[33m2cf3fd3[m Fix scoping so that the variables parsed in an 'unless' are inserted into the parent scope.
[33m79ea1e0[m In the body of an 'unless', reject uses of any variables bound in the unless.
[33m6849ebd[m SIL printer: Disambiguate context archetypes with name collisions.
[33m9d2d52b[m SILWitnessVisitor: canonicalize protocols for associated types
[33m18f0915[m Factor out SILWitnessVisitor from SILGenConformance and IRGen's WitnessVisitor
[33m41c0626[m SILGenConformance can use ASTVisitor instead of Lowering::ASTVisitor
[33m9f6dc43[m IRGen: Refactor WitnessVisitor to use ASTVisitor instead of hand-rolled dispatch
[33m6b67758[m IRGen: remove requiresProtocolWitnessTable()
[33mafd9e2b[m [stdlib] Fix comment typo
[33mfa402df[m Debug Info: Anonymous functions should only have a linkage name.
[33m592a8c8[m Stop using getProtocols() in the Clang importer.
[33m5de47e9[m Remove uses of getProtocols() from serialization.
[33mf9b09aa[m Eliminate uses of getProtocols() from declaration checking. NFC
[33mc180bfc[m Remove the SIL dynamic-cast checking's dependency on getProtocols(). NFC
[33m103526b[m Remove code completion's dependencies on getProtocols().
[33m46d61c5[m Remove another use of getProtocols(); NFC
[33md868934[m Decouple conformance deserialization from getProtocols().
[33m009b38d[m Stop using getProtocols() in IRGen. NFC
[33me542d4b[m Move more getProtocols() callers over to getInheritedProtocols(). NFC
[33m46f760a[m Teach ProtocolDecl not to depend on getProtocols().
[33mcf1bb3a[m Remove the old "delayed protocol conformances" code.
[33ma354164[m Switch name lookup over to the protocol conformance table.
[33md0282e0[m Switch the AST printer over to getLocalProtocols().
[33m8a8895d[m Populate the conformance lookup table for a deserialized protocol.
[33me514ef8[m validation-test: Fix test case to use changed let syntax
[33m30c3489[m Don't speculate initialization of globals with limited availability.
[33mebbecf5[m Do not inline "availability.osversion" functions in mid-level inliner.
[33m3ad2b67[m stdlib: add @_semantics("availability.osversion") to _stdlib_isOSVersionAtLeast
[33mc6aa041[m Add parser/ast/sema/sourcekit/etc support for 'unless' statement. SILGen support still missing.
[33ma8b8653[m testcase for QoI of the new 'if let' model:  - Rewrite "if let x? = foo()" to "if let x = foo()"  - Rewrite "if let <complex refutable pattern> = foo()" to "if case let"  - Handle "if let case" just as well as "if case let" and fixit it to the correct form.
[33m31c01ea[m Change the meaning of "if let x = foo()" back to Xcode 6.4 semantics.  The compiler includes a number of QoI things to help people write the correct code.  I will commit the testcase for it as the next patch.
[33m62ad8b2[m Fix typo in Decl.h
[33me8b6b0a[m Don't use println() in c_globals.swift test
[33mfe0a335[m docs: add a rationale for use of BooleanType in the standard library
[33meaef05c[m docs: add a rationale for lazy functions on sequences and collections
[33m5b2de9f[m Add document on Swift Markup Doc Comments
[33mffc6f62[m stdlib: doc comments: clarify the behavior of algorithms on SequenceType
[33m569273a[m InstrProf: Add support for the do-catch construct
[33mc7a0963[m Add --enable-throw-without-try option to suppress warning about missing 'try'.
[33m018ce2e[m Weaken assertion to work around the UIKit variadic method import hack.
[33mec31f6d[m Revert "Add wrappers around Builtin.isUnique."
[33ma815ab7[m Don't eagerly check protocol conformances for Clang-imported AST nodes.
[33mf985ba6[m Conformance lookup table: delay parsed extensions when we have no resolver.
[33m382caab[m Treat the inherited conformances of a protocol conformance as ‘used’.
[33m77f58e9[m Fix ObjC method abstraction patterns for foreign errors.
[33maa4f01b[m fix a fixit I accidentally broke and re-adjust a testcase back to the way it was.
[33m4063e4f[m Remove workaround for rdar://19537198 (all bots are on Xcode 7).
[33m384ae28[m SILGen: Emit @objc protocol extension initializers.
[33m8346eba[m Revert "Update test cases for Builtin.isUnique."
[33m8d14a3d[m LoopRotate: Don't rotate single basic block loops with split backedges
[33m16ab7b4[m stdlib: rename equalElements() to elementsEqual() per API review
[33m5ebce5b[m Fix typos in test
[33md576eb9[m [stdlib] Merge experimental inheritance support for mirrors
[33m27448f1[m [stdlib] == and != for metatypes and optional metatypes
[33m59185be[m Add the ability to write an 'if case' condition.  It allows an arbitrary refutable pattern, and can be chained together in conditions just like our other 'if let' constructs.  This only adds functionality, it doesn't change anything yet.
[33m041bf1c[m Update test cases for Builtin.isUnique.
[33m09db0dd[m Add wrappers around Builtin.isUnique.
[33m9ec8fe5[m Convert stdlib classes to use Builtin.isUnique.
[33mea8f2de[m stdlib: use let-else in zip() implementation
[33md8c140f[m stdlib/Zip: use more descriptive names for non-API identifiers
[33mc6d42db[m Adapt to MD* => DI* renaming of debug info types
[33mbe05690[m Revert "stdlib/Zip: use more descriptive names for non-API identifiers"
[33mb0e7cbd[m CMake: Use the USES_TERMINAL option for tests
[33m1551fd0[m stdlib/Zip: use more descriptive names for non-API identifiers
[33m70d728e[m stdlib: remove the staged API changes for zip()
[33mea344fc[m tests: use println() instead of print() with a "\n"
[33mea498e9[m Revert "[stdlib] Merge experimental inheritance support for mirrors"
[33m9407cc5[m [stdlib] Merge experimental inheritance support for mirrors
[33m6849d8d[m Only run 20740573 test case if ObjC interop is available.
[33mdcd3055[m [load-store-opts] Avoid re-loading values of "let"-variables
[33m0c6e412[m Rename and reorganize some error-handling tests.
[33m64d48c8[m GlobalLoadStoreOpts: correctly update the data structures in case instructions are deleted.
[33m2d4bcfc[m Add test case from 20740573, fixed by r27901.
[33mc907540[m Improve debug logging in GlobalLoadStoreOpts. NFC.
[33mb5d0896[m Un-XFAIL a SceneKit testcase, the blocking issue is fixed
[33m1407b45[m Fix an IRGen test to not rely on autogenerated type names
[33m8d4ad3f[m Fix an off-by-one error in r27902.
[33ma741b1b[m stdlib: mark Range.isEmpty for removal, it will become redundant soon
[33me0affbc[m stdlib: fix coding style
[33mbe4b218[m Re-enable test on armv7 now that we have a fix for the underlying LLVM issue (r236050).
[33m8d3f9c8[m Fix build on case-sensitive filesystems.
[33mcbcba9f[m SILGen: Relax assertion to allow class protocol extension inits to compile.
[33mbd57e43[m Make TypeCheckError more paranoid in the face of invalid types.
[33m92acb40[m Don't synthesize function bodies after type checking is over; they won't get type checked and verification will fail.
[33m6de9d84[m SILGen: Handle initializers in protocol extensions.
[33mdbf1dae[m Finish the SceneKit overlay for -[SCNSceneSource entryWithIdentifier:withClass:]
[33mfdcecfc[m Move error-handling diagnostics to Sema and check try coverage.
[33m426510c[m Create an ErrorExpr when expression parsing consumes tokens but doesn't build anything.
[33m158e23f[m Make sure that we complete any conformances that are used in the AST.
[33m4ed45ec[m Revert "Generic specializer: don't allow specialization if it uses an incomplete conformance."
[33ma30ca2a[m Replace bool parameter to TypeChecker::conformsToProtocol() with an option set.
[33m4d197dc[m Revert "stdlib: change sort() and sorted() into methods"
[33m17e8328[m Update the check line to fix the test.
[33m3f675c5[m Emit calls to swift_willThrow only in throw sites (not in re-throw sites).
[33m41cf860[m Add is_unique documentation.
[33m6dea1d0[m SIL Parser support for is_unique.
[33m61d2c01[m Make SILPasses (ARC & Pin removal) aware of IsUniqueInst.
[33ma174aa4[m Add AST and SILGen support for Builtin.isUnique.
[33m152de6b[m Generic specializer: don't allow specialization if it uses an incomplete conformance.
[33m1043082[m stdlib: transform the FIXME into a proper FIXME
[33mc53cbc6[m stdlib: when linking arclite, link in CoreFoundation
[33m5fe447d[m InstrProf: Fix the coverage of the condition in repeat-while
[33m4781414[m Remove SwiftExperimental.dump() - I am iterating on this as part of LLDB
[33m514ef30[m (De-)serialization for foreign error conventions.
[33m7ae5ba8[m [Bitcode Driver] make sure -embed-bitcode works with -emit-module.
[33m3e8c871[m Emit calls to swift_willThrow as part of SILGen using a builtin.
[33mb05c372[m stdlib: change sort() and sorted() into methods
[33m7dafdf8[m Revert "(De-)serialization for foreign error conventions."
[33m976620b[m random tidying up, rename the raw_ostream form of ConstraintSystem::dump to ConstraintSystem::print for consistency with other parts of the compiler.  Enhance CS::print to print the ID # of a Type Variable, so you don't have to count them to realize that you're looking at typevar #13
[33m23b713a[m fix typo in diagnostic.
[33m88e5065[m fix <rdar://problem/17564699> QoI: Structs should get convenience initializers
[33m08c8ab2[m rename a testacse, NFC.
[33ma487a9e[m (De-)serialization for foreign error conventions.
[33m498a71c[m Runtime: Handle large metadata allocations.
[33m1708e04[m Reapply "IRGen: Use a larger bit size for integer literal to float conversion."
[33m81160c4[m Revert "IRGen: Use a larger bit size for integer literal to float conversion."
[33m83e4123[m IRGen: Use a larger bit size for integer literal to float conversion.
[33ma00b7f0[m Strip "AndReturnError" from method base names when removing an initial error out-parameter.
[33m2a366df[m Remove SILType::isExistentialMetatypeType().
[33m640fd7f[m Add FileCheck for IR.
[33m519dfca[m IRGen: fix crash on x.dynamicType.dynamicType.
[33m7abe206[m runtime: getpagesize() is unportable, use sysconf()
[33mf53cb8a[m Avoid null conformances when comparing a potential requirement and witness.
[33mff6f084[m tests: remove -disable-access-control from Sort.swift.gyb
[33m2b27fc7[m Remove the stylistic error about named parameters that start with "with".
[33m07f00c5[m Debug info: Fix the mangling for builtin name alias types. rdar://problem/20597521
[33mb4436bf[m Runtime: Use a per-cache bump allocator to instantiate metadata.
[33m9e6faca[m Enhance constraints::resolveLocatorToDecl to look through IdentityExpr's like parens, fixing: <rdar://problem/18400194> Parenthesized function expression crashes the compiler
[33m5e8b90d[m add \n to another debugging dump() method.
[33m8d17f85[m add a testcase that fails with the simple-and-obvious implementation of defer, and add a comment to DeferStmt that references the issue.
[33m09b486d[m ObjC Header missing comment markers for some newline cases
[33m5248ede[m Rework the AST representation of CollectionExprs to maintain a list of their elements, instead of abusing TupleExpr/ParenExpr to hold them.
[33mfd14e70[m stdlib: rename find() to indexOf() per API review
[33m82baf4e[m Delete now unused variable
[33m8322b06[m Revert "Suggest '==' when trying to constraint a generic type by a concrete type."
[33m8016bc0[m Canonicalize cmp_eq %X, -1 -> xor (cmp_eq %X, 0), -1
[33me5a038f[m Nuke dead code
[33m0bdcbd2[m Nuke old dominator based simplification code that is subsumed by the dominator based jumpthreading commit.
[33m3812583[m DominatorBasedJumpThreading: Resurrected
[33m598eb60[m ABCOpts: Let's handle loops with split backedges
[33mbfcc1ff[m Make splitBasicBlock public.
[33mc366d18[m Add an use iterator to iterate over a set of uses of a value while ignoring expect intrinsics.
[33m5272408[m SimplifyCFG: Canonicalize cond_br (not %cond) bb1, bb2 to cond_br %cond bb2, bb1.
[33m0c6363a[m SILValue: Add an api to strip expect intrinsics
[33mea6e5e7[m InlineCost: expect intrinsics should be free
[33mbde2409[m SimplifyCFG: Fix a bug in tryToReplaceArgWithIncomingValue
[33m8ed5229[m SimplifyCFG: Appease SILLocation verification
[33m95fe505[m Suggest '==' when trying to constraint a generic type by a concrete type.
[33m3546d03[m Fix the unified build with cmark.  Thanks to David Farler for pointing out where I needed to look.
[33m292f57a[m Revert "Add already-fixed test from rdar://problem/20549848."
[33m8494651[m Substantially rework CSApply's building of argument lists for calls.
[33mdfd7ccb[m Test case from rdar://problem/20588474.
[33m3daae5b[m Serialize cross-references to constrained extensions with a generic signature.
[33md3d5e9b[m Add already-fixed test from rdar://problem/20549848.
[33mc999f87[m StdlibRationales: add Dave's writeup about high-order functions
[33mfc53b6e[m [CodeCompletion] Expose some result creation APIs for SourceKit
[33mfafd0b8[m Attempt to properly handle static global variables
[33m0ef3602[m stdlib: constrain CollectionType.SubSlice to _CollectionDefaultsType
[33m5a04d7d[m Fix test case on i386
[33mb9c10c0[m Revert "fix <rdar://problem/20494437> SILGen crash handling default arguments"
[33mc89f389[m Use the imported type of a property for the return type of the property getter and the param type of the property setter.
[33m6e68fd7[m stdlib: remove a FIXME that is fixed now
[33m5ae502d[m Revert "NSStringAPI: Remove useless forced cast"
[33mbdac5fe[m IRGen: Implement emitIndirectCaseTest for dynamic multi-payload enums.
[33m889b8d3[m IRGen: Fix implementation of emitValueCaseTest for multi-payload enums.
[33m597578b[m Fix comments for enum runtime functions.
[33md314ed1[m fix <rdar://problem/20494437> SILGen crash handling default arguments
[33mfbfbc2a[m Fix a bug in a code that assumes that builtins must have two operands.
[33m0de6e67[m NSStringAPI: Remove useless forced cast
[33m892b5af[m IRGen: Simplify LinkInfo::createVariable()
[33me2c6c7e[m [stdlib] Fix "#" parameter warnings due to new rules
[33m9006fca[m Rename SILBuilder::emitDestroyAddr => SILBuilder::emitDestroyAddrAndFold.
[33m3549d46[m Remove -enable-static-init option from GlobalOpts.
[33ma3aa89d[m Remove Callback from SILBuilder and instead rename emit{StrongRelease,ReleaseValue} => emit{StrongRelease,ReleaseValue}AndFold. Then introduce a new method emit{StrongRelease,ReleaseValue} that returns a PointerUnion containing the increment to be deleted if it exists. This obviates the need for the callback.
[33m583d7aa[m Add a delete callback to SILBuilder so that if we delete retains and releases in emitStrongRelease, emitReleaseValue, passes (like SILCombine) can update their state. Also teach the closure deletion code how to detect such a case and not send a notification message if no new instruction is created.
[33md001f3a[m fix AbstractionPattern::dump to print a newline, so it can be used from lldb.
[33m2d227db[m remove the dead CallerDefaultInitialize case from visitTupleShuffleExpr.
[33mcaeca69[m fix <rdar://problem/19086357> SILGen crashes reabstracting default argument closure in members
[33m6b1969a[m [AST] Make MemberRefExpr source range include start of implicit base expression if valid.
[33md494735[m Teach capture promotion how to handle all types of partial apply arguments. We technically don't need it now but it would be technical debt to leave it unfixed.
[33m16522c3[m fix <rdar://problem/19623566> Obscure diagnostic for assigning negative numbers to unsigned
[33m3408c00[m stdlib: fix a typo in a trap message
[33m0b5c112[m improve and consistify diagnostics for non-lvalue inout arguments.
[33m20c74c4[m update validation tests for improved diagnostics.
[33m227e676[m clean up diagnoseFailureForAssignExpr, no significant win though.
[33m0126311[m Enable dynamic multi-payload enums.
[33m4afbe78[m Runtime: Entry points for dynamic multi-payload enums.
[33m3dafb24[m IRGen: Call the runtime to initialize dynamic multi-payload enum metadata.
[33m0b339b9[m IRGen: Populate nominal type descriptor metadata for enums.
[33m6349fd7[m IRGen: Bitwise-take peepholes for multi-payload enums.
[33mfbf7c9c[m IRGen: Value semantics for dynamic multi-payload enums.
[33mff2d1df[m IRGen: Switching for dynamic multi-payload enums.
[33md95df00[m IRGen: Test dynamic multi-payload projection.
[33m27266ff[m IRGen: Codegen for dynamic multi-payload tag injections.
[33mc3bb5e7[m IRGen: Handle empty payloads in multi-payload enum layout.
[33mf47c47c[m Add regression tests for some fixed multi-payload cases I spot-fixed in the prev commit.
[33m723697f[m IRGen: Don't use spare bits in fixed instances of dependent multi-payload enums.
[33m9f36074[m fix <rdar://problem/19711233> QoI: poor diagnostic for operator-assignment involving immutable operand
[33mc625cca[m Revert "fix <rdar://problem/17686979> "var" arguments are rejected for @objc conformance"
[33m241bf13[m Make errors_optimized.sil test platform-independent without compromizing CHECK line accuracy
[33mb5c87e7[m un-xfail and update two tests.
[33me9e0364[m Disable two failing tests.
[33m43c7334[m fix two QoI issues:  - <rdar://problem/16306600> QoI: passing a 'let' value as an inout results in an unfriendly diagnostic  - <rdar://problem/16927246> provide a fixit to change "let" to "var" if needing to mutate a variable
[33mda0f1b9[m Delete dead code.
[33mbebbdfe[m fix <rdar://problem/17691565> attempt to modify a 'let' variable with ++ results in typecheck error not being able to apply ++ to Float
[33m0ee38ba[m ASan build fix: overlapping memcpy and compiler flags in swift-ide-test
[33m5e9328a[m Fix: <rdar://problem/17686979> "var" arguments are rejected for @objc conformance
[33mabb2491[m fix <rdar://problem/17686979> "var" arguments are rejected for @objc conformance
[33me58020b[m defer using ClosureExpr's is an implementation detail, don't require self. qualification inside of them.
[33m82ef514[m Reimplement the AST, Sema, and SILGen of defer to be closure based. Now we bind the defer body into a ClosureExpr and emit it at the point of the defer.  At any exit points out of the controlled region, we emit a call to the closure.
[33md192c5a[m Fix a typo in the CHECK line
[33mccf6b7e[m Make the test target independent
[33m217d6ba[m Don't emit calls to swift_willThrow in optimized builds.
[33m6fb676b[m remove some dead state that I added but didn't end up using.
[33mb43a8b5[m Diagnose jumps out of defer statements in Sema.  This doesn't handle throw (somewhat ironically, given that we added it for throw) because we model throw as an Expr currently which makes it more difficult in Sema.  SILGen catches this situation and any others that I didn't remember to handle here.
[33mfa4f1d8[m Recommit r27756 with an update to diagnostic_constant_propagation_int.swift, which is iOS only.
[33m5fa05e9[m implement SILGen support for 'defer' statement.  The only missing piece now is Sema support for detecting invalid exits out of defer bodies.  That said, SILGen will also detect it, and produce an error if sema misses something, e.g.:
[33mee96164[m implement parsing, AST, and basic Sema support for 'defer'.
[33m79b976d[m '#if 0' a big function that is never called to silence a warning.  Someone should look at this and nuke the function if it really is dead.
[33m4a227f2[m Speculatively revert "fix <rdar://problem/18213320> enum with raw values that are too big are not diagnosed"
[33md5ae69b[m fix <rdar://problem/18213320> enum with raw values that are too big are not diagnosed
[33m16cbd65[m Testcase update for r27752.
[33m588ab7a[m Fix up test to fix build.
[33mf71a329[m fix <rdar://problem/17569958> #endif not parsed correctly when occurs as last line in file
[33m61afbe9[m Fix <rdar://problem/20193929> Can't "return nil" in a convenience initializer
[33mabb34fa[m Teach mandatory inlining how to use closure deletion infrastructure.
[33maf1be50[m Change SILCombine to use tryDeleteDeadClosure.
[33meed6317[m Add a callback struct to tryDeleteDeadClosure() that clients can use to be notified of instruction insertion and deletion.
[33m6891258[m Teach tryDeleteDeadClosure how to properly delete all types of captured arguments.
[33ma475a33[m implement <rdar://problem/19786845> Warn on "let" and "var" when no data is bound in a pattern
[33m7b3125c[m remove unimportant old XFAIL'd test
[33md1a175d[m Linux test fix: remove XML schema check on CHECK lines
[33m8f3be05[m Typo fix: NFC.
[33m7886175[m Linux Test Fix: Don't include XML validation in check string
[33m3fd8906[m Don't import Foundation in comment conversion tests
[33me4e1254[m Reapply "SimplifyCFG: Fix a bug in the jump threading code"
[33mba6c367[m Update some Markup files with license headers.
[33m0a1c330[m Build fix: remove absolute path from my machine
[33m50355e9[m Revert "SimplifyCFG: Fix a bug in the jump threading code"
[33md84a95f[m Handle foreign error conventions in foreign-to-native thunks.
[33mf6090c1[m stdlib: make CollectionType._prext_isEmpty dynamically dispatched
[33m80dc495[m stdlib: fix coding style in HashedCollections
[33m44ef30a[m stdlib: fix grammar in an error message
[33mbc50b2f[m stdlib: stop using CFSetCreateCopy() in set bridging
[33mba6920e[m stdlib: stop using CFDictionaryCreateCopy() in dictionary bridging
[33m309bc89[m stdlib: update overlay code for Foundation nullability audit
[33m3a59a44[m stdlib: adjust _NSSetCoreType to match Foundation nullability audit
[33mce95ac2[m stdlib: adjust _NSDictionaryCoreType to match Foundation nullability audit
[33m986f4ce[m Make errors.sil test more strict.
[33mca5876a[m swiftMarkup Library
[33m9e28dc7[m Update standard library doc comments to Markdown
[33m6c8e9ac[m change some calls to dyn_cast in boolean contexts to isa.
[33md18740d[m Fix <rdar://problem/19773562> Closures executed immediately { like this }() are not automatically @noescape
[33m9921573[m SimplifyCFG: Fix a bug in the jump threading code
[33m33fc37d[m Fix rdar://20477982 - REGRESSION: Accessing let-property with default value in init() can throw spurious error: 'self' used before all stored properties are initialized
[33mecbf788[m Add documentation to the macros in MetadataKind.def.
[33mc3c5eed[m Fix test to work on iOS.
[33me43570f[m Add MetadataKind.def, a header for metaprogramming with MetadataKinds and use it to update LeaksChecker in a robust way to handle new metadata kinds.
[33m2c909b4[m Remove Objective-C selector splitting options.
[33m8a3e78f[m Mirrors can be compiled on non-ObjC runtime
[33mb2cc34c[m Remove '#' for making parameter names into argument labels.
[33m0e8f0d6[m fix <rdar://problem/20679379> DI crashes on initializers on protocol extensions
[33m583f4f0[m Fix the test and make it use Int64 instead of Int to unbreak the iOS build.
[33m3de8ec3[m Sema: Consider availability of conforming type when diagnosing protocol witness availability
[33maf4666b[m Sema-based coverage testing for error handling, including try.
[33m9b2b75b[m IRGen: Insert a call to swift_willThrow to allow lldb to place a breakpoint.
[33ma1da38c[m Adapt IRGenDebugInfo to upstream LLVM IR Metadata changes.
[33mccffa33[m [stdlib] Apply class Mirror review feedback
[33m4b067db[m stdlib: fix indentation
[33m0523a09[m Update validation testsuite for the argument label default changes.
[33m5b767ef[m Fix three unintended API changes from the argument label defaults change.
[33m793b332[m Implement the new rules for argument label defaults.
[33m2f15b53[m Add support for 'catch {' as a synonym for "catch let error {".
[33m22f2923[m fix <rdar://problem/20075582> Swift does not support short form of dictionaries with tuples (not forming TypeExpr) TypeExpr formation wasn't handling tuple labels.
[33m11ce7a7[m Rename the test and make it use Int32 instead of Int to unbreak the iOS build.
[33m2218118[m This is a version of dump() based on the new Mirror API This is meant as both a porting effort and as an experimental bench for things the debugger might want dump() to do
[33m3973d37[m when emitting the epilog 'return 0' for top level code, mark it as autogenerated, fixing <rdar://problem/19664185> Pointless "always evaluates to true" warning in while true loops at the top level
[33medee327[m Per yesterday's specification update, initializers imported as throwing should not also be marked as failable.
[33m3f572ca[m Remove hack to bind throwing initializer overloads based on the presence of a throwing initializer in the overload group.
[33m3149910[m Improve the removal of redundant global-init calls in GlobalOpt.
[33mf362570[m Change IRGenModuleDispatcher to a reference in IRGenModule.
[33m58f43c0[m Add comment and assert in IRGenDebugInfo.
[33mc021947[m Let the static_initializer test also test if the optimization is done by default, i.e. without -enable-static-init.
[33md61a191[m [AST] Print requirements of protocol extensions.
[33mcda450f[m Enable static initializer optimization by default.
[33m2217e38[m Compare the boolean results of isProtocolOrProtocolExtensionContext().
[33mf2e894b[m Remove useless shadowing code for erroneous redeclarations. NFC
[33mf9150a5[m [AST/Serialization] Add a string for the generic requirements "as written" in the module file, to use it for the printed interface.
[33mcf4c23b[m After we've forced external declaration members, always perform name lookup again.
[33m65dcd98[m stdlib: rename _CollectionGeneratorDefaultsType.{Element -> _Element}
[33m267744c[m Disable an assertion to unbreak code-completion
[33m8e74c1d[m Revert "Disable IRGen tests" and update tests for codegen changes.
[33mb3049f9[m [sil-generic-specialzer] Fix a bug in specialization of recursive generic functions.
[33m8b2a1b4[m stdlib: remove _CollectionSliceDefaultsType
[33m8c7d3cc[m Runtime: Change runtime to use lexicographic version comparison for availability
[33m9442ccb[m Do not disable mandatory passes when optimize.sil.never is specified.
[33m7afe30e[m stdlib: make all collections sliceable, first steps
[33m22272b3[m Only enable CrashTracer support when explicitly specified.
[33m5e7e7f0[m Rename 'SWIFT_RUNTIME_CRASH_REPORTER_CLIENT_REQUIRED' to 'SWIFT_RUNTIME_CRASH_REPORTER_CLIENT' as part of WIP CMake change to toggle CrashTracer support.
[33mb95851e[m Tighten up our validation of potential witnesses during type witness inference.
[33m0f55c5a[m Eliminate recursion when substituting the model into each witness.
[33m02d2588[m Clean up the interface to Type::subst(), NFC.
[33m4b5a282[m Simplify DependentMemberType::substBaseType(). NFC
[33m96e2d53[m Factor our code for determining the member substitutions to project a member type. NFC
[33m21960c9[m Runtime: #if a function that's only used in ObjC interop.
[33m00f7520[m IRGen/Runtime: Combine the separate per-convention function metadata caches into one.
[33mc7c7388[m Change do-while to repeat-while.
[33mab66ffa[m Another grammar bug.
[33m21b35b5[m Spell out that initializers are imported as throwing instead of failable if they have an error parameter.
[33mb8405ac[m Mispelign.
[33md00d6b8[m Rationalize "throws" as a syntactic choice.
[33mbfa2038[m Describe the order in which multiple defer actions are executed.
[33m13b276c[m Properly test that autolink files on linux are cleaned up.
[33maf38ea1[m stdlib: add MutableCollectionType._prext_partition()
[33m8b4f7db[m Don't assert for empty argument list generating C function.
[33m437a33b[m Fix issues with installation on linux.
[33m2a1ce9f[m [stdlib] Mirror: minor pre-review cleanups
[33m4ae7b13[m Stop trying to fully check a conformance when we query its existence.
[33mc45c5d4[m Stop performing silly, ridiculous hasTypeWitness checks.
[33mb32a625[m Make TypeChecker::resolveTypeWitness() slightly more lazy.
[33m1c6eb1f[m Fix typo in sil_combine test
[33m87e8fa4[m SILCombine: Fixed missing strong_release for stores to an eliminated dead array. rdar://problem/19460043
[33m9c35c5e[m Revert "[+0 self] Teach SILGen how to avoid emitting extra rr pairs when emitting RValues with Nominal Types and Tuples."
[33me9d761e[m Driver: fix a crash with -wmo, -num-threads and -parseable-output. rdar://problem/20652017
[33mb80c96a[m [+0 self] Teach SILGen how to avoid emitting extra rr pairs when emitting RValues with Nominal Types and Tuples.
[33m8bd9712[m Fix crash when compiling a module with a main-file with -g and -wmo -num-threads. rdar://problem/20655307
[33maa0a867[m Editorial changes; credit to Quinn Taylor and Mark Lacey.
[33mc11cf9c[m Use std::make_tuple instead of the libc++ extension
[33mcd74bbd[m convert some as? bindings in if/let patterns to use 'as' patterns, suggested by Joe. NFC.
[33mb1098da[m Sema: Relax this assertion.
[33mcce8011[m stdlib: Deprecate CFunctionPointer.
[33m08f9269[m unbreak the dox build.  I at least don't have a rust pygments lexer and this is breaking my full build.
[33mb40e297[m Describe the implicit binding of 'error' within a catch clause.
[33m9a7d57a[m COWArrayOpt: Match retain/release that load an array address projection
[33m8e3bcef[m stdlib: eliminate _CollectionType, thanks to the new witness type solver
[33ma33c518[m tests: use substitution to pick the right llvm-link.
[33m2ce7dee[m stdlib: remove _SequenceType, thanks to the new type witness solver
[33m229df4d[m Add the error-handling proposal to the repository.
[33m005c76b[m Revert "stdlib: make all collections sliceable, first steps"
[33m0cdf289[m stdlib: make all collections sliceable, first steps
[33m126e404[m Reimplement inference of type witnesses with a separate non-recursive pass.
[33m4dd60cb[m COWArrayOpt: Document the usage of the MatchedReleases set.
[33m676073a[m Provide @convention migration fixits.
[33m40b0fcf[m Remove the @cc attribute.
[33mce4bff5[m Frontend: Allow passing .sil as -primary-file along with other .sib as input.
[33m8293f3f[m Update SIL.rst to discuss @convention instead of the old attributes.
[33mfd13832[m SIL: Reject '@cc', '@thin', and '@objc_block' in SIL.
[33m730e6af[m Revert "stdlib: make map() dynamically dispatched"
[33m212c6e3[m [sil-devirtualizer] Improve devirtualization of generics classes with dependent types.
[33m21e5a83[m stdlib: make map() dynamically dispatched
[33md4e744b[m Use "isa" instead of "dyn_cast".
[33m59c4900[m Improved Substitution::print()
[33mb812db0[m Turn on C function pointer imports by default.
[33md9848a6[m stdlib: migrate last() to use a protocol extension
[33m7a40ec0[m stdlib: simplify code
[33m3b30be2[m Revert "Turn on C function pointer imports by default."
[33m220c92a[m Revert "Revert "A couple of 'throws' inference fix-ups:""
[33mb0497db[m Turn on C function pointer imports by default.
[33md64c086[m Revert "Improved Substitution::print()"
[33med4eb31[m Minor dumping improvements.
[33mc4ec47d[m IRGen/Runtime: Metadata for @convention(c) function types.
[33m349c2f0[m [stdlib] Mirror: undo bug workarounds
[33mf82b18e[m [stdlib] Mirror: descendant class suppression
[33md3f52de[m [stdlib] Mirror: handle chaining
[33m5f30f6b[m [stdlib] Mirror: internal renaming
[33m877056f[m [stdlib] Mirror: store descendant representation
[33m45d72b9[m [stdlib] Reorder Mirror parameters to match docs
[33md955f0f[m [stdlib] Revise Mirror initializer documentation
[33mee72b0d[m [stdlib] Mirror: internal factorization
[33mf140790[m Add some stuff to .gitignore
[33maf5fb8a[m Fix conformances when calling protocol extension method with constraints
[33m367f796[m Improved Substitution::print()
[33m2e083fd[m ConstraintSystem.h: Fix grammar in doc comment
[33mb0bd6ec[m AST/Verifier: fix typo
[33m49bab4c[m Fix typos in docs
[33mb9ad285[m [IDE] When getting documentation comments XML, don't forget to escape the decl name as well.
[33m56e8ae7[m Add missing testcase for r27562.
[33m7e73f16[m The crash test #0272 passes on Linux, annotate it as such
[33m8bf1dee[m The ErrorType race test requires ObjC runtime
[33m4229e8a[m Revert "A couple of 'throws' inference fix-ups:"
[33m014602d[m Reenable some devirtualization cases disabled in r26152.
[33m60311da[m Coding style clean-ups.
[33m971598e[m Revert "stdlib: fix a warning"
[33m701dfbe[m stdlib: use let-else in maxElement()
[33m76b3305[m stdlib: fix a warning
[33m7bbb007[m stdlib: fix a bug in SequenceType.startsWith() introduced in r27567
[33m70fd1d6[m A couple of 'throws' inference fix-ups: - When inferring 'throws' for a closure function type, look inside of catchless do blocks for 'try' expressions. - When simplifying overload constriants for applications of throwing initializers, the bound member type of the initializer should also be marked as throwing.   (Not doing so would cause us to incorrectly reject the overload.)
[33m3ec09ee[m force adopt let/else and the Swift 1.2 if/let extensions in the stdlib a bit, for dogfooding and cleanup.
[33m935e950[m minor cleanups.
[33m06ad473[m Switch if/let SILGen to use the same codepath as let/else, instead of using the ClauseMatrix stuff.
[33mac82fd5[m fix a SILGen crash on tuple-destructuring in let/else.
[33m69c5a0b[m stdlib: add a public init to _HeapBufferStorage so that it can be used in tests
[33m6aaab86[m Debug info: Account for enums with zero elements. <rdar://problem/20645585> DebugInfo generation assertion failure on swiftz
[33m1859b47[m Further integration of inlining, devirtualization, and specialization.
[33me1adeab[m stdlib: move SequenceType and related APIs to a separate file
[33mb68fdd2[m stdlib: reword doc comment for SequenceType.flatMap()
[33m31831c4[m stdlib: change non-API names to be more descriptive
[33m86157d5[m Runtime: Reenable metatype casting code when ObjC interop is disabled.
[33m3f241bb[m Sema: Handle NSError not being found during type checking better.
[33m61fd0ab[m [sil-combine] Fix a failure during compilation of Swiftz
[33mc0cd9af[m Remove cruft that snuck in.
[33m1162298[m [+0 self] Teach SILGen how to avoid emitting an extra rr pair on self when calling a dynamic dispatch method on a let.
[33mb8a913e[m Standardize capitalization of fields of SILGenApply to SILGen standard conventions.
[33m6935844[m Revert "Minor dumping improvements."
[33mbcfcea7[m When importing a property getter's result type, always use the nullability of the property so the optionality of the imported types matches. This matches current behavior when importing the property setter's param type.
[33m9e15244[m Fix a testcase. Mark external functions as non-hidden to appease the verifier.
[33mda83f7c[m Un-XFAIL test/Prototypes/MutableIndexableDict.swift on linux.
[33m2f51838[m Require macosx for test/ClangModules/enum-new.swift, in keeping with other enum import tests.
[33m567e07f[m Make test/IRGen/errors.sil runtime-agnostic.
[33m4c4069d[m Runtime: Use 'nullptr' instead of 'nil'.
[33me1e3191[m inline a method into its only caller.
[33mc419698[m Now that emitLocalVariable is gone, we can merge all the complexity of local variable emission into LocalVariableInitialization, making it similar in structure to LetValueInitialization.
[33m6a776f6[m Minor dumping improvements.
[33m427cee3[m Don't drop the first selector chunk from an imported ObjC initializer.
[33m4fc2109[m Check for a couple of special-cased selectors more efficiently than re-uniquing them constantly.
[33m9eddbf6[m CSE static class_method instructions.
[33m3f38d75[m SILGen: Currying of 'super.method' calls.
[33md9083d2[m rework SGF::emitOptionalToOptional to keep loadable SILValue's as registers instead of eagerly dumping them in memory and operating on them by-address.  This avoids a lot of temporaries and traffic to manipulate them.
[33m2189088[m SILGen: Remove obsolete 'stripInputTupleLabels' hack from witness generation.
[33m1a3b612[m Unwrap params to satisfy older SDKs where observeValueForKeyPath takes non-optional
[33m79ee6f2[m Runtime: Recognize class and @objc existential metatypes as class instances in swift_isClassOrObjCExistential.
[33m3221104[m Rename @semantics -> @_semantics.
[33mc8af48d[m Update KVO test for Foundation nullability change
[33m2d35d51[m Now that initializers have been reworked, there is finally only one client of SGF::emitLocalVariable: inline it into its only remaining client (which is indirectly part of 'var' pattern binding emission) and simplify the code a bit. NFC.
[33mfd69300[m rework lowering of 'self' in class init methods to use normal cleanups and variable emission instead of hand coded magic.  Eliminating special cases allows simplifying other parts of the compiler, and this probably helps the error handling initiative as well.
[33m10ea120[m when cloning a null_class, make sure to remap types.  NFC since nothing uses null_class yet.
[33m5df6b05[m fix the dox build
[33mee84d08[m bump the module # for the new null_class SIL instruction
[33m42b4a96[m Introduce a new null_class SIL instruction for forming a null pointer reference to something of class type.  This is required to model RebindSelfInConstructorExpr correctly to DI, since in the class case, self.init and super.init *take* a value out of class box so that it can pass the +1 value without performing an extra retain.  Nothing else in the compiler uninitializes a DI-controlled memory object like this, so nothing else needs this.  DI really doesn't like something going from initialized to uninitialized.
[33mf2455bd[m Extend SILGenFunction::emitEpilog to work with custom epilogs that contain no prefix code, simplifying its interface.  NFC.
[33m9aa4620[m remove extraneous line that somehow didn't go away with my previous patch.
[33m39a959d[m Remove some (ultimately) no-op code from SILGen of RebindSelfInConstructorExpr: it would drop in a dealloc_box or strong_release after rebinding, which is incorrect (the box is used for any loads of self after the rebind!) but also pointless: the AllocBoxToStack pass saved the day by promoting the box to a stack address and zapping these instructions.
[33mc9bc783[m [Runtime] Remove an unneeded dispatch_once() in Availability.mm
[33mea47d6e[m remove dead code.
[33m721d187[m [Sema] Change Fix-It for availability version check to include '*'
[33m77580ed[m Re-submit: Enable cast optimizations as a guaranteed optimization.
[33m750566b[m Implicitly create type declarations for inferred associated type witnesses.
[33m526c45b[m stdlib: mark free functions on optionals for removal
[33m62403ec[m stdlib: fix up documentation for new methods
[33m7f366fc[m Standardize the variable names of Callee the other way. Sorry about that John!
[33m3d3f1a7[m Parsing/AST/Sema support for rethrows, and fix bugs with throws/rethrows override and conformance checking.
[33mbaacff1[m Change some class member names to match SILGen library member capitalization name style. NFC.
[33mffe698d[m Remove trailing whitespace. NFC.
[33m9e68a57[m Revert "Implicitly create type declarations for inferred associated type witnesses."
[33m90c7832[m [stdlib] Mirror: store the subjectType
[33ma711b50[m [stdlib] SuperMirror renaming
[33m702900e[m [stdlib] Basic support for chained super-mirrors
[33m38f0dce[m [stdlib] Synthesized and Suppressed Super-Mirrors
[33m7cd1429[m [stdlib] Add _getSuperclass(AnyClass)
[33m62d958e[m [stdlib] Supply base class mirrors, v2
[33m60ba4d4[m [stdlib] s/baseClass/superclass/ in Mirrors
[33me905e7d[m [stdlib] Supply base class mirrors
[33m0c8a717[m [stdlib] Don't report base as a Mirror child
[33md31a01e[m [stdlib] Mirror: s/instance/subject/ where possible
[33m754414c[m [stdlib] Copy mirrors back to SwiftExperimental
[33m5bc45d0[m [sil-combine] Peephole: inject_enum_addr (addr, val), switch_enum_addr (addr, val: bb1, ...) -> select_enum_addr, switch_value
[33me488e5e[m [simplify-cfg]  Fold switch_value on a constant argument into an unconditional branch
[33m78cc7b7[m Basic support for typealiases in protocol extensions.
[33m7b859b4[m Factor the member declaration out of TypeBase::getTypeOfMember().
[33m4330f2a[m Instead of replacing ObjectLiteralExpr in CSApply, set its semantic expression (a la InterpolatedStringLiteralExpr).
[33me907845[m Implicitly create type declarations for inferred associated type witnesses.
[33m0f63546[m Rename the semantics tag name from never to sil.never.  NFC.
[33m680c565[m Refactor the code that checks if a function is marked with noopt semantics. NFC.
[33m722fa41[m splitEdge: Fix dominator tree update
[33m77bb96c[m Fix a bug in the dominator update of the array property specializer
[33m7536fc5[m SILCombine: Add missing debug scope
[33m082c5f8[m Fix expr/expressions test after r27479
[33m163f47e[m Complete protocol extension methods inside extension
[33md4db635[m Add object literal syntax and _{Color,Image}LiteralConvertible protocols
[33maf49ec1[m Removed unused empty comment lines.
[33m2fd5636[m improve SILGen of RebindSelfInConstructorExpr in several ways:  - In the normal optional-to-optional init case, use    "emitUncheckedGetOptionalValueFrom" instead of    "emitCheckedGetOptionalValueFrom" since we have already    checked to see if the optional is present.  This avoids a    function call (that is mandatory inlined away) along with a ton    of SIL that gets mandatory inlined in that shows an assertion    failure that can never fail.
[33m027c328[m The retain and release counts of a partial_apply may be unbalanced.
[33m926042f[m Add @semantics("optimize.never") to disable optimizations of a specific function.
[33m3a58ca6[m improve the location information for the "all members must be initialized before 'return nil' in a initializer" diagnostic by chasing dataflow information more aggressively.  We now generally point at the problematic return instead of the init containing it.
[33m72a90a7[m Fix incorrect cherrypick, add testcase update to go with r27472, to unbreak the bots.
[33m7beb6d5[m Extend SILGen's emitEpilog() to work with epilog blocks that are already set up, allowing clients to generate code before the top-level cleanup stack is emitted.
[33m17bfa99[m fix <rdar://problem/20608881> DI miscompiles this testcase into a memory leak
[33m86f5396[m update testcase to modern syntax.
[33m8dce0ff[m Inline emitRethrowBB into its only caller, simplifying things. Have emitEpilog take care of calling emitRethrowEpilog, relieving its clients from having to do it everywhere.  NFC.
[33m25cb478[m Have Sema create an implicit "return" at the end of constructors if there isn't one already. NFC right now, but this allows us to simplify SILGen.
[33m104d7e0[m revert r27466 to unbreak the botz.
[33m474a2ef[m rework SILGenFunction::emitValueConstructor to use less custom logic for the return value handling.  Instead of doing everything itself, leverage the cleanup mechanics of emitLocalVariableWithCleanup to ensure the self box is cleaned up on all paths out of the constructor, and use the epilog generation stuff to handle all the return path mechanics.
[33me8dfbd8[m remove dead parameter from SILGenFunction::emitInitializationForVarDecl, NFC.
[33md1351e2[m completely remove the 'Kind' field/enum of Initialization.  NFC.
[33mfa6f078[m Continue tidying up Initialization, NFC:  - Privatize "kind" in the base Initialization class.  - Simplify canForwardInBranch() to just isSingleBuffer().    There is only one client of it (which avoids emitting the    formation of an optional temporary) and the only cases we're    dropping is for "_" patterns and single element tuple patterns,    which are not worth optimizing for.  - Change getSubInitializationsForTuple() into a virtual method    since it has wildly different behavior based on the subclass and    requires otherwise private implementation details of those subclasses    to implement it.  - Simplify subclasses based on these changes.
[33m020fe78[m Various cleanups for the initialization logic:  - Use virtual dispatch to localize some predicates instead    of having special cases for LetValue inits in global places.  - Improve 'const'ness of methods.  - Introduce a common "KnownAddressInitialization" class to centralize    the notion of an initialization corresponding to a specific physical    address that is known up front.  Consolidate dupes of this concept into    uses of it.
[33m5cbd927[m Fix let/else enum projection to reabstract back out to the right argument type, instead of being the generic type, fixing a crash on the testcase.
[33md89fded[m Implement a micro-optimization to the let-else SILGen for enum matches: don't run the cleanup for the enum if the failure path can only contain trivial enum element matches.  For example, on:
[33me68e10d[m Implement support for is/as patterns in let/else, making them functionality complete.
[33m7f6bf23[m Refactor a bit of the SILGenFunction::emitCheckedCastBranch logic to make it take a ManagedValue instead of an Expr*.
[33m07d9d1b[m fix include guard to match filename, NFC.
[33md874bc8[m fix comment. NFC.
[33m7185252[m remove dead argument to canUseScalarCheckedCastInstructions.
[33me45c8de[m fix <rdar://problem/20489838> QoI: Nonsensical error and fixit if "let" is missing between 'if let ... where' clauses
[33m24f7d7b[m fix <rdar://problem/20563234> let-else problem: cleanups for bound patterns shouldn't be run in the else block
[33md2a6a53[m Update test for removal of _Count
[33m2fdd8ed[m Delay protocol-conformance diagnostics until the conformance is fully checked.
[33m70828ef[m stdlib: stop using _CollectionType to the largest extent possible
[33m883ac4c[m stdlib: implement a defaulted CollectionType._prext_count() method
[33m8078a7b[m Remove unnecessary FIXMEs from previous commit
[33m48cce21[m Filter out completions from unusable protocol extensions
[33m3a1410f[m stdlib: add a default implementation for CollectionType.generate()
[33m9b94063[m Migrate away from the deprecated String.toInt()
[33m4960d6c[m Fix a comment type on canZapInstruction.
[33m31413bb[m [Sema] Honor -disable-availability-checking flag for protocol conformances
[33m006c182[m Begin inferring throwing function types for closures. (There's more work to do here - hence the thin tests - but I need to investigate a couple of sema bugs before moving forward.)
[33m971718b[m stdlib: mark declarations that we plan to remove as deprecated
[33m69718f7[m When failing to find a suitable type witness, always record ErrorType.
[33m266abbd[m [stdlib] Prototype IndexingGenerator deduction
[33mc6095cf[m [stdlib] Prototype ConcreteGeneratorType
[33m10aa403[m [stdlib] Make IndexingGenerator work in prototype
[33m665c1b8[m SimplifyCFG: fix wrong jump threading in case of block-args with multiple uses.
[33m384ff12[m Annotate tests that require ObjC runtime
[33m81c6531[m Port 1_stdlib/ErrorType.swift to Linux
[33m2ed6087[m Annotate a test that now passes on Linux
[33mfcaef30[m Extract the objc specific tests from global_property_opst.sil into a separate test file.
[33m115090d[m Re-apply r27361: A new SIL pass for static analysis of array properties.
[33m0b423c1[m Revert "A new SIL pass for static analysis of array properties."
[33m6b3c364[m Revert "Enable cast optimizations as a guaranteed optimization."
[33m76ed49f[m Print opened existential archetypes as non-simple types.
[33m09feaa4[m Annotate attr_objc_simd.swift as requiring ObjC interop
[33mda7d906[m Fix warnings in protocol_lookup.swift
[33m7fcae09[m Annotate tests that pass on Linux thanks to Joe's fixes
[33m736f17c[m Annotate tests that require ObjC runtime
[33m7a0e25e[m Fix properties.swift for the non-ObjC runtime
[33m6d1a623b[m Runtime tests: Fix compile error for non-ObjC build.
[33m9f162b7[m SILCloner: Fix typo that cloned OpenExistentialMetatypes to OpenExistentialRefs.
[33mbe7c339[m Type checker: Increase the score of metatype-to-object conversions.
[33mfcf535d[m Runtime: Implement ObjC-free metatype dynamic casts.
[33m3d1af5c[m IRGen: Remove erroneous assertion.
[33md46afe5[m AnyObject is a BridgeableObjectType even if it's not @objc.
[33mbdbb5a9[m Remove now-unnecessary default from exhaustive (Bool, Bool) switch.
[33m852a701[m Type checker: Allow implicit conversions from existential metatypes to more general ones.
[33m82aa6e7[m stdlib: Implement "_isValidSubscript(_:hoistedIsNativeNoTypeCheckBuffer:)" for ContiguousArrayBuffer.
[33m92636a4[m Type checker: Allow 'AnyObject: AnyObject' self-conformance even when AnyObject isn't @objc.
[33mdfc57e6[m Type checker: Don't attempt metatype-to-object conversions if ObjC interop is disabled.
[33m8367916[m stdlib: Don't build ErrorType bridging helpers if there's no ObjC runtime.
[33m99c7f9d[m stdlib: Remove #if _runtime guard around ExistentialCollection.
[33m02d2540[m stdlib: add a hook for dynamic dispatch in CollectionType.find()
[33me94b0f9[m Revert "stdlib: add a hook for dynamic dispatch in CollectionType.find()"
[33mfe53f87[m stdlib: add a hook for dynamic dispatch in CollectionType.find()
[33m4c0c2a1[m stdlib tests: use OpaqueValue in the lazy() test
[33m77035c0[m Add protocol extension results to lookupVisibleMemberDecls
[33m1368a90[m tests: better tests for SequenceType._prext_contains()
[33m470139d[m Revert test change in DispatchTypes.swift
[33m2715554[m stdlib: annotate Array.map() and Array.filter() with @noescape
[33m2bccb13[m stdlib: add an extension point for SequenceType.contains()
[33m0d6374b[m stdlib/HashedCollections: skip computing the hash for lookups in empty collections
[33mdf04a93[m [IDE] Report the editor placeholders in the syntax model.
[33m63f3232[m Handle throwing initializers in allocating constructors.
[33m33f9b07[m Enable watchOS Standard Library Builds
[33m9f38d8d[m Require a GenericSignature for dependent AbstractionPatterns.
[33m2f555e0[m Fix placement of the foreign error parameter.
[33m4cefc2b[m IRGen: GenClangType support for SIMD types.
[33m58660ec[m PrintAsObjC: Support for SIMD types.
[33m47eedc3[m Sema: Consider SIMD types as representable in ObjC.
[33m7687be3[m Fix another bogus use of ProtocolConformance::isComplete().
[33ma03604a[m stdlib: remove a redundant protocol requirement re-declaration
[33m8628a3d[m stdlib: _copyToNativeArrayBuffer(): use unsafe more
[33m7675e61[m Enable cast optimizations as a guaranteed optimization.
[33m8152b80[m Avoid inserting a new instruction twice during cast optimizations.
[33maa07bc3[m Lower bridged casts always, when the outcome is not provably failing.
[33m0f88c56[m If a result of unconditional_checked_cast is not used, simply remove the cast.
[33m12b1e88[m Fix a bug in a peephole for checked_cast_addr_br.
[33m7fe8296[m Bail early on casts involving unbound generic types. It is too early to optimize them.
[33ma8cf053[m Don't try to optimize non-addr types in simplifyCheckedCastAddrBranchInst.
[33m782a412[m If kind of the instruction was changed by the optimizeCheckedCast*BranchInst, bail.
[33m185e96c[m Clean-up of retain/release insertion during bridged casts optimizations.
[33m0b6b907[m Do not produce an intermediate cast between the same ObjC types as it will get eliminated anyways.
[33mf554fb9[m Member type lookup: when we have a type witness, use it.
[33m31388b0[m ClangImporter: Import (some) vector types.
[33m780a3c9[m following llvm coding style by wrapping each struct/class in an anon-namespace, instead of using an expansive block containing lots of stuff.  NFC.
[33ma458667[m add a test for address-only let/else enum pattern binding, NFC.
[33m65733c7[m identifiers in patterns with dotted and call suffixes are not variable bindings, this allows things like "case let Optional.Some(x):" to work again.
[33m6cfb371[m A new SIL pass for static analysis of array properties.
[33m1f27ccb[m [ModulePrint] Remove relics of containing return types when printing optional init. rdar://20044672
[33me5f8557[m Map Clang's 'deprecated' attribute to @availability(*, deprecated).
[33m0c5a97e[m SimplifyCFG: fix condition equivalence checking in checked-cast jump threading.
[33m4e0e321[m Extend 'availability' attribute with an unconditional 'deprecated' option.
[33m707394a[m [AST] Refactor implementation for ValueDecl::getSatisfiedProtocolRequirements().
[33m5f6d091[m [AST] Keep track of the type decl that the type witness came from, for protocol conformances.
[33m237635a[m Move @objc thunk emission to SILGenBridging.cpp.  NFC.
[33mb3dcf0f[m Move getLoweredASTFunctionType back to SILFunctionType.cpp.
[33m6326f24[m Remove junk file '-'
[33m3e1e90c[m Add a period at the end of a comment.
[33ma67452c[m SILGen for throwing foreign errors out of @objc thunks.
[33mc48d6aa[m stdlib: change underestimateCount() into a method
[33mc7c25ad[m tests: fix a warning about declaring a public method for an internal type
[33m921855e[m Revert "Extend 'availability' attribute with an unconditional 'deprecated' option."
[33mad63359[m Rename test file for upcoming changes.
[33m1b2fcd1[m IRGen/Runtime: AnyObject never has a witness table, even if it isn't @objc.
[33maf6e193[m Revert "IRGen/Runtime: AnyObject never has a witness table, even if it isn't @objc."
[33mb4b5dbb[m Extend 'availability' attribute with an unconditional 'deprecated' option.
[33m2b93411[m IRGen/Runtime: AnyObject never has a witness table, even if it isn't @objc.
[33me89ff69[m IRGen: Handle the case when the compound type isn't nominal when looking for layout attributes.
[33mf121773[m Update preprocessor directive in validation test for AppleTV.
[33mb8538c9[m Make the testcase portable across 32/64bit targets.
[33mf2169f8[m Silence a few more warnings in Release builds.
[33m26c6264[m Silence a warning that shows up in Release builds.
[33me03d09d[m Fix a bug in the SIL inliner that prevented the inlining of TryApply instructions.
[33m196ee35[m Teach the Mandatory inliner to handle TryApply instructions.
[33m2204a24[m Remove an unused macro.
[33m1891de2[m Teach getCalleeFunction to work with FullApplySite, that wraps TryApply and Apply instructions. NFC.
[33me29a5e4[m IRGen: Share requiresProtocolWitnessTable implementation between SIL and IRGen.
[33mf6ec796[m Integrate generic specialization into the inliner.
[33m225a0eb[m Runtime: Non-ObjC-interoperable version of ErrorObject implementation.
[33m49331b9[m Fix segfaults when -debug is used.
[33mc53aefb[m [ModulePrint] Skip user inaccessible decl attrs when printing module interfaces. Not skipping them may cause internal-used attributes' leaking to external developers. rdar://19903962
[33me4e0f35[m IRGen: Implement an @_alignment attribute.
[33m92ec232[m [AST] Rename ValueDecl::getConformances() -> getSatisfiedProtocolRequirements(), NFC.
[33m3982ca5[m Extend the hack that delays enum conformance checking to code-completion
[33m1e5dba8[m SceneKit overlay: add a generic overlay for -[SCNSceneSource entryWithIdentifier:withClass:]
[33mbc6277a[m [AST] Add const-ness for ValueDecl::getConformances().
[33m3eceeba[m [Sema] Associate typealias decls in concrete types with the associated type decls they are conforming to.
[33m71afc9e[m Fix typo.
[33m581e853[m stdlib: make filter() a protocol requirement for range replaceable collections
[33m0af19e7[m stdlib: use unsafeBitCast to implement map() and filter() on top of lazy()
[33mc4b8271[m stdlib: correct comment
[33m8296a43[m It is not useful to link in the main inliner loop.
[33m38b1818[m Convert code to use a covered switch. NFC.
[33mc206504[m [stdlib] Prototype sequence dispatch sans ~>
[33m02724cb[m Minor renaming.
[33m0bef564[m Loosen an assert.
[33mdbb4bf0[m Remove guaranteed FILECHECK checks from test.
[33ma509685[m Teach SCCVisitor about ThrowInst and TryApplyInst
[33m48b6588[m Teach DCE about ThrowInst and TryApplyInst
[33m919970e[m A TryApplyInst can certainly have side effects
[33meb36def[m [frontend] Updated the behavior for -import-module so it can be specified multiple times.
[33m98d17e3[m Add support for AppleTV simulator tests.
[33m6d2326f[m Test (and fix) some simple calls to foreign-error methods.
[33m061795d[m Revert "(De-)serialization for foreign error conventions."
[33m759346e[m (De-)serialization for foreign error conventions.
[33m9a36586[m Compute Objective-C selectors for throwing initializers.
[33m41ae48b[m Start parsing 'throws' on initializers.
[33m2d985c0[m Revert "(De-)serialization for foreign error conventions."
[33mf1d4293[m (De-)serialization for foreign error conventions.
[33mf1de463[m stdlib: move readLine() API to the core standard library
[33m2ce1c0c[m IRGen: Map @convention(c) function types back to Clang C function pointer types.
[33mb7cd895[m Verify that throwing @objc methods have a foreign error convention.
[33mde427fc[m Print throwing @objc methods with the appropriate Objective-C signature.
[33m27f1085[m Allow an explicit @objc(selector) to indicate where the error parameter goes.
[33m9382147[m Customize @objc(selector) arity mismatch diagnostic for throwing methods.
[33m68e8c3a[m Include the error in the Objective-C selector for throwing methods.
[33mf778836[m Add initializers to postfix-expr code completions
[33m03d393e[m Re-apply r27206: Convert all external function definitions to declarations when compiling with -Onone.
[33m6e09dad[m stdlib: move sequence and collection algorithms to topic-centered files
[33md08b98b[m Sema: Turn on availability checking by default
[33mde1917b[m Disable a crash test in no-asserts builds
[33m156a4c7[m SILGen for calls under foreign error conventions.  WIP.
[33md267b86[m stdlib: move the bulk of SequenceType algorithms to protocol extensions
[33m272371a[m Attach a foreign error convention to @objc methods.
[33m0d65068[m Fix a bug in the SILCloner.
[33m1a58b36[m Fix a bug in the casts optimizations.
[33mec47ebd[m PrintAsObjC: Handle @convention(c) function types.
[33mc0a2994[m AST: Start printing function types with @convention instead of old attributes.
[33m0c52a76[m Revert "Fix two bugs related to the casts optimizations."
[33m194aed3[m Fix two bugs related to the casts optimizations.
[33meaeaf5d[m Enforce @objc restrictions on throwing methods.
[33me87a925[m ASTPrinter: print "throws" on throwing function declarations.
[33m54011ed[m Remove FuncDecl::throws(). NFC
[33m978dd3a[m Sema: Check protocol conformances for potential unavailability.
[33m9256250[m Fix type checking for a non-throwing function as a subtype of a throwing function.
[33m570f08b[m Sema: Recognize NSError-to-ErrorType-conformance casts as possible.
[33md646c31[m [fixit-code] Apply the fixit for the refutable pattern warning.
[33ma03680e[m stdlib: print struct members, in addition to the type name
[33m5bb6490[m stdlib: when doing ad-hoc printing, use the debug representation
[33m29b15ad[m stdlib: make println() output atomic within one call
[33mb03795e[m Add a '@convention(xxx)' attribute for specifying function conventions.
[33maa5fcab[m Fixup some tests I missed since sil-opt was not running with +0 self enabled in all cases.
[33m5f12065[m Enable +0 self in both sil-opt and sil-extract.
[33m8a1df97[m Also enable the guaranteed self cmake flag so the runtime gets the proper updates.
[33m8762675[m Verify SILSelf parameter type when we create the function in SILModule::getOrCreateFunction instead of moving it into the verifier.
[33m75ea31d[m Turn on +0 self by default.
[33mbffbc8f[m Create a map from SILFunction -> SILDeclRef if a SILDeclRef was used to create the function.
[33m5e86341[m Add a verifier check that we never upcast from an address -> an object or vis-a-versa. Discovered while making +0 self tests.
[33m1e3f5c5[m IRGen: Fix miscalculation in non-fixed partial_apply offset calculation.
[33ma42837b[m Revert r27206.
[33m3b57d57[m StdlibUnittest: hide state inside the function scope with a local type
[33ma84793c[m Fix and re-enable StdlibUnittestRunAllTestsCalledTwice.swift on iOS
[33m22cddee[m Add test for rdar://problem/17179967.
[33m4fd7e89[m [test] XFAIL StdlibUnittestRunAllTestsCalledTwice.swift on iOS.
[33m9971369[m Always open existential types in the type checker.
[33m4ec1cb2[m Collapse creation of DynamicMemberRefExprs into the normal member-reference path. NFC
[33m6b80373[m ClangImporter: ignore availability(swift, unavailable) declarations when calculating the common prefix of enumerators
[33m3b8a229[m ClangImporter: ignore swift1_unavailable declarations when calculating the common prefix of enumerators
[33m69757f2[m Fix 32-bit build after r27225.
[33m9869aed7[m Runtime: Allow value type ErrorTypes to dynamically coerce to NSError.
[33ma4847e9[m Sema: Recommit "Disallow potential unavailability on stored properties" without Fix-It
[33m54475d6[m Revert "Sema: Disallow potential unavailability on stored properties."
[33m3fd55cf[m [driver] Factor out some common code, NFC.
[33m746391c[m [test] Weaken test for r27087 to handle our separate-overlay build.
[33m38463fa[m Sema: Disallow potential unavailability on stored properties.
[33ma5d6aec[m StdlibUnittest: add a diagnostic for calling runAllTests() twice
[33m768420d[m IRGen/Runtime: Give ErrorType its own retain/release entry points.
[33m22f80c2[m Revert "Temporarily disable this assertion until <rdar://problem/19773096> is resolved."
[33mf97926f[m [driver] If '-update-code' is enabled, use 'swift-update' for the module merging action as well.
[33m7612df1[m Runtime: Rename 'becomeNSError' to 'bridgeErrorTypeToNSError'.
[33m8b250d6[m [driver] Remove the 'swift-fixit' symlink and introduce '-emit-fixits-path' frontend option that writes compiler fixits as source edits.
[33m4e6efcb[m Fix a DEBUG log message in ExternalFunctionDefinitionsElimination.
[33mc3b253d[m Convert all external function definitions to declarations when compiling with -Onone.
[33m9d28b2a[m Don't convert shared_external function definitions to declarations in ExternalDefsToDecls. This produced illegal SIL. Also, just invalidate those functions which are converted.
[33mab2dd51[m SIL passmanager: Add an option -sil-disable-pass for disabling passes by name.
[33m53fd9fb[m Sema: Finish staging back in availability checking in synthesized functions
[33m6f1d474[m [test] Don't depend on target's representation for Int in test.
[33m244c841[m [sil-mode] Add syntax highlighting for autorelease_value.
[33m7be9c21[m SILGen: Rework OpenExistentialExpr emission to better handle guaranteed contexts.
[33m857a60d[m Runtime: Cache OS version for availability in a thread-safe manner.
[33m51bf4f3[m [sil-extract] Try matching against demangled function names for -func option.
[33mcd79e0b[m Sema: Suppress explicit unavailability diagnostics in unavailable synthesized functions.
[33m9ac3047[m [ClangImporter] Avoid doing import work after type checking is done.
[33mde1b836[m [test] We expect to find NSString in the Foundation module.
[33m136965d[m Enter the brave new world of Swift 2.0.
[33md62a154[m Import ObjC method error-handling conventions.  WIP.
[33mf2cb782[m Add the -import-error-handling option (and ignore it for now).
[33m0c34340[m Always build swift-ios-test out of utils
[33m5f4bea7[m Open existential uses of dynamic-Self methods and initializers in the constraint solver.
[33m85b89ba[m Tighten up our handling of erasure of opened existentials. NFC
[33m2217916[m Type utilities for working with opened existential types.
[33m3cebb14[m [stdlib] Make staging typealiases public
[33mf156420[m SILGen: Properly copy a nonunique OpaqueValueExpr when it's needed at +1.
[33md61dd21[m Fix 80-column and indentation violations. NFC.
[33m32dbd0c[m tests: add a %target-ld substitution that is configured with stdlib paths
[33m63184b2[m Fix testing case for rdar://20485995
[33m8c50f67[m Sema: Factor out common logic for finding enclosing declaration availability
[33mf87788f[m tests: remove ld-add_ast_path feature
[33m189eb32[m Revert "tests: use a %target-* substitution instead of calling 'ld' directly"
[33m470cea8[m Only build arm64 for tvOS
[33md1698ba[m Use a _bridgeable suffix for newly introduced fast bridging functions. NFC.
[33mc650436[m tests: use a %target-* substitution instead of calling 'ld' directly
[33mfffc954[m [sil-mode] Add syntax highlighting for value buffer insts.
[33m857e32d[m [test] Use %target-jit-run instead of %target-swift-frontend -interpret.
[33m39ad4c9[m Fix a spelling error. Calleee -> Callee. NFC.
[33m762d1d9[m Opened existential metatypes always involve members.
[33me75b556[m Walk the existential value of an OpenExistentialExpr.
[33m7fc1ac6[m Revert "Kill the sequence number in OpenedExistential."
[33m6755aaf[m Revert "Simplify constraint application now that open-existentials are more local."
[33m4c2ce1e[m stdlib: some simplifications in Arrays.swift.gyb source code.
[33m36fae15[m stdlib: rewrite Array.append to simplify the generated SIL code.
[33mcd08e96[m [sil-devirtualizer] Better handling of methods that have their own generic parameters.
[33m57c41a0[m [sil-devirtualizer] If class contains archetypes, consider it unbound.
[33mf40d722[m Fixup the test output for the test that I extracted into a new file
[33m1a7aeef[m Use a %target-* substitution so that the test passes not only on OS X
[33m2791a4c[m Disable the test for swift-autolink-extract when the binary is not available
[33mc8af957[m stdlib: fix a typo in comments
[33m9c03811[m stdlib: add initializers from String to integer and floating-point types
[33m8341a4f[m As suggested by DaveA, remove useless information, which just repeats the declaration. NFC.
[33m90e5f93[m Simplify the lookup of a compiler-known library function. NFC.
[33me4f7fee[m When gathering "linked" expressions to determine a favored constraint, consider top-level literals to be fair game.
[33md593d58[m [sil-gen] Implement getFunction in terms of SILModule::getFunction to avoid a code duplication. NFC.
[33m7c5717d[m Address Joe's comments on my r27102 commit. NFC.
[33ma79b97f[m Fix typo. NFC.
[33m700ca49[m [test] Make sure tests that use a mock SDK don't pick up external overlays.
[33mcdb5808[m StdlibAPIGuidelines: final clarification
[33m6832f49[m StdlibAPIGuidelines: editorial review w/Dmitri
[33m4cf634e[m StdlibAPIGuidelines: add a note.
[33ma407f5f[m [test] Make sure tests that use a mock SDK don't pick up external overlays.
[33m15bf312[m SIL: Tighten verifier checks to prevent unowned/unmanaged function types.
[33mf357976[m Fix a ReST error
[33md734fe7[m [stdlib] Document our current design conventions
[33m11e8cfa[m State in the uncurry level examples which reference is the "natural uncurry level" explicitly.
[33m6ee8f9b[m [driver] Add option "-fixit-code" which delegates to 'swift-fixit'.
[33m48abdd0[m [driver] Add some missing cases.
[33md2c502b[m Do some renames to match-up with the 'swift-fixit' name.
[33m623b982[m [driver] Separate "delegate to the migrator with swift-update" and "get compiler fixits with swift-fixit" functionalities.
[33mbd14e0c[m Remove -sil-devirt-threshold frontend option.
[33me634493[m Sema: Disallow potential unavailability on script-mode globals
[33maeea1b7[m Mark witnesses as always_inline if they thunk to an always_inline function.
[33m2e4d4b4[m Implement SILGen support for enum patterns, which are the most common and important kind of pattern for let/else.  While I haven't done extensive testing, I believe that let/else is wired up and working now.
[33m2f507f6[m improve the errors printed by some unimplemented code to actually make sense.
[33m43d4114[m stdlib: implement nativeOwner in all array buffers to avoid %else in Arrays.swift.gyb. NFC.
[33md79078a[m stdlib: fix coding style in ArrayBuffer
[33m86203ca[m [ClangImporter] Import enum case aliases using static let properties.
[33m63e9f0f[m [ClangImporter] Replace std::set with llvm::DenseSet.
[33m72585a7[m [stdlib] Restore GeneratorOf/SequenceOf for staging
[33m5671f73[m [stdlib] fix comments
[33m4400bce[m Revert "[stdlib] Workaround for <rdar://20409234>"
[33m00bc80b[m [stdlib] Bring back toString & co. for staging
[33mddb2591[m stdlib: Avoid a isNative check in _getOwner in the Array's mutableAddressWithPinnedNativeOwner
[33m10166ba[m stdlib: return the correct buffer property in _getArrayPropertyIsNative
[33m7dcbdb0[m IRGen for bridge_object_to_ref: don't emit a check for a tagged pointer if not required.
[33ma037326[m Remove inadvertantly committed debug code from r27120.
[33med66cfd[m Use a callback in the linker to notify clients of newly deserialized functions.
[33m7c5f1e8[m [IDE] Make sure we don't leave structure nodes without pop'ing them.
[33m70a93e0[m Add code completion overload for defaulted arguments
[33m94a8d11[m [CMake] Remove installation of the 'swift-update' symlink.
[33m72312b9[m reject refutable PBD's in non-local contexts.  They are only allowed in function bodies, top level code, closures, etc, not as properties.
[33me5ca5f5[m stdlib: remove unused typealias that was added by mistake
[33m494995f[m [update-code] Remove the 'swift-update' symlink.
[33m42b9d14[m Foundation overlay: remove empty file
[33ma63120f[m fix <rdar://problem/20457938> typed pattern is not allowed on if/let condition
[33m652aace[m Reapply: Fix vardecl parsing so that variables bound in a refutable pattern are not in scope when parsing the else clause. Make an effort to diagnose attempts to  use them with a custom error message for good QoI.
[33m79cc258[m Lower 'throws' to an error result.
[33md6dad48[m Simplify constraint application now that open-existentials are more local.
[33m26ffdc7[m Kill the sequence number in OpenedExistential.
[33m595fb8c[m Introduce lvalue open-existential expressions and start using them.
[33mb8a7ebc[m Add LValue::dump(). NFC
[33ma48c726[m Introduce a writeback scope when opening an existential lvalue.
[33m2dd38ee[m [sil-combine] Teach the optimizer how to optimize bridged casts.
[33ma762fb2[m Teach bridgeFromObjectiveC to make use of the knownConditionallyBridgeFromObjectiveC/knownForceBridgeFromObjectiveC
[33m3effd6f[m Introduce two new compiler-known library functions for performing bridging casts when conformances are known statically.
[33m2bdba63[m Minor clean-ups and improvements as a preparation for the bridging casts optimizations.
[33mf63cae6[m Add initial support into DynamicCasts for handling bridging between error types.
[33m0c2fc7c[m [sil-module] Add a helper method to lookup or create a SILFunction based on the SILDeclRef.
[33m0c42492[m Update the call graph with newly linked-in functions.
[33mad0d20c[m Fold "AbstractCC" into SILFunctionType::Representation.
[33me5cbb67[m Revert "Fix vardecl parsing so that variables bound in a refutable pattern are not in"
[33mcbe78a5[m Use a proper enum in the implementation of search path deduplication (r27087)
[33m0464c3d[m [stdlib] [Generator|Sequence]Of => Any[Generator|Sequence]
[33m858b122[m [stdlib] Workaround for <rdar://20409234>
[33mac3f047[m [stdlib] Renaming fallout from Mirror API review
[33m2ed83b3[m Fix vardecl parsing so that variables bound in a refutable pattern are not in scope when parsing the else clause.  Make an effort to diagnose attempts to use them with a custom error message for good QoI.
[33mf0d5297[m Deduplicate search paths.
[33m2c143ae[m Revert "[stdlib] [Generator|Sequence]Of => Any[Generator|Sequence]"
[33m6fe8614[m Revert "[stdlib] Workaround for <rdar://20409234>"
[33md3d20bb[m Remove an unused LValue path component for opening opaque existentials.
[33m5c33c8e[m Properly print generic signatures of normal protocol conformances (only).
[33m367b2e4[m [stdlib] Mirror -> public/core
[33ma80b1a4[m [stdlib] [Generator|Sequence]Of => Any[Generator|Sequence]
[33med5156e[m [stdlib] Workaround for <rdar://20409234>
[33m4ba169a[m [stdlib] ExistentialCollection -> public/core
[33mc253072[m [test] Disable bin8 decode test on arm64.
[33m67ed0ef[m [test] Fix typo in validation-test/stdlib/SceneKit.swift for 32-bit.
[33mcd6d148[m Use SmallVector consistently across the call graph.
[33mf6e577e[m Remove inexplicable data in CallGraphAnalysis.
[33md394efe[m [test] Fix typo in ClangModules/availability_ios.swift from r27053.
[33med99e14[m SDK overlay: create an overlay for SceneKit
[33m82f6346[m Handle uses of mutating methods of protocol extensions on existentials.
[33m5406878[m Don't synthesize materializeForSet for members of protocol extensions.
[33m441fb98[m Handle lvalue OpaqueValueExprs in SILGen.
[33mcdd5850[m Simplify the tracking of opened existentials in CSApply. NFC
[33m7d6f2ac[m Improve use of properties/subscripts of protocol extensions via existentials.
[33m3737b24[m Test protocol extensions with 'Self' return types.
[33m37fc0c2[m Fix an issue with call graph maintainence in closure specializer.
[33m5ce309c[m remove dead state: no-one ever uses the first member of CurVars, so remove it.
[33mc17a3a4[m fix the ASTWalker to walk into the where/else clauses of a refutable PBD, fixing a crash on the testcase caused by lack of autoclosure contextualization.
[33mfe62aef[m add some tests we don't reject yet.
[33mfc0fb4e[m Reject let/else blocks when the 'else' falls through.
[33mcc45a8e[m [test] Don't run still-crashing compiler_crashers under no-asserts builds.
[33m4a1cd41[m [stdlib] Prototype library-only OptionSet type
[33m182ef27[m [ClangImporter] Handle __attribute__((availability(swift, unavailable))).
[33m04946e5[m add a missing case.
[33m3118f09[m Add SILGen support for Conditional PBD's and add the first example refutable pattern (expr patterns) to show that this works, this enables weird things like:
[33m453529b[m When emitting a 'let' initialization for a value of trivial type, don't register a DestroyLocalVariable cleanup: it will be a noop.  Getting it out of the apparently active set of cleanups allows us to avoid emitting empty blocks in some cases.
[33md3a977d[m <rdar://problem/20402026> Remove scope entry/exit log entries
[33mc5f65bd[m use the new cleanup api to avoid dead blocks for optional-related testing.
[33m6dc6ecd[m factor some code for cleanup emission (which avoids creating an empty block in a common case) out into CleanupManager, where it can be used by lots of clients.  NFC.
[33m22696e0[m [CMake] Simplify compatibility symlink command for libfunctionNameDemangle.dylib.
[33me0d1828[m [test] Changing autolinking-in-immediate-mode test to build its own library.
[33mc5e46b5[m Add Module::failedToLoad(), mainly for REPL and debugging purposes.
[33mf13bffc[m [SDKAnalyzer] Add file existence check. Also, this commit commented out several module names that fail to load.
[33m73c32d6[m remove some no-op overrides and fix some wonky indentation I introduced, NFC.
[33mce14c39[m protocol graphing: +unconstrained associated types
[33m82849e5[m protocol graph dumping
[33m18cd2d6[m slightly simplify code.
[33mfd6ccb9[m Bail from cost computation as soon as we know we'll return false.
[33md0233db[m Unindent and improve interface to helper function.
[33m6c86c52[m Move call graph maintenance logic out of main inlining logic.
[33mfc4c83c[m Unindent a level.
[33m18f7a5b[m Replace a condition with an assert.
[33m0c35b2e[m refactor a bunch of stuff around Initialization to simplify the code and make it easier to extend, NFC.
[33mbea04a3[m Delete FIXME for something that was fixed in r27024.
[33mce4de4e[m Use the correct substitution in the test so that it passes on iOS
[33m9781bda[m Introduce support for serializing and deserializing throwing function types.
[33m4f02e95[m Move function type metadata naming tests to 1_stdlib/TypeName.swift, where they belong.
[33mfea3321[m Update the generic specializer to maintain the call graph.
[33m56de5fb[m SIL: Drop unnecessary bits from SILFunctionType::ExtInfo.
[33m4821f59[m SIL: Separate SILFunctionType::Representation and ExtInfo from AST FunctionTypes.
[33m7c4823e[m Convert PrintAsObjC over to conformance lookup table entrypoints.
[33m1b9ca12[m stdlib: remove old declarations that were marked unavailable
[33m5adf76b[m Missed one comment update.
[33m8fad304[m Fix a leak.
[33m7c62b7d[m Coding style tweaks.
[33mff2dd63[m stdlib: fix coding style
[33m4c4d1b3[m [g-arc-opts] Change all boolean LatticeState queries to use covered switches. NFC.
[33m95ed2af[m Update comment to reflect recent updates.
[33m9d32a15[m [g-arc-opts] Teach ARC that alloc_box introduces a +1 ref count on its container.
[33ma57bfed[m Lock invalidations of the call graph during COWArrayOpt.
[33mfb87132[m significantly simplify the BoolPattern AST representation and logic surrounding it. The SILGen code could be further simplified, but this is progress at least.  NFC.
[33mac55558[m [g-arc-opts] Teach ARC how to recognize insts that *must* (notice not may) use a value and that we will not remove implying that the use will keep the value alive.
[33m3572f1b[m Maintain the call graph in the closure specializer.
[33mbad8678[m Add CallGraphEditor helper class and use it in the inliner.
[33m93198d4[m rework type checking of 'else' blocks in let/else so that we know the enclosing funcdecl in the right cases, enabling the use of 'return' in the else.
[33m0f3c1ee[m RaceTest: Remove workaround for rdar://problem/20418117.
[33mcc038fc[m [g-arc-opts] Move any non-trivial non-templated code from RefCountState.h => RefCountState.cpp. NFC.
[33m5da5831[m [g-arc-opts] Teach ARC to recognize alloc_ref{,_dynamic} introduce objects at +1.
[33mfe3d75e[m Update for feedback from Dmitri.
[33mbbdcf58[m Sema: Add @availability attributes when synthesizing materializeForSet accessors.
[33m1974e3b[m [g-arc-opts] Teach ARC how to recognize when processing bottom up that even though we have paired a retain, release implies we should propagate known safe bottom up since the use of the retain will not be removed.
[33medab72f[m [arc-opts] Teach ARC about when some instructions don't decrement ref counts.
[33m898f11f[m [g-arc-opts] Teach ARC how to recognize StrongEntrance of RC caused by @owned return values.
[33m217966e[m Maintain the call graph during inlining.
[33m730ef41[m Make devirtualizer clients remove old applies.
[33m41f73d4[m Runtime: Try to make lazy ErrorType-to-NSError bridging thread-safe.
[33m8b5f6fe[m Rename '#os' to '#available'
[33m95b7b4d[m rename CleanupLocation::getCleanupLocation -> CleanupLocation::get, NFC.
[33m66ae68b[m Sema: Allow ErrorType-conforming types to be explicitly coerced 'as NSError'.
[33ma15d93f[m Sema: Handle ErrorType synthesis for empty enums.
[33m39683ee[m Remove out-of-date comment.
[33mdbdc0a1[m remove dead code.
[33meb922cd[m type check the 'else' body of a let/else.
[33ma3c4a8c[m Add '*' wildcard to #os()
[33me62845b[m fix <rdar://problem/20426834> incorrect refutable pattern match issue
[33mfaabb7e[m [spec-devirt] Hoist releases right after the apply on self into the diamond.
[33m85ccf15[m Delete obsolete comment.
[33m3bcfaec[m Minor tweaks to call graph.
[33mdd0cbf8[m Update call graph dumping to indicate functions that cannot be reached.
[33mc0fedec[m SimplifyCFG: Only recompute the dom tree on change
[33m5bd9b4a[m SimplifyCFG: sprinkle some verification on top
[33mecd6ed9[m SimplifyCFG: Fix dominatorBaseSimplify
[33me7e6e69[m SimplifyCFG: Don't simplify an instruction without a use in propagateSwitchEnumCondition
[33me5e116b[m SimplifyCFG: simplifySwitchEnumToSelectEnum changes the CFG
[33md9e381f[m SimplifyCFG: Add a method to clear the worklist
[33m4904072[m SimplifyCFG: propagateSwitchEnumCondition should not change the CFG
[33m9e24340[m The SILModule has a lookup table for global variables, use it instead of scanning at O(n).
[33m78a3572[m Rename NoDTC to NoTypeCheck. NFC.
[33m37a79ad[m Add text dumping of the call graph.
[33m723a607[m Reorganize some code in SILGen into new files; NFC.
[33mc1dc4bf[m Reword a couple statistic descriptions.
[33m5f10184[m Add a statistic to count the number of times we build the call graph.
[33m0dd667c[m Delete obsolete comment.
[33m45301dd[m Fix 80-column violations.
[33mc3245da[m Update tests that pass in no-assertions builds so that they do not run.
[33mf4d98da[m Support the use of members of protocol extensions on existential types.
[33m192da7e[m it looks like my changes regressed this test, xfail it for now.
[33m8a07a85[m Progress towards let/else:  - Implement SILGen for conditional multi-pattern PBD's.  - Have the type checker check where clauses on PBDs.  - Change the AST to represent complex if/let PBD's with    composed PBDs instead of breaking them down. For example,    represent:      if let x? = foo(), y? = bar() where x == y {    as a single PBD in a StmtCondition instead of representing    it as three entries in the condition.
[33mb2cb75a[m Runtime: Add a 'swift_becomeNSError' entry point to coerce an ErrorType box to an NSError instance.
[33m321d4d4[m Rename libfunctionNameDemangle.dylib to libswiftDemangle.dylib
[33m980bd81[m Propagate 'throws' information into function type metadata.
[33m37d65f4[m Start tracking SourceLoc data for function "throws" annotations and eliminate the (now unnecessary) "Throws" bit from AbstractFunctionDecls.
[33mdc4b8ff[m Incorporate an optional Clang type into AbstractionPattern.
[33m5728bf8[m IRGen: Don't lay out associated type witness table slots for protocols that don't need them.
[33mbe3137f[m IRGen: Fold a static helper into its only call site, and simplify.
[33m613b194[m [IDE] Honer @testable for top-level completions as well.
[33m7ebd9f1[m Mark methods in protocol extension as final.
[33m0fcea2d[m Remove XFAIL as this passes with no-asserts builds.
[33m0c120e5[m Reapply r26926 after fixing SourceKit test
[33mb94f7a2[m [Importer] Update CF_ENUM detection for changes in Foundation.
[33m57ecdc2[m More "final" fixes for protocol extensions.
[33mac07471[m Make this test not depend on ordering in a Set
[33m10934bb[m Start requiring 'final' on members of protocol extensions.
[33meecba21[m Add some tests for protocol extensions constraining to concrete types.
[33m066274e[m Remove invalidation of loop analysis.
[33m4c4b9ab[m stdlib: avoid masking out the array buffer spare bits if we know that they are zero.
[33m039ebc9[m [build] Fix typo in SWIFT_SDK_*_VERSION.
[33mb855ee6[m [build] Print Xcode and SDK build numbers during configuration.
[33m2f971c2[m re-apply r26871: stdlib: Do the Array fast-path check with a single array property call.
[33m283b08c[m Properly invalidate analyses when we devirtualize during inlining.
[33m6056064[m introduce a new common base class between if and while statements: they are both labeled and have conditions.  NFC.
[33mcc63faa[m [test] Fix a typo in expected output in IRGen/array_value_witnesses.sil.
[33m8d78b9d[m fix <rdar://problem/20410102> SILGen overrelease in pattern match ... a miscompile producing an overrelease that I noticed while fixing rdar://20364869.
[33mf9ca55d[m Revert r26926 which broke a SourceKit test.
[33m17de46f[m [stdlib] ExistentialCollection: perf de-regression
[33m3c215a6[m Execution tests for array value witnesses.
[33mce5a81e[m IRGen: Fix up InitializeArrayBackToFront witness emission.
[33ma190d01[m [test] Fix two tests that didn't expect tagged pointer strings on iOS.
[33m4c3857b[m rename emitIsaDispatch -> emitIsDispatch since they are 'is' patterns, not 'isa' patterns anymore, NFC.
[33m35652f2[m [stdlib] Mirror: Nix ObjectiveCObject DisplayStyle
[33m2ccf038[m [stdlib] Mirror comment: add missing example
[33m44bd9c0[m [stdlib] Mirror: Tweaks in response to API review
[33m3290b0d[m Fix run line for real this time.
[33mc85afb8[m Fix run line of compiler crasher that no longer crashes.
[33m3c21761[m [g-arc-opts] Use RCStateTransitions when processing arguments as well.
[33mc19f45a[m IRGen: Fix class existential weak reference value semantics operations.
[33m0255a5b[m Revert "[stdlib] [Generator|Sequence]Of => Any[Generator|Sequence]"
[33md53bff7[m Revert "[stdlib] ExistentialCollection -> public/core"
[33mf88133c[m Fix <rdar://problem/18851497> Swiftc fails to compile nested destructuring tuple binding
[33ma8807a9[m [sil-opt] Use -O instead of -performance for consistency.
[33m9b77fe1[m [g-arc-opts] Perform same refactoring for top down analysis as I performed for bottom up analysis in r26901.
[33m5c8fde3[m Make PrintAsObjC more tolerant of non-@objc classes within collections.
[33m0b40374[m [stdlib] [Generator|Sequence]Of => Any[Generator|Sequence]
[33m8917537[m SILCombine. Bail out of propagateConcreteTypeOfInitExistential on archetypes.
[33m3282e20[m Fix <rdar://problem/20364082> Incorrect fixit "if let x: T = ..." => "if let x?: T = ..."
[33mcc02b8d[m [g-arc-opts] Refactor out bottomup dataflow instruction initialization into a new visitor class BottomUpDataflowRCStateVisitor.
[33m690daa5[m Back out changes for in-place methods/operators from Xcode 7.
[33m2e188bd[m Fix <rdar://problem/20365753> Bogus diagnostic "refutable pattern match can fail"
[33m6bd99d6[m Disable tests failing on the x86-64 simulator.
[33mccb7f7a[m Update comments and assert messages in call graph verifier.
[33m79ed57f[m standardize naming of tuples and tuple patterns on "elements".
[33ma85cc9c[m Update call graph to track FullApplySites rather than ApplyInsts.
[33m2659b4b[m Add DenseMapInfo for ApplySite and FullApplySite.
[33m4c267aa[m [sil-opt] Add -O as an alias for -performance.
[33m1c00cd0[m Add test to make sure sil-opt sib output is equivalent to swiftc -O.
[33md2dfeb3[m [sil-opt] Support emitting sib files.
[33m910c895[m [stdlib] ExistentialCollection -> public/core
[33me0a0113[m [stdlib] ExistentialCollection: rename a parameter
[33me93a3e3[m [stdlib] ExistentialCollection: fix up comments
[33m55ea9ec[m [sil-combine] Minor clean-up of casts optimizations. NFC.
[33mfc1c526[m [IDE] Fix attempt to break the string.
[33m3bfbd3c[m SIL: Relax verifier constraints on unowned operations.
[33m2c93f56[m [Driver] Don't reuse a possibly-invalidated iterator.
[33mea2cbff[m Remove IgnoreMissing parameter from removeEdgeForApply().
[33me08e118[m SimplifyCFG: Fix Changed handling
[33m804e939[m Use correct method name. NFC.
[33mf31ddf3[m [sil-combine] Invalidate all analyses except for CallGraphAnalysis which we keep up to date manually.
[33m557626a[m Instead of using ~0U to signify we have not found a result yet, use an optional.
[33m44bddea[m [stdlib] Protocol-dispatch ++ and -- for indices
[33ma7d0eb1[m [sil-combine] casts to/from existentials cannot be further simplified.
[33m23b6bd8[m Do not build the call graph just to maintain it.
[33m69a12df[m Revert "stdlib: Do the Array fast-path check with a single array property call."
[33m834645a[m stdlib: Do the Array fast-path check with a single array property call.
[33m6ec9593[m Split the worthiness logic away from the mechanics of inlining.
[33m22254ef[m Another coding style tweak, and a comment update.
[33m3e4d43b[m Coding style tweaks.
[33m05bf59e[m [sil-combine] Inform the CallGraph about newly created ApplyInsts.
[33mf05abc2[m Fix <rdar://problem/20135489> Enum case labels are ignored in "case let" statements
[33m2dc936b[m Remove code that snuck in.
[33m49d76f6[m when setting up implicit memberwise ctors and accessors on subscripts, make sure to install exposed keyword arguments into the TuplePatterns labels.
[33mb122c0d[m [array-semantics] Teach array semantics to update the CallGraph when deleting instructions.
[33m8b36c03[m [sil-combine] Update the CallGraph when deleting apply insts.
[33m5a22ea2[m Remove vestiges of "-diagnose-generic-extensions".
[33mecf96e9[m add a testcase for a diagnostic that is really not right, filed as rdar://20395243.
[33mf7fe8a5[m Fix <rdar://problem/20392122> Destructuring tuple with labels doesn't work
[33me524e96[m [test] Add a code completion test for @testable.
[33m35f5c88[m The lookup context for lookupInModule and lookupVisibleDeclsInModule is required.
[33m2525fbf[m Allow clients of the SILInliner to specify a callback.
[33mb0963b4[m [sil-simplify-cfg] Fix a bug in checked_cast_br jump-threading.
[33m0e47a22[m [sil-simplify-cfg] Fix a stupid copy/paste bug introduced during recent re-factoring. NFC.
[33m72643fd[m Runtime: Implement dynamic cast bridging from NSError to bridged error enums.
[33m38cc1fe[m Remove LazyResolver arguments from API entry points to the conformance lookup table.
[33m68a3d02[m Revert "Dominating edge condition based jump threading"
[33m1ffd301[m [test] Add a testability test that mimics debugging a unit test.
[33m2c1aed9[m [cow] Teach uniqueness check hoisting how to ignore guaranteed calls to ArraySemantic functions.
[33m7b06552[m [stdlib] Default mirror should hide ObjC ivars
[33m2560e62[m Only allow 'throw' expressions at statement positions.
[33mb183b58[m Make pattern tuple labels consistent with tuple expr labels: it isn't valid to use _ as a label.
[33m9cfcebe[m fix a fixme and close an old radar, this example really should be allowed.
[33m08f3470[m Use 'dynamic' to make sure this is going through objc_msgSend.
[33m5829c14[m remove some fairly terrifying parsing logic where we would eat default tuple element values in patterns, and then just drop it on the floor.  Fortunately, it looks like no code in the testsuite was actually using this.
[33mb02da0a[m Add tuple element label information to TuplePatterns.  Before we had no way to represent them, and just dropped them on the ground. Now we parse them, persist them in the AST, and "resolve" them from the expr grammar, but still drop them on the ground.  This is progress towards fixing: rdar://20135489
[33m13bbd3b[m Move generic specializer cloning code into GenericCloner.h/GenericCloner.cpp.
[33m6e02f6b[m More formatting tweaks needed after previous refactoring.
[33m1801c49[m Revert "Allow 'var' parameters in @objc methods."
[33maa0e763[m Imbue ASTContext with a lazy resolver.
[33m19470bc[m [serialization] Anything we write can queue up more things to write.
[33me9074c4[m [serialization] Use cross-references for cross-file conformance references.
[33mdab7302[m Finish wiring up try_apply in IRGen.
[33mfd27530[m Foundation overlay: Groundwork for pattern-matching Swift error enums to Cocoa NSError domains.
[33mfe3c827[m Unindent namespace.
[33m117a6f9[m Fixup formatting from earlier refactoring.
[33m3199515[m Move all GenericSpecializer code into GenericSpecializer.cpp.
[33md1cb9bd[m Rename SpecializingCloner to GenericCloner.
[33m9d81bf8[m Dominating edge condition based jump threading
[33m3c95f18[m Allow 'var' parameters in @objc methods.
[33m0118e5b[m Fix test case
[33m885afc9[m SimplifyCFG: Tail duplicate when coming from objc-method call blocks
[33mb410c42[m SimplifyCFG: move simplify-cfg-sil-combine tests to their dedicated file.
[33m5e8f611[m Fix +[SwiftObject description] and +[SwiftObject debugDescription].
[33m5712a7e[m SimplifyCFG: rewrite the dominator based condition simplification.
[33m1d7a09d[m Implement +[SwiftObject instancesRespondToSelector:].
[33m3b4ba55[m Always return a valid zone from [SwiftObject zone].
[33mcc66378[m Test SwiftObject's implementation of some NSObject methods.
[33m6e08d05[m remove some dead code that I inadvertently committed.
[33m6ee6417[m tuple patterns can never contain varargs, so remove the parsing logic from parsePattern.  Unfortunately, parameter lists (which have their own parsing logic) still lean on the Pattern data structures, so we can't remove this from TuplePattern yet.
[33m9bdb4ea[m inline method into its only caller, NFC.
[33m4bd79ec[m Have resolvePattern reject patterns that have nested UnresolvedPatternExpr's early instead of leaving them to TypeCheckExpr to find in an arbitrary "late" place in type checking.  This gives us better (more localized) diagnostics and reduces downstream errors when a pattern is malformed.  This is the foundation to produce more specific errors than "invalid pattern"
[33m655b2d3[m Inplace: let -> var
[33m4b6c280[m Inplace proposal: Clarify the section on classes.
[33m3307ccf[m docs: add notes from past API review discussions
[33m4edc305[m stdlib: change CVarArgType._encode() method into a '_cVarArgEncoding' property per API review proposal that passed review
[33mcf912bc[m stdlib: underscore the only requirement of CVarArgType
[33maf7a07b[m Remove the post-inliner runs of the devirtualization pass.
[33mf90de4e[m Split trySpecializeApplyOfGeneric() from specializeApplyInstGroup().
[33m315a645[m Remove AIList from Generics.h.
[33m1b75112[m Fix typos.
[33m07a5ebe[m Rename devirtualizeApply to tryDevirtualizeApply.
[33m960a4f1[m Add LangOptions::EnableTargetOSChecking, so that LLDB can ignore OS mismatches.
[33m13e8137[m [test] Add more testability tests, including execution tests.
[33m1b157d4[m [+0 self][arc] When checking if a cond_br touches reference counts, only perform AA on the operands passed to other blocks, not the integer that is being switched upon.
[33m107a276[m Make sure we have operands before dereferencing Operands[1] in CondBranchInst::get{True,False}Operands().
[33mebed094[m Rename 'isSimpleEnum' to 'hasOnlyCasesWithoutAssociatedValues'.
[33ma46c445[m Sema: Derive ErrorType conformances for enums.
[33mb019534[m Refactor 'deriveProtocolRequirement' dispatch to switch on known protocol kind.
[33md808d6a[m [g-arc-opts] Extract out the definition of RCStateTransitionKind into a .def file.
[33mcb1bd84[m Sort some headers and change the ordering to match LLVM style. NFC.
[33m5894736[m Update ABI.rst to point out that mangled types may never begin with a 'z'.
[33m21765eb[m Allow name lookup to find initializers defined in protocol extensions.
[33me519eb3[m Add a simple test for (de-)serialization of protocol extensions.
[33me164c6f[m Don't permit type definitions within protocol extensions.
[33m557751b[m Protocol extensions cannot have inheritance clauses.
[33m1b81f49[m Test extensions of @objc protocols.
[33mde75465[m Specialize diagnostic banning @objc on members of protocol extensions.
[33meee40fc[m Add basic parsing, sema and mangling support for throwing function types. Next up, metadata and serialization support, as well as more tests.
[33m0b12af7[m Really use covered switches this time (no default cases!). NFC.
[33mf9d0329[m Remove the remaining bucketing in the generic specializer.
[33m8bfe54f[m fix <rdar://problem/20364869> Assertion failure when using 'as' pattern in 'if let'
[33ma7a5473[m revert rr26760: SILPassManager: Further reduce the number of pass runs
[33m0edf7ef[m Fix indentation of various DEBUG(...) messages.
[33m379cae7[m unbreak the dox build.
[33m1110dc6[m SILPassManager: Further reduce the number of pass runs.
[33ma01843b[m Disable running compiler_crashers tests when using Address Sanitizer.
[33mecb78fe[m lit: add 'no_asan' feature to mark when address sanitizer is not being used.
[33m160b8e0[m SILPassManager: A new method to reduce the number of SIL pass runs.
[33mf520ef8[m Add the PassKind as a property in SILTransform.
[33md481991[m First steps at simplifying generic specializer interface.
[33m1312dc3[m Remove unused entrypoint in generic specializer.
[33ma97992b[m Change a condition to an assert.
[33mb6e13bd[m - Diagnose conditional PBD's without an else, conditional ones that do have an else,   and refutable pattern bindings without an initializer. - Enhance ASTDumper to dump where/else clauses on PBDs. - Merge if/let conditional PBD logic into the mainline logic now that they are all   potentially conditional (more simplifications coming for this)
[33m345ac20[m add a testcase for a fixit.
[33mea6e1f2[m Avoid unnecessary calls to CodeCompletionString::getName during sorting
[33m6d8fff9[m Parsing and basic structure of try_apply.  Not yet properly threaded into IRGen; tests to follow when that's done.
[33m1c8fcec[m Convert code that was using ~0 as a failure value to use llvm::Optional instead.
[33mdd535d0[m Remove unused header.
[33m4819612[m fix source range computation for refutable PBD's, this will be tested with a forthcoming fixit.
[33m191cfa9[m Add a class devirtualization test for devirtualizing during inlining.
[33m7ffe418[m Add a test mimicking the default definition of SequenceType's generate().
[33mfbf841b[m 'Self' in protocol extensions is not dynamic 'Self'.
[33m83b194f[m Remove some of the passes in the optimization pipeline.
[33m8fd752b[m Add a test for devirtualizing in the inliner.
[33m0857380[m Test ambiguous witnesses due to implementations in protocol extensions.
[33me31ffa6[m Use covered switches to catch potential bugs in the future. NFC.
[33m8a8d53b[m Sema: Infer required availability for synthesized designated initializer overrides.
[33m94e5538[m Rename the test so that it does not use the radar number in its name. NFC.
[33m66b4599[m Add some more executable tests for protocol extensions.
[33m7d5256f[m Devirtualize in the performance inliner.
[33m1d39330[m Mark 0066-diagnoseunknowntype.swift to have an expected failure under ASan.
[33m346ed6e[m Implement partial ordering for protocol extensions.
[33m71b0e7b[m [sil-simplify-cfg] Fix a bug in CheckedCastBrJumpThreading.
[33mb519148[m IRGen: Fix inlined DebugLoc generation for upstream LLVM r233573
[33mabee328[m Basic partial ordering for members of protocol extensions.
[33m21bc454[m Remove unused library search path
[33m163c0d1[m Fix a devirtualization testcase.
[33m6b27ec7[m Fix a warning in the test.
[33mf2b0e99[m SimplifyCFG: Simplify terminators which jump to a common destination block (without arguments) on all successors.
[33m9c556c3[m Execution tests for NSError-as-ErrorType.
[33m233f8cf[m Runtime: Fix accidental fallthrough in swift_getErrorValue from NSError case to normal case.
[33mbe18da2[m IRGen: Implement init_existential_ref from NSError to ErrorType.
[33m751724c[m SILGen: Special-case NSError to ErrorType erasure.
[33mcc0e31f[m fix a test that I accidentally didn't update right.
[33m55c45ad[m Add some missing accessors for the where/else clause of a PBD. Add an isRefutable() predicate to a PBD overall, which is true iff the PBD has any refutable patterns in it or has a where clause.
[33m1a27013[m move isPatternSyntacticallyIrrefutable into a method on Pattern (and rename it), NFC.
[33m21b2e9e[m add parser and AST representation support for where/else clauses on let/var decls, some highlights: - Enhance PBD with a whereExpr/elseStmt field to hold this. - Start parsing the pattern of let/var decls as a potentially refutable pattern.  It becomes   a semantic error to use a refutable pattern without an 'else' (diagnostics not in place yet). - Change validatePatternBindingDecl to use 'defer' instead of a goto to ensure cleanups on exit. - Have it resolve the pattern in a PBD, rewriting it from expressions into pattern nodes when valid. - Teach resolvePattern to handle TypedPatterns now that they can appear (wrapping) refutable patterns. - Teach resolvePattern to handle refutable patterns in PBD's without initializers by emitting a diagnostic   instead of by barfing, fixing regressions on validation tests my previous patch caused, and fixing   two existing validation test crashers.
[33mc6134d9[m prune #include
[33mefac09c[m improve ASTDump output, otherwise NFC.
[33m6bd51ea[m Small style cleanups and convert query to use covered switch. NFC.
[33m5f67665[m Runtime: Fill in the hooks to be able to use an NSError as an ErrorType.
[33m50393fa[m Restrict IRGen test to x86_64 only
[33mb9f7956[m Revert "add parser and AST representation support for where/else clauses on let/var decls."
[33mcdf2e85[m [CodeCompletion] Use a better API to retrieve all the protocols a type conform to.
[33m3422577[m Sema: Do not emit deprecation warnings for references inside deprecated declarations
[33m9c53b65[m add parser and AST representation support for where/else clauses on let/var decls.
[33m90cf8ae[m [CodeCompletion] Add types whose extensions conform _ErrorType protocol to the completions of throw statement.
[33m6d297f9[m make ast dumping of UnresolvedPatternExpr nicer, actually dumping the pattern inside of it instead of printing it.
[33mccde6bb[m Allow protocol extensions to add further constraints via a trailing where clause.
[33m2609a97[m Perform name lookup for where clauses based on the generic parameter's context.
[33m707e288[m Delete some unnecessary default cases we now warn about.
[33mfa90fec[m Teach Pattern::forEachVariable how to handle dig into ExprPatterns to find variables, enabling it to work with refutable patterns in addition to nonrefutable ones.  This allows eliminating some special case code in the parser, NFC.
[33m40242d3[m rework PatternMatchEmission::emitSharedCaseBlocks to avoid emitting empty blocks (containing just an uncond branch) when a shared block isn't actually shared.
[33mc5dbf06[m Foundation overlay: Conform NSError and CFError to ErrorType.
[33m7293013[m Sema: Generalize AvailabilityFixitParentFinder to take predicate
[33m74df04c[m Revert "now that SILGen has a notion of whether a case can be fallthrough'd into, use this to avoid emitting empty basic blocks in case statements all over the place."
[33m758c7b7[m This test is failing after the changes to the pipeline
[33md5769ad[m fix <rdar://problem/20097963> incorrect DI diagnostic in unreachable code
[33m7c189eb[m improve diagnostic and add test for unreachable default.
[33m964078e[m improve static typing of ClauseRow::ClientData, NFC.
[33m9da3558[m now that SILGen has a notion of whether a case can be fallthrough'd into, use this to avoid emitting empty basic blocks in case statements all over the place.
[33m0b2312e[m diagnose unreachable cases in switches, fixing: <rdar://problem/20253447> `case let Case` without bindings incorrectly matches other cases
[33mda0d183[m Fix simplify_cfg_args.sil. This was my bad.
[33m79161dd[m Try to cope with LLDB's extensions of typealiases of unbound generic type.
[33m624776b[m Revert "DebugInfo: Update for ToT LLVM change r233446"
[33m99e0b6b[m [codemotion] Instead of passing in whether we are late or early, create late early entry points.
[33m9a215e0[m [arc] Add support for performing a ARCUse query on a reverse range.
[33m07d5537[m Add SILInstruction::moveAfter(SILInstruction *).
[33m1ffb87b[m Implement a 'throw' instruction in SIL.
[33mdc5a03a[m Add IRGen support for error results from functions.
[33me2396c3[m Add convenience methods for asking about the representation of a SILFunctionType.
[33mc422680[m DebugInfo: Update for ToT LLVM change r233446
[33m4ec67e9[m [arc] Teach ARC analysis how to determine uses of terminators rather than just bailing.
[33ma07e8c8[m Make the late code motion hoist releases.
[33m74777a6[m [remove-pin] Teach remove pin how to recognize a safe guaranteed array semantic call sequence.
[33md4e2748[m Add guaranteed self option to sil-opt.
[33m9b0cb40[m [sil-simplify-cfg] Move the implementation of CheckedCastBrJumpThreading into its own file. NFC.
[33m9c1b0e5[m Remove unused variable. NFC.
[33m1e99e16[m Remove some of the passes at the late stages of the optimization pipeline.
[33m412f65a[m Fix a Release mode warning of unused variable.
[33mfb2c8aa[m [SDKAnalyzer] The initial commit of swift sdk digester. This tool takes the input of two versions of the same sdk and outputs their diff to facilicate the auto-migration of sdk clients. In this initial commit, we take the path of one sdk and generate a tree describing its API content. Next, we will diff trees generated from different versions of the sdk.
[33md4d4694[m Introduce a few defensive null checks to fix 157 compiler crashers.
[33mf8bf365[m Rebrand TR_NominalInheritanceClause as TR_GenericSignature, and support functions.
[33m09d665d[m Drop the DeclContext parameter from TypeChecker::checkInheritanceClause().
[33m59926f1[m Acknowledge that extension declarations have inheritance clauses.
[33m238ab88[m Remove TR_InheritanceClause; it's unused now.
[33m941e5b6[m [patternmatch-silgen] Improve silken and diagnostics for switches on bools and tuples of bools.
[33m06eb644[m Add an unreachable diagnostics test for the "case nil" as .None.
[33m89e61e2[m SILGen: Update UIApplicationMain stub now that NSStringFromClass has been nullability-annotated.
[33m94352ef[m SimplifyCFG: Allow canonicalizeSwitchEnums to report when the function was modified.
[33ma23ec76[m Remember to invalidate PostDom.
[33mb73f89d[m Revert "Revert "Disable IRGen tests" and update tests for codegen changes."
[33m5994a18[m ClangImporter: Whitelist private types used by internal adopters.
[33m240ff14[m Split DominanceAnalysis into Dom and PDom using FunctionAnalysisBase.
[33m50803a7[m Create FunctionAnalysisBase to handle the boiler plate of caching and invalidating function specific analysis.
[33md216feb[m Revert "Disable IRGen tests" and update tests for codegen changes.
[33md29f0c9[m Simplify the code based on Jordan's comments.
[33md0ab689[m Start allowing extensions of protocol types.
[33m75d0c16[m Perform substitution in ProtocolConformance::getInheritedConformance() properly
[33mf0fa502[m Split the RCIdentityAnalysis analysis to allow per-function invalidation.
[33mf3c3576[m Improve handling of switch cases using nil literals when switching on an optional.
[33m85a3751[m Remove SourceFile::getImports in favor of FileUnit::getImportedModules.
[33meb4ade4[m Honor @testable import for internal decls in ValueDecl::isAccessibleFrom.
[33me334eed[m Record @testable in a SourceFile's import list.
[33m38752c2[m [CMake] Move swift_llvm_config to SwiftSharedCMakeConfig (for SourceKit).
[33m8a3fcf6[m Add -disable-testable-attr-requires-testable-module.
[33mccf0f2a[m [test] Remove false comment about use of @asmname.
[33m4a56a6b[m Generalize testcase to work on 32-bit targets. <rdar://problem/20325040> [build-bot failure] Swift :: DebugInfo/return.swift
[33m9ef85c4[m SimplifyCFG: Move optimization from CondFailOpt to SimplifyCFG and remove CondFailOpt pass.
[33m28d9abc[m SimplifyCFG: Eliminate a block argument if all incoming values are equal.
[33mbdc7475[m Sema: Add temporary flag to stage in availability checking in implicit functions
[33m209d9d6[m fix the dox build.
[33m1843864[m [CodeCompletion] Showing the member functions of Optional. Previously, when code completing Optional<T>., we only show the member functions of T; This fix adds the member functions of Optional to the code completion list. rdar://20316534
[33m1f1cf13[m [stdlib] Mirror review update
[33ma4ecf9c[m Revert "Teach normal name lookup to find members of protocol extensions."
[33m89e0fbf[m Runtime: Support casting into and out of ErrorType boxes.
[33m7514921[m Runtime: Remove obsolete _stdlib_conformsToProtocol function.
[33m1e6b445[m Teach normal name lookup to find members of protocol extensions.
[33ma8d1532[m Use the native method calling convention for methods in protocol extensions.
[33m7b28d3f[m Disable IRGen tests
[33m2bfe3cf[m Teach the SIL Linker pass to preserve branch information.
[33m4afd430[m Disable generic specialization in the devirtualzier.
[33mbf50078[m Fix assert Projection so it works across all platforms.
[33m0ff07e9[m Add a quick comment. NFC.
[33m84a444d[m [arc] Move duplicated code that uses ARCStateTransitions from {TopDown,BottomUp}RefCountState into RefCountState. NFC.
[33me36661b[m [rc-id] Be conservative and remove the notion of ARCExitUser. This was too aggressive.
[33m9816e25[m [arc] Add RCStateTransition.
[33m7d8a24a[m [arc] Rename RefCountState::{get,has,}Value => RefCountState::{get,has,}RCRoot().
[33m7eb49d6[m [arc] Move ARCBBState into its own file. This leaves just the actual sequence dataflow in GlobalARCSequenceDataflow, nothing else. NFC.
[33m9e692a5[m Fix format mistakes that snuck in (Sorry!).
[33m27f0e7b[m CMake: adapt to upstream CMake changes
[33m15852a1[m Allow a protocol extension to reference an associated type of its protocol.
[33m654f74c[m Build armv7s for iOS, use architecture names in paths
[33m468a1ea[m SimplifyCFG: Simplify and sanitize the jump threading code
[33m0b0976f[m [stdlib] ExistentialCollection: post-review changes
[33m256e038[m [CodeCompletion] Add exception handle clauses to catch stmt completion.
[33m1bbcb91[m Clean up some "XFAIL: asan"'s that are no longer valid.
[33me8d84c0[m Rewrite the code to avoid inserting unhandled instructions rather than removing it after insertion. NFC.
[33m28042c7[m Fix a bug in the comparison of -INT_MIN values. The result of abs() is an unsinged number that can represent the complete input range. We need to use unsigned operations on the result of abs().
[33m7aa6a27[m Abbreviate the constraint argument names to match the comments. NFC.
[33m9d8c985[m Add an optimization pass to optimize cond_fail instructions.
[33m663f085[m stdlib: Use a dedicated pointer spare bit to distinguish between native and ObjC object in BrigeStorage.
[33m7eeffa0[m stdlib: Do the needs-type-check check in the Array subscript immediately before it is needed.
[33m5c7f0e8[m stdlib: Don't do subscript checking for objc arrays.
[33m52ec89a[m [arc] Refactor out all BBState management from the evaluator into an ARCBBStateInfo class in GlobalARCSequenceDataflow.cpp. NFC.
[33m876ad89[m [arc] Move RefCountState's implementation into its own file. NFC.
[33mdfccb5d[m Add call graph support for an apply of a partial_apply.
[33m62065f7[m Update function sig opts to work with upcoming call graph changes.
[33ma134e3f[m Remove preallocated map. NFC.
[33m0688dbf[m [rcid] Teach RCIdentityAnalaysis::getRCUses() how to ignore certain uses that are inert from its perspective.
[33m7011a5f[m [generic-specializer] Add support for specializing generic partial_apply instructions.
[33m332af2a[m Introduce a base class for ApplyInst and PartialApplyInst.
[33m88e19c9[m Pass a map by const reference rather than by value.
[33m3d77855[m Start allowing extensions of protocol types.
[33m2350895[m Fix the test: Use parameters instead of literals. NFC.
[33mf7403e3[m SILGen shouldn't know about ModuleFile, use FileUnit instead.
[33m551bfef[m In-place methods should be marked as mutating.
[33m5756f0b[m Revert "Temporarily enable building 'armv7s' slice for Swift dylibs."
[33m333447e[m Add 'armv7s' to SwiftSetIfArchBitness.cmake.
[33mc3c12f0[m Temporarily enable building 'armv7s' slice for Swift dylibs.
[33m3f83973[m Handle multiple sib inputs.
[33m0d9fb1a[m [CodeCompletion] Make sure only instantiable types are included in code completion options when completing a throw statement.
[33m35c56fb[m [Serialization] Only serialize vtables for classes from the current module.
[33mf8a1aaf[m [sil-simplify] Add a peephole for XOR
[33m381e9eb[m [test] Add a missing run line.
[33m35b7db3[m Parsing support for error results from SILFunctionType.
[33m6f43e54[m [CodeCompletion] Auto-completing the throw statement. When the code completion token appears after throw keyword, a set of visible decls and instances conforming _ErrorType are recommended as completion.
[33mcce9081[m Teach getSelfTypeForContainer() that it's rude to crash when the container has no type.
[33mdee6156[m Execution tests for ErrorType erasure, dispatch, and reflection.
[33mb7f84a6[m Runtime: Allocate Swift errors as an NSError subclass.
[33mff5f87f[m Runtime: Add ExistentialTypeMetadata helpers for taking values.
[33m33ce2bc[m Spot fixes, NFC
[33mee69e2e[m Runtime: Return after false assertion.
[33me195a2b[m IRGen: Bitcast address of allocError storage to the concrete type's storage type.
[33m784a05f[m [cmake] Replace a bunch of OSX checks with Darwin checks
[33me320b24[m Fix a bug in the code that removes overflows from signed multiplication.
[33mad85a0f[m Revert "Nuke the intermittently failing test for now: emit-sib"
[33m08be73b[m Nuke the intermittently failing test for now: emit-sib
[33m13c9f22[m Fix a bug in the code that removes redundant overflow checks in signed multiplication.
[33mae75f15[m Teach DCE to invalidate branches and calls only if changes were made.
[33mb6e65e4[m XFAIL: emit-sib test
[33m120c5ed[m [test] Update tests after clang change for rdar://19985330
[33m972d0d6[m Compiler crasher 1293 no longer crashes after r26508.
[33mb7dc974[m Fix test by adjusting spacing around range operator.
[33mdc01d61[m [overflow] Teach the overflow optimizations to get rid of multiplication overflow checks.
[33m9b6ac6e[m Add swift_runtime_objc_sources on all Darwin platforms
[33meb7e352[m Don't require UUID on Darwin
[33m477b697[m Putting incorrectly removed spaces back. NFC.
[33m14f5fb8[m SimplifyCFG: small refactoring, NFC
[33m08bfb01[m Tweak exclusion logic in function signature optimizations.
[33mdb3530e[m Tweak function deletion logic in mandatory inlining.
[33m1f23ff2[m Remove the transparent bit from apply instructions.
[33m52a332b[m Specify that the static_asserts I inserted in the past couple of comments are meant to ensure behavior does not change by mistake, but are open to be changed if one wishes to modify them on purpose.
[33m254c784[m [+0 self][pin removal] Teach pinremoval how to use RCIdentityAnalysis when removing pins.
[33m5c3b4a8[m [cow] Teach uniqueness about mark_dependence on the array value.
[33ma2233eb[m [cow] Replaced some for () { if-else-if-else } code with common terminator statements with individual terminator. NFC.
[33m3ec2d15[m Shrink Projection to 24 bytes and Add some static assertions to make sure that SILValue and Projection stay the same size and standard layout.
[33ma367fea[m Make all autoclosures transparent, and stop checking isTransparent on apply.
[33md3b783d[m Re-enable REPL test for conformances added after they are checked.
[33m3057d17[m [stdlib] Mirror test: back to a simple RUN: line
[33m3ca8e20[m [stdlib] Mirrors: more renaming for uniformity
[33m34af1fb[m [stdlib] Mirrors: Implement the QuickLook stuff
[33m0f7c52f[m [stdlib] reflect(x) => Mirror(reflect: x)
[33m8a64deb[m [codecompletion] auto-completing the catch statement. When the code completion token is seen after the catch keyword, a set of visible error types are suggested as completion.
[33m6211632[m Fix typo in test.
[33mbb66f0f[m Fix typo and reword sentence in comment.
[33m3bb5122[m During mandatory inlining, look at isTransparent() on the callee.
[33m6ad58cc[m SequencesAndCollections: add sections about mutable and range replaceable collections
[33mf8c26ec[m [stdlib] Mirrors: rename Schema to DisplayStyle #2
[33m21da783[m [stdlib] Mirrors: rename "Schema" to "DisplayStyle"
[33m2a84ade[m [stdlib] Clarify an oft-repeated doc comment
[33m1f76eca[m [stdlib] Mirrors: apply pre-review commentary
[33md6bc897[m If imported calls return nil for __nonnull NSString *, pretend it was "".
[33m668928c[m Runtime: Handle ErrorType's layout in ExistentialTypeMetadata accessors.
[33m1ee6f7e[m Implement syntax changes for in-place methods.
[33m2822677[m [stdlib] Clean up some endline layout in the tests
[33mf5fb694[m [stdlib] build SwiftExperimental with -parse-stdlib
[33ma18cd98[m Update compiler crashers that don't fully crash under ASan.
[33m82242f6[m Update flags for linux compat.
[33mad8454d[m Disable ExistentialCollection on linux for now.
[33mef5f7cd[m Shuffle link dependencies for gnu ld.
[33m5e223da[m Verify blocking job count doesn't increase.
[33m8571b4f[m Runtime: Check for SpecialProtocol::AnyObject instead of strcmp'ing the mangled protocol name.
[33mb60cf1e[m Build iOS overlays for TVOS
[33m523c68a[m Disable broken test
[33mfeb5371[m Runtime: Use ObjC pointer value witness for ErrorType.
[33m7431234[m SIL.rst: trim
[33m98fd4f6[m Delete obsoleted test from previous commit.
[33m69dc123[m Don't diagnose failing to load an autolinked library in immediate mode.
[33m87aa7a2[m Update String test to new Foundation API (nullability audit)
[33md2f6186[m swift-ide-test: clean up -dump-api support
[33mf1d5365[m Add a test for the API dumper
[33mce13c48[m SimplifyCFG: Ignore expect-intrinsics for dominator-based cond_br optimization.
[33m2c967f8[m SILCombine: Optimize binary bit operations: and, or, xor.
[33mb0f55d7[m Enable bridge_object_to_word instruction for CSE.
[33m1258662[m CoreAudio overlay: add APIs that were blocked by rdar://16974298 (extensions on generic types in a different module)
[33mb08f904[m CMake: remove duplicated dependency that broke the build on Linux
[33m55589c0[m Remove the prohibition on public extensions of generic types.
[33m4923887[m Separate the archetypes of extensions from those of their nominal types.
[33m8b97f91[m Reimplement (de-)serialization of protocol conformances.
[33m683317e[m Fix two cases where SimplifyCFG invalidated analysis too aggressively.
[33m83a4841[m [ClangImporter] Clean up subscript thunk generation code.
[33m8247c2d[m If imported calls return nil for 'NSArray * __nonnull', pretend it was [].
[33m73ae28a[m Revert garbage from a .cpp file
[33m7d23d75[m [test] Fix typo in CHECK line.
[33mab408d4[m Update the compiler and SDK overlay for nullability and generics in Foundation
[33m042dc8e[m StdlibRationales: provide better examples
[33ma0c64d7[m Teach getEffectiveAccess() to respect -enable-testing.
[33mf74bc71[m Split getAccessibility() into getFormalAccess() and getEffectiveAccess().
[33mdac0dc1[m [CMake] Reference LLVM components using COMPONENT_DEPENDS, not LINK_LIBRARIES.
[33m5d2f32b[m Disallow trailing closures in catch patterns and fix an assertion with rethrows out of non-exhaustive catch statements.
[33m1c18a71[m IRGen: Implement boxed existential instructions.
[33ma5fb34f[m SIL.rst: Hook up links to existential box insns.
[33m2c55a03[m swift-ide-test: add a -dump-api option
[33m5b0d96e[m Fix a bug in @inline(...) attribute parsing
[33m51637bb[m New capabilities for CharSourceRange
[33m3c64191[m [CodeCompletion] Excape keywords. When auto-completing a argument whose name is a reserved keyword, we escape it by surrounding backticks. rdar://18189510
[33m74d08ed[m Teach the SILLinker to invalidate only the linked functions (and not the entire module).
[33m185d5f7[m Make the capture propagation pass report that it does not change the cfg.
[33m908e75e[m Teach the perf inliner to invalidate only functions that were modified.
[33m1558753[m Invalidate analysis only for deleted functions (no need to invalidate all functions in the module). NFC.
[33madeebd8[m [PM] Expose the invalidation API. NFC.
[33me00040c[m Teach the generic specializer to report that it preserves branch information.
[33m6099ac5[m Move the clang dependency LLVMDebugInfoDWARF into ClangImporter so it also gets picked up by swift-ide-tests.
[33me1b7d03[m CMake: clangCodeGen dependends on LLVMDebugInfoDWARF
[33mf79e6ab[m Missing header includes ...
[33m96776e7[m Fix the header include
[33m349dd24[m Add now missing include
[33mda92b6f[m Turn the analysis invalidation code into an early exit. NFC.
[33md78b376[m [passes] Replace the old invalidation lattice with a new invalidation scheme.
[33m5b91651[m Write inherited conformances in a deterministic manner.
[33mc23a877[m Adapt to Apple clang change fa1a389c72b32cf46195ef88f5f67b341372a4cb.
[33mfc1e5c7[m Revert "Adapt to Apple clang change fa1a389c72b32cf46195ef88f5f67b341372a4cb."
[33mae48cc5[m Adapt to Apple clang change fa1a389c72b32cf46195ef88f5f67b341372a4cb. <rdar://problem/20263289> Change in clang -CreateLLVMCodeGen - swift no longer builds
[33m6d5706b[m Add a now missing include file
[33m680b1de[m Add a now missing include file
[33m3cbb7d3[m Add a now missing include file
[33m04e9c98[m Start threading a DeclContext through substitution computation.
[33mc5b9f26[m -enable-source-import hacks for various tests that are sensitive to them
[33m479660b[m When !NDEBUG, track the contexts of archetype types.
[33m06a9204[m SILGenConformance works with normal protocol conformances, only.
[33m159ecf7[m SILPrinter: print the name of protocol conformance using its generic signature.
[33mef8cc44[m Runtime: Instantiate existential metadata with special protocol set.
[33md2b42a6[m [stdlib] ExistentialCollection: finish commenting.
[33m5317677[m Revert "[IRGen] Fix build error due to clang API changes."
[33m58b00f8[m Unindent code within namespace.
[33m08d3460[m Implement throw expressions.  Untested.
[33m2931543[m Revert "XFAIL failing IDE tests while BenL investigates. rdar://20245658."
[33m87ea087[m [stdlib] ExistentialCollection: documentation
[33mee4aa14[m Stop reordering blocks in SILBuilder::emitBlock.
[33m93ff088[m [stdlib] AnyGenerator is a Sequence
[33m16ce901[m [stdlib] Finish doc-commenting Mirror support
[33m4ffc3a7[m [IRGen] Fix build error due to clang API changes.
[33ma0a16d7[m Implement the do/catch statement.  Tests to follow.
[33mf19791b[m [stdlib] Mirror: commenting and naming
[33m5bde4a0[m Sema: Make availability Fix-It notes more descriptive.
[33m9c7280c[m Use ProtocolConformance::subst() when digging out inherited conformances of specialized conformances.
[33mc76fd52[m Don't crash when dumping a deserialized extension context.
[33me5a589e[m Ensure that generic parameters of extensions of generics get the appropriate DeclContext.
[33maf4aa6d[m Opt-in diagnostic for extensions of generic types without generic parameters.
[33m2fae11d[m Serialize generic requirements of extensions.
[33m7ee6f7b[m Conformance table: stop expanding deserialized conformances.
[33m813df95[m Register protocol conformances more eagerly with the conformance lookup table during deserialization.
[33m7708c5a[m Start moving away from (Nominal)?TypeDecl::getProtocols().
[33mf50ef50[m Start detangling the uses of TypeDecl::getProtocols(). NFC
[33m0d5bdd3[m Replace the SCOPE_GUARD macro with uses of the defer() macro, and merge Doug's "performance optimizations" into defer :-)
[33m70c4b6f[m Remove a code completion test that became pointless now
[33m9223cca[m Add a test for fixit
[33md15d544[m make a (horrible) lexer diagnostic precise instead of leaving it to the user to figure out whether it is unhappy about prefix or postfix.
[33md46a289[m allow tok::period (not just tok::period_prefix) when starting a prefix unary operator for a member element reference.  This improves error recovery and fixes cases where we'd reject invalid code in unspaced situations (like "(.x)") this fixes rdar://20251513.
[33m82956ed[m fix a QoI regression I introduced in r26224.  If an initializer expr in a var/let decl is invalid and produces a ParseError, recovery by producing an AST with an ErrorExpr in it instead of dropping the initializer on the floor.  This silences downstream errors about "must have an initializer" sorts of stuff.
[33m0e0e9ea[m fix <rdar://problem/15685991> QoI: Missing leading zero in floating point literal should have a FixIt
[33m080b7df[m Remove the default handle-all Decl and DeclAttribute cases from ASTVisitor and privatize SILGen's statement emitter.  NFC.
[33mbd88d3f[m Sema: Suggest availability Fix-Its in proper location for enum cases.
[33m759b2f0[m Add a cast that would allow us to build using old and new SDKs
[33m3ab2e20[m Devirtualize during mandatory inlining.
[33m63f11bf[m Set IsThunk on reabstraction thunks.
[33m6889fc8[m Mark protocol witness thunks as transparent.
[33mbe2d906[m [stdlib] Mirror: some commenting, one name change.
[33m61ae51d[m Fix bad indentation in the NSStringAPI test.
[33mc3f07f4[m Add a more thorough test for String.localizedStringWithFormat()
[33mc421c51[m StdlibUnittest: add facilities to replace NSLocale.currentLocale()
[33md315d5c[m Fixup test output to unbreak build.
[33mbff2349[m [compile time] Rewrite the code to reduce the number of map lookups.
[33m0595069[m Do not inline based on @transparent in the performance inliner.
[33m1a6d120[m [stdlib] New Mirrors: much API cleanup
[33m2cec37e[m Use isTransparent() from the referenced function rather than the apply.
[33m2e08afb[m Fix for 80-column violation.
[33m4eb47f0[m Remove unused helper function.
[33ma9c3b7a[m Revert "XFAIL Failing Debug Info tests to unblock builders. rdar://20245578."
[33m47aba92[m Add an explicit check for null here — LLVM just became stricter.
[33mb45266d[m Allow the generic specializer to specialize transparent functions.
[33mbbeee76[m Remove the old API for preserving LoopInfo and DomInfo
[33m2781e93[m Port COW and LoopRotate to use the new locking-analysis API. NFC.
[33m5ad8aee[m [PM] Teach the pass manager about locked analysis that should not be invalidated.
[33m141c0d8[m [PM] Add the ability to lock analysis and make sure they do not respond to invalidation messages.
[33m4ba1dc2[m Update the smallvector size to match the number of passes and analysis we are using.
[33ma50a924[m Teach the devirtualizer to only invalidate analysis for functions that were modified.
[33m48f84e1[m [PM] Add API for module passes to invalidate a specific function.
[33m0a11a60[m Fix a doc line.
[33m60b02a5[m XFAIL failing IDE tests while BenL investigates. rdar://20245658.
[33medf49c8[m IRGen: Set the special protocol ID in protocol descriptors.
[33mae9aa9e[m IRGen: Reuse ProtocolDescriptorFlags layout shared from the runtime.
[33m3b5634c[m XFAIL Failing Debug Info tests to unblock builders. rdar://20245578.
[33m6af025b[m [stdlib] NewMirrors: bring back our Schema enum
[33mb606134[m cmark Build Support
[33m530ec9a[m Revert "Allow the generic specializer to specialize transparent functions."
[33m1c00533[m Allow the generic specializer to specialize transparent functions.
[33mc0712e8[m Runtime: Reserve some protocol descriptor bits to identify special protocols.
[33m277dd82[m IRGen: add TODOs for error handling
[33m50c6e93[m [stdlib] NewMirrors => SwiftExperimental
[33m6b7f566[m [stdlib] NewMirrors: remove MirrorPathType
[33m4d7bc24[m [stdlib] NewMirrors: rename "address"=>"descendant"
[33mfff41e4[m Hide _UnderscoredProtocols in code completion
[33m3f6a14a[m Eliminate NominalTypeDecl::(get|set)Conformances.
[33m9bd774f[m Eliminate ExtensionDecl::(get|set|)Conformances.
[33m87389cb[m IRGen: Exit with an error in case of no source files for multi-threaded compilation.
[33m41747b6[m [+0 self] Enforce the retain/copy, call, release/destroy pattern for @guaranteed and @in_guaranteed parameters.
[33m4874f0e[m Add options -sil-view-silgen-cfg and -sil-view-guaranteed-cfg.
[33m51a6aa1[m [stdlib] NewMirrors: legacy mirror adaptor, addressing
[33m2795a47[m App extension modules aren't distributed publicly.
[33md5f3e87[m Sema: Tweak availability and deprecation diagnostic text
[33m6278bad[m Foundation overlay: use the current locale in String(localizedStringWithFormat:)
[33m3f27165[m Remove the witness_method instruction during devirtualization.
[33ma476593[m [stdlib] NewMirrors: use ExistentialCollection
[33m9ec27cb[m Runtime: Stub out runtime operations for ErrorType boxes.
[33mf2eac29[m Revert "Put the actual protocol in the synthesized attribute name."
[33mbb18a4c[m Use getLocalConformances() in the AST verifier.
[33mfa6c8f1[m Teach SILGen to use getLocalConformances() when emitting conformances.
[33meb7f1c2[m Temporarily disable configuration of watchOS builds
[33ma5a4675[m Teach SILGen to use getAllConformances() when emitting witness tables we might need.
[33m7502d40[m Replace an unnecessarily complicated traversal of protocols/conformances with DeclContext::getLocalConformances(). NFC
[33m27f58e8[m Replace a wordlist walk over conformances with NominalTypeDecl::getAllProtocols(). NFC
[33ma2a1862[m Start using getLocalConformances() for serialization.
[33m4ae060f[m Put the actual protocol in the synthesized attribute name.
[33m332e4d1[m Replace a manual crawl through conformances with a use of getAllConformances().
[33m539c4b1[m Use getAllConformances() in code completion rather than a manual wordlist.
[33mad49736[m Eliminate useless scratch buffer from getAllProtocols/getAllConformances. NFC
[33mb75e03b[m Eliminate the annoying scratch buffer from getLocalConformances(). NFC
[33m6e21445[m Remove now-irrelevant generation of @objc thunks for non-@objc witnesses to @objc protocols.
[33m480b6e9[m Start using DeclContext::getLocalConformances() to decide which conformances get recorded.
[33m7d57195[m Centralize the creation/lookup of normal protocol conformances further.
[33mc0d783f[m Start serializing the reference components of extension declarations.
[33md2c4347[m SILCombine: Remove 'dead' alloc_stack live ranges
[33m2b34e13[m [stdlib] Delete mistakenly-committed file
[33m5bdfcc6[m Fix an unused variable warning.
[33mdedbc72[m [stdlib] ExistentialCollection => SwiftExperimental
[33mfe09d76[m Remove a stale comment that is incorrent and does not match the implementation.:w
[33mf3ae8c1[m Minor clean-up after my recent re-factoring of cast optimizations. NFC.
[33m63f4170[m ArraySemantics: To facilitate make_unique hoisting add a array.owner call
[33m6cb75be[m SIL: Add verifier checks for existential_box instructions.
[33md7156b0[m [stdlib] Kill obsolete comment
[33m1862587[m [stdlib] ExistentialCollection: random access
[33m01802ee[m [stdlib] ExistentialCollection: Up/downgrades
[33m67e4e18[m [stdlib] ExistentialCollection: AnyXXXCollection
[33m46db6e0[m [stdlib] ExistentialCollection: 80 columns
[33m7f89ae5[m [stdlib] ExistentialCollection: Sequence
[33m8d4f884[m [stdlib] ExistentialCollection: naming
[33me26c035[m Use NominalTypeDecl::lookupConformance() to find conformances.
[33md314d77[m Add tests for watchOS/tvOS availability
[33m940ba83[m Use the conformance lookup table to find protocol conformances.
[33mdc27688[m Generalize the importer-only RawOptionSet attribute to a SynthesizedProtocol attribute.
[33m99ec43c[m Start building conformances in the conformance lookup table.
[33mde28f9c[m Update tests for added _ErrorType requirements.
[33m5945fab[m Add test missing from r26184.
[33m35f4cb8[m [test] Update IDE/complete_decl_attribute.swift for the new OSs (r26278).
[33me6c2131[m Check that "@testable import Foo" is only used to import testable modules.
[33mc6739b6[m Add the -enable-testing flag, and serialize it.
[33mefd7268[m Remove flags in Module, unused since r24531.
[33m970958c[m SILGen: Support method and property lookup on boxed existentials.
[33mf567640[m SILGen: Don't leak when opening an existential 'self' argument to an application.
[33mb2e8f7d[m Typo: cortex-a8 -> cortex-a7 for armv7k watchos test line
[33m8eb30c4[m Update watchOS test run lines to use armv7k explicitly
[33m29f9f3b[m [test] Use -run instead of directly calling executable.
[33m1d9b0af[m os(iOS) shouldn't imply os(tvOS)
[33mf2a520d[m SILGen: Don't leak existential container after OpenExistentialExpr.
[33m339e5a4[m SILGen: Don't leak the existential container when taking its value as part of an existential upcast.
[33m1342cea[m Add some basic tests for -emit-sib and make sure swiftmodule generated from sib is identical to that from source.
[33mc01f032[m Take more unnecessary things out of glibc modulemap.
[33maae8a3e[m Use ASTContext's getBridgedToObjC instead of reimplementing it.
[33m544ef40[m Merge tvOS and watchOS Support
[33mcc37a28[m The lowering part of the optimization pipeline is non iterative so we can use the non-iterative API.
[33m9a1f1ba[m [sil-combine] Add a new peephole for alloc_ref_dynamic -> alloc_ref transformations.
[33m848b9ab[m [sil-simplify-cfg] Fold checked_cast_br if a dynamic type of the operand is statically known from alloc_ref
[33mb6c5872[m Account for Optional<Void> in comparing function types for ABI compatibility.
[33m686a1f4[m Remove unused IRGen function hasObjCClassRepresentation().
[33m1785ba9[m Simplify Lowering::adjustFunctionType to use AnyFunctionType::withExtInfo.
[33m707071d[m [CodeCompletion] Address Argyrios comments on r26134
[33mdf187f7[m [CodeCompletion] Address Dmitri's comments on r26230
[33mb0b578d[m [SyntaxColoring] Address Argyrios' comments on r26188
[33m517992a[m [sil-linker] Use SILDeclRef instead of StringRef in SerializedSILLoader.
[33mf3ff3db[m Driver: small corrections according to Jordan's feedback
[33m4e9c1c4[m SILCombine: Fix bugs in isCastKnownToSucceed
[33md6ec9f2[m Make isObjectiveCBridgeable an available function so it can be used elsewhere.
[33m12272b8[m SILGen: Implement erasure for boxed existentials.
[33mc7da745[m Update validation/IDE tests missed in previous commit
[33m5f2bcba[m Update tests for code-completion modulename change
[33mece29cc[m Add a module name field to code completion results
[33m7f6a0a1[m Make sure we to only combine casts we know will succeed.
[33m5537cf8[m Driver: Support -num-threads <n> option.
[33m5526a93[m cmake: _compile_swift_files now accepts multiple output files.
[33med9f34f[m [IDE] Add some helper functions in CodeCompletionString::Chunk, NFC.
[33m3b21c77[m [sil-combine] Add a new peephole (alloc_ref_dynamic (metatype X.Type)) -> alloc_ref X
[33m1f875b9[m Extend SILModule with an API for linking of SILFunctions by their SILDeclRef.
[33m02f542c[m [Sema]Suppress availability diagnostics inside synthesized functions.
[33m1511d7a[m Start building conformances when requested in the AST.
[33mec7e728[m Zap some dead code attempting to deal with broken inherited conformances. NFC
[33mdc180a1[m Introduce a "checking" protocol conformance state.
[33m1799519[m Use module-based conformance lookup. NFC
[33mcfc547c[m docs: start a document with random advice about C interop tricks
[33m0a2f4e1[m SIL: Lower boxed existentials to reference-counted types.
[33m977f1b1[m Fix grammar in comment.
[33m957a0e5[m Assert that we do not call isKnownFinal on methods marked final.
[33m003d643[m SILCombine: Teach sil-combine about bridgeTo/FromObjectiveC identity compositions
[33me4ece36[m Annotate bridgeTo/FromObjectiveC in Foundation.swift
[33mfaeaea8[m Add a convenience hasSemantics api to ApplyInst.
[33m7f886c9[m SIL: Make 'isReferenceCounted' a bit on TypeLowering.
[33m40ba960[m [cleanup] Make test platform agnostic
[33m7ecfc9c[m fix <rdar://problem/20135113> QoI: enum failable init that doesn't assign to self produces poor error
[33mb9f0a6d[m This is the equivalent of r24737 for iOS
[33mb314e80[m Add defensive check for nullptr returned by demangleModule().
[33m79e0fe7[m remove some #if 0 code I accidentally left in.
[33m00ebd4a[m factor a helper out to a simple "defer" macro, NFC.
[33m9f47f2c[m Stop jumping through hoops to emit Objective-C conformance thunks. NFC
[33ma83a8e4[m [CodeCompletion] avoid duplicating keywords. When a developer auto-completes an override function, we collect the keywords that have already been specified by the developer, so that the code completion strings do not duplicate them. rdar://16738036
[33mf389529[m [Basic] Allow a shorter typed placeholder format when the display string and type string are the same.
[33mcedc6c5[m Driver: simplify handling of temporary files. Should be NFC.
[33m02ecc28[m Delete redundant code for checking "does T conform to P?"
[33m7677a45[m Move "non-self-conforming protocol type" check out of type validation.
[33ma90c306[m Compute the "existential conforms to self" bit lazily.
[33m59c2238[m Rework PatternBindingDecl to maintain a list of pattern/initexpr pairs inside of it.
[33ma1d3895[m [stdlib] Plug a leak in String bridging
[33m120769f[m Fix test for iOS simulator i386-apple-ios7.0
[33mffa4e22[m Another improvement to 'class func' devirtualization.
[33m7ef9690[m [test] Integrate 'test/IDE/structure_placeholders.swift' into 'test/IDE/structure.swift' and remove the extra test file. NFC.
[33m68bd67f[m [Parse/AST] Introduce an AST node for editor placeholders in expression contexts.
[33m0eac473[m [Basic] Add a utility function for parsing an editor placeholder.
[33m73331c4[m [IDE] Now that the lexer recognizes placeholders, don't use ide::replacePlaceholders.
[33ma935e7c[m [Lexer] Recognize editor placeholders as identifiers and provide a specific error when encountered.
[33mda39cef[m [stdlib] ExistentialCollection: use -> Self where possible
[33m36ae934[m [stdlib] ExistentialCollection: comments
[33md882520[m [stdlib] ExistentialCollection: Bidirectional
[33mfbe5a61[m [stdlib] ExistentialCollection: rearrange
[33mee602ff[m Roll back r26203.
[33m4387f95[m flatMap: fix the comment and simplify the implementation
[33mda3e326[m tests: use more precise StdlibUnittest assertions
[33m85bb13a[m Recognize armv7s and armv7k as 32-bit cpu types.
[33m4d7510d[m Test do{}, and fix the inevitable bug.
[33m897d25e[m [+0 self] Change @deallocator uses to be @owned for normal swift objects and unowned for @objc scenarios.
[33m5644353[m Clang importer: hammer over inconsistencies between property/getter/setter optionality.
[33m162568a[m [overflow] Int -> Int64. Make the overflow tests target independent by specifying the size if Int.
[33mbabebc2[m Fix a typo in the testcase.
[33me6f53a3[m stdlib: remove swift_createDate
[33m5878def[m tests: make IRGen/decls.swift portable by adding checks for the symptoms of the original bug
[33me0a8817[m tests: remove unneeded import
[33m550de8d[m [overflow] eliminate subtraction based on equality constraints.
[33m5547dd6[m Enable speculative devirtualization of 'class func' methods.
[33mddc472e[m Minor comment update.
[33mbad0437[m Insert parentheses around expression before appending 'as T', if necessary. Wrap forced optional fixit in parens if necessary.
[33m9cdffd2[m [SyntaxColoring] Highlight specifier words in infix operator decls. When used inside infix operator decls, associativity, precedence and assignment are highlighted as keywords.
[33m97f6275[m [stdlib] ExistentialCollection: ObjectIdentifier as type ID
[33mcda3dcc[m Fix up comment from r26185; the test code is actually in error.
[33m433de9f[m Deal with constraint system failure without associated locator in FailureDiagnosis::diagnoseFailureForCallExpr().
[33medf3bb4[m [ClangImporter] Ignore deprecated enum constants when computing prefixes.
[33m3b921a1[m ArrayBoundsCheckOpts: Don't set the debug scope manually for instructions created by a SILBuilderWithScope
[33mbf64341[m tweaks to the validation test RUN lines.
[33m3c2216b[m [+0 self] Add the deallocating parameter convention.
[33m73a9a11[m Format large comments for 80 lines. NFC.
[33md50b282[m SIL verifier: Don't allow open_existential_ref to apply to metatypes anymore.
[33m447f272[m SILGen: Open existential metatypes using open_existential_metatype instead of open_existential_ref.
[33m01f3e81[m Work on VarDecl:  - Rename getParentPattern() -> getParentPatternBinding(), since    it returns the pattern binding, not the pattern.  - Introduce new getParentPattern()/getParentInitializer() methods,    covering the most common uses of getParentPatternBinding().
[33m8521916[m change PatternBindingDecl to be created with a static "create" method instead of using its ctor directly.  NFC, this is in prep for other changes coming.
[33m7373917[m Implement support for parsing typed matching patterns. Not used yet.
[33ma0d02cd[m Several minor changes:  - Strength reduce isAtStartOfBindingName() to just check for    identifier or _ and inline into its two callers.  - Rename Token::isIdentifierOrNone to isIdentifierOrUnderscore.  - Teach InVarOrLetPattern about matching patterns, so that the    parser knows when it is parsing an expression as a matching    pattern but is not yet inside a let/var pattern.  - Use newfound knowledge of matching patterns to refine handling    of unexpected let/var when parsing an expression, but not in a    pattern context, slightly improving QoI in invalid cases.
[33mc3d6f70[m Fix coding style.
[33m8e32687[m simplify the parser code for matching patterns by folding some simple methods into their only call sites, NFC.
[33mc050e81[m Fix: <rdar://problem/17462274> Is increment in for loop optional?
[33md7c26d8[m Speculatively land the grammar change for <rdar://problem/20167393> revise typed-pattern grammar to make refutable patterns a superset of irrefutable ones
[33m4dab551[m Testcase update to go with r26166, doh.
[33mc2b1965[m significantly improve the QoI of DI's diagnostics when emitting errors due to "return nil" in a failable initializer.  Previously, it would always just say "properties of a class instance must be initialized before returning nil".
[33ma30d13b[m Simplify handling of metatypes in devirtualization.
[33mbf73cc2[m fix <rdar://problem/20167543> "for var x = ..." not parsed as a foreach loop
[33m27ef444[m Remove the "isLet" parameter from the pattern parsing logic.  It was (almost) duplicated by the InVarOrLetPattern state in the Parser object.  Beef InVarOrLetPattern up so that we can remove it.
[33m2c1ea72[m add a fairly horrible hack to make sema reject typed patterns in nested contexts.  This will go away when the parser is adjusted to just not parse these.
[33mce9b013[m Change the testsuite to not use typed patterns in nested contexts, which requires pushing the types out.  The only interesting one is this diff:
[33m1666623[m when type checking the argument pattern for a subscript decl, and for playground synthesized functions, specify the TR_ImmediateFunctionInput flag since these are argument lists.  NFC.
[33m7b13a36[m clean up some uses of typed patterns in nested contexts.  The only reason anyone was using them was because of the obsolete AnyObject warning.
[33m522594f[m remove some code that I added in r26150.  This isn't necessary given the rework of identifier exprs done in r26000
[33md292f64[m [stdlib] Eliminate unneeded _SignedNumberType protocol
[33mbf7b379[m [stdlib] ExistentialCollection: still more naming
[33m4517685[m [stdlib] ExistentialCollection: remove a hack
[33m2565473[m [stdlib] ExistentialCollection: use protocols for abstract interfaces
[33m38106c9[m [stdlib] ExistentialCollection: naming and indentation
[33m6664bd6[m Fix crash during devirtualization.
[33m0248a6d[m Fix CHECK-LABEL.
[33m20f8f09[m Land: <rdar://problem/19382905> improve 'if let' to support refutable patterns and untie it from optionals
[33ma8fe879[m enhance -verify mode wording to be more precise about diagnostics that mismatch expectations.  Instead of saying "unexpected diagnostic not produced" and "expected diagnostic not produced", instead say "unexpected *warning* not produced".
[33m71af5fe[m Get TypeChecker::conformsToProtocol() out of the business of checking the conformances.
[33m3e3f568[m By far, the most common use of Lexer::getLocForEndOfToken is in conjunction with .fixItInsert().  As such, introduce a helper named .fixItInsertAfter() that does what we all want.  Adopt this in various places around the compiler.  NFC.
[33m3e4632e[m Reinstate "Centralize the logic for synthesized conformances.""
[33mfdde2a8[m SIL: Add instructions for boxed existential operations.
[33m8962cd2[m eliminate an unneccesary intermediate std::vector, NFC.
[33md8cb56b[m refactor ClauseRow's ctor to not take a CaseLabelItem, reducing impedence mismatch with the if/let handling stuff.  NFC.
[33me2fe770[m Reimplement emission of StmtCondition (e.g. if/let & while/let) to be in terms of the pattern binding/emission facilities that are currently used for switches.  They are more general (handling all patterns, not hacked up just for optionals).
[33m9909c88[m [stdlib] re-commit ExistentialCollection Prototype
[33m4f708c0[m fix const correctness and standardize on names for the successor list of TerminatorInsts.  Now you can walk over the successor list of a terminator and actually modify the SILSuccessor directly, allowing better CFG transformations.  NFC.
[33mee34008[m [stdlib] NewMirrors: reapply naming tweaks
[33md1bdc95[m Revert "[stdlib] Start ExistentialCollection Prototype"
[33m4174a9a[m Revert "[stdlib] NewMirrors: naming tweaks"
[33mfe84d94[m Revert "Centralize the logic for synthesized conformances."
[33m9b9748f[m Add a more comprehensive test for StaticString mirror
[33m520df97[m [CodeCompletion] Adopt a more efficient algorithm to find the nearest AST parent that meets a certain condition
[33mb3a934a[m tests: work around non-determinism (hash table order) in code completion tests
[33mea7b133[m Update tests for new LLVM IR syntax for the gep operator
[33m2d75a5d[m [stdlib] Start ExistentialCollection Prototype
[33m9befe88[m [stdlib] NewMirrors: naming tweaks
[33mf7dacd0[m Don't force implied protocol conformances into the current DeclContext.
[33m2f4aee5[m Don't profile the conforming type for a normal protocol conformance.
[33m5745300[m rename PatternMatchStack back to SwitchStack.  I was too quick to rename it: it is only for processing of fallthrough statements, which really do only apply to switch.
[33ma6d95e4[m Generalize some terminology in SILGenPattern to say "PatternMatch" instead of "Switch" since this logic will be used by if/let and while/let pattern matching in the near future.
[33meddfc3c[m Improve casts analysis for bridged types.
[33m8ffdfd5[m Fix a test which became broken by my recent cast optimizations re-factoring.
[33maea5032[m Remove the cast optimization logic from sil-combine and simplify-cfg and turn them into clients of CastOptimizer.
[33m51ad2d9[m Move the logic for type casts optimizations into one place.
[33m9c62c5b[m Remove all the complex cast optimization logic from TypeSubstCloner.
[33m340f209[m Improve the logic for analyzing casts between metatypes.
[33mad566f2[m Add a missing case into assert.
[33ma081647[m Add a FIXME about upcasts between existential metatypes.
[33m0ad419c[m [CleanUp] Remove unnecessary undefs
[33m8367428[m [CodeCompletion] Literal complete. When code completing a literal expr, it is likely that code completion engine only collects the expr that is not fully type checked. Therefore, no members of the literal can be suggested. To address this, we try to climb up expr hierarchy in AST to find an expr with a nominal type, and use the nominal type to finish code completion. rdar://20059173
[33m78892d7[m Centralize the logic for synthesized conformances.
[33mb752f9b[m Remove the unused NominalTypeDecl::registerSynthesizedConformance().
[33m746141d[m Introduce a __raw_option_set attribute that the Clang importer adds for option sets.
[33m4aa6de5[m COWArrayOpt: A side-effect free instruction cannot mutate the array
[33m1010148[m [sil-verify] Fix checking of casts involving metatypes.
[33m51c69ae[m [sil-verify] Remove the requirement that "from" and "to" types of a cast should not be the same.
[33m388f0dd[m Check if existing capacity is enough even on non-objc.
[33mc852697[m SILGen: Back out special cases for ignored tuple shuffles.
[33m513df86[m Revert "ArraySemantic: Add isMayRelease method"
[33m7b9917b[m Revert "ARCAnalysis: Teach it about array semantic calls that are not may-release"
[33mfb6fa30[m remove the "variable 'ao2' inferred to have type 'AnyObject', which may be unexpected" warning, in the case of an AnyObject or AnyObject? type.  Keep it around for () and AnyObject.Type.
[33m3c6af36[m Debug Info: type-unique enum types by virtue of their mangled name. rdar://problem/20015686
[33mf54e357[m Preserve the location of the 'in' when doing void-conversion on a closure.
[33m0c281d5[m Use --sysroot instead of -isysroot on non-Darwin
[33maaab6d4[m When emitting sorted SIL, emit BBs in RPOT order.
[33m28639a0[m Fix destructor_analysis.sil test case to not depend on stdlib implementation details.
[33maf98fb9[m Revert "ARCAnalysis: Teach ARC analysis about certain objective c methods that are not may-release"
[33mfb56923[m Add a couple statistics to the DCE pass.
[33mdc7bb1a[m Add support for some editing of the call graph.
[33m445d51c[m Annotate tests that don't crash under AddressSanitizer anymore
[33md20760f[m Fix test for 32-bit targets.
[33m129f921[m Fix a use-after-free in code completion for attributes
[33mf6337d9[m Make call graph edge sets be SmallPtrSets rather than SmallVectors.
[33m5cb0d48[m Minor new comments to call graph header.
[33m89826f8[m Remove a source of potential non-determinism in call graph construction.
[33mc1bc639[m add an IRGen peephole for lowering certain switch_enum's that commonly come up when pattern matching on optional.  Instead of expanding to a switch with a default and one case, expand to an icmp and condbr.
[33ma6a97e6[m Unbreak the build after upstream CMake changes
[33m44de783[m [sil-opt] Handle SIB inputs.
[33m25fea9a[m SILGen: Recursively ignore ignored tuple exprs.
[33mdaf3ec6[m SIL.rst: Pre-document instructions for boxed existential containers.
[33m6e01707[m SIL: Adjust parse/print syntax of init_existential_metatype to follow init_existential_ref.
[33m3d46631[m SIL.rst: Add docs for existential metatype instructions.
[33ma25b271[m ARCAnalysis: Teach ARC analysis about certain objective c methods that are not may-release
[33m752c402[m DestructorAnalysis: Fix a spelling error
[33ma68f488[m Revert "DestructorAnalysis: Don't rely on stable cannonical type pointers"
[33m0802e85[m Implement the naked 'do' statement.
[33mbc2c96d[m [sil-extract] Handle SIB inputs.
[33md57fdb9[m Move the responsibility for deleting the apply outside of inlineFunction().
[33m1936396[m Revert "Make call graph edge sets be SmallPtrSets rather than SmallVectors."
[33m749f850[m Sema: Emit Fix-Its for potential unavailability
[33m0163c66[m Make call graph edge sets be SmallPtrSets rather than SmallVectors.
[33m7de67ca[m Dynamically dispatch getStartLoc() / getEndLoc() on Stmt, too.
[33md8d1687[m Reorder stdlib cmake dependencies
[33m84e2d4e[m SIL.rst: Add discussion of existential container representations.
[33m62ffa31[m Add in missing header guard. NFC.
[33m9271a24[m Introduce a protocol conformance registry for nominal types.
[33mc692945[m Clean up explicit protocol conformances in the standard library.
[33m0242f5a[m Add DeclContext::isNominalTypeOrNominalTypeExtensionContext(). NFC
[33ma47f30f[m Factor out NominalTypeDecl::prepareExtensions(). NFC
[33mbb4bdb5[m Reapply 26054. All of the tests pass again after the fix in r26060.
[33m5f6c718[m SIL: Provide SILType APIs to track the representation of existential types.
[33m1c4c716[m Allow getSourceRange() to be implemented with getStartLoc()/getEndLoc() and switch most expressions to do so.
[33mced2588[m [overflow] Fix a bug in the comparison of literals of with different bitwidths
[33mc351236[m Refactor casting of self argument in devirtualization.
[33m561dfce[m Add a test case for the Reflectable conformance for StaticString
[33mac4e732[m Commit again with the proper indentation
[33m7b836f9[m Revert 26054 because it broke the build (assertion failure in debug mode)
[33m5c52f40[m Refactor argument casting code in the devirtualizer.
[33m773d8a4[m [overflow] Enable the pass the removes overflow checks by default.
[33mf3daf61[m Wrap the line to 80 col.
[33mdd48c25[m Parse 'try' expressions.
[33m566c462[m Give StaticString a custom Reflectable conformance that reflects upon the string data
[33m07c1643[m [cleanup] adding undef to several usages of included def file
[33m07ef1bb[m DestructorAnalysis: Don't rely on stable cannonical type pointers
[33m165bfb6[m DestructorAnalysis: Fix for recursive types
[33m853cc6a[m [stdlib] Clean up generic dispatching prototype...
[33m6ae1dc1[m Add tests for printing Any, AnyObject and AnyClass
[33m013508d[m stdlib: fix the comment that was not updated during a refactoring
[33m6dfa4fe[m Fix a test that wasn't testing anything
[33m700c2db[m Dynamically dispatch getStartLoc, getEndLoc, and getLoc.
[33m1336b53[m Bugfix. When scanning the basic block in reverse skip the 'end' because it is not a valid instruction.
[33m0e12294[m Use appropriate API to get the self type of a SILFunctionType.
[33mffaa74b[m Remove DevirtClassMethodInfo.
[33m063ebee[m Fix a typo
[33m95278e7[m [overflow] Scan the code in reverse and allow future (stronger) overflow checks to replace early overflow checks.
[33m15ba646[m [overflow] Refactor the code that removes the dead cond_fail instructions. NFC.
[33m8572586[m [overflow] Rename a method and document it.
[33m405936e[m [SyntaxColoring] Address Argyrios' comments
[33mb98f1cd[m Create a thinner coupling between devirtualization functions.
[33mf174ad1[m Replace a dyn_cast with a cast.
[33mc28a18e[m make the ast dumper handle null conditions without crashing. NFC.
[33m850f567[m [sil-combine] Perform folding of always failing unconditional_checked_cast_addr.
[33mf8cb97b[m Perform folding of always failing unconditional_checked_cast_addr instructions during SIL cloning.
[33mb5f73b2[m Add support for removal of the dead code after "unreachable" even during SIL cloning and generic specialization.
[33m6d92cf0[m [SyntaxColoring] Highlight platform names. When used in an availability checking, platform names, such as iOS and OSX,  are highlighted as keywords.
[33m9bbb447[m Un-break the build.
[33m3b3dda5[m Remove stale comment.
[33m838fdfe[m Refactor to make the common case an early exit.
[33m3bf752f[m Remove an obsolete parameter comment.
[33m76eb250[m Shorten a \brief comment so that it is more to the point.
[33ma100a3e[m Debug Info: Don't absolutize file paths.
[33m9d14113[m Adapt for Mach-O clang module container format transition. NOTE: This may require deleting the Module Cache that build-script        creates in the swift build dir.
[33m83fce26[m Revert "Adapt for Mach-O clang module container format transition."
[33m3dd40e5[m Add a label to the llvm_unreachable. The build fails on some configurations without one.
[33mf5e982c[m [stdlib] Mirror prototype: some renaming
[33m9670051[m [stdlib] Fix minor comment typo
[33m98a35d5[m [overflow] Remove signed and unsigned overflow checks for X+1 and X-1 if X is smaller/greater than some other number. If X is known to be smaller than some other number then we can add a 1 to X. If X is known to be grater than some other number then we can subtract 1 from X.
[33m099d5d4[m [overflow] Remove signed and unsinged overflow checks on addition of a stronger check was executed before the current one.
[33mdd26a7e[m [stdlib] Add initial prototype for new mirrors
[33m15aa317[m [overflow] Remove signed and unsigned overflow checks if we executed a stronger trap before the current one.
[33mbf3047a[m [overflow] Also optimize *unsigned* sub that are guarded by branches.
[33m6274423[m [overflow] Add code to remove signed sub overflow checks under a branch:
[33mc0124c0[m [overflow] Scan the Constraint list and try to remove the condfail.
[33m8ecf151[m [overflow] Add helper functions to evaluate the numeric relations between sil values.
[33mcdfac4b[m [overflow] Scan the function body and collect overflow constraints.
[33m069f8ea[m [overflow] Add a new struct: Constraint - to represent a range constraint in a part of the function.
[33m5d08db8[m [overflow checks] Add a new (empty) pass to remove overflow checks
[33me885723[m Revert "Make sure that we do not try to create shared versions of stdlib_binary_only functions when specializing."
[33m5549775[m enhance silgen to treat OptionalSomePattern and EnumElementPattern as "similar", avoiding false positive "not exhaustive" diagnostics on switches like:
[33m83541dd[m add tests for the ?? operator and x?.foo() monadic binds in value matching cases, per Jordan's request.
[33m6b31c2f[m enhance sema's remapping of pattern expressions into patterns to handle multiple ???'s stacked on top of each other in patterns.  This wraps up: <rdar://problem/19382878> Introduce new x? pattern
[33md88f376[m Make sure that we do not try to create shared versions of stdlib_binary_only functions when specializing.
[33m718d82f[m rework our treatment of identifiers in refutable patterns that are inside of a let/var pattern.  Now any identifier in one of these is a variable binding, not sometimes a value references (depending on contextual syntax).
[33m367bfbc[m Require "import Foundation" to use @objc in library files, too.
[33m0cb941b[m Remove Optional from SourceLoc field.
[33mc9eeed3[m Remove staging option -enable-private-discriminators.
[33mae3d758[m Adapt for Mach-O clang module container format transition. NOTE: This may require deleting the Module Cache that build-script        creates in the swift build dir.
[33ma09704b[m Replace a conformance-walking loop with ProtocolConformance::getRootNormalConformance().
[33meb572e6[m Simplify and improve our handling of generic parameters/signatures/interface types in ProtocolConformance.
[33mbc799c3[m Remove ProtocolConformance::getSubstitutedGenericParams().
[33m1489374[m Fold always failing unconditional_check_cast instructions into traps followed by unreachable instruction during inlining and specialisation as well.
[33m7a7a3c3[m [sil-combine] Fold always failing unconditional_check_cast instructions into traps followed by unreachable instruction.
[33mab5022b[m [sil-combine] Test-case for removal of the code after unreachable instructions.
[33md674034[m [sil-combine] Add a peephole to remove any code after an "unreachable" instruction.
[33ma2ef52f[m Fix typo. NFC.
[33mb81e769[m Add a * to some auto declarations so we match LLVM style. NFC.
[33mae85fa3[m Refactor SILLinkerVisitor into its own local files, Linker.{h,cpp}. This is still hidden in the SIL library.
[33m5c9d729[m Put all of SILFunction verification into the SILVerifier.
[33m9e76e2b[m Minor (swift migrator related fixes):
[33m2106b44[m RegionCloner: Split edges from non cond_br terminators to exit blocks
[33mb3c0d9a[m SILOpt: Add an option to run the array specializer
[33m819eba2[m Add a utility function to split edges between two basic blocks.
[33m5e6ec85[m CMake: Support compiling without -wmo and allow explicit specification of module name.
[33m7c5ea45[m Revert "Simplify some of the logic around metatypes in the devirtualizer."
[33ma9f2928[m Simplify some of the logic around metatypes in the devirtualizer.
[33mfbc7b76[m Be more conservative about stripping upcasts in devirtualization.
[33mbc2d9a2[m Convert polymorphic_inline_caches.swift to a SIL test.
[33m92a85f0[m Move isClassOrClassMetatype into SILType.h.
[33m1c3fe65[m Fix tests for swift_conformsToProtocol that I broke for OS X in r25972
[33m85764fd[m runtime: fix two bugs in swift_conformsToProtocol on Linux
[33maf5cda1[m cmake: allow installing a copy of Swift dylibs into an additional directory
[33mc31c286[m Annotate valiation tests that don't crash without assertions anymore
[33m0614e46[m stdlib: remove casts that are not required
[33m8af07b1[m Sema: Allow Enum.Case case patterns in existential contexts.
[33m04dcc96[m [CodeCompletion] Add attribute completion tests for enum etc. Also, using a safe API to retrieve decl* from parse results.
[33m473f077[m Convert isIndirectParameter to use a covered switch. NFC.
[33m48ba44d[m [CodeCompletion] Fxing Dmitri's review comments
[33m477becd[m Remove unnecessary parts of glibc modulemap.
[33m63979e3[m Add include of <atomic> for QueueIndex.
[33m9e8d4b0[m Use isVoid() instead of isEqual(TheEmptyTupleType). Add tests for underspecification issue fixed by r25939.
[33m737f0ca[m [CodeCompletion] Using canAttributeAppearOnDecl() to decide whether an attribute is applicable.
[33mb54c45b[m Revert "Revert "Remove subtyping checks that can never actually fail.""
[33mcb7df94[m Revert "Revert "Hoist more early returns as early as possible.""
[33m2946d37[m Revert "Revert "Another small clean-up. Manually copy-forward a value.""
[33md9c40a7[m Revert "Revert "Simplify some code and make it easier to understand.""
[33mc64d6e2[m fix another warning, NFC since FindLocalVal is only used on parameter patterns, which are not refutable.
[33mc25c15c[m Fix the devirtualizer test.
[33m43c18cc[m add a missing case for the new pattern I introduced.  This isn't used by anything that I can see, but is good for completeness.
[33m9ac6c23[m rename IsaPattern -> IsPattern to follow source syntax, NFC.
[33m3221fdb[m Revert "Simplify some code and make it easier to understand."
[33m6a58924[m Revert "Another small clean-up. Manually copy-forward a value."
[33me3adbc6[m Revert "Hoist more early returns as early as possible."
[33m1b4dbf7[m Revert "Remove subtyping checks that can never actually fail."
[33m6071ac3[m [bitcode project] do not encode primary file in CmdArgs.
[33m71d17b1[m Remove subtyping checks that can never actually fail.
[33mcf903cc[m Hoist more early returns as early as possible.
[33ma3ddfe4[m Another small clean-up. Manually copy-forward a value.
[33mdd055c3[m Simplify some code and make it easier to understand.
[33md1349f8[m Underscore ErrorType until it can be API-reviewed.
[33m44da3ce[m When typechecking the constraint inout $T1 < UnsafeMutablePointer<Void>, bind $T1 to Void as a last resort.
[33mc0bf1f5[m [CodeCompletion] Further support the context-sensitivity of auto-completing @attributes. By delaying the handling of code completion token after the entire decl being parsed, we know what are the targets of the attribute to finishe, thus, only suggesting those applicable attributes.
[33m06dfcda[m fix command line in multi-thread test
[33m0c6464a[m [driver] Add -emit-sibgen option.
[33me1eaac1[m Revert "Add an @__error_protocol attribute."
[33m1cc7f59[m Add a KnownProtocol kind for ErrorType.
[33m90920ec[m rename the IsaExpr AST node to IsExpr to follow the syntax of the language, NFC.
[33mc049068[m use Tok.isAny a bit more consistently in this file to simplify this code, NFC.
[33mb63567e[m val got renamed to let, update internal function names. NFC.
[33m22991b1[m Multi-threaded llvm code generation (experimental).
[33m9c0eb29[m Yet another improvement of devirtualization based on metatypes.
[33m1b6cf90[m Improvement of  devirtualization based on metatypes.
[33me29b7ca[m ARCAnalysis: Teach it about array semantic calls that are not may-release
[33mfab9212[m ArraySemantic: Add isMayRelease method
[33maa24e12[m ArraySemantic: Move to its own file in SILAnalysis
[33m7cbadb1[m When UnsafeMutablePointer<$T1> has a Conversion constraint to UnsafeMutablePointer<Void>, don't bind $T1 to Void. This fixes an unintentional dependency on the order in which constraints are visited by the solver.
[33m1048d57[m Add a test for assertionFailure not being @noreturn
[33ma20bff9[m Teach Serialization not to walk protocols/conformances together.
[33me917ec2[m Small clean-up to reuse SILModule result.
[33m742b7a6[m Move early exit earlier and bail out as soon as we have enough information.
[33mfa7b1f5[m Move early exit earlier in the function.
[33m5fc5ca4[m Remove assert that can never fire.
[33mdb187f2[m Enhance VarPattern to capture a bit indicating whether the pattern was a var or let. Previously we only used this information in the parser, but Sema needs to know as well.
[33m6423209[m [stdlib] Fix assert docs and semantics
[33md55d2f0[m fix build error in dox
[33m8f2e328[m Add an @__error_protocol attribute.
[33m4b939ee[m Allow implicit conversion constraint to bridge String to NSString even when it is the favored constraint of a disjunction.
[33ma4599cf[m Normalize "darwin" target triples to "macosx" in LangOptions.
[33mdb4c9d6[m [test] Adjust test to avoid AnyObject dispatch.
[33mde808d1[m Progress on: <rdar://problem/19382878> Introduce new x? pattern
[33m484f71b[m docs: add some FIXMEs to the document describing index invalidation rules
[33mfae641f[m Move readLine() to SwiftExperimental
[33m962a87f[m SIL: Rename address-only existential instructions to '{init,deinit,open}_existential_addr'.
[33mc0810b0[m [IDE] Replace placeholders before doing structure annotation.
[33m0c54a12[m [IDE] Introduce ide::replacePlaceholders() which replaces Xcode editor placeholders with dollar identifiers and returns a new memory buffer.
[33m3e1390f[m [LangOptions] Enable dollar identifiers under a separate language option.
[33mf55a150[m [IDE] Avoid adding ErrorExprs to the document structure model.
[33m75710bf[m Array property functions were enabled by default
[33mcf96358[m Update the overlay for iOS SDK changes: CIFilter.init() is now failable
[33m30b68e5[m [sil-devirtualizer] Fix dispatching on value_metatype
[33mb13758e[m Move floating point parsing APIs to SwiftExperimental
[33m5ca75b7[m Move integer parsing APIs to SwiftExperimental
[33me460eb6[m Revert "[stdlib] Replace aString.toInt() with Int(aString)"
[33me27a039[m RemovePins: Don't remove a pin/unpin pair accross a call that may read the pin flag
[33m374f8b6[m RemovePins: Add test cases
[33mabd0b72[m SwiftPrivateSerialization: refuse to deserialize extremely large arrays and dictionaries on 32-bit platforms, where size does not fit into an Int
[33me2c43ab[m Revert "wip"
[33m460eea3[m Let the frontend options handle multiple output files. This will be needed for split-llvm code generation. If multiple -o options are specified and only a single output file is needed (currently always), the last one wins. This is NFC.
[33m8531045[m Add --num-threads option. This is in preparation for multi-threaded code generation. Currently this option has no effect yet.
[33m3d54884[m Disable the serialization test on Linux, since it does not finish in any reasonable time
[33m89d1d92[m CMake: unbreak the build on Linux after stdlib reorganization
[33mfbdbcf8[m wip
[33mae6902e[m Test file for r25878 (rdar://problem/20062883)
[33m8795202[m Removed a wrong check for init_existential in the SIL verifier.
[33mb7498a1[m stdlib: add a private serialization API
[33m350248d[m Reorganize the directory structure under 'stdlib'
[33mda2e6ad[m [IDE] Add array/dictionary literals in the document structure.
[33mb31875a[m LICM: Hoist loads from outer loops too
[33m88aba04[m LICM: Add a driver for propagating loop summary information up the call tree
[33mb4dc51c[m LICM: Cleanup code
[33mbc39e75[m LICM: Better readability for debug output
[33m8d4b0ed[m [IDE] Include control-flow statements in the syntax structure model.
[33mf0cab99[m [IDE] Simplify ModelASTWalker::walkTo*Post() functions.
[33m865719c[m [IDE] Introduce SyntaxStructureElements which will provide more info about a syntactic structure.
[33mf8e5b6b[m [IDE] Modify structure testing to tag the relevant ranges directly on the source, instead of outputting the info with lines/columns.
[33mdefa4d2[m tests: properly substitute the new variable %target-runtime
[33m38a2bcc[m tests: port IRGen/vtable.sil to Linux
[33m6c6c2a1[m tests: port SIL/Parser/basic.sil to Linux
[33m99d215c[m tests: port DebugInfo/variables.swift to Linux
[33mae996dc[m tests: port attr_availability_osx.swift to Linux
[33me58d06c[m StdlibUnittest: run race tests for equal amount of time on small and large machines
[33mdfe04e5[m tests: port StringSlicesConcurrentAppend.swift to Linux
[33m1d2f5ed[m Hide the SwiftUnstable dependency on libbsd on Linux
[33m524f8c4[m tests: port StdlibUnittestStdin.swift to Linux
[33m0326cfed[m Fix the Concatenate.swift test on Linux
[33m2b209f8[m Un-XFAIL deserialization test on Linux that passes now
[33meee130d[m tests: set %target-sdk-name on Linux
[33mab3edb4[m tests: port Character.swift to Linux
[33mf910df7[m tests: add more targeted XFAILs for Linux
[33mbce0c16[m tests: remove two uses of @asmname from Algorithm.swift
[33mff508c9[m StdlibUnittest: implement test().xfail() matchers for Linux
[33m7ec7471[m More tests pass on Linux when autolinking information is present in -O
[33m652eb8f[m stdlib: on Linux, create a non-NULL locale for strto*_l functions
[33m4de6fa9[m tests: merge ArraySemantic test into the ArrayTraps test
[33m932e228[m IRGen: mark autolinking information on ELF as used
[33me813673[m [ClangImporter] Make sure that we are not importing re-declarations, after upstream Clang change in r231424.
[33mb2cdbf9[m [+0 self] Change all mirror computed property @asmname calls to not consume arguments when the +0 self flag is passed in.
[33m2d0f57b[m Clean up a comment and propagate the 'owner' is consumed by this call comment to all swift_unsafeReflectAny callsites.
[33madb1608[m IRGen: remove dead function
[33m8038fd6[m Revert "Revert "COWArrayOpt: Enable array.props hoisting""
[33mef94fa0[m [callgraph] Change a bunch of llvm::SmallVectorImpl => ArrayRef. This hides the unnecessary information that the CallGraph internally uses SmallVectors.
[33m26debff[m Fix typo from a long long time ago. Also add a comment flag to indicate that the passes below it are only for testing. NFC.
[33mff4cc2f[m Fix an iterator invalidation issue in splitBasicBlockAndBranch
[33m71424c4[m cmake: unbreak the usecase of cross-compiling the compiler while disabling the standard library
[33mad12801[m stdlib: improve doc comment
[33me16a050[m [+0 self] Add a cmake flag to enable guaranteed self.
[33m494305d[m Revert "Remove sil option flags that are no longer needed."
[33mb2d9833[m Add PrettyStackTrace support for SILFunctionTransforms and SILModuleTransforms.
[33m1bfdeed[m Fix comment.
[33me40f01c[m Remove sil option flags that are no longer needed.
[33mb3e0264[m "@lvalue" shouldn't appear in general conversion failure diagnostic.
[33m02d92b3[m Explain why we remove the underflow check.
[33mc41de30[m Document why we removed the underflow check.
[33m0527da4[m Remove additional underflow checks.
[33ma0f6941[m Marking LLDBDebuggerFunction as UserInaccessible so that no code completion on this attribute.
[33m7ad7913[m stdlib: doc comments: document the default value for keepCapacity in {Set,Dictionary}.removeAll()
[33m3db8186[m stdlib: doc comments: reference the correct parameter name
[33m3ea43d6[m Remove overflow/underflow checks because the code checks for the value of "self", and the optimizer does not know how to remove these overflow checks yet.
[33mf4a0d53[m Remove the underflow check. The elementWidth variable is known to be one or two and cant underflow.
[33mf2a8364[m Remove the overflow check. We know that the elementShift is a very small number (that saves the number of bytes per word).
[33m7896dca[m Remove the underflow check in sort. We know from the implementation of the algorithm that the depthLimit variable cant underflow.
[33m71921d5[m Remove the underflow checks because the method already requires that Position points to a valid location.
[33ma11d745[m Remove the underflow check because the _precondition already checkes that c > 0.
[33mb253483[m Marking LLDBDebuggerFunction as RejectByParser causes compilation failures. Since lldb uses this attribute for the function it compiles to implement expression evaluation, this change needs to reverse.
[33m32e9a0a[m [CodeCompletion] Making the code completion of attributes context-sensitive. The first step is to recommend parameter-applicable attributes only when the code completion token is found inside a param decl.
[33mb5b65b8[m Remove the -enable-union-import staging flag.
[33m20e7bdb[m XFAIL flag for linux on multi-file-imported-enum.
[33m0a73f54[m Implement a glibc module for StdlibUnittest on linux
[33m08a101b[m Add FIXMEs for build warning work-arounds added in r25805.
[33ma55ea6b[m Silence dubious warnings in stdlib build.
[33mbbb41c1[m Use 'common' linkage for force-load symbols rather than 'weak_odr'.
[33mdd92de7[m Use ICU to implement basic string functions.
[33m39c7b6c[m [stdlib] Remove stray global from OpenCL overlay.
[33m4d09790[m Disable swift IDE tests pending rdar:20064024
[33m1f521ef[m Fix coding style issue.
[33mc26c15c[m Don't pass arguments that can be easily derived from other arguments.
[33m06f7c40[m ArraySemanticsCall: Handle @guaranteed parameters
[33m0b8c14e[m Remove check which is subsumed by the call to canDevirtualizeClassMethod.
[33m99890e4[m Remove unneeded local variable.
[33mc1ae637[m Move updates to the DevirtClassMethodInfo parameter to the of the function.
[33mb72e453[m Separate collecting substitutions in devirtualization.
[33mdcf4332[m Simplify determination of substitutions in devirtualization.
[33mbc5bd45[m cmake: fix the separate SDK overlay build
[33m039674b[m Remove most user-inaccessbile attributes from the code completion strings.
[33m40ffcc0[m Small refactoring clean-up.
[33mb76ad3a[m Small simplification to check for null type.
[33mfcb313b[m Remove code that has no effect.
[33mf962814[m [CodeCompletion] address Jordan's comments about filtering out non-usable attributes in code completion strings.
[33m566e54a[m [CodeCompletion] Supporting auto-completion of declaration attribute keywords. When a developer inputs @, the code completion engine recommends built-in attributes.
[33m8482dbb[m IRGen: Remove different NoAlias behavior at Ounchecked
[33m34b74cf[m [driver] Add -emit-sib primary action.
[33md95d458[m Make SwiftUnstable build on linux.
[33maf36f6f[m Improvements for the cmpcodesize script.
[33m9760625[m Reduce the number of conversions between String and UTF16 when performing string to int conversions.
[33m5b53aa0[m Get rid of a closure inside the String.UTF16View.
[33mf0e269f[m [IDE] Don't repeat the closure type in the name of the completion result.
[33m772a124[m Compute captures after all bodies have been type-checked, as a separate pass.
[33m6235a34[m Sema: Fix some regressions in RawRepresentable derivation for enums.
[33m23458ce[m Fix constraint application on single expression closure bodies
[33mac2193f[m Fix the last part of <rdar://19981118> Swift 1.2 beta 2: Closures nested in @noescape closures copy, rather than reference, captured vars.
[33mc112d6f[m Clang importer: Preserve the delayed protocol conformance behavior in playground mode.
[33maf71193[m Update DataLayout API for upstream LLVM changes.
[33medf4461[m IRGen: Marking inout parameter NoAlias at the LLVM level is not memory safe
[33m757ae57[m First step in splitting out a utility for devirtualizing from the pass.
[33m844c2df[m Rename a couple statistics.
[33m58a1ca8[m stdlib: mark some of Array methods as @testable
[33mbc9e1fb[m [ClangImporter] Handle Clang diagnostics purportedly on line 0.
[33m71a3d88[m Fixing indention on method signature.
[33ma740b8f[m Addressing Jordan's comments about conventions.
[33maed4aa6[m IRGen: Order block context parameters correctly during parameter lowering.
[33me71588a[m [CodeCompletion] The second step to complete @availability. Adding the second or the later parameters in this attribute. rdar://19541135
[33m9e7471d[m Revert "Revert "Rework processing of @noescape closures a bit to fix rdar://19981118:""
[33m6781ac7[m Revert "Rework processing of @noescape closures a bit to fix rdar://19981118:"
[33mab43e44[m Rework processing of @noescape closures a bit to fix rdar://19981118: - Have Sema, not SILGen decide if a vardecl can be captured by address   instead of by-box.  This is a non-local property that is best computed   during capture set formation.  Sema captures this as a bit on the new   CapturedValue entry. - Rework some diagnostic emission to centralize a class of noescape   diagnostics in capture set calculation.  Previously, funcdecl closures   produced their diagnostics there, but ClosureExprs produced them in   MiscDiagnostics (NFC for this part).
[33mdfedf8e[m Added a comment for the SimplifyCFG passes which are used by sil-opt.
[33m317b2e0[m Test case for <rdar://problem/20037686> crash in simplifyToSelectValue in SimplifyCFG
[33mde09d1e[m SimplifyCFG: create a simplifyBBArgs pass.
[33m30a1ff9[m SimplifyCFG: fix a crash in simplifyToSelectValue rdar://problem/20037686
[33m99904a0[m Revert "XFAIL for <rdar://problem/20035755> Swift.stdlib.HashingAvalanche.swift test failure on incremental RA"
[33m35b9707[m XFAIL for <rdar://problem/20035755> Swift.stdlib.HashingAvalanche.swift test failure on incremental RA
[33ma61e85c[m Fix 80-column violations.
[33md7d5dac[m Revert "COWArrayOpt: Enable array.props hoisting"
[33mfeb350f[m rename CaptureKind::NoEscape -> CaptureKind::StorageAddress, since the CaptureKind enum names describe "what happens", not "why they are formed".  NFC.
[33m8300906[m - Rework computation of "direct" closure capture formation to be based on whether   the DeclRefExpr's access semantics is "direct to storage" instead of basing it   on the weird special case we were using before. - Change AST dumper to print the "direct" flag.
[33mb05268b[m Fix test/IRGen/abitypes.swift test for iphonesimulator-x86_64.
[33m42dba24[m Don't allow '{' at start of if-condition
[33m6b5a3d7[m [Sema]Construct type refinement hierarchy for other source files
[33m9ed3a4a[m tests: fix a test for 32-bit platforms
[33mef6ff2b[m Remove pointless line-directive
[33mf7c01f2[m Nuke isReadNone function
[33m951dc28[m Nuke isSideEffectFree
[33m6bdedc7[m Clang importer: Don't delay the protocol conformances of imported enums.
[33me5b8ff9[m Continue tweaking the wording of the ObjC selector conflict diagnostics.
[33m3489840[m rework our representation of capture lists to compute the "isDirect" bit up front when computing the list.  This simplifies getLocalCaptures to *just* filter out global captures, and paves the way for other enhancements.  NFC.
[33m459fdb5[m Revert "Revert "COWArrayOpt: Enable array.props hoisting""
[33ma4c4f3a[m COWArrayOpt: Split cond_br critical edges after cloning loops
[33m7859522[m COWArrayOpt: Only invalidate if we have changed the CFG
[33mc52593f[m COWArrayOpt: No need to call SILAnalysis::invalidate twice
[33m411ba4e[m COWArrayOpt: Fix the array property specializer to recompute the loop tree after cloning
[33m5113456[m Verifier: The alloc_stack stack does not need to be consistent on purely unreachable paths.
[33m0fce7d3[m Add tests for the inout violation assertions in the stdlib
[33m2edae8c[m Add trivial accessors to static properties (as well as instance properties).
[33md4a743c[m Revert "Create trivial accessors for static stored properties when conformance checking needs them."
[33m2a4c39d[m Also accept "Apple Swift" as a valid producer.
[33mf5432e4[m remove stale comment
[33m8ce7d86[m Fixup testcases after the debug representation update.
[33mc919521[m Wordsmith the errors for Objective-C selector conflicts.
[33mdcb743a[m Factor out a helper function for finding non-implicit required initializers.
[33mcee2818[m Add a BodyKind for implicitly-synthesized memberwise initializers.
[33m34f6861[m Change shared and shared_external to always be linkonce_odr hidden.
[33m8859b56[m Create trivial accessors for static stored properties when conformance checking needs them.
[33m1e5daf7[m [Sema] Suppress deprecation warnings inside implicit functions
[33m3c61e44[m Support applies of witness_methods in call graph construction.
[33ma5b75b6[m Oops. Forgot to commit these two lines in my previous commit.
[33mfcf7053[m [sil-devirtualizer] Re-factoring of the class_method devirtualization method.
[33m0f7fb29[m [bitcode] use __swift_cmdline instead of __cmdline to differentiate from clang.
[33m093eb3c[m DebugInfo: Hand-update testcases after LLVM r231082
[33m98be432[m Updating tests and flags for linux
[33ma9181b0[m Make witness/vtable look-up helper naming more consistent.
[33m10647fc[m More clean-up and renaming in devirtualizer.
[33me3d8172[m Use platform to describe attribute
[33m6047ec5[m Handle types conforming to _BridgedToObjectiveC protocol  in a special way during cast folding.
[33m41fa84d[m Address code review comments to use PlatformKinds.def
[33ma8afd80[m Address Dmitri's review comments on r25698
[33maaccfdc[m stdlib: use ssize_t in the signature of swift_stdlib_readLine_stdin
[33mb7ebc49[m stdlib: rename _ascii() to _ascii16(), add _ascii8(), and use it in readLine()
[33m37e4c52[m stdlib: add radar reference to a fixme
[33m511f19c[m Mark inherited required initializers as required.
[33m5a8bb8c[m [CodeCompletion] Extend code completion to decl attributes. As the first step to achieve this goal, this change allows the first parameter of @availability to be completed with either one of the following four platforms: *,  iOS, iOSApplicationExtension, and OSX. rdar://19541135
[33mc8180d6[m Revert "COWArrayOpt: Enable array.props hoisting"
[33m74fc661[m IRGen: Coerce parameters using the larger of the from and to types.
[33mf027fc2[m sil-opt: Fix description string I missed when copying
[33m646e5e1[m COWArrayOpt: Enable array.props hoisting
[33md6cd798[m stdlib: Add array.props.isNative/needsElementTypeCheck calls
[33m1f399aa[m MergeCondFail: Combine cond_fail instructions in basic blocks
[33mcf090c2[m Handle memory behavior of BuiltinInst and FunctionRefInst in SILInstruction
[33m775db43[m [stdlib] Stop allocating locales for FP parsing
[33m57a056d[m Revert "stdlib: add an experimental serialization API"
[33mc2aa4f9[m [stdlib] numeric parsing: floating over/underflow
[33mecd9298[m Small optimization of cast-folding: Don't generate unconditional cast if its result is not used.
[33ma4055af[m Third part of the cast folding and type-casts re-factoring.  Addressing JoeG's comments.
[33m62cc75f[m Fix a small bug in getAnyMetatypeDepth.
[33m35cf43a[m [stdlib] numeric parsing: Address Dmitri's review
[33me143bc2[m IRGen: Set integer extension attributes on external arguments.
[33mfde264a[m IRGen: handle checked_cast_br of a metatype.
[33md99d079[m Fix error message text in cmpcodesize script
[33mc5b1ebb[m [CMake] Specify the module dependency for 'stdlib/pthread_extras'.
[33m3d6cf68[m tests: add radars to FIXMEs
[33m7110a7d[m stdlib: properly specify dependencies of SwiftUnstableDarwinExtras
[33m581dc3c[m stdlib: split topic-focused modules out of StdlibUnittest
[33m1a7f8f7[m stdlib: add an experimental serialization API
[33m0754f67[m stdlib: fix indentation
[33m74792d0[m tests: create a directory before creating files in it
[33meaedde7[m Fix typos in CHECK labels
[33m9b7f58f[m Whitespace clean-up.
[33m56012f8[m Mark a free function as static since it is only used within this file.
[33m4518893[m Simplify witness devirtualization argument passing.
[33mc0ef8dc[m Update comments and simplify some code in the devirtualizer.
[33m7b77c87[m Minor reformatting changes.
[33mcd0dfd1[m Convert bottom-exit-while-true loop to do-while.
[33mc3e83c2[m Remove isClassDeclOracle.
[33m82e74a3[m Fix the comment for getClassFromConstructor.
[33m023a4db[m Rename function to make naming consistent.
[33m715bd5e[m SimplifyCFG: Simplify conditional branches to cond_fail blocks
[33m244a804[m Use createBuiltinBinaryFunctionWithOverflow in ArrayBoundsCheckOpts.
[33m4447968[m SILBuilder: createBuiltinCmp -> createBuiltinBinaryFunction
[33m859b334[m Include STLExtras.h we are its function_ref definition.
[33m6071b3c[m We can call qsort now!
[33me78b82e[m SIL: Use block ownership conventions for C function pointer parameters.
[33m283cf06[m SIL: Don't try to bridge C function pointer types.
[33m61e65a5[m Fix typo in CHECK prefixes.
[33m40efe61[m Clang importer: Import function pointers as function types, when enabled.
[33mb0eaa6d[m Add some missing keywords to sil-mode.el.
[33mab5dfa0[m Adjust tests for the upstream changes in the LLVM IR syntax
[33mc898b2b[m [+0 self] Remove fix lifetime from FunctionSignature Opts.
[33m5fa2086[m SILGen: Implement thunking for C function pointer conversions.
[33m719bbc5[m Remove dead return.
[33m697fb10[m Make this switch a covered switch. NFC.
[33m01ca48a[m Lower fragile shared_external and fragile shared functions the same.
[33m6f3cfaf[m Improve comments for my previous commit. NFC.
[33m3ffe8ec[m Search for dtrace in SwiftHandleDTraceSources.cmake instead of the root CMakeLists.txt.
[33mf9b6d9f[m Small cmake message formatting change from my last commit.
[33m6bec61f[m Give more descriptive names to presets, preprocessor vars for dtrace, leaks runner.
[33m10e36b1[m Add a note when configuring with cmake on whether or not dtrace, leak detection entrypoints are enabled.
[33md473d64[m clang-700 build fix: constructor call is ambiguous
[33m7fe32e1[m [AST/Print] Add PrintOptions::printInterface(), used to retrieve the set of options suitable for interface generation.
[33made52d5[m [stdlib] In the comments, replace unicode quotes with ascii ones.
[33mc66e7bc[m [sil-simplify-cfg] Bugfix for jump-threading of checked_cast_br.
[33m47288e3[m [stdlib] Replace aString.toInt() with Int(aString)
[33mb1623e5[m [ClangImporter] Skip setters in protocols if there's a readonly property.
[33mcc05e76[m Disable Linux support in Apple B&I builds
[33m3feda28[m Use isa instead of dyn_cast
[33ma38bb1b[m IRGen: Bitcast fixed direct ref_element_addr projections to the right field type.
[33mbce5c20[m Teach loadAllMembers() implementations to add the members themselves.
[33m5fed3c4[m [stdlib] Reinstate a sanity check that was once broken on 32-bit iOS.
[33m26d80cf[m [build] Fix 16K segment alignment on iOS.
[33m367f308[m [stdlib] Floating-point parsing
[33m8cf7b8b[m remove import in test
[33m472c392[m clean up unnecessary test code
[33mf6e95b0[m Fix printing of Objective-C @properties for @objc-renamed properties.
[33mdb51abb[m Fix Objective-C printing of init(forFun: ()) initializers.
[33m8fcd016[m Use the @objc name of a property for getters, setters, and Objective-C metadata
[33m3890d64[m Fix a crash in the type checker when trying to find an ObjC bridge intrinsic when ObjC interop is absent
[33mc087f21[m COWArrayOpt: Hoist array projections to the preheader
[33m14ddfe1[m Add an API to ArraySemantic call to get the self argument as an operand.
[33ma95eefb[m Add a utility function to Operand to hoist projections rooted in an operand to an earlier point.
[33m360981a[m Add an API to SILInstruction to get the self argument operand.
[33m20b1323[m ArraySemanticsCall: Don't repeat assertions
[33m8cca130[m LoopRotate: Cleanup blocks after rotation
[33m0e327ea[m Add a mergeBasicBlockWithSuccessor utility function.
[33maa3aa24[m LICM: Improve debug output
[33m1db4d69[m LICM: Hoist side-effect free instructions in outer loops
[33m09efc9d[m Allow to one to define zero-parameter initializers with Objective-C names longer than "init".
[33me23c15a[m Dump the base of a dependent member type.
[33m2a385c4[m Minor tweaks to our handling of generic parameters from our outer context. NFC
[33m95a4318[m When printing the interfaces in a module, denit is not informative . Thus, this change allows swift-ide-test to ignore deinit when printing interfaces. Also, to ignore is the default setting. Attribut -skip-deinit can switch it off. rdar://19079711
[33m56600ac[m [+0 self: leaks] Print out the metadata kind so we have at least some information when we don't have a nominal type descriptor.
[33ma5138dd[m Replace a use of libc++ extension for tuple initialization with portable code
[33m849b7fd[m Update new tests for linux.
[33m373f8d6[m Squash -Winconsistent-missing-override that comes up due to CRTP.
[33m3d60a20[m Each element in an enum decl was of the type EnumDecl.type-> (type ->) *-> EnumDecl. The EnumDecl.type may confuse swift users, thus show only (type ->) *-> EnumDecl as the enum element type. rdar://18460552
[33mf985df8[m Sema: Don't unwrap vararg tuple subpatterns in enum patterns.
[33mc6bb14f[m [Parse] Use a clearer condition for inactive #if blocks.
[33m43017b0[m StdlibUnittest: add more overloads for the assertion function
[33md495d21[m Debug Info: Use the storage size for debug types where we previously didn't and make the assertion about zero-sized types stricter.
[33m47da107[m stdlib: add readLine()
[33m822a1a2[m StdlibUnittest: allow to feed custom stdin input into a test
[33m9910c75[m Don't offer incorrect fixit for NSString? -> String? conversion.
[33me714001[m Revert "Disable generic specialization in the devirtualizer ..."
[33m1d03915[m Make sure static vars in protocols don't get mutating setters.
[33m7b0a050[m [Sema] Add test for declaration more available than containing extension
[33m5359f88[m Fix the verifier assertion failure by fixing the sil file.
[33m1b6808a[m [CodeCompletion] When code completing a parameter whose type is autoclosure, we show the the parameter is of the output type of the closure, instead of the closure itself. rdar://19715527
[33m3fc110e[m [Sema]Allow @availability attributes on extensions
[33m9f68930[m [stdlib] Integer parsing: allow leading '+'
[33mab07daa[m [stdlib] Drop validation tests for numeric parsing
[33m3f4a5e8[m Disable generic specialization in the devirtualizer because it broke the build.
[33m8d413c3[m Invalidate the CallGraph after Global opt because we may be removing calls to global_initializer functions.
[33m371b247[m Invalidate the CallGraph after Capture promotion because it can clone functions (and change the call graph).
[33mf252cbb[m [runtime] Fix compiler error with clang-700.
[33mff39b97[m ClangImporter: Import getters for macros as transparent functions.
[33m962febb[m [Driver] use enum instead of two flags for embedding bitcode options.
[33m2f167a3[m Clean up the GenericSpecializer interface. NFC.
[33mdaa111d[m Rename function EmbedBitcode to embedBitcode.
[33m1e2fc76[m Add testing case for -embed-bitcode and -incremental.
[33m9d68056[m [Driver] fix support for -embed-bitcode-marker.
[33mb607750[m Enable generic specialization of devirtualized functions.
[33ma5119ff[m Fix a bug in the code that specializes individual calls. We need to use the worklist because the callee may have calls to specialize.
[33m15f0254[m Remove a debug message that depends on DEBUG_TYPE that's only available inside passes.
[33m285e2e8[m Change the specialization API to allow specialization of individual calls and specialization using a call tree.
[33m690cc05[m Refactor the generic specialization API. NFC.
[33mbe032a9[m Teach the devirtualizer to return the newly created call (to be optimized later).
[33m932790b[m Refactor the generic specialize into two parts: a utility and a pass.
[33mf730a30[m remove a debug flag
[33m5588b65[m Add API for inspecting a single call. NFC.
[33m9b5134d[m [Parse] Don't add local types from inactive #if blocks to the master list.
[33m129562b[m fix <rdar://problem/19780343> Default constructor for a struct with optional doesn't compile
[33mda1dfcd[m implement <rdar://problem/19150249> Allow labeled "break" from an "if" statement
[33mc48b5e1[m Use LLVM's config to determine correct dylib ext.
[33m663482e[m Split the debugging feature to set the pass name inside the PassManager resetAndRemoveTransformations into a new function.
[33m68e095b[m [Driver] add -embed-bitcode-marker for bitcode store project.
[33m48fa3d2[m [Driver] actually embed bitcode and command line arguments for -embed-bitcode.
[33m391e731[m [Driver] add -embed-bitcode for bitcode store project.
[33md39f8e4[m [Driver] make Swift accept bitcode input.
[33m6cb03ea[m [Driver] refactor part of the code to getOutputKind.
[33m7f668e7[m Add isUserAccessible() in Decl to show whether swift users should know such decl exists. For instance, a.storage for lazy var a is a inaccessible decl. An implicit decl is not necessarily inaccessible, for instance, self. Fixing rdar://18760063
[33ma43db36[m [Driver] add InputFileKind to FrontendOptions.
[33maccfcaa[m revert r25545, a different approach will be needed.
[33m98adbb7[m add a comment about some magic.
[33m60e9b9d[m Revert r25551, more investigation is required.
[33m5cfc38f[m there is no need to validate stored properties when synthesizing a memberwise initializer, it has already been done now.
[33mc5e47c0[m [stdlib] Integer parsing: Add two important checks
[33mbd12dcf[m [stdlib] Add integer parsing
[33md958513[m StdlibUnittest: add an expectEqual for optionals
[33m18dc6dd[m Small clean-up in cloning code.
[33m5ec04a8[m stdlib: use the unordered comparison for != on floating point
[33mc74848c[m Rework how synthesis of initializers is performed.  Before, we would do it before type checking any of the members of the type being analyzed, which leads to the really exciting task of generating (e.g.) a memberwise initializer when you don't know what the types of the members are.
[33mdce52be[m remove a pointlessly escaped newline, NFC.
[33m845dd08[m Fix a warning: implicit conversion of nullptr constant to 'bool'
[33m5aeb17a[m stdlib: use correct comparison semantics for floating point numbers
[33mdbd1956[m Sema: Don't bind the tuple label of labeled scalar enum payloads in subpatterns.
[33mb906a54[m [Sema] Remove unnecessary check for potentially unavailable inferred type parameter actuals
[33m8677a27[m TypeSubstCloner: Don't create an upcast from type to the same type
[33m1f91a63[m remove dead out parameter and newly dead result value, NFC.
[33ma3de4d5[m [+0 self] Behind a flag, add support to the runtime for tracking leaks and emitting structured JSON output of the leaks.
[33mb6bafa5[m When instantiating a generic class, set up the correct preconditions for ObjC layout, and write the computed offsets back to global ivar offset variables when present.
[33m35b5d0c[m Add a short alias for -whole-module-optimization.
[33mc0722c2[m IRGen: Defer emitting field type generators for nominal types.
[33m02f0ee1[m [Driver] Fix a use-after-free caught by the ASan bot.
[33m610b2a6[m Convert cmpcodesize script to python.
[33m1630c07[m Follow-on to r25524 to fix up iOS tests and another diagnostic.
[33m3431c3d[m Fix test update from r25528 to fix the build.
[33ma493410[m [ClangImporter] Map MacTypes.h's ItemCount and ByteCount to Swift.Int.
[33m8c258ee[m Fix <rdar://problem/19746552> QoI: variable "used before being initialized" instead of "returned uninitialized" in address-only enum/struct
[33m7262217[m [CMake] Move the KEYWORD-for-target_link_libraries workaround into SwiftSharedCMakeConfig.cmake so SourceKit can also automatically use it.
[33m99aa435[m remove upgrading support for the old @class_protocol attribute.
[33m58aadaf[m follow up to improve r25511.
[33ma9e69c0[m Take a bozooka out to fix <rdar://problem/19932544> refine error for using @autoclosure and @noescape on the same decl
[33mf40003b[m Disallow the insertion of attributes such as @autoclosure in code complete string. fixing rdar://19710757
[33m0aee8f9[m [callgraph] Centralize the calling of destructors in the CallGraph of CallGraphState.
[33md24e5b7[m IRGen: Fix partial apply of functions with parametric return type
[33m114345b[m [callgraph] Add basic verification of the callgraph.
[33md70e28c[m Update this tescase for r25502. Thanks Jordan for noticing.
[33m6942a09[m Put verification of analyses behind a flag in preparation for committing call graph verification code.
[33mcf27691[m [callgraph] Add a map from Apply -> CallGraphEdge.
[33m28cde0e[m [callgraph] Use one bump ptr alloctor for all memory allocated in the callgraph.
[33m4a34f25[m Add support for verifying analyses when -sil-verify-all is passed in.
[33m746d835[m Don't require "self." in local functions.
[33me120cd5[m revert changes to testsuite for if/let pattern restriction.
[33m02f5c32[m fix <rdar://problem/19939746> Improve error recovery for malformed if statements
[33m078a558[m Extract autolink information as a compile step.
[33m49548ae[m Embed autolink entries for ELF as globals.
[33mcadd851[m [Driver] Warn when using -incremental without a proper output file map.
[33m3357ee2[m Revert r25417, r25408, and r25370.  This adds back back the warning for un-type-annotated AnyObject binding in "if let", and allows general patterns in if-let.
[33m7346a97[m Update test and validation-test flags for linux.
[33m9dca554[m Tests for ±conformsToProtocol: on native Swift classes.
[33mc199905[m Second part of the cast folding and type-casts re-factoring.
[33mb347f7e[m Temporarily disable this assertion until <rdar://problem/19773096> is resolved.
[33m17c4a51[m Debug info: Have a function's name default to its linkage name.
[33mf7a27ae[m Script for comparing code size. This script can: *) Compare sizes of text sections (or other sections) *) Compare sizes of function categories (Swift functions, Protocol Witnesses, Specializations, etc.) *) Provide a detailed list or comparison of all functions
[33m2cb583e[m Walk superclass chain in +[SwiftObject conformsToProtocol:] too.
[33mfcb13ec[m Runtime: Remove redundant +description methods from SwiftObject.
[33m7b6c410[m Add mangling for C function pointer types.
[33m340106f[m Remove XFAIL after fixing 19919467.
[33mdf706b0[m Don't reuse ostream for multiple strings when generating result names.
[33md031ea1[m [stdlib] availability only works for public stuff!
[33m1badcbc[m [stdlib] Rename Slice => ArraySlice
[33m64af079[m Rename members and interfaces of the call graph for clarity.
[33m5bcd431[m [sil-devirtualizer] Do not try to devirtualize calls where a class instance is of an unbound generic type.
[33mfc561cd[m Fix errant fixit "as!" -> "as?!"
[33m7a6d8ea[m Revert "[ClangImporter] Add convert-inits for enums defined in terms of other enums."
[33md5e0ac7[m [test] Test both "start-from-zero" and "start-from-constant" enums.
[33mc411348[m When chaining to a non-designated initializer, warn about the superclass.
[33mc97f748[m Move the logic for folding type casts using statically known protocol conformances into DynamicCasts.cpp.
[33m3d23935[m Inliner: inline small functions even into cold blocks, because it can reduce code size.
[33m2c3fad5[m Use -sil-inline-test-threshold option in performance_inliner test
[33m10d8533[m XFAIL the new regressions under AddressSanitizer
[33m426fa4c[m Fix -Wunused-local-typedef warning.
[33m796d7d8[m [Basic] clang-700 changed how to check for the "[[clang::fallthrough]]" attribute.
[33mde48d77[m [AST] Fix warning: "base class 'swift::Stmt' is uninitialized when used here to access 'swift::Stmt::getDefaultImplicitFlag' [-Wuninitialized]"
[33m4c67543[m SIL: Type lowering for C function pointer types.
[33m4e89608[m [stdlib] Address Dmitri's review commentary
[33m92be153[m InstrProf: Handle extensions
[33m99d6486[m InstrProf: Add profiling and coverage for members of nominal types
[33m61d7f0a[m [stdlib] Downcasted arrays stay native
[33m94aca5a[m [stdlib] kill off a couple of new warnings
[33mb00abe3[m stdlib: add @testable annotations
[33mbe45fdd[m stdlib: fix indentation
[33mfb47bee[m stdlib: add explicit access specifiers, according to coding guidelines
[33mc719ed5[m ReST Hacks: Fix headline underline stripping
[33m84f34b0[m Revert "Removed '\ ' from documentation"
[33mc5c770d[m Revert "[stdlib] Added space between *x* and s in *x*s comments"
[33m571fbca[m [stdlib] Fix up some buggy doc comments
[33m2650af4[m Dump SILFunctionTypes just by printing the type, which is lame but not a regression.
[33m3ca163d[m Make Type::dump() newlines more debugger-friendly.
[33m4411b01[m ReST hacks: "handle" backslash-space
[33m1bc5f0e[m ReST hacks: "handle" code blocks
[33m4f9e7b3[m Add a ReST hacks mode that pretties up headlines
[33me254350[m [CopyForwarding] Make my comments clearer
[33m2311b93[m InstrProf: Improve handling of while conditions
[33meba7aad[m fix <rdar://problem/19763732> False positive in @noescape analysis triggered by default arguments
[33mb0db122[m fix rdar://19763676 - False positive in @noescape analysis triggered by parameter label
[33m7ea8aa8[m [Sema] Validate declaration version range availability within lexical scope
[33m60d27f7[m Add back TypeBase::dumpPrint() to easily dump a type's printed representation from the debugger.
[33m5559baf[m Tweak the SIL verifier to dump the whole function on verifier failures.
[33meae8adc[m Code simplification.
[33m2cf5650[m [stdlib] Fix two problems with Character<=>String
[33me8c8cfa[m When recovering from missing switch statement subject, discard diagnostics that arose from attempting to parse the switch statement body as an expression.
[33mbd79188[m InstrProf: Remove a declaration that no longer has a definition
[33m670dfcc[m final validation test adjustments, it actually passes after these changes.
[33m783c476[m InstrProf: Fix handling of default arguments
[33m6712817[m additional changes for the validation testsuite, that I missed in the previous pass.
[33m6d0a7c3[m adjust the validation tests to the new if/let syntactic restrictions. Thanks to Dmitri for doing almost all of this.
[33m6f93346[m Add the second draft of the calling convention spec.
[33m26431e0[m Update interface of getIRTargetOptions. Review feedback from Jordan.
[33m776c6a1[m Use RAII with DiagnosticTransaction instead of manually opening and committing transactions.
[33mf92d70e[m Use arena allocation in the call graph builder.
[33m9134d70[m When parsing if/while statements, if the condition turns out to be a closure, reparse it as a brace statement instead of attempting to repurpose the closure body. Suppress diagnostics from the initial condition parse until we're committed to that parse.
[33mb31eff2[m Add transactional diagnostic support to DiagnosticEngine
[33m322005d[m InstrProf: Track the filename in coverage maps
[33mdb16b53[m Refactor part of performIRGeneration to createTargetMachine and performLLVM.
[33mb9c360e[m Minor changes to incorporate feedback on r25416.
[33m3dbd6ea[m InstrProf: SILFunction doesn't live long enough for SILCoverageMap
[33m64c3333[m InstrProf: Don't try to show coverage for implicit declarations
[33mf94376f[m [CopyForwarding] Handle single definition source take copy forwarding
[33m38402a1[m Runtime: Add +description and ±_copyDescription to SwiftObject.
[33mb8ef26a[m inliner: remove the obsolete CannotBeInlined cost value
[33mcb68f83[m [stdlib] Fix OpenCL overlay test
[33m650714b[m IRGen: cache alloc function attributes in IRGenModule instead of a static variable.
[33m56bf85c[m fix <rdar://problem/19874152> Swift 1.2 struct memberwise initializer violates new sanctity of previously set `let` property
[33m72814a8[m Use llvm::SaveAndRestore instead of reinventing it.
[33m09021d9[m Add a detailed AST dumper for types.
[33mdc46dd1[m improve diagnostic and add fixit for if/let pattern error, as recommended by Dmitri.
[33me1c6046[m Fold getCmpFunction function into helper method on SILBuilder.
[33md8e0cbc[m CMake: expose an option to enable or disable the AST verifier
[33mfe5d88a[m CMake: prevent LLVM's CMake files from overriding Swift's assertion configuration
[33m257c6d3[m [stdlib] VarArgs overlay forwarding for OpenCL
[33m85082e0[m Uncomment a test that was blocked by a compiler bug, rdar://19150564
[33m5554cec[m [ClangImporter] Don't inherit initializers as designated...
[33m879ce47[m [test] Fix RUN lines missing their RUN.
[33mfee103c[m Reapply two tweaks to if/let handling:
[33mc4f4ddd[m Fix for a testcase problem, this goes with r25406
[33m3882db5[m Fix <rdar://problem/19775868> Swift 1.2b1: Header gen puts @autoclosure in the wrong place
[33m858d8d9[m SILCombine: Add cmp_*_T . (zext U->T x, zext U->T y) => cmp_*_T (x, y) peephole for unsigned/equality comparisons.
[33meb1c542[m [test] Remove hardcoded LLVM register name in test/ClangModules/enum.swift.
[33m83639ca[m [ClangImporter] Add convert-inits for enums defined in terms of other enums.
[33m229ddc0[m [test] Collapse three enum tests into one.
[33m29bd13e[m [ClangImporter] Make opaque enums RawRepresentable as well.
[33m7adbae8[m Comment UpdateSSA after reviewing.
[33m2e07b13[m [stdlib] moved _isNative check into isUniquelyReferenced
[33mb1959c9[m Stop allowing archetype-based substitutions in TypeBase::getTypeOfMember().
[33mecdd303[m Eliminate another case where we were performing substitutions via archetypes.
[33mb6896c8[m LoopRotate: updateSSAForUseOfInst needs to properly map arguments
[33m7ef5ba9[m Perform override checking prior to (and independent of) @objc computation.
[33mba46749[m [Driver] Search for ld and dsymutil relative to swift, just like lldb.
[33m42724b5[m [Driver] Flatten abstract DarwinTool class into darwin::Linker.
[33m6430d30[m [Driver] For now, just ignore -incremental under -whole-module-optimization.
[33m8f615f5[m Frontend: don't crash using -emit-reference-dependencies without -primary-file.
[33m1b22f07[m IRGen: Set correct attributes on call in partial application forwarder.
[33m9e68b3c[m [stdlib] fixed segfault when appending to bridged arrays(?)
[33ma3b4b09[m Teach TypeChecker::resolveTypeInContext to use interface types more often.
[33ma34a457[m Teach TypeDecl::getDeclared(Interface)Type() about ErrorType.
[33m301a3ce[m [stdlib] only pull in the dependencies we need for the tgmath tests
[33m2b9308d[m Update ConstraintLocator profiling for witnesses and associated types.
[33mfe0367c[m Make -Oplayground hidden as per Jordan's request.
[33m8d60a99[m [stdlib] fixed the build, rename in testing lib
[33m3638f78[m Fix the Fix-It location for insertion of @objc (rdar://problem/19879598).
[33mb1857d2[m [stdlib] added flatMap
[33ma598b46[m Add support for -Oplayground and add some sanity tests for it.
[33m4cf775f[m For class C and protocol P, C.Type is not convertible to P.Protocol.
[33m3805e18[m Explicitly track the mapping from dependent types to their opened type variables.
[33m476c65c[m Add a locator path element for candidate protocol witnesses. NFC
[33m44fed75[m Use SmallPtrSet instead of DenseSet in CallGraphEdge
[33ma44814b[m Revert 25371: "[25371] two logically independent but related patches conflated together:"
[33m6ad3a97[m two logically independent but related patches conflated together: - Improve error recovery for malformed if/let conditions, particularly   when the user uses "," instead of &&.  Add testcases for error recovery   requested by Jordan.
[33m079173c[m Dial back the warning about "type inferred to AnyObject may be unexpected" in an if/let conditional context.  There is no point diagnosing it here (just like a foreach loop) because the if/let is just unwrapping the optional in the initializer expression.
[33m3e72397[m Implement support for a leading boolean condition in an if-let condition, resolving <rdar://problem/19797158> Swift 1.2's "if" has 2 behaviours. They could be unified.
[33m041d7f5[m PredictableMemOpt: Don't touch structs with unreferenceable storage.
[33m372936e[m SIL: Verify that "struct" instructions aren't used to build structs with unreferenceable storage.
[33mc660b53[m ClangImporter: Don't try to provide an elementwise initializer for partially-imported structs.
[33m4849d91[m AST: Fix typo that called all foreign structs to be marked as having unreferenceable storage.
[33m6f8b468[m Change switches and selects to use NullablePtr<EnumElementDecl> instead of EnumElementDecl * when their API explicitly requires the user to check for nullptr. NFC.
[33m17c7c79[m Fix a variable name from a failed rebase.
[33m4554472[m Mark reabstraction thunk helpers as auto-generated.
[33m9deae1b[m Add a testcase I forgot add before committing r25287.
[33md601675[m Tweaked RCIdentity comments during review.
[33mcdb1ff6[m [rc-id] Address Andy's comments to r25339.
[33m77b2e21[m Move buildForwardingSubstitutions onto GenericParamList::getForwardingSubstitutions(). NFC.
[33m530835f[m Ignore initializers that aren't inherited when performing Objective-C override checking.
[33m617ea48[m Refactor getForwardingSubstitutions onto SILFunction. NFC.
[33ma664028[m [stdlib] Added space between *x* and s in *x*s comments
[33mf5910bb[m Fix a warning.
[33mc1ff974[m module interface gen: print extensions of nested types
[33m05906db[m Annotate crash tests that don't crash when the compiler is built without assertions
[33m1496cde[m fix rdar://19854166 - Swift 1.2 uninitialized constant causes crash
[33md14dd26[m Annotate a crash test that does not crash anymore
[33m404ad43[m Add tests for <rdar://problem/19831698> Incorrect 'as' fixits offered for invalid literal expressions
[33mfdf4c03[m Only suggest appending 'as! T' if there's a chance that the conversion would succeed.
[33m51db8ec[m tests: dissolve PrimitiveDataTypes.swift in other test files
[33m3f56ce0[m stdlib: fix coding style in UnicodeScalar.swift
[33mc8ad2a5[m SequencesAndCollections.rst final edits
[33m5debd20[m [stdlib] switched test to use getFloat32
[33m669cdc5[m Create an entrypoint tryToConcatenateStrings and hide the class StringConcatenationOptimizer in Local.cpp.
[33ma3122ec[m Provide a better, tailored diagnostic for result-type mismatches. (rdar://problem/19800727)
[33m4cb9eb7[m [rc-id] Ensure that the reforming enum analysis properly handles no-payload incoming values.
[33m24bb819[m [rc-id] Add an option that stops RCIdentityAnalysis from stripping off arguments.
[33mbb63b1e[m Make this testcase more resilient.
[33m96a2659[m Serialize initializer stub implementations.
[33m12b8a54[m [sil-combine] Further correctness fix for checked_cast_addr_br folding. Check that superclasses cannot have extensions.
[33mdda1c06[m [stdlib] changed -0.0 constant to hex
[33m81df1ee[m Revert "Provide a better, tailored diagnostic for result-type mismatches. (rdar://problem/19800727)"
[33m76d1570[m [stdlib] added operators for float type checking performance
[33mb49ca38[m [sil-combine] Correctness fix for checked_cast_addr_br folding.
[33md604ac8[m [stdlib] fixed floating point hashValue for -0.0
[33m0242a73[m Revert "[stdlib] added test for floating point zero hash values"
[33mfa276b9[m We should SILCombine a checked_cast_br of metatype AnyObject.Protocol to Some.type to a direct branch
[33ma85246f[m Recognize and record conformance of an archetype to a protocol via its superclass requirement.
[33m5b51620[m Be more tolerant of invalid protocol conformances when applying constraint solution.
[33m5e3d50f[m Stop defining CF_ENABLE_BRIDGED_TYPES[_SO_YOU_CAN_FIX_BUILD_FAILURES].
[33m3186969[m Revert "[stdlib] 0.0 and -0.0 must have the same hash value"
[33m236ab80[m Move creation of stub initializers into addImplicitInitializers().
[33mebb0aff[m [stdlib] added test for floating point zero hash values
[33mf6c1418[m Really delete the old file array_mutable file
[33mffa7524[m Change the array_mutable test to use debug output for all test cases
[33m6e9ddba[m Provide a better, tailored diagnostic for result-type mismatches. (rdar://problem/19800727)
[33m7749087[m [stdlib] 0.0 and -0.0 must have the same hash value
[33m19fbae1[m Revert "SILCombine: Peephole for (unchecked_ref_cast . open_existential_ref =>"
[33m4977f70[m Stop using LLVM_DELETED_FUNCTION.
[33mfdcbfcf[m Stop using LLVM_EXPLICIT.
[33m944e209[m [AST/IDE] Use TypeReprs to keep track of the type components in an ExtensionDecl.
[33m94be842[m Sema: Type checking for C function pointers.
[33m33c9457[m SequencesAndCollections.rst fix-ups
[33m1570364[m Update SequencesAndCollections.rst
[33m1171593[m Docs: Use a sans-serif font for code
[33m8c04ba6[m Docs: switch links to a subtler color
[33mc7f8db1[m Docs: prevent highlights from overflowing boxes
[33mcb8397a[m Docs: Default to highlighting code as Swift
[33me6c2402[m Docs: Trivial fixups for the pygments lexer
[33m82b9cf5[m Re-apply "[test] Rely on the stdlib as little as possible."
[33m5d9f0b9[m Revert "[test] Rely on the stdlib as little as possible."
[33m90b6348[m Annotate crasher tests where ASan does not detect issues anymore
[33m8459b84[m Annotate two crash tests that don't crash anymore
[33mf6faf8a[m sil-opt: implement partial AST verification
[33m5ad7181[m [test] Rely on the stdlib as little as possible.
[33md7a90ab[m [Serialization] Add missing bump to VersionMinor.
[33m5517486[m [Serialization] Use references for inherited conformances from other modules.
[33m4bad794[m SILCombine: Peephole for (unchecked_ref_cast . open_existential_ref => unchecked_ref_cast) and (ref_to_raw_pointer . open_existential_ref) => ref_to_raw_pointer.
[33m5629d5c[m SILGen: Handle scalar-to-tuple shuffles in function arguments.
[33m1dbbf92[m Add a warning when a closure parameter is followed by defaulted parameters.
[33m503e824[m Warn on uses of deprecated APIs
[33m55e76bf[m Debug Info: Be sure to reset the debug location before entering a new basic block in IRGenSIL.
[33m788d9f5[m Simplify expression.
[33mc51004b[m [ClangImporter] Don't try to load things if there's been a fatal Clang error.
[33m639070b[m [test] Don't start at 0 for the enum raw values.
[33md184b7c[m [test] Test that @objc enum values are preserved through serialization.
[33m12c80f4[m Check the raw values of an @objc enum eagerly during decl validation.
[33me635d6a[m In the spirit of r25276, break circularity with generic functions, too.
[33mc6adb39[m Move the closure argument to the end of split() and make its name API (#isSeparator).
[33md791725[m stdlib/lazy: best effort for underestimateCount() on lazy views
[33md6b362e[m Don't re-typecheck closures that have been transformed to match a void-returning contextual type. Due to their transformation, these single-expression closures will now appear as multi-expression, so a re-typecheck could potentially result in bogus type errors. (Fixes rdar://problem/19806558, which is a regression from Xcode 6.4 seed 1.)
[33mb2dd3ce[m Update compiler_crashers for r25276.
[33mf879f47[m Fix circularity issue checking the signature of a function.
[33m6b13452[m [ClangImporter] Don't import the CGVECTOR_DEFINED macro.
[33mcdcaddd[m [stdlib] fixed warning in repl
[33m3503cce[m Add support for gathering dtrace statistics on calls to isUniquelyReferenced.
[33m98c6421[m Update for LLVM PassManager change r229094
[33m108adff[m Minor: nullptr checks added to avoid crashes in erroneous cases
[33m7ced3da[m @transparent on declarations of vars with getters/setters inside extensions should not be ignored.
[33me46c050[m Reuse type metadata of Self in witness methods.
[33mc18168a[m stdlib: fix typo in comments
[33mba444b7[m Remove unused header file.
[33md44090d[m InstrProf: Optionally generate coverage maps when profiling
[33m186f033[m Forgot to include the .cmake for r25264.
[33m6ff9433[m Add SwiftRuntime dtrace provider with probes for retain, release, allocateObject, deallocateObject.
[33m34f6016[m Move minimal sequences and collections to StdlibUnittest
[33m635d46d[m Fix <rdar://problem/19821633> only allow autoclosure on parameters, not on properties and globals Disallow autoclosure on anything but paramdecls, and provide better QoI when you use them in enums.
[33m4c8fad7[m tests: add (failing) tests for mandatory inlining of && and ||
[33me0abaec[m tests: remove -verify from a stdlib parsing test, it is a no-op here
[33mf9a69ef[m updated radars blocking removing && and || overloads
[33mf172b67[m Revert "[stdlib] removed &&/|| overloads"
[33m61286f0[m Fix warnings produced by a newer version of Clang
[33mf919dd5[m __attribute__((noescape)) isn't getting imported properly for methods.
[33m7dae65c[m Document the new whole-module-opt mode.
[33m9c7417e[m fix <rdar://problem/19782264> Immutable, optional class members can't have their subproperties read from during init()
[33m38a4f0c[m Revert "Match Objective-C names in overrides as part of validation, not override checking."
[33m654dab2[m [stdlib] removed &&/|| overloads
[33mac93e35[m Address Chris's review comments on @autoclosure(escaping).
[33maadcd49[m Test escaping behavior of @autoclosure(escaping).
[33m954b4e4[m Implement @autoclosure(escaping).
[33m735bd35[m SILGen: Remove !hasDifferentTypeOfRValue assertion from emitConversionFromSemanticValue.
[33mc9f6e8a[m Removed '\ ' from documentation
[33m4f1d2f5[m UTF16 -> UTF-16
[33mef16550[m Runtime: Walk superclass chain in -[SwiftObject conformsToProtocol:].
[33mb1a56a9[m stdlib: revert the @nocapture patch series for filter() and map()
[33mb25eda3[m Match Objective-C names in overrides as part of validation, not override checking.
[33mfdb172e[m Only recognize array semantic functions with a self argument when they have a self argument
[33m7d811bf[m SILGen: Load when an lvalue base is passed to a nonmutating accessor.
[33mc28505b[m Add NS_RETURNS_RETAINED annotations to NSString{Upper,Lower}caseString.
[33mef071c3[m Update for LLVM API change r228930
[33m9544893[m IRGen: Use a different cache for layout-metadata.
[33m3d38829[m stdlib: debugPrint() of a Character should produce a quoted string
[33macd1869[m stdlib: remove a semicolon
[33m1fa8fdd[m stdlib: rewrite the mirrors generator to hardcode less about stdlib types
[33m5f49574[m Add tests for custom mirrors
[33md65d465[m tests: merge two tests for fixed point types
[33ma4a61ad[m Annotate broken-modules.swift as depending on ObjC syntax
[33me1722f2[m fix <rdar://problem/19783405> @autoclosure parameters 'escape' from compiler-generated default initilizers
[33mc10ed5e[m [Serialization] Add an extra include.
[33m4c37130[m remove some extraneous parentheses from the stdlib now that rdar://19772570 is fixed. stdlib folks, if you don't like this, feel free to revert.
[33mdb42180[m fix <rdar://problem/19772570> Parsing of as and ?? regressed
[33m6e96e26[m Add CompilerInvocation::loadFromSerializedAST.
[33mdbd3b60[m [Serialization] Move (Module)Status and validateSerializedAST into a namespace.
[33m65b432a[m split tok::oper_postfix into two token kinds, one that indicates that it was spaced and one that indicates that it was unspaced.  NFC, needed by my next patch.
[33m1dec981[m Revert a chain of work-in-progress commits implementing readLine() that I committed by mistake.
[33m38a1476[m Annotate a crasher test that is not crashing anymore
[33m74e5b71[m wip
[33mcdb7850[m stdlibunittest stdin wip
[33me7eb159[m wip readline
[33ma31d33f[m Fix: <rdar://problem/19657458> Nil Coalescing operator (??) should have a higher precedence
[33m10fc6e2[m added test for invalid UInt8 ascii construction trap
[33m1263fb4[m [stdlib] improved .utf16Count message
[33m4d86ddc[m When checking if a decl with trivial accessors is settable, make sure it actually has a setter. Not doing so can lead to improper projections from rvalue to lvalue, and cause crashes during SIL generation. (rdar://problem/19781739)
[33m8d4df82[m [stdlib] made String.utf16count unavailable
[33mbb9fa13[m Runtime: Fix overrelease in swift_stdlib_NSString{Lower,Upper}caseString.
[33m0e74268[m Strongly prefer available declarations to unavailable ones in type checking.
[33m26ee4c3[m [stdlib] added ascii label to UInt8 UnicodeScalar constructor
[33m59bb06b[m InstrProf: SIL-level coverage mapping and lowering to LLVM
[33m8dab08e[m StdlibRationales: type conversion conventions
[33m266acda[m moved reflection test to Runtime.swift
[33m3e160b0[m added tests for rdar://problem/18317906
[33m135a6dc[m <rdar://problem/19723473> Uncouple the AST validator from whether assertions are enabled or not
[33mde8a05b[m [Serialization] Serialize the SDK path and -Xcc arguments for an app.
[33mb6a247c[m [Serialization] Use a StringMap for registered buffers instead of a std::map.
[33m8737bdd[m [Serialization] Remove unused InputFilenames from SerializationOptions.
[33m2cd2fe3[m [ClangImporter] Don't assume all memory buffers have unique identifiers.
[33mfb43b04[m IRGen: Consider decl linkage instead of type linkage for lazy metadata emission.
[33m63c583d[m SILGen: Set up __FUNCTION__ correctly in extension contexts.
[33m83f92fc[m [stdlib] removed &%
[33m3b7df81[m Add in a note. NFC.
[33mcc07396[m [sil-combine] When eliminating closures, properly release captured values.
[33mac5e78d[m added reflection on null pointer test
[33mec839a6[m Fix for rdar://19773050, Swift 1.2b1: Compiler crash with errant curly brace
[33mc88f945[m Revert "SIL: Don't descend into nominal types' parents to determine linkage."
[33m8c9f7a6[m SIL: Don't descend into nominal types' parents to determine linkage.
[33m4501aac[m Fix Reflection_jit test to match Reflection again
[33m4bc91af[m Annotate that 0002-rdar19792768.swift only crashes with assertions enabled
[33mccbba65[m CopyForwarding pass: make destroy hoisting conservative if the addess is also loaded from.
[33m5228d9e[m [stdlib] Add "copy init" methods for bridged types
[33maf4dd53[m Runtime: Don't fall through into the wrong place when reflecting opaque values.
[33mf43843f[m tests: use the new substitution for the mock SDK
[33m235d3ae[m Validate a getter or setter's storage declaration before checking it's @objc-ness.
[33m833a7f4[m Adopt upstream LLVM API change.
[33m049e584[m Pass declarations, not locations, when diagnosing Objective-C method redeclarations.
[33mafd4f98[m Add XFAIL: no_asserts to compiler_crashers_2/0001-rdar19792730.swift
[33mebdf975[m Use the lifetime endpoints that we have already queried for.
[33m03cca73[m Fix naming convention.
[33m6009745[m Annotate objc_init_redundant.swift test as requiring ObjC interop
[33m2709a66[m Fix issue with where we release boxes in AllocBoxToStack.
[33mc804c50[m Add a simple utility for determining the lifetime of a value.
[33mbc1422e[m Diagnose attempts to replace Objective-C methods via an extension.
[33mf10a416[m Don't include nameless decls (like accessors) in a file's provided decls.
[33m6f87cff[m Be more consistent about requiring "self." in closures.
[33m64ffcf4[m tests: check that array generators traverse a snapshot of the array
[33ma990935[m stdlib: change {Dictionary,Set}.Generator to value semantics
[33mb76f6b2[m Add tests for compiler crasher bugs that I filed recently
[33m38dbd74[m fix <rdar://problem/19770775> Deferred initialization of let bindings rejected at top level in playground
[33mee342c1[m <rdar://problem/19770981> Swift doesn't recognize that NSString has been as! converted to String and continually suggests conversion
[33mfedfef7[m [ClangImporter] Delay creating the body for struct zero-initializers.
[33m6566c82[m tests: adjust types to match in the profiling SILGen test
[33m5e6a75b[m [stdlib] Progress on SequencesAndCollections paper
[33m1e81ef4[m Narrow trivial accessor creation to @objc VarDecls
[33m4d7d6bb[m [PrintAsObjC] Don't forward-declare @objc enums using typedefs.
[33m6aa98d9[m [build] Fix __TEXT,__info_plist and -Wl,-application_extension settings.
[33m2cc0ef6[m [stdlib] Removed &/
[33ma0ecab5[m ClangImporter: Don't attempt to bridge __unsafe_unretained NSString * fields in structs.
[33mec68108[m Replace a dyn_cast to "DictionaryType" with an invocation of ConstraintSystem::isDictionaryType. (I'm pretty sure that just relying on the cast can cause problems when generating constraints.)
[33m667443c[m CMake: install 'llvm-opt' with execution permissions
[33ma490082[m InstrProf: Set up the basic infrastructure for profiling swift
[33m3428430[m Fix an embarrassing typo in this testcase.
[33mc2f3634[m stdlib: remove misleading typealiases 'Key' and 'Value' from Set's Generator
[33ma079cbc[m Generate trivial accessors for static stored properties in objc classes
[33me92cd08[m stdlib: underestimateCount() of an array is just its count
[33mc2bf397[m stdlib: really mark the closure in map() as @noescape
[33m2cb3239[m [stdlib] Correct doc comment
[33m52fbf06[m Rewrite this testcase to be more robust.
[33mc5c5213[m Don't over-eagerly specialize the return type of an enum initializer application. Doing so doesn't really improve compiler throughput, but can cause problems if the enum has overloaded initializers. (rdar://problem/19697319)
[33m5f9d0b5[m stdlib: fast enumeration: stop relying on stack promotion optimization for correctness
[33m20bc247[m Use unified logic for determining whether a subscript index is bridged to an object type.
[33md397a32[m [PrintAsObjC] Output nullability for CF types and non-retainable pointers.
[33m6a50a12[m [PrintAsObjC] Don't assume typedef'd enums have a name themselves.
[33ma2be912[m Minor: moved code completion test
[33me486d7c[m ManagedBufferPointer checks whether the buffer class conforms to certain constraints and whether the minimum capacity is greater than 0
[33m989aa3d[m When converting a non-void-returning closure to a contextual function type that returns void, increase the function conversion score count. This ensures that, in the case of overload resolution, we don't accidentally favor a void-returning function over a better (or exact) fit. (rdar://problem/19776288)
[33m6058d29[m CMake: allow the SDK overlay to be built separately from the compiler and the stdandard library
[33m157e193[m CMake: move user-configurable variables to the top-level CMakeLists.txt
[33me00cfe1[m Add failing test for rdar://problem/19775284.
[33mf585966[m Fix for rdar://19634354, SourceKit crashes while defining a function inside a while loop
[33m33f5517[m stdlib: use fewer closures in withUnsafeMutablePointers()
[33ma5e757c[m Improve some comments. NFC.
[33mf164dd5[m [closure-spec] Use a proper cleanup location instead of a SILFileLocation.
[33m6f6ca68[m stdlib: mark closures in Array.map() and Array.filter() with @noescape
[33m559fc6d[m tests: check that Swift.map can operate on different input and output types
[33m9923e3f[m When optimizing constraints for an unresolved dot expression, don't walk into the base expression - it will most likely result in an incorrect favored type, which can lead to "expression too complex" errors. (rdar://problem/19773442, rdar://problem/19770646)
[33mcf11a16[m [closure-spec] Use a SILFileLocation(SourceLoc()) instead of a ImplicitReturn location to appease the verifier.
[33m0938275[m Report the size of static functions.
[33mefaf7b5[m [stdlib] renamed println's argument to value instead of object
[33mecf260e[m [test] Fix expectations I changed without re-testing.
[33ma5b8e05[m Reuse type metadata in the most obvious cases.
[33m75b0968[m Reformat into an early return.
[33me9a590e[m Initialize a stack variable.
[33m0b1e8ec[m Remangler: Properly handle "static" as a context node.
[33m6e59195[m SILGen: Don't emit vtable entries for willSet/didSet.
[33mc250055[m SIL: Print willSet and didSet SILDeclRefs.
[33m6fe976d[m Diagnose function conversions that change the function's ABI.
[33m07041fc[m Revert all the function type ABI restriction changes.
[33md697856[m Revert "[stdlib] added failing to compile test for map"
[33m42a6ca5[m Revert "fixed type error in unit test"
[33mac9e3ca[m stdlib: reattach the comment to the declaration
[33m7654d86[m stdlib: don't reserve capacity in filter()
[33m63463f5[m SIL: Mangle the static-ness of declarations.
[33m97011ee[m Update diagnostics in test/1_stdlib/StringDiagnostics.swift for r25104.
[33m1d6d890[m Adapt upstream LLVM API change.
[33m602dc56[m Revert "[stdlib] renamed println's argument to value instead of object"
[33m40a0e44[m [stdlib] renamed println's argument to value instead of object
[33ma1cb002[m [stdlib] Begin SequencesAndCollections white paper
[33m3b1d17a[m Remove tabs that snuck in somehow
[33maf12966[m When fixing implicit conversion of bridged types, only insert 'as T' instead of 'as! T' if explicit conversion is sufficient.
[33mb160d36[m fixed type error in unit test
[33m152df92[m [CodeCompletion] Code Completion String getName should always return non-empty string value for valid code completions. Code completion tests call and validate getName’s result.
[33mb1c233d[m [stdlib] removed mixed string/nsstring operations
[33m92b12d1[m [stdlib] removed doc comment with internal information
[33mfbd8ab6[m [stdlib] added failing to compile test for map
[33m08408fd[m [swift-update] Make an effort to pick up fixable errors even when there are fatal errors.
[33m7aa11c8[m [SimplifyCFG] Small improvement for switch_enum jump threading.
[33me18b8f0[m stdlib: add radar references to Array.map and Array.filter
[33mdfd62b1[m stdlib: add more @noescape attributes
[33m1ab2362[m stdlib: reimplement map() and add @noescape to reword parameter
[33m636d672[m stdlib: reimplement filter() and add @noescape to its parameter
[33ma357677[m StdlibUnittest: add an asertion, expectUnreachable()
[33mca01276[m tests: use a "simple" substitution in Algorithm.swift
[33ma4c7773[m IRGen: Change type layout verifier to take a type by name to verify.
[33ma477e5a[m Simplify substitutions used in the parse_stdlib.sil test
[33mb563907[m StdlibUnittest: autorelease stub for the native runtime should call the closure
[33m6da1411[m Annotate expected failures on Linux
[33mf2ae04d[m CMake: add more precise library dependencies required for strict linkers
[33m6e67f50[m tests: fix syntax errors in CHECK lines so that they are actually active
[33m380edda[m StdlibUnittest: stub out one use of Foundation (one more remaining)
[33m1952a10[m ClangImporter: import size_t as Int
[33m12630f9[m Integrated REPL: fix autolinking
[33m36c7177[m IRGen: Follow SIL's logic for deciding when overrides reuse vtable slots.
[33mf15d277[m docs/StdlibRationales: this document collects rationales for the Swift standard library.  It is not meant to document all possible designs that we considered, but might describe some of those, when important to explain the design that was chosen.
[33m1e4f4b1[m Update fixed compiler crashers for r25059.
[33mfac5a83[m Allow capturing super in explicit closures and nested functions.
[33m492d8c3[m Fix a bug in the debug printing logic.
[33m96303f4[m SIL: Factor the vtable override logic from SILGen into a method on SILDeclRef.
[33maee4c26[m Fix indentation of fix cases in ConstraintSystem::applySolution().
[33me2ac9f6[m Add FixKind for 'as' -> 'as!' conversion
[33m08c9a6f[m Clarify alias analysis comments for my own sanity.
[33m3ae1171[m Handle capturing super in autoclosures.
[33m81d5e9a[m Runtime: Remove lazy symbol lookup hacks for ObjC mirrors.
[33mae9e10a[m VT100 compatibility
[33mc070e25[m [stdlib] added @noescape to remaining functions
[33m19af8a1[m Re-apply "If a function conversion fails, suggest wrapping in a closure."
[33m0d0285b[m [closure-specializer] Fix various parts of the closure specializer.
[33m841aa44[m [cfg] Add a new analysis findAllNonFailureExitBBs.
[33m436f022[m [local] Add tryDeleteDeadClosures.
[33mff2d980[m [parser] Improve error message.
[33m07acb16[m [arc-analysis] Add a helper routine getFinalReleasesForValue that determines for a value a set of post-dominating live releases.
[33m18d6f3c[m Add small TODO. NFC.
[33m1988b47[m [CMake] Don't use the shims/ directory as a primary output.
[33m003821a[m Value-to-optional conversions are only subtypes for class references.
[33m3f61394[m Update library dependencies for upstream LLVM changes (probably r226078)
[33mb3e9f13[m Revert "Workaround FD leaks from clang module files in performSema"
[33m85975d3[m Update for upstream LLVM change
[33md258d76[m Workaround FD leaks from clang module files in performSema
[33m792b7b5[m Don't mandatory-inline into thunks.
[33mb158753[m stdlib: coding style: add parentheses to one-argument closures for consistency with the rest of the library
[33m46302bd[m stdlib: mark more closures with @noescape
[33m9514f08[m Convert the last trap test that used CatchCrashes.cpp to StdlibUnittest
[33m3337995[m Clang-format the new shims header, CoreFoundationShims.h
[33m13395d1[m Adjus inline_thunk.swift to pass on 32-bit platforms
[33m650b402[m ApplyInst: Add asserts to make sure we do have a self argument
[33md892d51[m FuncSigOpts: Change the calling conv from method to freestanding if we change self
[33mfe885cf[m Fix isSelf() function in SILArgument
[33mbbb81a4[m FuncSigOpts: Don't transfer array.semantic attributes
[33m86492b5[m ArraySemantics: Use the function type to check for the presence of a self argument
[33m82828ae[m tests: use line-directive to run generated tests
[33m400bd74[m validation-test: use %target substitutions more
[33m5fef423[m tests: port IntervalTraps to StdlibUnittest
[33md574e4b[m tests: before checking for a trap, check that the operation has a possibility of not trapping
[33mfa539e8[m stdlib/shims: declare CoreFoundation APIs only when we have ObjC interop
[33mb4c4b30[m [stdlib] Don't leak CF dependency from core stdlib
[33m58b43b8[m IRGen: Fix the extra inhabitants of unowned references.
[33m2c5f786[m clang-importer: Always import attributes for accessors
[33m4535d51[m [stdlib] Added initializeFrom to array functions
[33m57cac6a[m [apinotes] Mark UIView's motionEffects as optional for backward compatibility.
[33m315b9c4[m Add comment and self documentation of the requirements for sortUnique.
[33m1d9d153[m IRGen: Consistently mangle protocol names in protocol descriptors with the _Tt prefix.
[33m283a6be[m Fix users of ArraySemantics::getSelf to correctly handle Array.init
[33m9496503[m [stdlib] Move ObjC Mirrors out of Foundation
[33m97ec182[m [stdlib] Move String bridging into Core stdlib
[33ma89c2e1[m [stdlib] Create shims for CFString access in core
[33m96c6c8d[m [stdlib] Fix doc comment formatting
[33mf7000ce[m [stdlib] Add unsafeUnwrap(x)
[33ma83b00b[m [value-tracking] Add an API to value tracking for determining dead closures.
[33mae18e7b[m [g-arc-opts] Change fatalName checking to use endswith instead of equals.
[33m59a1db1[m [silfunction] Add helper for returning arguments of a SILFunction.
[33m7acd7de[m [verifier] Make sure that applies of no-return functions have an unreachable as the next instruction.
[33m41912c9[m Add STLExtra sortUnique(vector).
[33m250cc9a[m [closure-spec] Explicitly disable support for closures that close over address types.
[33m4aac127[m Don't inline into thunks, except very small functions.
[33m883911c[m Define __null_unspecified to nothing when the underlying Clang doesn't support nullability.
[33mfd13a5e[m Clear out type information in UnresolvedSpecializeExpr.
[33m9dfd349[m Add a new Thunk-flag in SILFunction which specifies that a function is a thunk. This will have an effect on inlining into thunks. Currently this flag is set for witness thunks and thunks from function signature optimization. No change in code generation, yet.
[33mc896106[m [IRGen] Allow CallEmission to specify attributes on the llvm CallInst.
[33m857a215[m stdlib/tests: remove duplicate expectType() function
[33ma7480ef[m stdlib/tests: port three more trap tests to StdlibUnittest
[33m687037b[m stdlib/tests: port ArrayTraps test to StdlibUnittest
[33m4ff6e69[m Add tests for noescape diagnostics with multiple overload matches
[33mf3972ed[m Annotate a crash test that does not crash now
[33m18355ca[m Revert "If a function conversion fails, suggest wrapping in a closure."
[33mcc7b10f[m [Tests] Tighter @availability printing tests.
[33meae3987[m Annotate tests that no longer crash under AddressSanitizer
[33mad74409[m If a function conversion fails, suggest wrapping in a closure.
[33mf1b97a1[m SILGen: Admit inout aliasing of polymorphic properties.
[33m8389ca0[m [Tests] Move OS X specific availability printing tests to different file
[33mf15d56b[m [IDE] Mark the parens for string interpolation with a special syntax annotation.
[33me855ae8[m Clang importer: only consider imported initializers when filtering out duplicates.
[33m5f8a81a[m Reapply r24949.  My search for uses of ABIArgInfo::Expand was incomplete; we do use it on i386 for arbitrary small aggregates, and unfortunately this means we have to learn how to expand quite a lot of types.
[33m7eeac95[m Due to builds with stdlib assertions enabled it becomes impossible to pattern match SIL from test cases in swift, instead verify the debug output.
[33mde14227[m validation-test: annotate test that started hitting an assertion
[33mf09b4f3[m validation-test: annotate tests that don't crash anymore
[33maf31899[m Flag -debug-values-propagate-liveness should be always taken into account if provided.
[33m8bbb88a[m Temporary disable this test - due to buildbot breakage
[33m4089886[m Add a script to analyze the content of the swift dylib.
[33m8c4d1b2[m Emit diagnostics when multiple overload matches have the wrong function attribute
[33maf1f02e[m clang-importer: Import attributes on enum elements.
[33mfc3a5a7[m Make sure we don't add bogus same-type requirements to a generic signature.
[33md2a17b3[m IRGen: Handle all class-to-class casts, not just super-to-sub casts.
[33m7ba5e6a[m [stdlib] added @noescape to Array functions
[33m8e95156[m [stdlib] added @noescape to withUnsafeBufferPointer functions
[33m6cbf069[m [stdlib] added @noescape to StaticString methods
[33m8a24395[m [stdlib] added @noescape to StaticString methods
[33ma979680[m Revert "Implement clang::ABIArgInfo::Expand correctly when matching"
[33md644a6f[m Add support for passing multiple substrings to -sil-print-before, -sil-print-after, and -sil-print-around.
[33m478dc31[m [closure-spec] Remove unused SILLoopAnalysis.
[33m8e8425a[m [apinotes] Update nullability info for WatchKit
[33m556086d[m Add a test for nullability of imported CF types (rdar://problem/18016178).
[33m53f321d[m Teach the type nullifier to wipe out explicit cast types, too.
[33m71922a4[m COWArrayOpt: Handle cases where the array is not uniquely identified
[33m41360b0[m Run LICM in the early loop opt pipeline to expose more opportunities.
[33md1ec477[m ApplyInst: Add API to get an argument operand as a reference
[33me4b1cbe[m stdlib: remove .null() static factories on unsafe pointers
[33m34d393b[m stdlib: stop using AutoreleasingUnsafeMutablePointer.null()
[33m65cee50[m stdlib: stop using COpaquePointer.null()
[33mf04e0d9[m tests: simplify RUN lines
[33m5bc75e8[m Use a relative path for the in-tree symlink
[33m0b5843a[m Add XFAILs for tests that started failing under AddressSanitizer
[33mc4123d7[m Remove XFAIL annotations in tests that don't fail under AddressSanitizer anymore
[33mf4a1841[m [IRGen] Properly track whether we've emitted an imported static function.
[33m319b5f2[m Implement clang::ABIArgInfo::Expand correctly when matching the C calling convention.
[33m9637137[m Provide forced-downcasting Fix-Its where we used to have implicit bridging conversions.
[33mebdb761[m stdlib: add conformances to CVarArgType to unsafe pointer types
[33mc81cf86[m implement <rdar://problem/19707366> QoI: @autoclosure declaration change fixit
[33m527a9a8[m Use "isa" instead of "dyn_cast" when checking for type identity.
[33m92ff07a[m If member lookup into an optional fails, suggest a '!'.
[33mf86324a[m Prevent error recovery for type expressions from crashing the compiler. This has come up fairly often during recent testing. (rdar://problem/19543299 and rdar://problem/19673269)
[33m8d6d0c1[m fix  <rdar://problem/19470858> QoI: @autoclosure implies @noescape, so you shouldn't be allowed to specify both
[33mf7a9b18[m stdlib: fix comment for ExtensibleCollectionType.extend()
[33mabc3f10[m Annotate tests that don't crash anymore
[33m88e4d43[m Make optionality checking more lenient in requirement/witness matching.
[33m2eb96ba[m [stdlib] reverted removal of mixed string type operators
[33mf16398c[m [stdlib] Clean up unintentionally committed dump()s
[33me6b4b09[m IRGen: Allocate Clang coercion buffers with proper alignment.
[33me452c87[m If an expression fails to type check because one of its sub-expressions is a failed call expression, make sure that the inner call expression's diagnostic is surfaced. Doing so address rdar://problem/19419422, rdar://problem/19437880 and rdar://problem/19559649.
[33med8c302[m [stdlib] Move tests that challenge a debug compiler
[33m644c565[m [stdlib] Re-enable disabled tests and fix the bugs
[33m0c17537[m Revert "[stdlib] use initializeTo instead of loops"
[33ma0cad60[m [stdlib] removed mixed string type operators
[33mb0fabce[m Sema: Force `dynamic` materializeForSet accessors to be statically dispatched.
[33mc48e1bc[m Sema: Allow availability attributes on enum elements.
[33m45e7fd5[m Remove a misguided peephole optimization from the constraint generator. This fix partially unblocks the build of the Cartography external project.
[33m805727c[m Linker test fails on linux until osx sysroot built
[33md523ad0[m SIL: Don't lower the @noescape attribute from the AST to SILFunctionType.
[33m518e6dc[m Remove unnecessary calculation of Clang's default module cache
[33mcd0fe71[m Fix for rdar://18898671, Xcode 6.4-6D94: SourceKit crash in swift::ClangModuleUnit::getFilename()
[33m3d8e7bc[m Fix a few warnings of unused variables in the -no-assertions build.
[33m4eb340e[m Enable the llvm function merging pass.
[33mbea947c[m Annotate compiler crasher tests that now hit assertions under AddressSanitizer
[33m8e1e666[m IRGen: Start a type verifier to fuzz static type info against runtime type info.
[33mf49ab3f[m Support struct_element_addr and tuple_element_addr in SILMem2Reg.
[33m758222e[m Run SilMem2Reg also after the last inliner.
[33m3e1e2c4[m Lock down on function conversions that change the ABI of the function.
[33m7a1faed[m Add a new helper option -sil-print-only-functions useful for controlling SIL output.
[33m791f2ff[m Utilize 'requires' feature of module maps to exclude frameworks from Swift
[33m295cf8f[m Make test/IRGen/enum.sil test more portable.
[33m56026ee[m [stdlib] fixed ambiguous overloads
[33m9c2bc50[m In some cases, the same type error will result in different diagnostics being emitted between ARM and x86 targets. Addressing rdar://problem/19434979 will allow us to swizzle expected errors based on build configuration options, but until I can push that change we should generalize a few of the expected errors in the FixedPointDiagnostics test, and re-enable the test on ARM.
[33maf349b7[m Re-enable this testcase.
[33m00f0286[m IRGen: Mask the payload of nested single-payload enum payloads.
[33m6f19952[m Fixup some comment grammar.
[33m407f311[m [test/UpdateCode] Make sure that the 'multi-inputs.swift' test case emits the expected errors.
[33mc97c949[m Add frontend flag -import-module <name>.
[33m7fd2ca6[m [driver] Introduce 'continue-after-building' functionality in the driver.
[33m229bc37[m Honor bridging attributes on typedefs regardless of what they're named, and don't make CFTypeRef a special case.
[33m817625c[m Miscellaneous fixes to cope with typed collections in Foundation.
[33m09674fa[m Avoid unimplemented function conversion in test/Interpreter/currying_generics test.
[33m6a1b734[m Make trailing closure syntax match the last parameter, always.
[33mf40f6fd[m Add objc_interop flag on new test.
[33m844fe7d[m Fix for rdar://19614869, Fuzzing Swift: AnnotAndDiagASTConsumer crashes in SemaAnnotator::walkToDeclPost(...): Assertion failed: "lazy var not implicitly computed"
[33m16bad7f[m [stdlib] improved a unittest error backtrace
[33m8bbfd98[m unittests/runtime/weak.mm: Don't clobber 'isa' of destroyed ObjC object.
[33m9ade11a[m XFAIL FixedPointDiagnostics.swift.gyb on armv7 in addition to arm64
[33m49ba1c3[m Revert "Don't hardcode the integer size."
[33mfecf7f8[m Update for upstream LLVM API changes
[33mc1db47e[m Sema: Synthesize materializeForSet with dynamically-dispatched accessors for dynamic properties.
[33m0d2881d[m Don't hardcode the integer size.
[33m44552a1[m tests: use %target-* substitutions in tests to make them portable
[33m2e48a62[m Allow the build to succeed even if we are not building the standard library for OS X while building the compiler for OS X
[33m3407325[m XFAIL FixedPointDiagnostics.swift.gyb for arm64 because of: <rdar://problem/19677545> Type checker diagnostics differ between platforms for "var a: UInt8 = -(1)"
[33m2037fe0[m Revert "Sema: Synthesize materializeForSet with dynamically-dispatched accessors for dynamic properties."
[33m456288f[m Sema: Synthesize materializeForSet with dynamically-dispatched accessors for dynamic properties.
[33m92ace1b[m Update for upstream LLVM API change (r227685)
[33m30e847e[m Disable failing test
[33mf47ee38[m Disable the test DebugInfo/closure-multivalue.swift, it has been failing for a few days already
[33m88708e0[m CMake: don't try to look for SDKs that were not requested
[33m4994d70[m Clean up ProtocolConformance::getTypeWitnessByName(). NFC
[33m6287d91[m By default, hide the actual implementing accessors of properties and subscripts when printing them; just print them as get/set.
[33mee2d52b[m Make nsmanaged-witness check a little more general.
[33m8527934[m Make test/IRGen/objc_protocols_jit.swift more portable
[33mab86515[m <rdar://problem/19671476> Offer as -> as! changes in all nested contexts
[33macfb0c3[m IRGen: Properly register the selector name for @objc protocol property setters in JIT mode.
[33ma960c00[m Sema: Check getter and setter availability.
[33md214e36[m Remove the custom memory allocator. It was not effective in accelerating the metadata lookups and Greg and Dave have suggested other solutions for accelerating this call.
[33mbdadc01[m Add a generic parameter to control the number of threads. NFC.
[33m44506ff[m Rename the method. NFC.
[33m278bc16[m Rename the method. NFC.
[33m26261cd[m Allow the allocator to free memory.
[33mf2a6e11[m Add a clear() method to delete all links.
[33m2236ff8[m Use std::distance and add the missing typedefs needed for stl
[33m0225fa5[m Sema: Don't synth "materializeForSet" for @objc protocol requirements.
[33m2dc6534[m [driver] Make sure that adding '-update-code' will permit accepting all arguments that '-c' accepts.
[33m785eacf[m [swift-ide-test] Add option to allow providing -Xcc options.
[33m0d383f2[m [stdlib] CGFloat : CVarArgType
[33m06fb3bd[m Sema: Don't synth materializeForSet accessors on behalf of get-only property requirements.
[33m666646f[m Fix "the world's shortest Swift crasher" (case 1083), as described this afternoon on Twitter by @PracticalSwift. Doing so has the nice side effect of addressing several other crashers.
[33m83b4384[m Update test flags for linux failures and support.
[33mfb9bb13[m Remove stale comment
[33m38e2b9e[m Use SmallPtrSet instead of DenseSet as suggested by Anna.
[33m0562411[m Improve support for diagnosing errors that result from contextual or conversion type mismatches. Doing so allows us to improve our diagnostics for a few important cases: - Situations where the type of a return statement's result expression doesn't line up with the function's type annotation. - Situations where the type of an initializer expression doesn't line up with its declaration's type pattern. - Situations where we assume a conversion to a built-in protocol must take place, such as in if-statement conditionals.
[33m49ab9b5[m [test] Fix incomplete test.
[33m478fdcf[m [serialization] Stop recording the full paths to input source files.
[33m2ff77a9[m Only import *Ref typedefs as CF types if they have a bridging attribute or appear in a whitelist.
[33m7fd7d6f[m Tweak testcase to work with release and debug stdlibs.
[33m9dbf7fe[m SIL DiagnoseUnreachable pass: Break an infinite loop in diagnosing unreachable blocks.
[33m45380a3[m Don't build weak.mm on non-objc platforms.
[33mc8c6a0a[m Sync Swift version among build-script and CMake
[33m8ab8730[m tests: update CoreAudio test for 32-bit iOS simulator
[33mcc12389[m tests: update CoreAudio test for 32-bit iOS simulator
[33m1ca5bc4[m stdlib: add an overlay for AudioBufferList
[33m6a9f156[m CMake: sort directories
[33m2031759[m StdlibUnittest: add a command line option to run specific tests
[33m4fae1f6[m [IRGen] Remove the AST walk that looks for local type decls.
[33m2969aab[m Stop giving local types private linkage; the debugger may still access them.
[33m014fd87[m Treat private type declarations as "hidden" in SIL (rather than public).
[33mfc847e5[m Allow @IBDesignable on class extensions as well.
[33m00ccdbc[m Sema: Move potential unavailability diagnostics into MiscDiagnostics.
[33mb8e893c[m <rdar://problem/19650402> Swift compiler segfaults while running the annotation tests
[33maa3de78[m <rdar://problem/19563805> Fuzzing Swift: performTypeChecking(...) crashes in ConformanceChecker::recordTypeWitness(...): Assertion failed: "Conformance should already have been verified"
[33m353ec03[m Fix grammar for error message.
[33m040df3d[m Error out upon trying to shift by an amount larger than or equal to the type's size.
[33m2bf69a0[m Require witnesses for @objc requirements to be @objc.
[33m9abe8f7[m Diagnose Objective-C conflicts due to unsatisfied, optional @objc requirements.
[33m642da65[m Consider @objc selectors when matching witnesses to protocol requirements.
[33m083c797[m Zap some pointless @objc-specific logic in witness matching.
[33md62a86e[m [sil-simplify-cfg] Fix a few bugs in conversion of switch_enum into select_enum.
[33maf21b0d[m Typo in comment
[33m7191b87[m Runtime: Don't touch potentially ObjC unowned-referenced objects to determine their species.
[33mda46727[m Always emit .d and .swiftdeps files, even if there were errors in the AST.
[33m72e5cec[m [Driver] Handle cases where swiftdeps could not be loaded even after a build.
[33m68b756b[m Fix for rdar://19548610, Fuzzing Swift: performSema(...) crashes: Assertion failed: (Done && "Parser returned early?")
[33m625ddfd[m Correct scope change of objc id var and explain.
[33m383dd5d[m Moves dangling objc variable declaration into #if.
[33m88b7262[m Relax testcase.
[33m4ec1817[m Remove the extra level of closure nesting from r24752.
[33m6a70bd0[m These changes implement some oft-requested tweaks and fixes to our closure implementation: - Closures that are comprised of only a single return statement are now considered to be "single expression" closures. (rdar://problem/17550847) - Unannotated single expression closures with non-void return types can now be used in void contexts. (rdar://problem/17228969) - Situations where a multi-statement closure's type could not be inferred because of the lack of a return-type annotation are now properly diagnosed. (rdar://problem/17212107)
[33mf02ba53[m Reenable the weak reference runtime tests in weak.mm.
[33mfd272ae[m <rdar://problem/19499340> QoI: Nimble as -> as! changes not covered by Fix-Its
[33mf19a320[m Ban the definition of Objective-C '+load' methods.
[33mf359945[m [stdlib] Use StdlibUnitTest for FixedPoint
[33m574bd0a[m StdlibUnitTest: add pair equality expectation
[33m3fa9f6e[m Fill in unreachable case of printFullContext.
[33macda305[m Fix for rdar://problem/19605164, Fuzzing Swift: abort() in Verifier::checkSourceRanges(...)
[33md07f093[m SILGen: Manage a foreach loop's generator payload before taking loop variables from it.
[33m7e78ff6[m IRGen/Runtime: Make dynamic metatype-to-AnyObject casts work.
[33mffca6e8[m Add compile-time diagnostic for overflow on remainder.
[33m6506068[m [stdlib] Update a comment
[33m0b5309c[m [build-script] Update recursive-lipo to use Python library functions to copy files/directories and create symlinks.
[33ma842e35[m Reapply "Handle thin_to_thick_function in call graph construction."
[33m406592e[m Update validation tests for no-asserts builds.
[33mbf9a17b[m IRGen: Don't emit a check for class-to-AnyObject "checked" casts.
[33m4491f2a[m Improvement of the inlining heuristic.
[33maa36639[m [rdar://19605880], minor: review feedback incorporated
[33m995e442[m Fix for rdar://problem/19605880, Fuzzing Swift: crash in Verifier::walkToStmtPost(...): invalid IfConfigStmt end location
[33md9f28f6[m SILCombiner: Adapt the built array opt to index_addr to stdlib changes
[33m6776cb2[m Fix for rdar://problem/19582877, Fuzzing Swift: Parser::parseTopLevel() crashes in swift::verify(...)
[33mf4e35f9[m stdlib: remove Unsafe[Mutable]Pointer.null()
[33m3119570[m Stop using Unsafe[Mutable]Pointer.null()
[33m1437427[m Add a test for toString() on metatypes
[33m2d48928[m stdlib: fix a typo in doc comments
[33m6c9e9ad[m Use the set of known callees in building the call graph.
[33m41711d5[m [build-script] Use os.mkdirs() instead of mkdir in recursive-lipo.
[33mf747652[m tests: clarify some XFAILs with a clear wording from Dave
[33m9afc924[m Cast away constness in client, not in call graph code.
[33mff771d0[m stdlib: use fixed-width Builtin.IntXX types for Swift.Int and UInt
[33mb15c0bd[m PlaygroundTransform: don't overflow an Int on 32-bit platforms
[33m363a953[m tests: fix tests not to overflow an Int on 32-bit platforms
[33m9b145ba[m tests: adjust newly added tests to not assume that Int is implemented with Builtin.Word
[33m263ceab[m tests: clarify some XFAILs
[33m08bcdfa[m [build-script] Fix a problem with recursive-lipo creating directories when the containing directory does not exist yet.
[33m1b34080[m Use Int32 instead of Int in the test. NFC.
[33mf44e94d[m Remove debug spew
[33maf9fe66[m Update crash suite for recently fixed cases, likely fixed by Denis.
[33m9045863[m [closure-spec] Remove restriction on handling closures with multiple uses.
[33m04f44ba[m SIL: Classify potentially bridgeable checked casts as MaySucceed.
[33m4740461[m SILCombine: Add another index_raw_pointer -> index_addr peephole
[33m82c8d9b[m [PrintAsObjC] Preserve NSUInteger in overridden decls when easy to do.
[33m359d672[m [closure-spec] Add support for propagating thin_to_thick_function closures.
[33m0d84be6[m Fix for rdar://problem/19605567, Fuzzing Swift: abort() in Verifier::checkSourceRanges(...)
[33m8cd35dd[m [sil-devirtualizer] Correctly handle methods whose return types differ in optionality from the overriden methods.
[33m018589d[m Update for some style changes and simplification as per review.
[33m7ca8777[m Revert "Handle thin_to_thick_function in call graph construction."
[33m6260827[m Handle thin_to_thick_function in call graph construction.
[33mf8d9f73[m Refactor call graph to share common code for different kinds of applies.
[33m9be5c4a[m Minor update to call graph interface.
[33m2dc8175[m Removed work around now that rdar://problem/19591983 is fixed
[33m6d23229[m Fix for rdar://problem/19540536, Fuzzing Swift: assertion in parser: Assertion failed: (Tok.getKind() == tok::kw_let || Tok.getKind() == tok::kw_var)
[33m6cea193[m removed @transparent from unavailable functions
[33me06dc22[m [closure-spec] Refactor closure spec so that we can in a subsequent commit handle both partial_apply and thin_to_thick_function.
[33mbf3c92c[m Sema: Move 'getBridgedToObjC' out of the type checker.
[33ma955b86[m Update comment
[33mc30faa1[m Delete dead code after a (cond_fail 1).
[33m74944d6[m Fix for rdar://problem/19582475, Fuzzing Swift: Parser::parseDecl(...) crashes: Assertion failed: (Status.isError())
[33m8c15262[m Add a test for <rdar://problem/18537723> Swift instance of var created in Generic func gets wrong type.
[33md2c2add[m Introduce a hack for ensuring that, in the face of unresolved member exprs, call argument types line up nicely with the associated argument tuple type. (rdar://problem/18841652, rdar://problem/18913150, etc.)
[33md3910da[m Reduce standard library build times by 10s by adding a couple of type annotations to 'join'.
[33mc362f59[m Add a test for the weird form of __attribute__((nonnull(indices...))).
[33mf0eec4d[m Don't rely on overriding nullability in Objective-C; it's banned now.
[33m5b4017c[m Build fix: Update for upstream LLVM TargetMachine API change
[33m0a9d604[m Don't look into a type context to resolve types in the inheritance clause.
[33mc4503ac[m Discard default arguments when inferring a type for a variable.
[33me983952[m [test] Add a Radar number to crash suite #55.
[33m4ef99c0[m [stdlib] Added fixmes for missing _expectEnds
[33mb2a672e[m [stdlib] Changed loop to initializeFrom
[33m1587f11[m [stdlib] use initializeTo instead of loops
[33mc87ddeb[m [stdlib] added initializeTo default implementation
[33m863d79c[m [stdlib] formatting change
[33ma86572c[m [stdlib] Updated APIs to use C.Generator.Element
[33m51f8070[m Serialize local types
[33m8e1dfcb[m SILCombine: Add an indexrawpointer to index_addr combine
[33mbeedb4a[m Only remove the view from the set of views that are being Mirror-drawn when you're actually done reflecting on it
[33m9489605[m Enable vtable thunks.
[33m05290ab[m SILGen: Reuse vtable thunks from base class.
[33m42e4ffe[m Add regression test from rdar://problem/19321484.
[33m196d500[m Fix for rdar://problem/19563867, Fuzzing Swift: Parser::parseTopLevel() crashes in Verifier::walkToPatternPost(swift::Pattern*):  a vararg subpattern of a TuplePattern should be a TypedPattern
[33me318a8c[m IRGen: Populate vtables using the SILVTable instead of reinventing AST lookup.
[33mdfe9a2d[m [apinotes] Change to nullable parameter for NSZoneName.
[33mdf2b4bb[m CMake: more precise dependencies for gyb'ed files
[33mc60b975[m stdlib/FixedPoint: use 'let' where possible
[33m6743b8e[m [CMake] Fix unified build
[33m2e3c0b6[m IRGen: Emit failure blocks individually
[33m15b7a93[m Revert "IRGen: Emit failure blocks individually"
[33m1985f14[m Partially unblock SourceKit fuzz-testing by fixing rdar://problem/19534837. To be honest, there are likely many ways to raise the assertion mentioned in the radar, so I don't see this as the end of the unblocking work.
[33mde50dca[m IRGen: Emit failure blocks individually
[33m877a34e[m stdlib: remove (almost) the assumption that Swift.Int is implemented in terms of Builtin.Word
[33m60a05bc[m tests: rewrite (almost) all tests that assume that Swift.Int is implemented with Builtin.Word
[33m7339a80[m Set: remove workaround for 18803556 when iterating over Sequences
[33ma503831[m tests: annotate that 0901-ab.swift does not fail consistently on all platforms when the compiler is built without assertions
[33m1c63eee[m [CMake] CMake script refactoring for better code sharing between Swift and SourceKit.
[33mf190c2d[m [CMake, build-script] Add support for cross-compiling tools.
[33mf808b18[m Validation tests: annotate that 0240-argemitter-emitexpanded.swift does not crash anymore
[33m922c787[m Be more resilient to optimized vs. debug stdlib differences in this test.
[33mbf75bee[m Begin formal accesses on l-value arguments immediately before the call instead of during the formal evaluation of the argument.
[33md3a9ebb[m Make ArchetypeType's "constructors" return canonical types.
[33m9e26ecf[m Make ArchetypeType::NestedType its own proper type with more explicit/semantic conversions in and out.
[33m0ac649d[m [proj-tree] Use a passed in BumpPtrAllocator instead of SmallVector for memory.
[33ma449948[m SILGen: Emit vtable thunks to handle optional variance.
[33m32438ad[m <rdar://problem/19495253> Incorrect diagnostic for explicitly casting to the same type
[33m36dd48a[m Be more forgiving of implicit tuples with semi-valid source locations.
[33m0b9a79b[m Add a concurrent bump-ptr memory allocator.
[33m1e02da9[m Add a concurrent memory bank
[33m1d3a373[m Add a unit test for the concurrent list.
[33mb1ca4bf[m Move the concurrent utilities to the /include directory
[33me506c33[m Fix a typo
[33m170cbc1[m Fix for rdar://problem/19533915, Fuzzing Swift: parseNewDeclAttribute(…) crashes
[33mb7e6196[m Remove redundant test
[33md1d4fd8[m Don't emit debug info for global values with hidden visibility. <rdar://problem/19313855> _TWVVSC26NSKeyValueObservingOptions shows up in global variables
[33m24eb7a2[m Add tests for rdar://problem/19459079 and rdar://problem/19005271.
[33ma18bedf[m Factor the constraint-favoring machinery out of the constraint generation process, and re-work it into a series of passes over an expression sub-tree.
[33mcb2870c[m Update Unicode data files to 7.0.0
[33m35d835e[m [stdlib] used builtins in moveAssignFrom instead of loop
[33m45c2d97[m Fix for rdar://problem/19539259, Fuzzing Swift: AST validation failed in getSignatureSourceRange(...)
[33m8e76390[m Fix spelling in function name.
[33mf6f73df[m Fix typo in statistic string.
[33m458640e[m CMake: don't rely on autolinking when building Swift code
[33m375b414[m CMake: restore compatibility with CMake 2.8.12
[33m271dae3[m fix formatting.
[33m46edb28[m There are currently situations where two (types that contains an) archetype(s) mangle to the same name but differ in their storage size. This is causing an assertion on some of the build bots. This works around the problem by not caching them, until I can reproduce the problem on a smaller scale and fix the mangler.
[33m6731b7c[m Make DebugTypeInfo::dump() more verbose/useful.
[33mf6d7033[m [opt-tips] Add a section that suggests using ContiguousArray with reference types when NSArray bridging is unnecessary.
[33mf874eec[m [opt-tips] Change 2x titles and remove a reference to ContiguousArray.
[33m7209392[m stdlib/Unicode: fix encoding U+20000 and higher to UTF-16
[33m842d8ae[m Recommit r24666, r24667 with a fix for Optional object reference variance.
[33m3087d18[m tests: use a more appropriate test name and remove a redundant test
[33m9ac070a[m Install Clang builtin headers in the Clang resource dir
[33mbbf7942[m stdlib: remove bitwise operations on Bool
[33mb832ef9[m tests: annotate that test/IDE/print_clang_category_ordering.swift depends on ObjC interop
[33me90e1c6[m Revert "SIL verifier: Require convert_function not to change function ABI."
[33m2b6d198[m Revert "SIL Verifier: Verify that vtable entries match the ABI of their base."
[33m08b0010[m tests: annotate that test/IRGen/optional_metatype.sil requires ObjC interop
[33m02e70d1[m [stdlib] Failable String inits from UTF8/16 views
[33m6d72340[m [runtime] Add -[SwiftObject isNSString__] et al. for Foundation's use.
[33m53d6243[m SIL Verifier: Verify that vtable entries match the ABI of their base.
[33m67009e4[m SIL verifier: Require convert_function not to change function ABI.
[33m902edf1[m Change the recommendation to use Unmanaged<T>.
[33m214751e[m Allow variables with observers to still have inferred types.
[33m6321e89[m Verifier: Stop requiring that invalid decls have an error type.
[33m36aab71[m [Parse] Disallow computed accessors in C-style for-loop variables.
[33me5083b7[m [stdlib] peeled first element off loop in join
[33mb33b911[m [stdlib] added comment about builtins in UnsafePointer
[33m435c4c8[m Describe the use of UnsafeMutablePointer for manual memory managment.
[33mbac1f15[m [stdlib] added fastpath to join for empty separators
[33maed055e[m SILCombine: Peephole a pattern generate by materializeForSetCallback
[33md9c1888[m [stdlib] use builtin array operations instead of loops
[33m3204006[m Revert "SILCombine: Peephole a pattern generate by materializeForSetCallback for generic struct"
[33mb183524[m Fix expected output for non-ObjC-generics build.
[33mc3c3c8a[m [InstSimplifier] Do simple peephole optimzations for ThinFunctionToPointerInst and PointerToThinFunctionInst.
[33m15f18f7[m Use getFixedBufferSize() here to clarify the intention.
[33m2830f05[m stdlib: re-attach the documentation comment
[33m5ee2fed[m Debug info: Use 3xi8 as a fallback type size for %swift.opaque if we can't determine the storage size.
[33m171035d[m Debug info: Don't emit a line number for tuple types. They are unnamed and have no declaration, so the line number is nonsensical.
[33m723c9aa[m Debug Info: Fix the caching policy for types that cannot be cached, either because they don't have a UID, or because their Swift type may be more general than their specialized type.
[33ma2c9033[m Debug info: Don't emit a line number for inout types. They are unnamed so the line number is nonsensical.
[33m9e66db8[m remove stale comment.
[33mcf393e8[m Don't emit sugar typedefs for sugar types that don't have their own mangling schema. Caught via the "conflicting types for UID" assertion in getOrCreateType.
[33mfe5fe16[m PrintAsObjC: Start printing __null_unspecified where needed.
[33m83dd7bf[m frontend: set a sensible default objc-interop.
[33m9752dc6[m Don't use UnknownObject on non-Objective-C.
[33m5c03baf[m [stdlib] Prove utility of String index conversion
[33m1187855[m [stdlib] Fix internal/public conflict
[33m32303b9[m [stdlib] Allow String construction from its views
[33m492c01e[m [stdlib] allow construction of UTF16Index from Int
[33m93d4d9f[m More preliminary changes to address Dave's advice.
[33m2d12d51[m Lowercase the first character in compiler diagnostics for consistency
[33m9257f00[m Update validation tests for compiler changes
[33m7af94af[m [API Notes] Fix inconsistency between NSURLCredential's init and the factory method.
[33mc2a7613[m [API Notes] Address outstanding nullability issues + new audited pieces
[33m9f5d295[m Make test/Serialization/target-incompatible.swift more portable
[33m5f99ddc[m SILCombine: Peephole a pattern generate by materializeForSetCallback for generic struct types.
[33m49a1794[m [ClangImporter] Prefer explicit decls in categories over protocols.
[33m4e33559[m Better fix for 80 column violation.
[33m680cd3c[m Revert "Fix another 80 column violation."
[33m6c21a64[m <rdar://problem/19421148> Calling init with a missing label doesn't provide a descriptive error when overloaded inits differ only by label
[33m0ca13f9[m IRGen: Fix the extra inhabitants of ObjC metatypes.
[33m4b9693d[m [stdlib] added test from rdar://problem/19169066
[33m077a103[m Fix another 80 column violation.
[33meebea42[m Fix 80 column violation.
[33m3aa0f68[m SILGen: Dynamically dispatch curried 'dynamic' methods.
[33me0f0b79[m IRGen: Fix OpaqueStorageTypeInfo comment.
[33md379fd2[m updated fixed test assertion
[33m007e94c[m [stdlib] updated error message in validation tests
[33ma619610[m Incorporate preliminary feedback from Dave.
[33maec2f95[m [stdlib] fixed bug in bounds of pointer copy/move operations
[33mf935a15[m Fix a typo in our bin application diagnostic. (rdar://problem/19422548)
[33m0473b79[m [stdlib] Let Cocoa slice its own strings
[33m84c3daa[m [stdlib] Clean up/strengthen an invariant check
[33mb0f8dc0[m [emacs support] parse more StdlibUnittest errors
[33m18c75e0[m [pre-commit-benchmark] use new build directory
[33me564e70[m [build-script] Put back HOME global.
[33mf0e2172[m [build-script] Remove SWIFT_SOURCE_ROOT default to ~/src/s/.
[33meb433e9[m [docs] Reflow PersistentSerialization.rst to be 80-column-compliant.
[33mfa49f01[m Support CSE of thin_function_to_pointer/pointer_to_thin_function.
[33m3958f0b[m [unittests] Fix OptionSet->intptr_t test for older Clang versions.
[33m3b5e703[m [g-arc-opts] Teach the ARC Optimizer how to understand @guaranteed parameters directly.
[33m0142bbc[m array.make_mutable_shared -> array.make_mutable
[33m4dd4483[m Refactor constant folding: extract constant folding to utility functions. NFC
[33m3be27ad[m Adopt safe addressors in Swift's Array family of types.
[33mbd1adeb[m Adjust DebugInfo test for new version strings
[33m31f995a[m CMake: change SWIFT_REPOSITORY_STRING to STRING type, as originally intended
[33m6170bbb[m Minor code clean-up.
[33mea7bd2d[m Per Doug's comment, check for failable initializers on enum types when optimizing the return type of an initializer application. With this change, Adventure builds cleanly once again.
[33mff0a631[m tests: annotate that 0424-no-stacktrace.random.swift now crashes when assertions are disabled
[33m41cd10e[m build-script/libSwiftBasic: properly propagate the Swift version down to Version.cpp
[33m53cf98c[m Have computeSignBit in ValueTracking look through AND/OR/XOR operands.
[33mca59e81[m Simplify (ref_to_raw_pointer (unchecked_ref_bit_cast x)) to (unchecked_trivial_bit_cast x) for trivial types.
[33m04f6a6b[m [test] Remove test workarounds for rdar://19537198 and add a new test for it.
[33m8adb66f[m Work around a miscompile in NominalTypeDescriptor.FieldNames on arm64.
[33m3a074e5[m Assign the result of binary operations to a variable, in preparation for checking its type in my next check-in. Ugly (both in layout and functionality) workaround for Gyb rdar://15928178, using operator if/else if/else instead of if/elif statements; this was fiddly to get working, hence the separate check-in. Sharpen the expected error string for mixed type operators, and add an expected warning and note for assigning the result of an assignment, which is righteous since we're not C. Approved by Dmitri.
[33me660c7b[m Add in :orhpan: to the top of OptimizationTips.rst to quiet rest warnings.
[33mfedf1ab[m Fix assertion when substituting for class-constrained generics.
[33m896df20[m Map the Clang 'noescape' attribute to 'noescape' for @objc_block function parameters.
[33mba353e6[m Update test/1_stdlib/NewArray.swift.gyb not to try to work around rdar://problem/17892507.
[33m02b578b[m Add OptimizationTips.rst, some tips for writing high performance swift code.
[33m6ae6b83[m [g-arc-opts] Fix up stale comments. NFC.
[33m49bdde5[m Remove unnecessary public inheritence from 2x structs. NFC.
[33m40884c7[m [stdlib] added tests for string operators flipped
[33m037d953[m [stdlib] Added radar fixme to String Index
[33m709022e[m [docs] Start describing a hypothetical persistable module format.
[33mb2632c9[m IRGen: Form OpaqueStorage using [N x i8] arrays for more accurate sizing.
[33m3f1e8f2[m Update stale comment.
[33m3f2bb26[m Reinstate r24526, r24548, r24549, and r24550.
[33mf9420e8[m [test] Temporarily weaken Reflection_KVO's checks due to an arm64 bug.
[33mcc4db80[m [test] Temporarily disable Reflection.Unmanaged/not-nil test on arm64.
[33mbf88270[m Remove literal tab characters from an apinotes file.
[33m4e9d968[m Slightly improve diagnostic about using a module as a type.
[33m9a9a696[m [Driver] Error if we don't support the target we're given.
[33m0c182d7[m [PrintAsObjC] Prefer the Clang name of imported typedefs.
[33m09fb741[m Prevent +[UIPrintInfo printInfo] from being imported as an initializer.
[33md143e2d[m RefCount: Add an assert and some documentation
[33m4616bab[m Add test case for rdar://problem/18168866.
[33mb6e3e1d[m Improve the diagnostic when Self is used in an unsupported position.
[33m1ae8f3a[m [test] Remove now-unused inputs to the target-incompatible serialization test.
[33m7926cfd[m [test] Fix serialization test for incompatible targets.
[33m80a46cd[m RefCount: Use rotate right in isUniquelyReferencedOrPinned
[33m9c1e42c[m stdlib: Explicitly disable inlining of _forceCreateUniqueMutableBuffer.
[33m182792c[m Reinstate multi-pattern conditions in if/while
[33ma2e33ec[m [test] Fix test PrintAsObjC/accessibility.swift on iOS.
[33m344514a[m Revert r24526, r24548, r24549, and r24550.
[33mef84de4[m Add test case from rdar://problem/18988428.
[33m86df693[m Add test cases from rdar://problem/19195470.
[33m934661c[m IRGen: Wire up NonFixedOffsets for partial apply objects.
[33m3dea623[m <rdar://problem/19495142> Various incorrect diagnostics for explicit type conversions
[33m5831e7a[m [sil-dead-function-elimination] Re-factoring of the external function definitions elimination pass.
[33m8ee17a4[m Serialize search paths when building an app, for a better debugging experience.
[33m6cc9944[m Adopt llvm's removal of MDNodeFwdDecl.
[33mf16a6b0[m [stdlib] Kill some dead code
[33m18b1782[m For-each loop: convert the result of "generator.next()" to the appropriate type.
[33m66d5f42[m Add test case from rdar://problem/19254404
[33mb0770dc[m [stdlib] added zip function
[33m661fde2[m [stdlib] removed ambiguous String comparison overloads
[33m97ec4ac[m Allow the right-hand side of same-type constraints to be an arbitrary type.
[33ma0d3214[m Test that the remangler round-trips successfully.
[33me9977ae[m Restructure the demangler test to keep the manglings database in a separate file.
[33m4acb195[m PrintAsObjC: Detect apps by the presence of a file with a main entry point.
[33m6de9115[m Record whether a file contains a main entry point in the serialized module.
[33m3e61956[m [test] Move *ApplicationMain tests into their own directory.
[33m66d0ecc[m Refactor the handling of *ApplicationMain classes.
[33me618ac3[m Conditionally give OptionSet a conversion to intptr_t.
[33m2170a02[m Fix implementation of OptionSet::contains.
[33m444ce77[m IRGen: Use NecessaryBindings to save captured generic context into partial_apply closures.
[33mb642c55[m Allow one to change the argument labels of curried function parameters.
[33md932554[m Favor dictionary subscript return types (in addition to array subscript return types).
[33mf453bce[m Fix utilization of expected types for subscript and apply expressions when favoring constraints. (rdar://problem/19334553)
[33m55e58e4[m Add a few new exponential typecheck explosion regression tests.
[33m35184ff[m Utilize argument type information to favor overload binding constraints on initializers. Doing so addresses a number of cases where the type checker was going exponential on seemingly simple user code.
[33mf569498[m Propagate constraint favoring information across nodes of chained operations. This allows us to properly favor constraints for expressions the form "(float0 + float1) * float2".
[33m87be8b1[m Only favor overload constraints on OverloadedDeclRefs with distinct numbers of parameters. This allows us to keep the previous optimization, while still preserving ambiguity diagnostics.
[33mbd64f7e[m When adding constraints for a ForEach expression, search for generator/element witnesses before creating fresh type variables to represent them.
[33mda7e63c[m For closure and subscript expressions, if valid contextual information is available use it instead of allocating type variables for their result types.
[33m885ef0d[m When generating constraints for an application of an overloaded function, if all overloads share a common return type, use that type rather than allocating a new type variable.
[33m87cbad9[m Improve performance of solving over apply expressions by directly applying the return type whenever possible. This has some nice side-effects: - Addresses many common user-reported "expression too complex" bugs, including rdar://problem/18876786. - Shaves up to 10% off of the total time to run our unit tests. (Unscientifically measured on my iMac: 427.46s before, 385.17s after.)
[33m1e3f67e[m global_init functions can have side-effects
[33m2cbdffb[m [stdlib] Document String index conversions
[33m7446cee[m Re-enable SLPVectorizer in stdlib build (revert r24342 and r24345)
[33m38a0c69[m Rename some arc routines to use may instead of can as a prefix to match AliasAnalysis more closely.
[33mc4e6fb5[m [demangler] Teach the remangler how to handle funcsig nodes and print out values when performing string demangling.
[33m041ee3c[m tests: adjust tests to pass on armv7-apple-ios7.0
[33m3b04d1b[m tests: reorganize tests so that they actually use the target platform
[33m753de15[m stdlib: simplify code
[33mc5635ed[m Use new tinyptr MutableArrayRef API.
[33m897325b[m Codebase Gardening. NFC.
[33m39817d5[m Remove arc namespace.
[33mc41569c[m [IDE] Enhance SyntaxStructureKind with global/static/class variable nodes.
[33m68dd563[m <rdar://problem/18311362> TLF: Eliminate implicit bridging conversions
[33m94bf316[m <rdar://problem/16937737> global NSString constants showing as NSString, not String
[33m420b057[m Purely cosmetic changes, with a count comment and noting what each %end is closing, to make it easier to track (in both the gyb source and the Swift output) the functional changes I'm struggling with.
[33me15b22c[m [sil-combine] Fold checked_cast_addr_br  when casting into protocol types if informations about conformances is available at compile-time.
[33m24e6582[m [sil-comnbine] Add a new peephole: inject_enum_addr (addr, val), select_enum_addr (addr, val: sel1, ...) -> sel1
[33m7846a2b[m Create applies with the transparent bit set properly during devirtualization.
[33m8c5b200[m [inst-count] Move InstCount into frontend_main wrapped in performSILInstCount so that we can gather statistics even if we don't run any SIL optimization passes.
[33m1d62f55[m [sil-mode] Add syntax highlighting for init_existential_metatype.
[33md3a2c70[m [inst-count] Count the number of functions of various linkages.
[33mf8859ce[m [inst-count] Distinguish in between bb and insts in functions with external and non-external linkage
[33m42d94be[m Update Inplace.rst proposal as accepted by language review.
[33m1a400c4[m IRGen: NecessaryBindings can take a CanType instead of a SILType.
[33mea599ce[m IRGen: Allow OpaqueStorageTypeInfos to be given an alignment.
[33m7ec7011[m IRGen: Fix logic bug in new partial application code.
[33m6dafd41[m Set the transparent bit properly when combining apply and partial_apply.
[33m374df28[m Revert "[stdlib] Set automaticallyNotifiesObserversForKey to false"
[33mb39859f[m Fix compile error for 32-bit builds.
[33me2760a7[m Add a return statement to Variant[Set|Dictionary]Storage.removeAtIndex.
[33m99a954f[m Define iterator traits for StringSetIterator.
[33m057c27f[m Disable existential metatype casting on non-objc.
[33m2a74424[m Annotate compiler crasher tests that no longer crash when the compiler is built without assertions
[33m1a845bf[m IRGen: Make partial application forwarders honor the convention of the applied parameters.
[33mbb675b6[m Add a basic "re-mangler", which turns a parsed demangling tree back into a mangled string.
[33mcb702a9[m [test] parse_stdlib.sil should parse the current target's standard library.
[33m3d28921[m Add pass ExternalDefsToDecls that changes all available_external functions into declarations.
[33m4dfa4ed[m [test] Hack to handle API differences between SDKs.
[33m6b4dc17[m [Serialization] Serialize and check the target a module was compiled with.
[33ma3a6c26[m Put the current target into LangOptions.
[33m92e5528[m [stdlib] Set automaticallyNotifiesObserversForKey to false
[33m8c43554[m Remove the soft-fail from this assertion.
[33m23829b6[m Add an assert message.
[33mc1d391a[m Debug Info: Only verify the validity of scopes in debug builds as this is quite an expensive operation and getOrCreateScope either returns a nullptr or a valid scope.
[33m5916fc2[m Use Swift.splice in Array.splice.
[33me05f957[m Remove substDependentTypes(); we have a simpler implementation.
[33m897e6ea[m Debug info: No longer emit debug info for variables defined in implicit patterns.
[33mfea55d9[m Eliminate dependent types from within archetypes.
[33ma698891[m [stdlib] fixed converting integers to floats at bounds
[33m1229413[m Massage this testcase so it works with a debug stdlib, too.
[33mce9cb0b[m Add an instance of the RemovePin pass to the SSA pipeline
[33m4d3e443[m RemovePin: Array semantic functions are generally safe
[33mfdc1423[m RemovePin: Remember when the pass changes stuff
[33md8b699a[m Balance guaranteed arguments in native-to-ObjC thunks.
[33m735eeb7[m Test that derived class initializers still chain correctly.
[33m5826c34[m Fix isTransparent() in SILGenPoly.cpp.
[33ma225e98[m Update the docs for the new stdlib_binary_only name.
[33m86a4f992[m Allow the cloning of the print functions that use a stream because they are used in string interpolation.
[33m789623d[m Rename stdlib.noimport to stdlib_binary_only.
[33m290b587[m Docs: mention that the new annotation is related to the resilient proposal.
[33m2528d52[m Add LangOptions::getBuildConfigOptions().
[33m747ae9c[m Adapt to upstream Clang API change r226128.
[33m0f4f683[m COWArrayOpt: Update for array addressor changes
[33m7f6824e[m ABCOpts: Adopt for future array addressor changes.
[33m83f5a45[m stdlib/runtime: re-enable CrashReporter
[33m512a088[m <rdar://19404150> Disable crash log messages; they break the static libraries.
[33m72a26f2[m CMake: simplify passing swift driver parameters
[33mfa823ad[m SILGen: Balance guaranteed self arguments in @objc thunks.
[33ma6db175[m stdlib: fix spelling of 'Objective-C'
[33m730025e[m stdlib: fix spelling of 'Objective-C'
[33m1e482be[m Add a pass to remove trivial pin/unpin pairs.
[33md443f0f[m Revert "Update ABI.rst for new local decl mangling"
[33mcad9f99[m Revert "Serialize local types and provide a lookup API"
[33mc583074[m Minor improvement: Perform removal of external functions bodies before dead function elimination.
[33m69aaaae[m SILGen: Initializing constructors retain the +1 calling convention for self.
[33m6702e26[m Remove uninteresting cases from guaranteed_self test.
[33md7489b7[m Update testcases for new LLVM IR assembler syntax.
[33mf1b35a2[m Update ABI.rst for new local decl mangling
[33mfab3d49[m Serialize local types and provide a lookup API
[33me56448b[m Test that address-only witness thunks properly forward @in_guaranteed parameters.
[33m93a8946[m [ClangImporter] Hide old API from the Carbon days.
[33m9b87e76[m SIL: Make @in_guaranteed the default convention for address-only self params.
[33m524a0af[m Strengthen and clarify the assertions in swift_release and swift_unpin.
[33ma027f3b[m Flesh out the pinning API to cover all the cases we need for arrays.
[33mcae0f6e[m Add the ability for a owning addressor to return a non-native owner.  This is required by Slice, which will use an ObjC immutable array object as the owner as long as all the elements are contiguous.
[33m513a555[m Add builtins for converting refs <-> Builtin.UnknownObject.
[33m1326105[m Fix an embarrasing IRGen bug with strong_pin: use the call result as the pin handle.
[33m9f49a10[m [sil-dead-function-elimination] Add a LateDeadFunctionElimination entry point to remove external definitions.
[33m95eec5a[m Fix Test for: DCE is dropping debug intrinsics, Was: DebugInfo/closure-multivalue test is failing In order to not completely loose testcoverage while rdar://problem/18709125 is under investiagtion, add a special flag for enabling debug value liveness.
[33m9962cfb[m SILGen: Remove dead code for binding ParamDecls in LetValueInitialization.
[33m7ce0850[m Improve ConstantTracker in PerformanceInliner.
[33m07a47a0[m SILGen: Remove InOutInitialization and its related "AddressBinding" initialization kind.
[33m78a53ec[m SILGen: Unwind some levels of abstraction in argument binding.
[33m48f7a19[m Enter a writeback scope before performing an assignment. We need this in order to unpin at the correct moment.
[33m3b89751[m Merge the subscript r-value path with the l-value path.
[33me67d1f2[m Add simple unit tests for our native reference counting.
[33m420b35a[m If we don't have a type witness already, use name lookup to look for one first.
[33m6604bf9[m Replace an overly promiscuous FileCheck test
[33m1f88960[m Mark _fatalErrorMessage as noimport - rdar://19413726
[33mcbf5bf4[m Fix an unused variable warning.
[33mb51a4d0[m Do not link (import from stdlib) the 'print' family of functions.
[33m6c012b5[m Disable the linking of stdlib functions that are marked with @semantics('stdlb.noimport')
[33m989d0d4[m Fix a stale comment.
[33mc6e77cd[m Document the new semantics tag to disable copying of code from stdlib
[33mb0dd2aa[m Make test more robust
[33m562b529[m Start simplifying the "dependent type opener" contract.
[33mcaf3b9b[m Kill WitnessTypeOpener; it's inert and confusing.
[33ma9950c9[m Fix expected output for renamed objc_bridge test.
[33mc7edf7f[m Allow sil-extract to dump all functions if no '-func' option is given.
[33ma1a0a7d[m Add -sdk and -resource-dir options to sil-extract.
[33m5dd1397[m Fix Clang type mapping for Set<T> (rdar://problem/18944875).
[33m6a46350[m Bugfixes for the new addressor kinds.
[33m1679791[m The 0033 compiler crash test case now fails with an assertion, mark it as such.
[33mdb6a37d[m Enable the CopyForwarding pass in -O.
[33me90150a[m CopyForwarding: insignificant change to ignore inout parameters.
[33m85c1ef5[m CopyForwarding: Be conservative with address users.
[33m58ba265[m CopyForwarding comments.
[33mdc4431e[m Split addressors into unsafe, owning, and pinning variants.
[33m41de829[m Remove useless tokens at the end of a preprocessor directive
[33m6e0df7d[m [Driver] Rebuild everything when command-line arguments change.
[33mfbf9ff6[m Revert "Implement SILGen for multi-pattern conditions in if/while, finishing the "
[33mbec9d87[m Revert "substantially rewrite StmtCondition emission (again).  In the previous attempt, we"
[33m11d1a22[m Revert "Remove the "to" argument from emitActiveCleanups as Joe requests."
[33m39237ee[m Revert "destroy_addr on a known-nil optional is always a noop, *never* emit it."
[33m06ff115[m destroy_addr on a known-nil optional is always a noop, *never* emit it. This cleans up codegen for if-let a LOT and should make it more efficient even in release builds.
[33m1d23b1c[m [driver] Change '--update-code' to '-update-code' and make it HelpHidden.
[33mba45596[m Remove the "to" argument from emitActiveCleanups as Joe requests. Dont' emit destroy_addr if the element type is a class ref or is classbound.
[33m1099342[m Fix an issue with my previous patch, where I didn't correctly add the new Float and Double cases in all code paths; and as a result I could get away with assigning a double value to a supposedly float payload without issue
[33m43dfdab[m SILGen: Balance the retain counts of guaranteed reabstraction and witness thunk params.
[33md08cf39[m build-script: some buildbot environments don't set $HOME, so don't try to unconditionally query it
[33m729b90e[m Split the floating-point QuickLook object in two: Float and Double for respectively single and double precision values
[33m923c75b[m tests: remove XFAIL, this test now fails under ASan
[33m2000bdf[m tests: check that terminating with exit(1) or abort() is counted as test failure
[33mb9f1d89[m Update test for new materializeForSet signature.
[33m75fe223[m Fix this test's mangling of UnsafeValueBuffer.
[33m6e9737a[m Enhance IRGen of select_enum[_addr] to use the new emitValueCaseTest/emitIndirectCaseTest implementations when testing for one case.  This leads to dramatically better IRGen for optional (among other things).  For example, for:
[33m5ddc776[m The Payload case of SinglePayloadEnumImplStrategy is more complicated than I thought.  Apparently there is no way to directly test whether a general enum contains the payload without testing against each of the potential inhabitant cases with a switch.  Instead of solving this open problem, just optimize the case where we're testing for a single non-payload case, and special case enums with one payload and one non-payload case (hello optional!) by testing for the non-payload case and inverting the result.  This resolves the miscompilations I was seeing before with my full patch set, but is still NFC since the code that uses this isn't included yet.
[33mf3dc586[m Improve the typing of materializeForSet callbacks to use a thin function type.
[33m9307afe[m [ls-opts] Invalidate the state of loads that become dead due to their only argument being a store that we are eliminating correctly.
[33m2ea05c3[m Add new entry points to the enum implementation strategy for testing an enum against a specific case and returning an i1 result.  This can be done a lot more efficiently (in terms of generated LLVM IR) than doing a general switch over the cases.  This will be used to implement rdar://19404937, but there is a miscompilation here that I'm tracking down.
[33ma47e446[m add a missing dependency
[33mc2793c2[m substantially rewrite StmtCondition emission (again).  In the previous attempt, we emitted just the optional buffers, and tested them when evaluated the condition, then consumed them all (producing the contained value) when the entire condition is true. This doesn't work with where conditions, because the where condition can use the bound variables.
[33m413bf32[m add a method to emit a range of cleanups out of the cleanup stack at the current insertion point.  NFC.
[33m7d316d1[m Improve diagnostics for static stored properties
[33m0f08249[m fix isSingleBlockUsage to work in the face of dead code.  It is used to reject obviously broken cases (when an alloc stack has its dealloc_stack in the same block as the allocation, it checks that there are no uses in other blocks) but this isn't correct: uses in dead blocks are fine.  Just ignore them.
[33m376c39b[m Add test for rdar://problem/17855378
[33mcd16c31[m add tests for if and if/else with multiple patterns.
[33mda46c43[m SILGen: Keep ParameterInfos in sync with BB args as they're emitted.
[33me980948[m Allow substitution into dependent types to resolve nested types.
[33m851b788[m [pass-pipeline] Cleanup parser.
[33m0d30d24[m swift-ide-test: link in LLVM targets
[33mb2e11e4[m Implement SILGen for multi-pattern conditions in if/while, finishing the known implementation work required for: <rdar://problem/19382942> Improve 'if let' to avoid optional pyramid of doom
[33m7faecf0[m minor cleanups along the way, NFC.
[33m6a91f7a[m Various improvements to the function-type ABI.
[33m387418d[m Document the need to reenable the SLP vectorizer for the stdlib.
[33m211cc83[m Disable the LLVM SLP vectorizer for the stdlib build.
[33mcc5b6c7[m Add a hidden option to disable the LLVM SLP vectorizer.
[33m4e941c8[m Create the verbose argument right... *sigh*.
[33m3f6f10a[m [pipelines] Add a verbose option to pipelines.
[33mc0b577d[m [Driver] Check the mtimes of external dependencies when building.
[33m1b7cd80[m [Driver] Track the latest a particular job could have been run.
[33m5e889c0[m [Driver] Load cross-module dependencies into the dependency graph.
[33m97b3a3d[m Include cross-module dependencies in swiftdeps files.
[33m16927cc[m Revert "Move the computation of generic signatures into the archetype builder."
[33m55ed344[m Revert "Remove requirement-collection and generic signature creation logic from Sema."
[33m754122f[m [stdlib] Fixed bug in NSIndexSet for empty sets
[33m86044dc[m Reapply "Fix the closure specializer's handling of indirect result types."
[33m7668402[m [stdlib] added SequenceType to NSIndexSet
[33m37d07b9[m [pipelines] Change running with build script to not bail if one iteration of building the stdlib with a pass disabled fails. Also only dump output upon failure.
[33m40d4710[m SILGen: Fix overly restrictive assertion on lvalue-derived-from-rvalue bases.
[33m92ceadd[m redisable some of the more egregiously slow tests.
[33me6acf31[m Refactor SILMem2Reg to compute dominator tree levels once per function.
[33m275ef48[m Switch IRGen to use ClusteredBitVector.
[33m567fd12[m Don't allow 'class final' spelled stored properties in classed
[33mc2776c4[m Rename SILBasicBlock::getID() -> getDebugID()
[33me021f50[m [swift-update] Treat 'swift-update' as a symlink to the driver, instead of a separate executable.
[33ma513e03[m Debug info: Push the non-handling of indirect pieces down to IRGenDebugInfo.
[33m4caca5d[m Revert "Switch IRGen to use ClusteredBitVector."
[33m5223fb4[m CopyForwarding: handle the in_guaranteed parameter convention.
[33m997b90a[m Add to pipelines_build_script.py subparsers for argparsing the right way and add a user friendly mode to run with a specific pass disabled.
[33mfaa2f93[m Rename normal_pipeline.py => pipeline_generator.py and pipelines.py => pipelines_build_script.py.
[33m9ec2bee[m [pipeline] Refactor our generation of pipeline files for disabling a specific pass from the general go through and disable all passes once and run code.
[33me998041[m pipeline: Don't hard code pass names into pipelines.py. Just use the PASSES variable from passes.py in the library.
[33m7365be3[m [pipeline] Pretty print the pipeline json files.
[33m73a5a1b[m [passpipeline] Some small cleanups. NFC.
[33m4c8f638[m [swift-update] Introduce the 'swift-update' tool.
[33m12b43dd[m Change the algorithm for computing the availability in DefiniteInitialization. The old recursive algorithm had exponential complexity in worst case. The new algorithm is a simple iterative dataflow algorithm.
[33ma2f78d7[m Add SILBasicBlock::getID() for dumping the block index in debug output.
[33m9f3bd69[m remove old cruft from pipeline.
[33m280d212[m Set: print different forms for description and debugDescription
[33m6e41b3c[m Switch IRGen to use ClusteredBitVector.
[33ma7e2bb2[m Fix some bit-vector bugs that weren't covered by my random test generator and flesh out the API.
[33m3530e54[m Static class stored properties
[33mb9a62eb[m Add a test for compiler crash when using Unmanaged
[33m5307b7d[m Annotate the reason why the test is XFAIL'ed
[33m3f89831[m Annotate the reason why the test is XFAIL'ed
[33mcb5c779[m Annotate why the test is XFAIL'ed
[33mf460716[m add a SILBasicBlock::removeWithParent method with the obvious semantics (following LLVM IR), NFC.
[33m9efbdb8[m stdlib/HashedCollections: mark some APIs @testable
[33m05c6727[m Add a new bit-vector implementation optimized for IRGen's needs.
[33m94d9075[m Do not try to match the function attribute in this debug info test.
[33m21fd60f[m [stdlib] added fast getObjects:andKeys:
[33mefddf5f[m Fixed tests not running
[33m5c0b405[m Temporarily disable this assertion to unblock the buildbots.
[33m7a7ad97[m [driver] Change 'UseUpdateCodeTool' boolean into a OutputInfo::Mode::UpdateCode compiler mode.
[33m6c6863e[m [cmake] Remove a reference to a dead variable.
[33ma8d7c8d[m [CMake] When initially configuring for non-standalone the clang headers are not setup yet, so don't error about it.
[33meb89a0c[m [driver] Introduce '--update-code' which enables the driver to spawn invocations of 'bin/swift-update' with the related frontend options.
[33mf532944[m Small cleanup - remove unused typedef.
[33md96bdab[m Reduce code-bloat in the user functions which happens due to inlining of print-related stdlib functions.
[33mdf8f53e[m stdlib: fix coding style
[33m43e84fc[m Add a preset for extra-swift-args and fixup the pipeline driver so it works with the preset.
[33m96e9409[m Don't enable objc generics on non-darwin.
[33me451d93[m Fix linux runtime path generation.
[33m05e020e[m Make immediate mode work on non-osx.
[33mc857f56[m Allow inlining of recursive functions.
[33mee61c58[m Fix some pylint errors.
[33mc88d9d3[m Make pipelines.py executable and remove trailing whitespace.
[33m3f73d74[m Add a new pipelines generating script that works with build script options to pass arbitrary flags into the compiler
[33ma50cbc9[m Revert "Fix the closure specializer's handling of indirect result types."
[33m9243f82[m [cmake] Add new option --extra-swift-options that enables one to pass cmake flags to specific libraries by pattern matching a regexp upon their name.
[33me4f8a1c[m Finish renaming lookUpSILFunctionFromVTable into lookUpFunctionFromVTable.  Unbreaks the build.
[33m4b4c32a[m Fix build by updating function name.
[33m5c76bdf[m SwiftBuildSupport: move WorkingDirectory class to the module so that it is reusable
[33me889627[m SwiftBuildSupport: optionally print the command to be executed
[33m77fa044[m Rename lookUpSILFunctionFromVTable into lookUpFunctionFromVTable. NFC.
[33m0368074[m [sil-module] Fix a pretty serious bug when a wrong function was returned using SILModule::lookUpSILFunctionFromVTable.
[33ma8944f4[m Enable mandatory inlining of generic functions with unbound generic types.
[33maa2d900[m DeadCodeElimination: Invalidating the CFG invalidates Instructions
[33m8d0ddb8[m Analysis: InvalidationKind clarify comment
[33m87c3d74[m Refine static func and var syntax
[33mebc47ca[m [CMake] llvm-opt should use the version of opt we built.
[33m1d3bdfa[m Separate dependency tracking from Make-style .d file generation.
[33mc87a359[m [CMake] Teach unit tests to handle Release LLVM / Debug Swift.
[33mf2b3a3a[m [CMake] Remove unnecessary dependencies from gtest targets.
[33m4f34737[m Fix the closure specializer's handling of indirect result types.
[33m3dfe6b5[m DeadCodeElimintation: call invalidateAnalysis(CFG) because we change the CFG
[33m03a6190[m <rdar://problem/19031957> Change failable casts from "as" to "as!"
[33me056663[m Remove debug dump that accidentally got committed ;-) NFC.
[33m292ecc4[m Revert "Readd SWIFT_STDLIB_CORE_EXTRA_FLAGS added in r24055"
[33m3e8ae3c[m CMake: adjust indentation for consistency
[33ma3b7570[m Readd SWIFT_STDLIB_CORE_EXTRA_FLAGS added in r24055
[33md1df3d6[m LoadStoreOpts: Don't ignore aliasing stores
[33m06c6bdf[m fixed benchmark script to work with new cmake
[33m4f080f8[m CMake: remove dead code for old AddressSanitizer setup
[33m8d971d6[m When checking a sub-expression independently of its parent to produce a diagnostic, a new expression node may be produced. Should that occur, reset the original node's type to that of the new node. This ensures that type variable data created for the temporary system does not leak outwards. (Addresses rdar://problem/19235186 and rdar://problem/19349724 to bring the ASAN Jenkins build online.)
[33m763bb63[m Implement parser, AST representation, type checker, etc support for generalized if-let statements (also while and var, of course) that include multiple bindings and where clauses.
[33mac30c67[m Revert the risky part of the change until I can investigate a bot failure report.  The error below sounds like a genuine bug, though not one that I saw, but other errors didn't seem connected to my change.
[33mc5ebf4f[m Add tests for Float80, but only on the desktop; which is tricky, since Gyb doesn't know its destination. Now 3835 tests.  Reviewed by Dmitri.
[33m9970d78[m [sil-simplify-cfg] Improve the trampoline elimination code.
[33m5b28ada[m Add a comment about the use of the function attribute.
[33m15532a0[m Avoid calling bzero in Optional.init() by specializing the common tagbyte sizes.
[33mb75f58c[m Cleanup: refactor the metadata generation part of the code to a new function. NFC.
[33m54a49cb[m rearrange code to put simple case + early exit first, NFC.
[33m636c6bd[m Use =default for the default destructor.
[33m3fb3cd6[m remove gunk
[33m76f6099[m mention how noescape works in SIL
[33m3e41339[m rename @__noescape to @noescape, now that it is a generally visible feature, wrapping up rdar://16323038.  Pieces still remaining are a Clang attribute+ importer support for it, plus adoption in the stdlib (tracked by other radars).
[33m696749d[m Three things:  - Make @autoclosure imply @__noescape everywhere, not just in the stdlib.  - Change various noescape diagnostics to refer to "parameters", not "arguments" of the function.  - Teach the noescape diagnostics to notice if the noescape problem is due to an    @autoclosure argument that is implicitly noescape.  In this case, produce a helpful note    that indicates that the invalid use of the noescape is due to the autoclosure implying it.
[33m64aee0f[m check in the correct test to go with r24220
[33m1d74ed7[m teach the compiler how to handle @__noescape in SIL files, allowing SIL to roundtrip it correctly.  This should fix validation/parser/parse_stdlib.sil
[33mefd3495[m Add a virtual dtor to silence a warning.
[33m66eaede[m fix validation-test/stdlib/AssertDiagnostics.swift.  It is puking out a horrible type signature from a diagnostic.  Instead of adjusting the diagnostic in the test, improve the ASTPrinter to only print @noescape if @autoclosure isn't present.  The later implies the first and is probably what the user wrote (note that at this level in the compiler we don't have a real "isimplicit" bit).
[33mfff46fa[m Fix support for building with Clangs that do not support ObjC generics.
[33m5513f5f[m Remove redundant test.
[33mcc68e77[m adopt @__noescape in a couple of places.  This isn't required today, but if/when @autoclosure starts implying noescape, it will be needed to indicate that the autoclosure isn't actually escaped.
[33med09b7c[m reapply r24149, which moves mandatory inlining after DI and inout deshadowing, fixing <rdar://problem/19268443> DI should reject this call to transparent function
[33md0836b8[m reapply r24143: Make @autoclosure imply @__noescape as described in rdar://18447257. This is currently  limited to the stdlib only right now, since @__noescape isn't a user visible feature and implying it would make it user visible.
[33m01d7f6c[m [demangle] Teach the demangler how to demangle metatype representations and document the mangling of metatype representations in ABI.rst.
[33m7fc1ad6[m [stdlib] fixed incorrect deinitialization in Dictionary
[33m1d2664d[m [stdlib] added test for double free in Dictionary
[33m201895d[m Revert "[CMake] Don't look for llvm-tblgen; we don't use it."
[33m018084c[m [CMake] Don't look for llvm-tblgen; we don't use it.
[33m5db31c6[m Push hash mark in the leading column
[33md3d4c8b[m Only use specialized Objective-C collection types when Foundation supports them.
[33m83d4c37[m Teach the Objective-C printer to print specialized array/dictionary/set types.
[33me92495b[m Bridged specialized uses of Objective-C generic collections to more-specialized Swift collections.
[33m69e5a3d[m Clean up handling of nullability in the Clang importer.
[33m5f766b0[m [build-script] Change the default SWIFT_SOURCE_ROOT and SWIFT_BUILD_ROOT.
[33m7dea958[m [build-script] Add a --show-presets option.
[33md5ce4e4[m [build-script] Underscore-prefix a helper function.
[33m53f9529[m Debug info: Do not cache Archetypes based on their Swift type. After the SILPasses, they may have different underlying storage types.
[33m5d5986a[m cmake: Add a SWIFT_XCODE_GENERATE_FOR_IDE_ONLY flag.
[33m189e558[m Remove cruft that snuck in.
[33m2668869[m [ls-opt] Add in LSValue, LSStore, LSLoad and use it when we are not trying to forward from multiple reaching stores.
[33me4d1f75[m [CMake] In '_compile_swift_files' function, 'objdir' is supposed to be set to the parent path, not the filename.
[33m406698f[m Add an internal inliner option for testing the inline heuristics.
[33m269de5f[m CMake: allow mixed configurations of LLVM and Swift with Xcode
[33m8ccde48[m CMake: use COMPONENT_DEPENDS instead of other ways to add LLVM component dependencies
[33mf996883[m SwiftObject.mm: explicitly include some headers that are used on Apple ObjC platofrms
[33m5ff0612[m CMake: stop using LLVM_COMMON_LIBS, it is not set anywhere
[33meac3669[m CMake: record that libswiftBasic depends on LLVMSupport
[33m92f9f63[m build-script: stringify the exit code before applying string concatenation
[33m3639691[m Now that SmallMapVector is in llvm trunk... use it!
[33maac51db[m [ls-opts] Fix crasher where we are determing whether or not to load store forward while performing the load store forwarding. This can cause us to dereference an empty SILValue.
[33mcc02f26[m build-script: refactor to use uniform error reporting
[33m2118fc0[m [ls-opt] Add in global state class called LSContext and refactor the top level function in LSOpts to use it.
[33m2150ca2[m Add a range type to PostOrderAnalysis for use with the post order and reverse post order ranges. This makes it cleaner if one needs to refer to the actual type returned by the post order and reverse post order calls.
[33mab83848[m Move SILBasicBlock::getSingleSuccessor from the middle of the predecessor code into the successor code. Also add a const version of it.
[33m998f644[m [ls-opts] Make comment clearer. NFC.
[33m94541a5[m Revert "Change select* instructions so that all of them have the same tail allocated"
[33md9ffea1[m Update for upstream changes in ObjCMethodList API
[33ma6bd0cc[m Change select* instructions so that all of them have the same tail allocated memory layout and add a SelectInst API that allows for one to access select inst operands when one does not care about what the cases actually are.
[33ma5fc110[m Move fragile .swift test to its proper location in a .sil file that tests what the test is trying to test.
[33m1ee37fc[m [sil-mode] Add syntax highlighting for bridge_object_to_{word,ref} and {word,ref}_to_bridge_object.
[33m9dd5f65[m CMake: Linux builds
[33m49a510a[m SwiftBuildSupport.py: fix typo in error message
[33me867208[m utils/update-checkout: use argparse instead of getopt
[33m48e535c[m Add tests for @autoclosure fixit migration from a type attribute to a parameter attribute
[33m9182afc[m Revert "Make @autoclosure imply @__noescape as described in rdar://18447257.  This is currently "
[33m074692a[m Revert "Reapply r23982, which moves mandatory inlining after DI and inout deshadowing."
[33maba0cf2[m update-checkout: also update performance tests
[33mce9f588[m Revert "adopt @__noescape in various places in the stdlib, making sure to cover all of the "
[33mf3a644a[m update-checkout: make output more informative
[33me9d2e02[m Make @autoclosure imply @__noescape as described in rdar://18447257.  This is currently limited to the stdlib only right now, since @__noescape isn't a user visible feature and implying it would make it user visible.
[33mce8b218[m Reapply r23982, which moves mandatory inlining after DI and inout deshadowing. This fixes some serious DI problems where it would be broken with transparent functions like ++.
[33ma86c790[m adopt @__noescape in various places in the stdlib, making sure to cover all of the @transparent functions that take a closure.  NFC since these always get inlined at the moment anyway.
[33mc80b4b2[m [sil-combine] Add cond_br (select_enum) -> switch_enum transformation.
[33mfcdb304[m Implicit conversions of noescape pointers are ok when they add qualifiers. XCTest needs this.
[33m3564ce6[m [de]serialize the noescape bit in SILFunctionType's as well.  Tests coming in a bit.
[33m42207c0[m [stdlib] fixes bug in Bit overflow
[33mbf43c5c[m move getDeclCaptureKind to be a method on TypeConverter and simplify a bunch of clients of CaptureKind by having getDeclCaptureKind map address-only lets onto Box or NoEscape, instead of having all the clients do it.
[33md59a2d0[m Teach SILGen about NoEscape:  - Introduce a new 'noescape' CaptureKind and have getDeclCaptureKind()    use it for by-address captures in noescape closures.  - Lower NoEscape captures to a simple inout pointer instead of to a    pointer + refcount.
[33mb7b57e8[m add some default arguments (for convenience) on some ExtInfo methods, NFC.
[33m24b98cf[m Convert llvm_unreachable => crash.
[33m58e0efc[m Enhance getDeclCaptureKind() to take the closure that is capturing the given decl, and plumb the information down to it.  NFC since the argument is currently dead.
[33m4069a40[m Specialize the memcpy in swift_getEnumCaseSinglePayload for the case of small constant values.
[33ma8395e2[m A small cleanup. NFC.
[33me21abcf[m [ClangImporter] Don't put method redeclarations in a member list.
[33m9b009af[m Tweak accessor diagnostic text, add tests.
[33m8aab789[m strengthen test, NFC.
[33m3578c7f[m Teach the type checker about subtype relationships of noescape, and use this to allow passing off a no-escape formal parameter to the argument of a noescape parameter call.
[33m6670bb7[m Rewrite the CMake build system
[33m44eec49[m Change the signature of materializeForSet to return an optional callback; retrofit existing implementations.
[33m09cf7b8[m [libjenkins] Remove invocation code from libjenkins.pipelines.sh. It is supposed to be a library not an exe anymore. = /.
[33ma87028e[m Reject uses of noescape parameters that would cause them to escape.  Namely, we only allow the parameter to be caller, or captured by another no-escape closure.
[33mb8f7cfd[m [libjenkins] Add libjenkins.pipelines.sh, an extension that is sourced after libjenkins that provides the ability to run various pipelines.
[33mb3253f7[m [stdlib] Changed uintValue to a var
[33m0280837[m [stdlib] Fixed bugs with string views
[33m1486238[m Reapply: propagate the no-escape bit from a parameter into a closure-expr argument.  When a ClosureExpr is thus inferred to be non-escape, disable the "self." requirement.
[33m6fc8179[m rename test to match new attr name.
[33m21a7a6c[m Doug twisted my arm and convinced me that noescape was a better match for the semantics we’ll have here.  NoCapture would be confusable with "this closure doesn’t have any captures, thus should be compatible with thin function types"
[33m5cffa73[m Refactoring: extract some code of the inliner to the projection classes. Michael, thanks for your comments!
[33mc1de65e[m Disable the inline_heuristics test for non-assert builds, because it checks debug output.
[33me54e97b[m Improve the inlining heuristic for cases where a closure is passed to a function.
[33mcf0030b[m Make isSlowPath() a public member of ColdBlockInfo.
[33m6d9a7a1[m Helper class for visiting basic blocks in dominance order.
[33m1a14651[m Add in small script that generates pipelines one for each pass with the pass disabled and for each pass manager with the passmanager disabled.
[33m9ed41a8[m Add a reduced testcase for the crasher that r24085 introduced
[33m7ef8a95[m Revert "propagate the no-capture bit from a parameter into a closure-expr argument.  When a "
[33me6a7e49[m Revert "fix a problem in my previous patch, which would cause it to crash on ClosureExpr's that"
[33m2c216fc[m Uncomment tests for traps in Set downcasts
[33m15d08f1[m Update {Dictionary,Set}Traps test to use StdlibUnittest
[33m22b722d[m Document and explain which parts of the cache are locked.
[33me20eb45[m [stdlib] Check index conversions for invalid UTF16
[33m7da4034[m [test] Weaken test for .d file generation.
[33m0eaeda9[m rework & cleanup diagModuleOrMetatypeValue, renaming it to diagSyntacticUseRestrictions in preparation to extend it.  NFC except for a cleanup of the dynamicType diagnostic.
[33m94f5449[m fix a problem in my previous patch, which would cause it to crash on ClosureExpr's that have ErrorType.  This caused regressions in the testsuite :(
[33m9dbd849[m Document some parts of the conformance search process. NFC.
[33me2bd14d[m Fix an 80-col violation.
[33mc9308b7[m Remove the locks from the fast path of swift_conformsToProtocol
[33mfbd3264[m Whitespace.
[33ma4a835f[m Refactor the code that searches the conformance cache into a new method. NFC.
[33m65589c8[m Whitespace
[33m0d6888d[m Refactor the code that installs the dylib inspection callbacks. NFC.
[33md7179e3[m Consolidate arithmetic trap tests
[33m410c3ef[m propagate the no-capture bit from a parameter into a closure-expr argument.  When a ClosureExpr is thus inferred to be non-captured, disable the "self." requirement.
[33m6c11ab6[m Switch from an llvm::PointerIntPair to manually handling storage and storedKind in ConstraintLocator::PathElement.
[33m83591f9[m pull NumParameters out of SILFunctionTypeBitfields, and add static asserts to ensure that SILFunctionTypeBitfields never overflows the bitfield size.
[33m4345fce[m random tidying, NFC.
[33m0ea4b20[m fix several bugs that would cause the nocapture bit to get truncated off (because it is bit 9 and char can't hold it).
[33m480bdd6[m Move the NumOptPassesToRun check *after* doPrintAfter so even if we exit early after a specific pass is run, we will dump and verify the pass if it changed.
[33me349ee3[m Start the implementation of a "nocapture" attribute, which is only valid on paramdecls. This is part of rdar://16323038.  Because this hasn't been fully design reviewed and implemented, I'm naming it as __nocapture for now.  It is blocking finishing off the "improved let model" work.
[33mb9c3e9f[m Fixed an 80-column violation in ConstraintLocator.h.
[33m1fa1c01[m Fixed a typo in the comment for ConstraintLocator::PathElement::storage.
[33m652e39f[m Fixing a possible race in CodeCompletionCacheImpl::getResults(...) causing V to have no value.
[33m407bad1[m remove @autoclosure as a type attribute.  Recognize it in a parameter list and produce a nice fixit, so that people using it have an obvious upgrade path.
[33m8c6b2b6[m adjust testsuite to put @autoclosure on decls instead of types, and remove a couple of soon-to-be-invalid cases.
[33ma51df49[m Change these test to require long_tests, since they take > 40s to run, each.
[33m5d41b6a[m Validation testsuite: annotate compiler crashers for AddressSanitizer
[33m7d50db0[m [stdlib] String index mapping: finish tests
[33mf78b6b1[m [stdlib] Conversions to String.Index
[33md6bdfc1[m [stdlib] Finish tests for current String index conversions
[33ma9d7577[m [stdlib] conversions to String.UnicodeScalarIndex
[33m8175e8b[m Directly include ErrorOr.h and MemoryBuffer.h to make Passes.cpp resilient against potential forward declarations.
[33ma5ad9f5[m Add in a #! python line for normal_pipeline generation.
[33m8618e47[m [stdlib] String view tests now use StdlibUnittest
[33ma53fd83[m Make this devirtualization test less dependent on the standard library and the way how the library was built (Debug or Release). This should solve recent build problems on some of our bots.
[33m4459711[m Make test checks more strict and avoid redefining variables
[33m6cad796[m Annotate compiler crasher tests so that the tests succeed reliably when the compiler is built without assertions
[33mc4aaa6c[m Adjust test/IRGen/builtins.swift to pass when LLVM assertions are disabled
[33mdab5fe1[m test/Frontend/dependencies.swift fails when the compiler is built without assertions, XFAIL it.
[33m90a8ba9[m Tests: add a no_asserts fetaure
[33md640687[m Annotate runtime functions that use the Swift +1 parameter convention with NS_RELEASES_ARGUMENT
[33m4ef6edb[m Add python utilities for generating pipeline files.
[33m1ae4002[m Add the frontend flag '-external-pass-pipeline-filename'
[33m4f819a9[m Remove an NSSet.copyObjectPointers() API that was unintentionally added
[33m2c7a195[m [Driver] Honor dynamic lookup dependencies.
[33mc8fb09d[m Report dynamic lookup members declared by a file for dependency purposes.
[33m7cd8536[m Only report dynamic lookup methods once.
[33m832c45b[m Fix the list of dynamic lookup members from growing on every lookup.
[33m75c6ec9[m Start tracking lookups on AnyObject/AnyClass.
[33mb8596ff[m move the stdlib to the new syntax for @autoclosure attribute.
[33mdcb5c23[m tweak comments for new syntax, NFC.
[33m94514d7[m Fix an annoying spate of build warnings about variadic macro application.
[33m86c3c50[m Implement support for parsing declattrs on parameters.  The only tricky case is where there is no argument name, because declattrs and typeattrs can be juxtaposed.
[33ma6d07f9[m start implementation of a new @autoclosure decl attribute.  It doesn't do everything the type attribute does (notably, doesn't work on parameters), but this includes the infrastructure to apply it in all the sordid places that need to be touched for type-adjusting declattributes on variables.
[33mf19c31f[m Add builtins for allocating, projecting, and deallocating Builtin.UnsafeValueBuffer.
[33m1473968[m Make it much easier to define generic builtins.
[33m24f4146[m Change the materializeForSet callback to take the value buffer inout, just for better typing.
[33me8d6b2e[m [sil-devirtualizer] Improve handling of generics during devirtualization.
[33m0ca7cf8[m [ClangImporter] Assert that getNamedSwiftType actually finds a Swift type.
[33m2cd5290[m [stdlib] Add some missing doc comments
[33m3f7c72d[m Make @NSManaged imply 'dynamic'.
[33mb4c7b90[m Fix rdar://19309057 a little harder. ArtificialLocation cannot be used after we emitted the return block.
[33mf857ab6[m Explicitly mark unified trap blocks with an artificial location. Restores previous behavior / buildbot breakage. <rdar://problem/19309057> swift/test/DebugInfo/trap-optimized.swift is failing after stdlib/codegen changes
[33mca6e240[m [ClangImporter] Import attributes on factory-methods-as-initializers.
[33m14a2909[m Pass -L, -l, and -framework to REPL and interpret mode jobs.
[33ma4b1d52[m [test] Mark another StdlibUnittest as "XFAIL: interpret".
[33mf28c1b3[m remove inadvertently added diagnostic
[33m3a7d8df[m fix <rdar://problem/19259730> Using mutating methods in a struct initializer with a let property is rejected
[33mc11eb40[m Iterate over more documented operators, now that the documentation has improved; now 3460 tests. Replace hard-coded lists of real-number types, and of arithmetic and logical operators I’m testing, with lists added to SwiftIntTypes.py, which becomes a bit of a misnomer. Separate them into ones which only work on integer types, and those which also allow reals. Do a double loop, over just the integers and then the reals as well. Change the run line to allow importing StdlibUnittest with help from Dmitri, which I won't actually need until I do result type checking.
[33mc80d5f0[m Revert "Added flip and identity to experimental"
[33m7084bb0[m Remove XFAIL
[33mf070a59[m Small clean-up to capture promotion.
[33m8c19f45[m Update test expectation for printing Set<String>
[33m138bff2[m Replace workaround for rdar://problem/19264143 with a real fix.
[33mb6cd6eb[m [stdlib] Removed bidirectional iterator from Dictionary and Set
[33m6ceb756[m Added flip and identity to experimental
[33m1766dd7[m Use Set([...]) as Set's description, debugPrint elements
[33md897c29[m Relax testcase to not check for tail call.
[33mef20701[m Adapt the checks in this testcase to better reflect the new codegen.
[33m43bcbb8[m [Driver] Handle outstanding jobs by reading the build record.
[33m53964a44[m [stdlib] Cleaning and commenting
[33m4d71e08[m [stdlib] Remove testing inefficiency
[33m5641c69[m [stdlib] More UTF16 index conversion testing
[33m05c2309[m [stdlib] Some UTF16 index conversion testing
[33m43ea3db[m [stdlib] conversions to UTF16View.Index
[33m3861463[m [stdlib] Refactor String.UTF8Index for conversion
[33m3c9c3fa[m [stdlib] conversions to String.UTF8Index
[33m27983cf[m [stdlib] typealiases for String Indexes
[33me85a036[m [stdlib] String.UTF16View.Index speedups
[33m7c155bf[m Add LoopRotate insertBackedgeBlock.
[33mc2f3622[m Revert "Mark _copyCollectionToNativeArrayBuffer readonly."
[33m8a817d8[m Adapt to upstream LLVM API changes.
[33m465db21[m Fix AllocBoxToStack cloning problem described in rdar://problem/19287131.
[33m7530f40[m Implement <rdar://problem/19290065> retains and releases of 'let' values aren't necessary
[33ma6f02f8[m stabilize this test against the possibility that some retains will go away in the future.
[33m935873a[m it turns out that this prototype is buggy: its invariant isn't held in all cases when sharing occurs.  Add an assert to catch violations of this, instead of catching it by infinite looping.  This can be triggered by inout deshadowing failing, for example.
[33md84feff[m Add a changeBranchTarget helper.
[33m0899d2a[m Resolve a visual name conflict.
[33m555e0d2[m stdlib/Hashing: add a comment explaining why the variable is defined in C++ code
[33mc2aa030[m [stdlib] Specialized String's Generator
[33m7cc8dfd[m [stdlib] made IndexingGenerator._elements a let
[33m93b92a8[m Add in Passes.def for metaprogramming with SILPassKinds.
[33m9177107[m stdlib/Hashing: move the hash seed variable to C++ code to avoid dispatch_once calls on every load from it
[33m94e5d98[m Move 1700 lines of AST-synthesis code out of TypeCheckDecl.cpp.
[33mb6eb086[m Add a rather hacky builtin function for constructing a materializeForSet callback from a closure.
[33m5c8fbc7[m Add SIL instructions to convert between thin functions and raw pointers.
[33me5c3b53[m stdlib/HashedCollections: don't save the NativeStorage in a local variable
[33m3c555ac[m Made Decl's ClangNode storage support 32-bit platforms.
[33macc4baf[m Don't use reserved names in PlaygroundTransform
[33m721b963[m Revert "Clang-format the PlaygroundTransform.cpp file"
[33m0a6dcd9[m Revert "Don't use reserved names in PlaygroundTransform"
[33m4b95737[m I'm seeing some test failures on stdlib test.  Revert r23982 in case it is implicated.
[33m55d1f0d[m Don't use reserved names in PlaygroundTransform
[33m052dd84[m Clang-format the PlaygroundTransform.cpp file
[33m45a0740[m Stop using llvm::RandomNumberGenerator in the playground transform
[33m244eda4[m fix <rdar://problem/19268443> DI should reject this call to transparent function
[33mbe5fdc3[m Work-around rdar://problem/19264143 while I investigate the root cause.
[33med3c0fc[m Add a private module cache to module_api_smoketest.swift
[33m10fac34[m Now that we have proper manglings change CapturePropagation to produce shared specializations.
[33m8c916c3[m Fix <rdar://problem/19275047> Extraneous retains/releases of self are bad
[33mec00695[m remove emitSelfForDirectPropertyInConstructor, we can just use emitRValueForDecl now that +0 expressions are plumbed through.
[33me824b0b[m fix <rdar://problem/19254812> DI bug when referencing let member of a class
[33m704b189[m [Driver] Ignore unknown types in the output file map.
[33m4e0146a[m Fix spelling inside of a comment
[33m8303229[m Module API tool: add some comments
[33m07ed3e4[m [test] Relax one-way-parallel.swift output check.
[33m9ddd23c[m Invert DeclContext::is[Non]CascadingContextForLookup.
[33m9907551[m Use "cascading/non-" terms for dependencies instead of "private/non-".
[33m94e7a28[m [Driver] Write out a record of which files were compiled in a build.
[33maddfed6[m [Driver] Schedule dirty-because-dependent jobs more eagerly.
[33mc5547f7[m [Driver] Use return value instead of out parameter for buildOutputFileMap.
[33mc385a9d[m [Driver] Make the "incremental" flag an explicit part of Compilation.
[33me85b9ce[m Evaluate the operand of Builtin.initialize directly into the address.
[33ma86ebcf[m Require that the argument to an early emitter still be in expression form.
[33m40d1cf9[m enhance DiagnoseUnreachable to known that implicit AST nodes are not "user code".  This avoids some false positives with a pass reordering that I'm working on.
[33m55d4615[m simplify code, nfc.
[33m9cbf991[m Update lldb-moduleimport-test to use llvm::object::ObjectFile. Fixes: rdar://16244944 lldb-moduleimport-test does not support 32-bit executables
[33mb738fb3[m fix <rdar://problem/19267795> failable initializers that call noreturn function produces bogus diagnostics
[33m031f05c[m Unthread PatternKind from SILGen and remove it.
[33ma31c71b[m now that the AST is better formed, we can start ripping out complexity in SILGen that worked around the brokenness.  Revise the logic in LetValueInitialization to be based on structural properties of the AST instead of PatternKind.
[33me5f867e[m Enhance the ASTVerifier to disallow PatternBindingDecls from initializing ParamDecls, and fix the one place where we were incorrectly creating a ParamDecl instead of a VarDecl.  NFC.
[33m31dd17a[m Add array.uninitialized semantics to ArrayCallKind, ArraySemanticsCall and the docs.
[33m65a7108[m [proposal] In-place operations update
[33m43f28f4[m Split SIL emission for builtin functions into its own file.
[33me9ba57a[m Replace std::function with llvm::function_ref to avoid memory allocation for large lambdas. This class does not own the callable and does not allocate memory.
[33md7e6386[m Revert "Get rid of a memory allocation on each call to the getXXXMetadata functions."
[33m76e1f1e[m Use std::vector for SourceValues to allow emplace_back.
[33mada079b[m [stdlib] UTF16View: unavailable subscript with Int
[33m39efbb5[m [stdlib] Add a comment
[33m7b54835[m Use a std::vector instead of a SmallVector because older LLVMs don't have an emplace_back.
[33m2fffe29[m Fix indentation
[33m14a6678[m [JIT] Before linking the module of the current line for execution, save it so it can be linked again to produce the whole IR to dump. Indeed, with the new JIT, the link process destroys the source module.
[33m361ceea[m Mark _copyCollectionToNativeArrayBuffer readonly.
[33m12838bd[m Manually update testcases where the automatic upgrader wasn't able to.
[33m162bc8d[m Updated testcases for upstream assembler changes.
[33m7d9e859[m [ClangImporter] Don't drop the first letter of an enum with underscores.
[33mf111d29[m [func-sig-opts] The projection tree knows how to explode address arguments... but the rest of func sig opts doesn't. So do not try to optimize in such cases.
[33m509bcb3[m Add a skeleton for a module API checker tool
[33m6d52d17[m Move the subclasses of SILInstruction into a new file SILInstructions.cpp.
[33me87bcff[m stdlib: move String.{lowercaseString,uppercaseString} to the core library
[33m397d2fb[m stdlib: coding style: when colon specifies is-a relationship, we put spaces on both sides of it
[33mc0b5b94[m Move SelectValueInst to where the rest of the Select*Inst instructions are, not next to the switch instructions. NFC.
[33mb2e766a[m [aa] Add SILArgument::getIncomingValue({unsigned, SILBasicBlock *}) to get an individual incoming value.
[33m565119d[m [load-store] Small cleanup. NFC.
[33mb169a10[m stdlib: coding style: use "SPI(module)" annotation
[33mb15c4db[m Document stdlib's @testable and SPI(X) comments
[33m9550c02[m [stdlib] String.UTF16View.Index is bidirectional
[33m67ebc83[m [stdlib] String.UTF16View.Index is no longer Int
[33md254e09[m Disable Accelerate.swift test on OSes other than OS X
[33m18f78c5[m Fix the GLKit_parse.swift test for iOS targets
[33mb992933[m [mangle] Add mangling for alloc box to stack. This is the last one for real = ).
[33m7e39f33[m [mangle] Include a pass id in the mangling, just to be careful.
[33m45b5389[m [mangle] Add support for mangling CapturePromotion specializations and wire it up.
[33mc4f3043[m [mangle] Specify sizes for various specialization enums and make the underlying type configurable via a using statement.
[33m1d637f5[m [mangle] Convert FunctionSignatureSpecializationMangler::setArgumentClosureProp to use an ArgNo index instead of SILArgument *.
[33m0988b2d[m [capture-promotion] Add comments and clean up code to make the algorithm clearer. NFC.
[33me9ffbd6[m Get rid of a memory allocation on each call to the getXXXMetadata functions.
[33m9414378[m change maintenance of "ParentPattern" in VarDecl to be implicitly handled by PatternBindingDecl itself, instead of having all clients do it.
[33m6d753c6[m merge two diagnostics.
[33ma048b07[m Implement: <rdar://problem/16181314> don't require immediate initialization of 'let' values ... now that we have an exquisitely shaved yak.
[33m274310b[m Fix a few VarDecls that are initialized with a PatternBindingDecl but which aren't getting their ParentPattern set up properly.
[33m9dd3860[m set setHasNonPatternBindingInit on magic $match VarDecls used in pattern matching.  NFC.
[33m7b11ca1[m Increase NumVarDeclBits to cover the new bit I added.
[33mf361d87[m Allow generic parameters to be fulfilled by an arbitrary parameter, not just self/Self.
[33m74bd5e2[m fix "title underline too short" build failures.
[33m11a8479[m Add a new bit to VarDecl to track cases where a vardecl gets an initializer but has no "parent" PatternBindingDecl or Pattern (i.e. paramdecls).  This is currently set on decls in the pattern of foreach loops and case patterns, but I'll add it to other places I find as well.
[33m39af94d[m [sil-devirtualizer] The new implementation of witness method devirtualization.
[33m499e58c[m [sil-devirtualizer] Remove the old implementation of witness method devirtualization. It got too over-complicated and will be replaced by a new, much smaller and simpler implementation.
[33m9764bc2[m [sil-devirtualizer] Better handle corner-cases in devirtMethod, e.g. metatypes or class_methods invoked on methods with non-bound generic type parameters.
[33m839699d[m [sil-devirtualizer] Improve checks in upcast upcastArgument.
[33m0ca09bc[m [sil-devirtualizer] Minor stylistic changes based on the feedback from a ML. NFC.
[33md403261[m Fix a really obvious build-breaking mis-edit.
[33m169e4fe[m Add Builtin.UnsafeValueBuffer, which provides opaque storage for arbitrary values.
[33m6cc72ee[m Print SIL optimization stages. SIL debugging.
[33me8bae49[m Have SILPerformanceInlinerPass print its level: Early, Middle, Late.
[33md435a43[m comment: EnableFuncSigOpts is now true.
[33mbdc11c1[m Fix -sil-print-before/after/around to work with -sil-print-only-function.
[33mcf49e3b[m Fix multi-SDK build for GLKit.
[33m2f7c702[m Add a test that exercises some vBigNum routines from Accelerate.framework.
[33m63462e6[m [stdlib] Added ASCII fast path for string hashing
[33ma60ae8b[m stdlib GLKit overlay: Tweak for better consistency with C interface.
[33ma063d61[m Work around rdar://problem/14483032 in GLKit_jit.swift test.
[33m4a74e94[m Fix release build warnings about unused variables.
[33m1c1535f[m stdlib: Add an overlay to GLKit with projection accessors.
[33m2e5faa7[m Ramble about KVO2-related stuff
[33m62bb070[m improve diagnostic, suggested by DaveA
[33m14af3a5[m Enable elimination of dead methods which are in classes of higher visibility.
[33mfcc6738[m IRGen: Allow coercion to C ABI types that lay out larger than the storage type.
[33m9329fa5[m Allow capture promotion to work within generic functions.
[33mf71d3ff[m Fix 80 column violation.
[33me5bbc89[m stoop to even more grotty AST crawling to get descent diagnostics from DI.
[33m66ab73b[m Pour some QoI love on the DI mutation diagnostics when an inout use happens due to a method call.
[33mca30bfe[m Test for allocbox-to-stack leak.
[33m47651de[m [sil-devirtualizer] Significantly improve devirtualization of inherited and specialized protocol conformances.
[33m7e49c16[m Create a substitutions map only if it is used. NFC.
[33m7bf2a5a[m Rename a variable to make its purpose more clear. NFC.
[33m10846f0[m Update for Clang API change
[33m06f283f[m [IRGen] Always use the definition of a static inline C function.
[33meaaf7aa[m Fix leak caused by allocbox-to-stack.
[33me2da122[m generalize and clean up the logic in LetValueInitialization to be easier to follow, paving the way for future progress.
[33m6aa6bf6[m CMake: remove code that was never used.  NFC
[33mb85e5df[m change the SIL mangling of @in_guaranteed to be 'G' at John's request.
[33m8236e7f[m Simplify the implementation of SILGenFunction::VarLoc by eliminating the "isConstant" distinction.  This was an irritating bit of redundant state that was making the code more complicated.  Clients of VarLoc really only care about "has address" and "has box", not whether the VarLoc came from a let or var (and if they did, they can ask the VarDecl directly).  NFC, just more "yak shaving" as Doug likes to say.
[33maf1ea0b[m document @in_guaranteed.
[33m9662c65[m tidy up some code weirdisms that John pointed out, NFC.
[33m84cde40[m Now that we're representing protocol method calls properly, we can turn on full enforcement of DI properties for let values.  NFC, thankfully.
[33m4618e7d[m remove some now-dead code.  This computation is now done based on SIL function types, not on AST types.
[33md844671[m Revise our AST to represent the self argument of a non-mutating protocol method as passing self by value, not by inout.  This is the correct representation at the AST level, and we now lower self references as the new @in_guaranteed parameter convention.  This allows SIL clients (like DI) to know that a nonmutating protocol method does not mutate the pointee passed into the method.
[33mc889977[m [stdlib] Makes NSSet and NSOrderedSet ArrayLiteralConvertible
[33m74aa8b1[m [stdlib] added safe unchecked comment
[33m3b9805b[m Disallow cond_br with identical destinations.
[33me753340[m Refactor in SimplifyCFG: isTrampolineJump -> getTrampolineDest
[33m1e63e0e[m [mangle] Add support for mangling dead, owned2guaranteed, and sroa args. Wire up function sig opts.
[33m185d9aa[m [mangle] Add support for mangling constant propagated specializations and wire CapturePropagation to use it.
[33m5d8613c[m Introduce a new "Indirect_In_Guaranteed" SIL parameter convention.  This isn't used yet, but will be for modeling the self argument passed to an address-only witness implementation.   NFC since all this code is dead :-)
[33mf711e1b[m [unit] Add basic tests for DependencyGraph::markIntransitive.
[33m8ea2a97[m [unit] Update DependencyGraphTests for API changes in prev. commits.
[33m1ee398d[m [test] Add ASCII art showing what dependency graph is being tested.
[33m24118c9[m [Driver] Handle dependencies we learn about after a job is run.
[33m20cd316[m [Driver] Add basic support for private dependencies.
[33me48245a[m [Driver] Refactor DependencyGraph in preparation for private dependencies.
[33me423412[m Replace a use of libc++ extension for tuple initialization with portable construct
[33mc99683e[m Renable test array_mutable test case
[33m3fd1eb2[m [stdlib] Fixed typo in Character comment
[33m4d1ebdb[m [stdlib] fixed character ASCII fastpath
[33mdb079f3[m LICM: Don't give up when there are no reads
[33m70bb998[m Fix problem with wrong elimination of methods in witness tables which are imported from stdlib.
[33mb0d7f6f[m CopyForwarding: Comment materializeForSet handling.
[33m0922f8f[m CopyForwarding: Disable global hoisting in transparent functions (NFC/disabled).
[33m671f794[m Properly account for nullability of Objective-C methods with a related result type.
[33m6e410bd[m Generalize witness-to-requirement matching operation for later reuse. NFC.
[33m2a19887[m Allow SWIFT_RUNTIME_CLOBBER_FREED_OBJECTS to work on non-Darwin
[33m343f35a[m Runtime: Make sure the superclass of a class is realized before we instantiate it.
[33m3b4e0d3[m Intrinsic support for pinning.
[33md513803[m Sigificantly replumb how SILGen generates mark_uninitialized instructions, generating them in a more consistent and principled way.  Two changes here: MUI is generated when a vardecl is emitted, not as a separate "MarkPatternUninitialized" pass.  Second, when generating a MUI for self parameters with a temporary alloc_stack (due to the possibility of superclass remapping of self) emit the MUI on the allocation itself, not on the incoming argument.  This is a lot more consistent (dissolving a bunch of hacks in DI).
[33m8117356[m comment fix, NFC.
[33mde706b1[m Whitespace
[33mefc8f11[m Driver: Handle -help earlier in frontend_main
[33m5e11e9a[m Remove extra '_' that snuck in.
[33m90651fc[m Clang importer: Preserve unknown NS_ENUM values through raw value conversions.
[33m355f791[m [mangle] Add support for function signature specialization mangling and teach closure specialization how to use it.
[33mddfe1cc[m Use size_t for the hash type and fix the undefined behavior that came from shifts on 32bit targets.
[33m2f94905[m SIL utils: Rename array.props.isCocoa to array.props.isNative
[33m1d580ae[m Sort includes.
[33m9ee65d5[m Adapt swift for Duncan's upstream LLVM change r223802. <rdar://problem/19192991> Upstream LLVM MDNode changes break Swift
[33m33f41c7[m Replace weird whitespace character.
[33m674a50d[m refactor how "getPathStringToElement" in DI works, to clean it up and simplify clients.  NFC except for slightly better diagnostic in .sil testcases.
[33mee41c8b[m Fix <rdar://problem/19157545> wrong dead function removal for a overridden method
[33mc2702fb[m Fix <rdar://problem/19069205> Stack overflow in SIL alias analysis
[33m2a119d4[m [mangle] Update ABI.rst to reflect shortened specialization kind.
[33m4d48d2a[m [mangle] Add initial code for SIL specializations manglings and refactor Generic Specialization mangling code to there from the pass itself.
[33mb1f5aaf[m Disable GLKit test on i386.
[33m4456da7[m Include "glob_t" test from rdar://problem/17263740.
[33mb1e9e09[m Swift r23756 fixed crash test 2258.
[33m755e629[m Update description of existential container layout in ABI.rst.
[33mdeaec3e[m fix a comment, this example is valid - it was getting incorrectly rejected.
[33mcb38806[m fix rdar://19179412, a regression introduced by my capture list rework patch.
[33m6e74b5c[m IRGen: Base our clang::CodeGenOptions on those from the Clang instance.
[33m324411a[m Don't trap when creating a Set from a literal with duplicate elements
[33m933ac28[m [test] Add type annotations to Set.swift test.
[33m8612e24[m -debug-time-function-bodies: dump time spent type-checking each function.
[33m8e57d4c[m improve a test to cover another important QoI case, NFC.
[33m50e9ef8[m Add unoptimized autorelease expectations for 32-bit Set downcasting tests
[33m056f55f[m IRGen: Install the AlwaysInliner pass at -O0.
[33mf0fecf3[m Clean up some orphaned code from a previous refactoring.
[33m9ffe2e9[m Update diagnostics in Set tests.
[33mdc338c2[m Update wording of some new diagnostics.
[33m2912159[m Improve diagnostics for expression typecheck errors
[33m4d4f205[m @IBAction can take a single scalar argument on iOS (for WatchKit).
[33m0ee2a81[m Fix release build warning.
[33mcb8a65e[m Clean up the semantics of 'let' properties in a number of ways:
[33mefbf3f7[m Minor refactoring of capture promotion.
[33m259dad3[m PredictableMemOpt: Don't try to diagnose recursive value types.
[33mee145a1[m s/implicitely/implicitly/g
[33mf229161[m Runtime: Fix memory management in swift_ClassMirror_quickLookObject.
[33mcb87601[m Reapply "Revert "[func-sig-opts] If we know all callsites of a function, delete the old unoptimized function instead of creating a thunk.""
[33m3f46b30[m Add runtime functions to "pin" a native Swift object.
[33m147fb87[m Comment some of the isUniquelyReferenced entrypoints and remove _swift_isUniquelyReferenced_native_spareBits, which was killed in favor of BridgeObject.
[33m6b8ea56[m Sema: Resolve the instance type of metatypes as an AST type even in SIL mode.
[33mb041ec5[m CMake: StdlibExperimental does not depend on Foundation
[33m43e112c[m Add Set->NSSet bridging to PrintAsObjC.
[33mf3ed7e9[m Completely redesign our AST representation of capturelists.  Formerly, a capture list hung off the CaptureExpr it was associated with.  This made sense lexically (since a capture list is nested inside of the closure) but not semantically.  Semantically, the capture list initializers are evaluated outside the closure, the variables are bound to those values, then the closure captures the newly bound values.
[33mb19b0c4[m move the sole test in a directory out to another directory, remove test/conv.
[33m06ad5b8[m Set tests: change the intersection operator test to actually use the operator
[33md46cb42[m Throw in a test that zero-initializing NSDecimal actually produces zero.
[33m42cc3cd[m Add a test exercising NSDecimal.
[33m36d0f18[m Sema, SILGen, ClangImporter: Add special support for Set<T>
[33m748b04a[m SwiftExperimental: change function composition operator character
[33mfaa96d9[m Add experimental Set operators
[33m528661c[m [stdlib] Removed checks in {lower,upper}caseStirng
[33mdc4ada3[m Revert "Fix doc comment for ObjectIdentifier.uintValue"
[33mee5adc1[m Runtime: Provide reflection for metatypes.
[33mb11d050[m Driver: disable the compiler if COMPILER_DISABLE_SWIFT env var is present
[33m1cf1b41[m Runtime: Use full demangled names when reflecting values.
[33mc744c5e[m Fix doc comment for ObjectIdentifier.uintValue
[33m989fdca[m Separate out the collection and caching of the associated types referenced by a requirement.
[33m16cc4df[m Revert r23713
[33m5d01edb[m [stdlib] clarified comments for ASCII case tables
[33m72f0cc2[m Add more options to dump the SIL during optimizations.
[33mcd6295d[m Reword comment for the function composition operator
[33md56fd34[m StdlibUnittest: remove redundant initializers for pthread_*_t types
[33m9b9720b[m Don't try to emit SIL for external definitions that haven't been type-checked.
[33m5524c0a[m Honor the Clang nonnull and returns_nonnull attributes in the importer.
[33m2e60c29[m Revert "Summon the eldritch horror "EagerDeserializationDecls" from the bowels of history."
[33mc1984e1[m [IDE] Make sure we don't print duplicate imports, due to getting imports for both a clang module and its overlay.
[33m9d6e7cd[m Reapply r23673, which was reverted in r23679.
[33mdf53d4b[m Summon the eldritch horror "EagerDeserializationDecls" from the bowels of history.
[33me6d97e8[m Clang importer: Add a zeroing default initializer to imported structs.
[33m5119580[m Fix broken reST in SIL document.
[33m688d1d2[m Revert "[func-sig-opts] If we know all callsites of a function, delete the old unoptimized function instead of creating a thunk."
[33m4130a8e[m [IDE] Make sure the import decls for swift modules from the generated interface have the module assigned to them.
[33mbd33410[m Fix MemoryBehavior on SIL instructions that have a CastConsumptionKind.
[33mf80f932[m Fix 80-column violation.
[33m7cecc49[m [test] Add some explicit types to Character.swift to help the checker.
[33m9abf77d[m Operator lookups may be private (non-cascading) dependencies.
[33ma431884[m Add in a few comments. NFC.
[33m8eb9ad4[m Change file to fit LLVM coding standard. NFC.
[33meafef9b[m [func-sig-opts] If we know all callsites of a function, delete the old unoptimized function instead of creating a thunk.
[33mebfcc12[m [callgraph] Teach the callgraph how to determine for simple cases if we have a complete caller set.
[33md006887[m [PGO] Add SILMetadata for branch weights.
[33m16633ea[m Rename any/removeAny to first/removeFirst
[33mb8bf9b3[m Add the SwiftExperimental library
[33m474eeb2[m [apinotes] Audit WKInterfaceController's awakeWithContext.
[33m9f34d34[m Sometimes protocol /non/-conformance can be a dependency.
[33m2321849[m Replace the use of llvm::hash in getGenericMetadata with a fast hash implementation.
[33mb376264[m Bind mark_dependence as Builtin.markDependence.
[33m77cd08d[m [stdlib] removed branch in ASCII {upper,lower}casestring
[33m2eda5a2[m [stdlib] added ASCII fast path to Character
[33mf5c427b[m [stdlib] fixed inconsistent syntax in test
[33md749871[m [stdlib] Added comment on incorrect unicode compare
[33mef0bd90[m Since conformances are global, they may not be dependencies at all.
[33mf0582e2[m Testing whether a type is bridged to ObjC isn't always a public use.
[33m2b0fbcb[m Looking up conformances for a type isn't always a public use of the type.
[33me7506e8[m Remove underscore from _Set<T>
[33m9064df2[m [apinotes] Add fresh API audit drop.
[33mad67a45[m Set.any should be a method
[33me1dd3ba[m Set: Rename removeFirst -> removeAny and first -> any
[33mdd07c8c[m Add 'mark_dependence', which indicates that an address or pointer depends on another for validity in a non-obvious way.
[33m5df1746[m [IDE] When printing the module interface, annotate the module name references in the imports.
[33md039fb6[m [AST] Move ide::findUnderlyingClangModule() to Module::findUnderlyingClangModule() so that the ASTPrinter can use it.
[33m026b88f[m fix <rdar://problem/18877391> "self." shouldn't be required in the initializer expression in a capture list
[33m83cf4f3[m Add a pass to specialize array code based on array semantic array.props calls
[33m404ce8c[m ArraySemantics: Add support for the upcoming array.props semantic calls
[33m9ff70c8[m Inliner: inline @inline(__always) function in cold blocks
[33m9a2ae45[m Fix <rdar://problem/18819742> QOI: "[strong self]" in capture list generates unhelpful error message
[33m180e957[m reject all optional chains that don't chain anything.  Thanks to Jordan and Joe for the feedback. --This line, and those bel that ow, will be ignored--
[33m88c1b0a[m Implement <rdar://problem/19032294> Disallow postfix ? when not chaining
[33m1eea220[m Use one module cache directory for all the lit tests to speed them up
[33m5c011f4[m Remove an unused option from swift-ide-test
[33m1552772[m [AST] Move ModuleEntity from libIDE to libAST so that the ASTPrinter can use it.
[33m2cb14c3[m Revert "Remove restriction on substituting existentials during mandatory inlining."
[33m883f2d3[m Revert an accidentally comitted line and fix the build bots.
[33m8cca355[m Fix reversed negation symbols in test comments
[33m3202823[m Debug info: Emit the actual types for specialized variables instead of their generic type.
[33m419afc4[m Add performance FIXME for Set.intersect
[33m85f3006[m Add exclusiveOr, exclusiveOrInPlace to Set<T>
[33mf3b82c7[m Remove restriction on substituting existentials during mandatory inlining.
[33mcaf2210[m [test] Operator requirements in protocols may be private lookups.
[33mc567f36[m [test] The ~= in a pattern match is never a public dependency.
[33m51b273b[m Add a flag to UnqualifiedLookup to say that a lookup is known-private.
[33mb73d1e6[m [test] Rewrite @NSManaged test to use the regular mock SDK instead of SILGen's.
[33mfde23a4[m [Sema] Look up the NSCopying protocol slightly more efficiently.
[33mf5e78f7[m TypeChecker: Look up "Bool" more efficiently.
[33m76c5937[m Build fix: Don't invalidate Set index during intersect
[33m1859e5d[m Fix witness_method verification issue.
[33m440e38f[m fix <rdar://problem/19135222> swift reserves 'new' keyword and doesn't use it
[33mf9eb39c[m Remove Comparable from Set<T>
[33m6aa60ed[m Document how WritebackScope plays into the formal access model and remove SuppressWritebackScope.
[33m15bc4a6[m Fix the build by initializing SILOptions earlier in sil-opt.
[33m8358e1c[m Formatting fixes. NFC.
[33m58cba60[m Minor clean-up. Invoke SILType::subst only when needed.
[33md1fcac6[m [sil-combine] Rename propagateExistential into propagateConcreteTypeOfInitExistential to better reflect what this method does. NFC.
[33m6757a7d[m Commit next revision of Set<T> public API
[33m233ed27[m [constant-propagation] Perform concatenation of string literals as a guaranteed optimization in constant-folding.
[33m8593329[m Do not forget to drop referenced functions when eliminating function_ref instructions in recursivelyDeleteTriviallyDeadInstructions.
[33mf8c3dda[m [sil-combine] Move the StringConcatenationOptimizer class into Local.h/.cpp. NFC.
[33m6fdf2a2[m [silgen] Add support for emitting guaranteed self behind the flag -enable-guaranteed-self.
[33m123b8e6[m Access SILOptions in SILPassManager via the SILModule now that we store the SILOptions in the SILPassManager.
[33m0af8adf[m ABCOpts: Make array element store recognition more powerful
[33md1ec60f[m LICM: Report when we have hoisted instructions
[33m85e2502[m Pass in SILOptions to SILModule.
[33m17e85e6[m Consistently set target, CPU, and subtarget options in AOT and JIT mode.
[33m7335adb[m Fix another typo.
[33m1b2d617[m Fix typo.
[33m84cb0fa[m Forward base rvalues directly to accessors instead of conservatively copying them.
[33mf6e9262[m Fix warnings about unused variables when assertions are turned off
[33m66fc12b[m Exercise more GLKit APIs.
[33me03ff64[m Actually set the variable that is used to trigger the assertion
[33m610b1ce[m Fix a few issues discovered in rdar://19121129.
[33me588ec4[m Fixup for r23613 to allow the runtime to build on non-ObjC platforms
[33m850ab19[m Avoid using libc++ extension for tuples
[33m6c355f3[m Small clean-up in SILMem2Reg.
[33m7d4f12d[m Decide if an extension is private before checking its conformances.
[33m5033d91[m Dependencies: Private functions do not affect downstream files.
[33m470706e[m Dependencies: Push isKnownPrivate up to TypeChecker::lookupConstructor.
[33m02a2868[m Dependencies: member lookups in constraint systems are usually private.
[33m11fa7ca[m Add a FIXME about unqualified lookups in identifier type resolution.
[33m136d5df[m In SILMem2Reg, promote alloc_stack where the address appears in debug_value_addr.
[33m58945f3[m Reflection: Drill through artificial subclasses.
[33mdedebe5[m [silgen] Emit guaranteed arguments as managed retains.
[33m58758f8[m Fix up ineffective -output-file-map test.
[33mc6ac72e[m Add whole-module optimization option to Swift compiler
[33m31a43d8[m Disable OptimizationOptions-without-stdlib-checks
[33m5bfdc67[m [silgen] Move EmitBBArguments into SILGenDecl.cpp since that is the only place it is used and remove the resulting dead methods.
[33m61f4f28[m Remove trailing whitespace. NFC.
[33m6a730fb[m [silgen] Refactor handling of self parameters so that the convention of the self parameter is changed after we know the number of arguments.
[33m8becf62[m Allow uninitialized void types in SILMem2Reg.
[33m2601c4e[m [sil-devirtualizer] Support devirtualization of inherited conformances.
[33me665574[m Runtime: Use size-specific value witnesses for common POD sizes.
[33md63e8e0[m [proposal] Inplace.rst fixup
[33m30976b2[m No need to emit a Swift module in -gline-tables-only mode. Thanks Jordan for pointing this out!
[33m41a30f5[m Support line table only DWARF for Swift. <rdar://problem/19106981> The new option is called -gline-tables-only to mirror clang.
[33m747c279[m [proposal] Rewrite Inplace.rst
[33m27f49cd[m Runtime: Optional-like enums with single-refcounted payloads can share the refcounted value witnesses.
[33mb44f7a5[m Refactor a portion of SILMem2Reg.
[33m652b5ae[m Add a verifier check to make sure that functions that have a function signature that should have a self parameter coming out of SILGen actually do so.
[33m635a797[m Change TypeConverter::getAbstractCC() to use a covered switch on SILDeclRef::Kind when determining the AbstractCC to use. Also fix DefaultArgGenerator so that it is Freestanding instead of Method.
[33md752636[m Runtime: Drop in POD value witnesses when generic structs or enums are instantiated.
[33ma884e04[m Bind optional l-values during their formal evaluation.
[33mbd882d4[m SILCombine: generalize init_enum_data_addr canonicalization.
[33m60b3902[m LoopRotate: canonicalize Struct BB args after UpdateSSA.
[33me828c4f[m Delete dead code from SSA Updater.
[33mee744ca[m In SSA Updater, grab the original def directly from the Operand (should be NFC).
[33m8996382[m IVAnalysis: Convert a check into an assert.
[33ma395317[m ABCOpts DEBUG output.
[33mb0adca8[m Base prepareAccessorBaseArg's behavior in a more principled way on whether the accessor consumes its self argument, rather than a simple type analysis.
[33mf70b912[m Remove redundant tests for Set any()
[33m7493240[m Add any() -> T? to Set
[33m7243748[m Bail out in case of inherited protocol conformances for now. It should be re-enabled once our devirtualizer is able to handle inherited protocol conformances properly.
[33m3b9f1bd[m FlaggedPointer should only compose with itself
[33mf3771cd[m [sil-combine] Propagate information about a concrete type from init_existential or init_existential_ref into witness_method conformances and into apply instructions.
[33ma4a28d8[m Add a date to the comment, so that it is easy to detect later how stale it is.
[33mb192a12[m Add a comment about BB inline-costs that occur in practice when performing the jump-threading for checked_cast_br.
[33m8c715aa[m docs: diagram of current Array implementation in stdlib.
[33md368eae[m [ls-opts] Round to nearest power of 2 when reserving buckets for BBToBBIDMap
[33md14de75[m [ls-opts] Pass in the size of the post order to BBToBBIDMap so we can avoid unnecessary memory allocation.
[33mabef8c9[m Remove trailing whitespace. NFC.
[33mf85b695[m [enum-simp] Now that enum simplification has been integrated into SILCodeMotion for a while, remove the old pass that is no longer in use.
[33m3e513ea[m [func-sig-opts] SROA and delete partially dead arguments.
[33m6d61aad[m [proj] Add a new data structure called a "Projection Tree".
[33ma1373cd[m Add a helper overload of SILBasicBlock::insertBBArgs that takes an integer index as a position instead of a bbarg_iterator.
[33m4084569[m [sil-mode] Add highlighting for objc_existential_metatype_to_object
[33m384d936[m Use assumeNonNegative for the array body count.
[33m54e1071[m Add a builtin assumeNonNegative.
[33m88c6741[m refactoring: Add operator for comparing OperandValueArrayRefs.
[33mc1c1121[m fix: cond_br with identical true/false blocks and differing block arguments generate illagal llvm phi-nodes.
[33me537c75[m Revert "Disable existential metatype casting on non-objc."
[33m06c75f5[m Revert "Appropriately disable some more objective-c codegen on non-objc."
[33m83f27a8[m Revert "Mark tests that don't pass on linux as XFAIL."
[33m7ed843aa[m Revert "Implement String Comparable and Hashable conformances for non-objc"
[33m277891d[m Disable existential metatype casting on non-objc.
[33mb0d7b07[m Appropriately disable some more objective-c codegen on non-objc.
[33m198402d[m Mark tests that don't pass on linux as XFAIL.
[33m396eca7[m Implement String Comparable and Hashable conformances for non-objc
[33m72c226e[m Use target detection to exclude functionNameDemangleTest on linux.
[33m11802de[m SimplifyCFG: Fix a memory invalidation issue
[33m4016c57[m Debug info: Make a store that is part of the initial setup of a frame variable part of the function prologue by omitting its location.
[33m1995bac[m Fix abitypes.swift test for x86-64 simulator too.
[33mbdba3d9[m Fix abitypes test on arm64 harder.
[33md2b90ad[m Add an option to disable running the LLVM verifier.
[33md9813b1[m [sdk-analyzer] Check if a clang decl was associated with a swift one from stdlib.
[33mf921122[m Wrong comment header for FlaggedPointer.h
[33m3c4428d[m Emit unique metadata for functions with inout
[33m26d9a53[m IRGen: Convert @objc enums to the Clang types of their raw types.
[33mce38e44[m IRGen: Produce an appropriately-sized extra inhabitant for BridgeObject.
[33m74b9271[m Disable array_mutable test that needs updating.
[33mfcf7ed2[m Update test/IRGen/abitypes.swift for arm64.
[33m8051919[m Update tests for isUniquelyReferenced change.
[33md9c750e[m [stdlib] Remove ArrayBuffer indirection
[33mdf3006f[m Track the unique use of l-value components and avoid cloning subscript values aggressively.
[33mc476932[m Hide the management of lvalue components inside LValue. NFC.
[33me08d0ee[m Add missing FileCheck to test.
[33mb60a30c[m stdlib: Make isUniquelyReferenced shims properly return bool.
[33mf8dfcaa[m SIL: Consider the original Clang type of a decl before bridging Bool back to ObjCBool.
[33m24fd14a[m Disable GLKit test on iOS.
[33m6d428b8[m ClangImporter: Import macros of the form '#define FOO CFSTR("bar")'.
[33m1afc987[m Refactor the SILArgument API on SILBasicBlock so we can insert bb arguments anywhere in the argument list. Also clean up the API names so that they all match.
[33m80d0ab3[m Evaluate subscript index expressions during the formal evaluation of the l-value, not lazily at the first point of access.
[33m007204a[m Crash tests 0730, 0911, 0916, 1660, 2027, 2203 no longer crash.
[33m4bee99d[m [func-sig-opts] Change deletion of argument functions into a general updateOptimizedBBArgs methods since I will use the same code path to update the arguments when SROAing arguments.
[33mab7b1c2[m Move stripClassCasts into SILValue. NFC.
[33mdda599f5[m These lines should not have been committed ;-)
[33me20a315[m Enable union import by default.
[33mcb2d39b[m This is a re-factored, more modular implementation of jump-threading for checked_cast_br [exact] based on Michael's comments.
[33mc3f0ccf[m Remove the monolithic implementation of jump-threading for checked_cast_br.
[33m1eae9eb[m Minor stylistic changes based on Michael's review. NFC.
[33m267f0ff[m Wrap context-sensitive nullability keywords in SWIFT_NULLABILITY.
[33mee66391[m Evaluate the LHS of an assignment before the RHS.
[33m7b3daab[m Fix for rdar://problem/19016271, Fuzzing swift: Swift parser/validator crash.
[33m75645e2[m LLVMARCOpts: Retain motion can ignore loads
[33mf71006f[m LLVMARCOpts: Properly handle swift_bridgeObjectRetain/Release
[33m8200baa[m Dependencies: types in PatternBindingDecls can't affect function signatures.
[33mf5f1f99[m Dependencies: types in for-each patterns count as in-expression types.
[33m92a31be[m Dependencies: many more pattern-related updates.
[33mdb4a23b[m Dependencies: "is" patterns are always in expression contexts.
[33m4285661[m Dependencies: private typealiases never cause non-private dependencies.
[33m2ef14c2[m Dependencies: closure signatures are always in expression contexts.
[33md1c5c5d[m Dependencies: Not all identifier types are non-private dependencies.
[33m1e3b6f7[m Resolving enum element patterns counts as a use of the enum type.
[33m441a84a[m Native runtime: no need to account for ObjC pointers in uniqueness checking
[33m08e79ad[m Remove debug output that was only used during development.
[33m17b1721[m Implement ELF protocol conformance loading.
[33m9ba13cd[m Add a configuration for linux test running.
[33m59c30ab[m Minor: coding style fix
[33mfcadd24[m [sil-simplify-cfg] Implementation of a dominator-based jump-threading for checked_cast_br [exact]
[33mbf594a3[m [sil-simplify-cfg] Add a few helper functions to be used by the implementation of dominator-based jump-threading for checked_cast_br [exact]
[33m49d1edf[m [sil-simplify-cfg] Remove the simple checked_cast_br [exact] jump-threading implementation as it will be replaced by a dominator-based implementation.
[33mca208df[m Extending ParserUnit to optionally accept LangOptions and module name.
[33m96bdf90[m Stop printing __null_unspecified per rdar://problem/18383574.
[33m5798cf9[m [stdlib] Fix a dumb omission
[33ma76fbb0[m Fix Interpreter/builtin_bridge_object.swift test
[33mddfe953[m [func-sig-opts] Remove DeadArgIndices now that each ArgumentDescriptor has its original index cached and refactor adding thunk args onto ArgumentDescriptor::addThunkArgs.
[33m15e1959[m [stdlib] BridgeStorage: uniqueness check fast path
[33mbf233c5[m [stdlib] BridgeStorage: rename a property
[33mde8967e[m [stdlib] Copious force-inling
[33m0c1e526[m [stdlib] Degenericize some BridgeObject primitives
[33mb9342e5[m [stdlib] Array: one-element _typeCheck, for ARC
[33m3cda8c1[m [func-sig-opts] Make ArgToEpilogueReleaseMap a local variable instead of a field on FunctionAnalyzer since it is only needed in one location of the computation now.
[33mf6655c0[m [func-sig-opts] Move computation of optimized arg types and optimized arguments from functions into methods on ArgumentDescriptor.
[33m0995302[m [func-sig-opts] Track the original index of the argument in ArgumentDescriptor and use it to create fix lifetimes and releases.
[33mdf5a2a7[m [func-sig-opts] Add comments to ArgumentDescriptor fields.
[33m1e4b039[m [stdlib] Added NSEnumerator to SequenceType
[33mc91c35c[m [stdlib] Run all gyb'd tests thru line-directive
[33m1c63d9d[m [line-directive] StdlibUnittest support
[33m530ae17[m Added ASCII fast paths for common string operations
[33mee531db[m SIL verifier: Bit more helpful spew for entry BB argument mismatches.
[33m5672a42[m Ensure that LValues are uniquely used.
[33m3cd28b9[m Document the rules for formal accesses to ? and ! l-values.
[33m55f3289[m Added additional tests and comments to String
[33mb20694e[m Move multifile regression test around based on Jordan's feedback.
[33m77708b2[m Revert "Add a configuration for linux test running."
[33mc61e40b[m Revert "Implement ELF protocol conformance loading."
[33m0774051[m Emit nullability context-sensitive keywords for instancetype.
[33me108178[m TypeChecker: remove unused 'typeContext' param from ident. type resolution.
[33me97764f[m Dependencies: Type lookups are private in constraint systems within functions.
[33m985cbb8[m Dependencies: Add new options to qualified lookup for known dependencies.
[33mcb1bf10[m Dependencies: Fix bug involving nested DeclContexts.
[33mce995a8[m Dependencies: conformances on private decls are themselves private.
[33m6e7d291[m Dependencies: inherited protocols on a private protocol are private deps.
[33m01da305[m Factor out a TypeBase::hasDependentProtocolConformances() method.
[33me7e47f3[m Add regression test from https://devforums.apple.com/thread/254807?tstart=0
[33m4e479f5[m non-objc: Guard use of isNonNative_unTagged_bridgeObject.
[33mceddf9d[m Don't build a test where we haven't built the library.
[33m738a1b4[m Implement ELF protocol conformance loading.
[33me8f93f9[m Add a configuration for linux test running.
[33maeacf6f[m Add more icmp builtins to the same-operands optimization in SILCombine.
[33mb11d990[m Avoid APIs that return a new ASTContext-allocated array every time you call them. Have them fill out a vector provided by the caller instead.
[33m0867e2e[m [docs] Fix linked list definition in Generics.rst
[33m8dba2bc[m [ASTPrinter] Control whether we should skip printing empty extensions or not.
[33ma72c0e5[m [ClangImporter] Expose a couple of functions in ClangImporter.
[33m66da850[m [stdlib] Kill a stray backslash
[33m1ed31fa[m [stdlib] Fix BridgeStorage!
[33m44a1886[m [stdlib] BridgeStorage: no-bits fast path
[33m43257cb[m [emacs, line-directive] StdlibUnittest support
[33m4a4296d[m SIL: Allow init_existential_ref to convert among @objc existentials.
[33md344976[m Remove @inline(__always) on a var decl.
[33ma247f5d[m SIL parser: Populate conformances of init_existential insns.
[33m4785e7b[m [stdlib] Explicit keywords for BridgeStorage.init
[33mc6711af[m [runtime] Fix BridgeObject refCounting/masking
[33m513b05c[m compiler_crashers: Use %target-swift-frontend instead of %swift -sdk %sdk
[33m7b77294[m Improve testing of nullability type specifier importing.
[33m8951649[m [sil-simplify-cfg] Continue re-factoring. Move a few functions closer to the beginning of a file so that they can be used by all functions below them. NFC.
[33m705d239[m [sil-simplify-cfg] Small re-factoring as a preparation for the upcoming jump-threading patch. Introduces a new BasicBlockCloner class and moves a common logic of cloners which are used by jump-threading into a new BaseThreadingCloner base class. NFC.
[33me78ad13[m [stdlib] Force-inline some bitmask constants
[33me581216[m [stdlib] Fix a comment
[33m85782e4[m [pre-commit-benchmark] Report speed ratios
[33m5c8803a[m Remove the last uses of UnqualifiedLookup::forModuleAndName.
[33m9227548[m Dependencies: make sure operator dependencies are recorded properly.
[33mc712c51[m Dependencies: start tracking whether a lookup is private to a file or not.
[33ma35c840[m [Driver] Simplify an already-filtered loop.
[33m944860a[m PrintAsObjC: Handle forward declarations of @objc enums.
[33m96a9751[m PrintAsObjC: Print nullability type specifiers to capture optionality.
[33m8ce6af5[m Make the node of the concurrent map a ConcurrentList.
[33med26eb0[m Use the typedef to make the code more readable. NFC.
[33m510a0c6[m SILCombine: optimize several binary builtins which receive the same value in both operands. E.g. cmp_eq %x, %x -> true
[33mf25c1da[m Remove unnecessary constraints on AnyObject as a constraint or composition member.
[33m8b03727[m PrintAsObjC: Fix up mixed-language @objc enum annotations.
[33mc322b35[m Add a data dependence between opened existential values and method_inst that 'use' them.
[33me9e1666[m Update for upstream LLVM changes
[33m34fbb4f[m Cache map lookups
[33mdb4a9ce[m Refactor the hash code into the EntryRef class.
[33m2f29db9[m [stdlib] Finish incomplete comment
[33md4e06bd[m [stdlib] Clean up a sanity check
[33m68fbea2[m BridgeObject: native object with no spare bits set
[33m6d41a0a[m Reinstate @objc enum tests I overeagerly erased.
[33ma78ceb8[m More update for upstream llvm::StringSet API change.
[33m177cbf3[m Adjustment for upstream llvm change
[33m8aba14a[m ClangImporter: Learn about SWIFT_ENUM and Swift-originated ObjC enums.
[33mb8d912c[m PrintAsObjC: Swap SWIFT_ENUM args around to match other *_ENUM macros.
[33m0c05600[m IRGen: Lay out @objc enums in a C-compatible way.
[33mdc2ad38[m Serialization: Serialize the raw values of @objc enums.
[33m5059bd4[m PrintAsObjC: Print @objc enums.
[33m0330e3b[m Sema: Allow '@objc' on ObjC-compatible enums.
[33m08ff6ed[m Move the less frequently used field to the end of the struct. This saves one add instruction in the fast path (for calculating the address of .Left).
[33m02c3aeb[m Split the lookup node lookup cold path from the hot path.
[33m4e1fa4a[m Import the swift-compiler-crashes test suite.
[33m0495593[m Clear module cache before running this test.
[33m9d9336d[m Importer nullability type specifiers __nonnull/__nullable/__null_unspecified as optional types.
[33m14159d9[m Use string description in test sequence comparison
[33me9d650d[m CSE: handle RefToBridgeObjectInst and BridgeObjectToRefInst
[33m6199b40[m  Use load-acquire store-release for the node pointers in the tree.
[33mecd5881[m Use load-acquire store-release for the first element in the linked list. The use of seq_cst order for all operations is an overkill.
[33m08015de[m RefToBridgeObjectInst and BridgeObjectToRefInst are rc identity preserving
[33m20f75c7[m Remove the push_front return value.
[33m90f0e43[m Small cleanup. NFC.
[33m21c524d[m Always synthesize storage for lazy vars of validated types.
[33mffbed69[m Fix for rdar://problem/18990358 (Fuzzing swift: Swift verifier crashes).
[33me6c41fb[m Remove redundant copy of Set.contains test
[33m6c8c32f[m Expect autoreleased keys at Set objc entry points
[33m2ffab5f[m Fix parsing of "// expected-error@+1 2{{message}}" by the verifier.
[33mc989e2f[m Add a note about the fact that the entried are completly constructed before they are inserted into the map.
[33m7274929[m Describe the node insertion algorithm in the binary tree.
[33m4821ccf[m Add additional docs to the concurrent linked list.
[33mdaa991d[m Mark a method as static.
[33m384d458[m Small cleanups, renames and deletion of unused ctors. NFC.
[33m9bf2d0d[m Update the -*- C++ -*- marker
[33m726aba1[m [stdlib] BridgeStorage optimizations
[33meb36890[m [ClangImporter] Ban useless macro CF_USE_OSBYTEORDER_H.
[33m0867224[m [Driver] Handle null lists in the YAML dependencies file.
[33m6961c08[m Dependencies: use of a conformance is a use of the conforming type.
[33m22c41e0[m Add adopted protocols to the type dependency list.
[33ma0cced6[m formatting
[33m32e6db3[m Parse signs onto float literals the same way we handle integer literals.
[33m6c29301[m Fix a stale comment.
[33m9d6cccb[m Revert "[stdlib] Workarounds for <rdar://18992875>"
[33m5fc0b53[m Re-added dynamic casting tests
[33md5c6534[m Removed unnecessary unsafeBitCast
[33md3e2209[m Fix a vector invalidation error in the checking for unintended Objective-C method overrides.
[33m505b2aa[m Fix signature of observeValueForKeyPath(_:ofObject:change:context:) to match SDK changes.
[33m0aaf9af[m Use a type_traits shim for is_trivially_constructible.
[33m1c4fbbf[m Switch search order to distcc-pump then pump.
[33m913a765[m Use pthreads in the metadata runtime unit test.
[33m6537750[m Dispatch.h -> dispatch.h
[33m5f75d2d[m Removed _stdlib_dynamicCastToExistential1 hack
[33me857828[m Tweak test/IRGen/abitypes.swift for armv7-ios clang drift.
[33m569f479[m Don't barf in BoundGenericType::getSubstitutions when a protocol type conforms to a protocol.
[33m0606251[m [docs] Use the same theme as our internal docs.
[33m6121e42[m Cleanup.
[33m6f42b37[m Fix a bug were a stack-allocated string was used as an index into a map. <rdar://problem/19001254> DebugInfo/Imports.swift is broken
[33me6f8e6d[m Remove "Sort the list" comment.
[33mb46474f[m Revert "Use pthreads in the metadata runtime unit test."
[33m2d703a2[m [proj] Add Projection::create{Addr,Value}Projection so one can create Projections without knowing what the internal state of the projection is.
[33mebba297[m Look for alternate name for distcc pump mode command.
[33mec44f52[m Use pthreads in the metadata runtime unit test.
[33m243fb6d[m Don't do is_trivial_constrictible on libstdc++.
[33m1246f2f[m fixed: specialization of reabstraction thunk in CapturePropagation results in broken code.
[33meeab468[m [proj] Prepare Projection so that I can add generic create{Addr,Value}Projection.
[33m5d4e87b[m Add in a big comment to explain why we sort projections when canonicalizing loads in SILCombine to favor being narrow over wider.
[33m257092f[m Remove unused import. NFC.
[33mf062045[m [stdlib] Commit a missed part of r23362
[33md768975[m [stdlib] BridgeStorage: rename uniqueness check
[33mf7ae19f[m [stdlib] Workarounds for <rdar://18992875>
[33m8ceb854[m Remove the unused lock utils.
[33m3c23f14[m Continue to reduce the size of the metadata cache by dynamically allocating the mutex.
[33m3bb9279[m Reapply "Remove the locks from getGenericMetadata to accelerate Debug builds."
[33m06724fc[m [projection] Add comment to explain what projection path is.
[33ma4a6333[m [projection] Make projection constructors private and create static failable initializers using Optional.
[33m7285835[m [projection] Rename isAddressProjection => isAddrProjection and add isValueProjection.
[33m866a4fa[m Revert "Remove the locks from getGenericMetadata to accelerate Debug builds."
[33mdbcdfff[m Remove the locks from getGenericMetadata to accelerate Debug builds.
[33md99ed4f[m Implement a lock-free concurrent multimap.
[33mbc18080[m Fix warnings about mixed-signedness comparisons
[33md59e781[m [stdlib] Kill some dead code
[33me455dec[m Accessors: various ReST fixups
[33m4111b94[m [stdlib] _BridgeStorage: use Builtin.BridgeObject
[33m70fe4a3[m Accessors.rst:879: ERROR: Unexpected indentation.
[33mfd7c8d5[m Silence unused variable warnings.
[33mb297c1f[m Make better use of Builtin.BridgeObject bits
[33m26b7dd1[m Edits to the accessor proposal in response to Dave's feedback.
[33m06bfed1[m Make Accessors doc an orphan so it doesn't break my build.
[33m32b104a[m Silence unannotated fall-through warnings.
[33m96688de[m Silince unused variable warnings.
[33meef633d[m Replace assert(0) with llvm_unreachable() or llvm::report_fatal_error().
[33m1c871a1[m [buildbot-script] distcc-pump in the right place
[33mca59995[m The most recent accessors proposal, with a few editorial changes that Dave pointed out.
[33m866477d[m Small cleanups. NFC.
[33m22b5204[m Move the debug flag into the MetaCache implementation, where it is used.
[33mfd98243[m Move the DenseMap EntryRef entry into MetadataCache.
[33ma61085a[m Fix missing include of condition_variable.
[33m04f8efb[m Correctly calculate non-objc instance size and rename to reflect.
[33mb9bd3a2[m Ensure HeapObject and RefCount objects are trivially constructible and destructible.
[33m1eb91b6[m Add REQUIRES: swift_interpreter to protocol_lookup interpreter tests.
[33ma8a2ff3[m Case sensitivity fix
[33m7b71be3[m Fix non-objc implementation of getRootSuperclass and isObjCTaggedPointer.
[33mdedf2a5[m Runtime: Eliminate .cxx_construct in bridging object bases.
[33m70ce09c[m Refactor the metadata cache classes into a new file.
[33m1105667[m Refactor the lock implementation into a new file.
[33me2258fa[m Only run dsymutil on darwin.
[33m4c0e64f[m Handle class-constrained generic class-to-objc-existential casts.
[33m27d551c[m Delay generation of ObjC protocol witnesses until the end of the outermost Clang import.
[33me5acb5b[m Don't die on a failed dynamicCastUnknownClass cast.
[33maeadf5e[m Test cases for r23301: Some bug fixes in the SwitchValueInst and SelectValueInst implementations
[33m07273ff[m SimplifyCFG: create select_value instructions.
[33m2539ebd[m <rdar://problem/18979003> _Set([1,2,3]) crashes in Xcode playground: assertion in IDEPlaygroundQuickLookForStructure.m:405
[33mad7ffad[m Enable debug info in JIT mode.
[33md178b88[m IRGen: Don't reference ivar offsets for empty ObjC ivars.
[33m048d1a1[m [func-sig-opts] Update comment. NFC.
[33m9effe20[m Adjust to api_notes::NullableKind -> clang::NullabilityKind renaming.
[33m420cf73[m Adjust to removal of NullableKind::Absent; it's captured by Optionals now.
[33mb5b860a[m IRGen: Properly create ObjC protocols using the runtime in JIT mode.
[33me70dd32[m comment
[33mfae31cb[m [dead-object-elim] Add SILInstruction::mayTrap(), change SILInstruction::mayHaveSideEffects() to call it, and change dead object elimination to call mayHaveSideEffects().
[33m320abd7[m Remove trailing whitespace and fix up some code to use LLVM style. NFC.
[33m92021c0[m [irgen] Call getObjectClass with CallingConv::C instead of RuntimeCC.
[33m2e37bef[m [irgen] Use object_getClass instead of object_getType() when lowering objc existential_metatype instructions.
[33m9a691a5[m [playgrounds] Implement _swift_isClass(x: Any) -> Bool.
[33m7fbf68f[m Add target object format to swift target info.
[33m2120382[m OpenExistentialInst reads the memory pointed to by its operand
[33m412b133[m Runtime: Fix crash in cast to existential metatype.
[33m2405002[m Sema: Remove the subtype constraint introduced for checked casts.
[33md44da6e[m Enable jump threading to combine two enum instructions. This is needed to simplify enum construction from integer raw values.
[33m581a5d0[m Some bug fixes in the SwitchValueInst and SelectValueInst implementations.
[33m5f4a31a[m Revert "stdlib: put back C_ARGC and C_ARGV for now to stage in the API change"
[33mdcf0be5[m [buildbot-script] Add missing DISTCC_PUMP
[33mefed339[m Sema: Remove limits on checked casts involving generic types.
[33mae77404[m [Driver] Two more dependency graph tests.
[33m3c4c4f1[m Fix for rdar://problem/18926814 (Fuzzing swift: Swift parser crash).
[33m4870fa9[m [Driver] Use -incremental as the top-level option for dependency tracking.
[33m5ad871e[m Adopt llvm::function_ref for callbacks that aren't persisted.
[33m1bbe784[m [Driver] Add another parseable output test, this time with dependencies.
[33mc578ef6[m Emit human-readable names for destructors in the debug info.
[33m4d58b58[m [buildbot-script] require --build-dir argument
[33maa41a5c[m Revert "Update uses of Clang's NullableKind -> Nullability."
[33mf204351[m Implement Clang importer support for finding Objective-C methods by selector.
[33m2aef2c3[m stdlib: put back C_ARGC and C_ARGV for now to stage in the API change
[33m538f459[m swift-mode: add override to the list of keywords
[33m9b4b6dc[m Modified the playground transform to provide a unique ID with each instrumentation point.  This ID should only be a way to identify a point for the purposes of the current run, so it is somewhat random.
[33m5816026[m [Driver] Add missing test files.
[33m055e867[m SILGen: Fix memory leak when casting from address-only to loadable trivial type.
[33m53af706[m Sema: Fix logic inversion that threw away significant bits of enum raw value literals.
[33m3f67608[m Remove unused equalsUnordered in Set tests
[33m3719565[m Update expected Set hash ordering for 32-bit
[33m8770dba[m [TypeChecker] Minor: corrected safety check against crash in type checker on invalid input.
[33m5c245f8[m Update uses of Clang's NullableKind -> Nullability.
[33mb73b22a[m Remove meaningless code.
[33maa3f35c[m Don't consider DynamicTypeExpr or MetatypeConversionExpr to produce a statically derived metatype.
[33m1be7553[m Debug info: unwrap promoted inout variables and prevent a double-deref of inout variables.
[33mf9a6b1d[m [Driver] Add several tests for the DependencyGraph.
[33m8fcc2d7[m [Driver] Add a test for dependency tracking and parseable output.
[33ma4a6b42[m [Driver] Only run compile jobs if needed.
[33m6ca70b3[m [Driver] Add debug option -driver-use-frontend-path.
[33m4b2097c[m SILGen: Include overrides of required allocating initializers in the vtable.
[33m6969be4[m CMake: don't build WatchKit.apinotesc for OS X
[33m2c257fa[m IRGen: Fix assertion failure when doing a checked cast to AnyObject.
[33m9fa1cc7[m [stdlib] BridgeObject uniqueness checking
[33md2e3bd8[m CMake: trim trailing whitespace
[33m4cd60e6[m stdlib/Set: add #if guards for non-ObjC platforms
[33m0d42339[m Runtime: fix the build for !SWIFT_OBJC_INTEROP
[33ma2faf6b[m CMake: add a comment about linking the 'swift' binary
[33md0718c6[m Prefix Set<T> with underscore for API development
[33mc453eb4[m Add Set type.
[33mdac8697[m Update the test for the C_ARGV rename
[33mb6c7d89[m [stdlib] Don't let gyb interfere with doc comments
[33mb50293b[m Runtime: Work around rdar://problem/18950072 to avoid paying for .cxx_destruct on Swift objects.
[33m4244c45[m Debug info: Emit byref captures as indirect. <rdar://problem/15851064> Variables captured by inner functions are described oddly and often incorrectly
[33m2bbf6b9[m [stdlib] changed C_ARG{C,V} @availability to provide fix-its
[33m08fe138[m Runtime: Generate a human-understandable name for Any.Type.
[33m7a2e1fb[m [arc-opts] After the arc optimizer converges, run another round of the ARC optimizer freezing releases in the epilogue of functions that match to SILArguments. This allows us to treat all such SILArguments throughout the entire function as having a post dominating release.
[33med9a765[m [API Notes] Commit the WatchKit audit.
[33m0c21c4d[m Expose ExitableFullExpr scopes to the debug info, so variables declared in patterns show up in their own scopes, and the same variable name can be reused in consecutive patterns.
[33m9ac0595[m Revert "[stdlib] Don't let gyb interfere with doc comments"
[33m963619c[m [stdlib] C_ARG{c,v} renamed to argc/unsafeArgv
[33m75876f5[m XCTest: silence the warning about accessing a property that is not declared
[33m392a675[m [stdlib] Don't let gyb interfere with doc comments
[33m08b6f80[m LoopRotate: Add a test case for objc_method after Roman's commit
[33m742a9bf[m Don't jumpthread blocks containing MethodInst instructions referring to objc methods, because we cannot build SSA for method values that lower to objc methods.
[33mf723b05[m Don't remove 'with' from ObjC method arg name if resulting name is keyword.
[33m19b0151[m ArrayBoundsCheck: Use the destructor analysis to make sure the array's destructor is memory safe
[33m06a0a23[m Add a destructor memory effect analysis
[33m03021ec[m [stdlib] simplified implementation of Process
[33m976d1db[m SILGen: Don't leak BridgeObjects when we cast their bit patterns.
[33m44c9a5c[m Synchronize Swift's gitignore with Clang's
[33mfbd707f[m Execution tests for class existential casts.
[33m7ce4ea8[m IRGen/Runtime: Handle non-class-metatype to ObjC existential casts.
[33m2475bd1[m Clean up platform conditionals.
[33m3460ec2[m Improve simplification of init_enum_data_addr+store+inject_enum_addr to an enum instruction.
[33mf929089[m SwiftShims: restore compatibility with Clang < 3.5 as a host compiler
[33m8ea3c8a[m CMake: remove random debug message
[33m48db1bf[m CMake: use message(FATAL_ERROR) to signal errors
[33maf9515d[m Break a circular dependency between SwiftShims and the Darwin module
[33m90624fd[m Use defined() instead of using a possibly not defined macra
[33mcaf0031[m Remove trailing whitespace
[33m71437f8[m use Type::isCanonical() instead of the constructor to check for canonical-ness.
[33mdd4032e[m Modify the Mangler to recursively deal with sugared types. Unless DWARFmangling is set all methods still expect a CanonicalType.
[33mf3c093b[m Add a testcase for arithmetic traps in optimized code.
[33m433c624[m Test @objc override detection for classes defined in Objective-C.
[33m8b5d763[m [Driver] Add a new DependencyGraph class.
[33m3a52f2a[m [Driver] Provide a single API to iterate over all valid file types.
[33m0364724[m [Driver] Add an mtime test for single-file compilation jobs.
[33m1fdf0e4[m [Driver] Add -emit-reference-dependencies to the driver.
[33m3d396f8[m [arc-analysis] Refactor OwnedArgToEpilogueReleaseMatcher from FunctionSigOpts.
[33m79e9975[m Added gitignore for pyc files
[33me7995d2[m [stdlib] simplified implementation of init(objects elements: AnyObject...)
[33m034eab6[m [stdlib-unittest] Added tests for NSSet / NSArray
[33mda22779[m [stdlib-unittest] Added expectEqualsUnordered
[33mb27e88b[m Record Objective-C method lookup tables in Swift modules.
[33m3910c25[m Minor re-factoring: Move the logic to decide if a given instruction can be (easily) duplicated into SILInstruction. So far it was mainly used by jump-threading related optimizations. But it could be generally useful, or at least generally important, to optimizations that want to duplicate code.
[33m5e9e68c[m Change the linkage type of internally used functions from Internal to Private, to remove them from the dylib symbol table. This reduces the dylib size by ~3%.
[33mdc6a776[m stdlib: Use config directives to work without objective-c.
[33m98586b3[m stdlib: Move withUnsafePointer(s) to LifetimeManager.swift.
[33m9524ca2[m stdlib: Move _nilRawPointer to Builtin.swift
[33mcb4b7f0[m CMake: remove commented-out dead code
[33m13b8c11[m [sil-simplify-cfg] Add a test to ensure that no jump-threading is performed for checked_cast_br inside BBs that contain instructions which cannot be cloned.
[33mfb66e1e[m Disable protocol_lookup_foreign on iOS
[33m3734148[m Revert "Use config directives to carve out a 'portable' kernel stdlib."
[33mc54686f[m  [sil-simplify-cfg] When performing a jump-threading, check first if a given BB can be cloned, because not everything can be cloned. For example alloc_stack and dealloc_stack instructions cannot be cloned.
[33md12fecd[m [CMake] Unbreak the static build of swiftRuntime.
[33mdfa260f[m Use config directives to carve out a 'portable' kernel stdlib.
[33mc270f76[m Fix check related to null conformances.
[33m8d2b271[m IRGen: Emit ObjC class metadata references for class-constrained archetypes.
[33m2cf30d2[m [stdlib] Nix stale comment
[33m2fc0ce6[m Bias Objective-C method redeclaration diagnostics toward methods in the class.
[33m2942359[m [stdlib] Kill unused enum
[33m3475aa6[m [stdlib] use sanity-checked downcasts
[33me21721f[m [CMake] Utilize llvm_update_compile_flags() for setting the compiler flags.
[33mcb27b7d[m [stdlib] Excise unsafeBitCasts from SliceBuffer
[33mc203895[m [stdlib] Drop needless unsafeBitCast
[33m2c48f57[m [stdlib] Sanity checks for empty array buffer
[33m3970bed[m [stdlib] Fix a comment
[33m0ce1a75[m [stdlib] Run gyb'd test thru line-directive
[33m057d680[m [stdlib] Kill off some needless downcasting
[33me64d377[m LoadStoreOpts: kill unused variable
[33m44cadbf[m [stdlib] A few tests for Builtins.swift
[33m5ed6e27[m IRGen: Code gen for casts to existential metatype.
[33m2794fe3[m [stdlib] Restore a combination of 11 commits
[33mcb80bb3[m [stdlib] ManagedBuffer: closure-free internal APIs
[33ma2066b6[m ABCOpts: releases can have memory unsafe side effects due to the deinit method
[33m7ee99eb[m Runtime: Workaround for rdar://problem/18889711.
[33mb3badc6[m Handle consistency checking that requires the entire module.
[33m30c8908[m Add test for Objective-C override diagnostics in multi-file parsing.
[33m8daf1df[m Objective-C method override checking: add test case missing from r23170.
[33mf229840[m IRGen: Code generation for general class existential casts.
[33mc57bde2[m CMake: add a (disabled) flag for serializing StdlibUnittest
[33mbe90da8[m CMake: allow specifying Swift compiler flags separately from C compiler flags
[33m96cca39[m CMake: remove two unused variables
[33m10464d0[m Added Comparable to ObjectIdentifier
[33m3624c13[m Small clean-up. Use the more descriptive function to check for declarations.
[33m3df2c11[m Diagnose Objective-C method overrides not reflected as Swift overrides.
[33m993c724[m This week in debug info: global variables are now emitted as global variables. rdar://problem/15859689 once again.
[33me1db7c3[m Avoid calling members with a null this when printing TypeReprs
[33m23ea8e5[m Made LazyLoaderArray's length type fit in a 32-bit pointer.
[33mc835beb[m Remove IRGenOptions objc-interop flag.
[33ma99affe[m Static assert that swift_once_t is the right size.
[33m5eeba0f[m Pass the decl when constructing SILArguments for captured arguments. Fixes an assertion found via <rdar://problem/18188980>.
[33m704d6f8[m [sil-simplify-cfg] Implement jump-threading for blocks ending with checked_cast_br [exact] instructions. This improves code typically produced by the devirtualizer when it performs a speculative devirtualization. The generated code for simple expressions like o.x + o.y or o.f1() * o.f2() gets completely jump threaded in many cases.
[33m3667f07[m Add a test case for <rdar://problem/17308698>
[33m6cb2f62[m Add a testcase for <rdar://problem/18856779> and fix some bugs (stale CHECK: lines).
[33m9c8f0df[m [API Notes] Mark window in supportedInterfaceOrientationsForWindow as optional.
[33m0fe904b[m Add tests for existential-to-existential casts.
[33m9e08c0b[m Initialize ObjCAttrBits.ImplicitName in all ObjCAttr constructors.
[33m6939988[m Test: Reconcile crashOutputMatches() with its own test, and test multiple uses.
[33m4f6e439[m Silence a few of the release build warnings.
[33me7e455a[m [API Notes] Fix several mis-audits.
[33ma448d6e[m Test: Clean up the checks in test CastTraps.
[33mcfa876b[m Use 'as? Protocol' casts in tests instead of a hacked-up entry point.
[33m3c06c3e[m Runtime: Insert missing early exit.
[33mcc6d803[m Sema: Allow casts to arbitrary existential types at the sema level.
[33m16d9998[m Runtime: Look up witness tables when casting to protocol types that need them.
[33m32d148c[m Runtime: Improve type safety when working with witness tables.
[33m53deeeb[m Sema: Relax existential-to-concrete type checking.
[33m89e5e5b[m Diagnose redeclarations of Objective-C methods.
[33me70ca27[m Runtime: Improve diagnostics for failed casts to ObjC class and protocol types.
[33me7c6712[m LoopRotate: A method instruction can have operands
[33mc4fd29e[m [Driver] Eliminate the common base class of Command and JobList.
[33m96b3edb[m [Driver] When a command finishes, don't try to reschedule ALL other commands.
[33mbd1d9f3[m Use llvm_unreachable(...) instead of assert(false && ...).
[33mc021b7a[m If $T1 <a @autoclosure () -> T, try binding $T1 to T.
[33m4c1f990[m Test: Allow multiple crashOutputMatches() on a single StdlibUnittest test.
[33mf0c4b46[m Runtime: Remove unused helper.
[33me2cd398[m Runtime: Remove dead casting entry points.
[33m2047cec[m IRGen: Remove more obsolete casting entry points.
[33m64a2838[m Remove dead function.
[33ma832c6b[m IRGen: Strip out support for address casts from the value cast path.
[33m26b50b8[m stdlib: Don't inline _uninitializeCopy
[33m8644e9c[m stdlib: Don't inline copyBuffer
[33m63623ed[m stdlib: only build a sub-range if we need to type check
[33mcf34cad[m LICM: Sink fix_lifetime
[33m95c1b00[m SIL: Verify that value checked_casts don't take addresses.
[33m1f8a9eb[m Optimize the generated == function for enums.
[33mc1c51b4[m Move checking of non-failable-to-failable initializer calls into constraint application.
[33m5e68292[m AST: Drop insignificant CheckedCastKinds.
[33mabdf163[m CMake: remove redundant code to clean generated files
[33m8ba1f42[m Remove stray "#if 0 ||" and add missing else.
[33m9905f77[m [test] Add file missing from r23123.
[33m8baed9e[m [test] Don't try to deserialize OS X versions of modules on iOS.
[33md15c24e[m Changes to runtime library to support non-objc targets
[33m5aa6030[m [ClangImporter] Don't mistake a module being built for our dummy buffer.
[33m8b1d818[m Move some archetype-only bits from SubstitutableType to ArchetypeType. NFC
[33m763ce97[m Runtime: Tighten up barriers in foreign type metadata.
[33m63a429f[m Changes to code generation to support non-objc targets
[33mec4accf[m Optimize IRGen of select_num which maps the enum tag trivially to an int value.
[33mda9f08a[m Replace the default-entry with a corresponding case-entry in select_enum[ _addr], if possible.
[33m4ac8e65[m Remove uses of MODULES_SDK in testing infrastructure
[33m8eb5615[m Add more triples to tests that use %sdk, and enable them on iOS and simulator
[33m51b74c3[m Run deserialize_coregraphics.swift on iOS and simulator as well
[33m0a25935[m Add a target triple to all tests that use %sdk
[33m8f5df01[m Don't jumpthread through loop headers
[33ma5f251e[m [Global Opt] adds emitGlobalGetter in SILGen.
[33m276af26[m [Global Opt] adds GlobalGetter as one kind of SILDeclRef.
[33maf0121f[m IRGen: Don't nonlazily realize classes (unless they ask).
[33m23a86ed[m CmpXChg Builtin: allow 'weak', return {iNN, i1}
[33m1b6624a[m llvm::sys::FindProgramByName() -> llvm::sys::findProgramByName()
[33m3ae1083[m [ls-opts] Teach LoadStoreOpts how to forward smaller previous loaded items to the uses of larger later loads that partially alias the load.
[33m5827311[m Runtime: Make the invasive cache pointer in ForeignTypeMetadata atomic.
[33m5e6f4ff[m IRGen: Mark calls to getForeignTypeMetadata as readnone.
[33mcacfd55[m CMake: remove unused option 'SWIFT_NEW_DRIVER'
[33m914f47f[m Runtime: Take the lock off the hot path of getForeignTypeMetadata again.
[33m1347b44[m Stop using the MODULES_SDK variable in -D flags for the C++ compiler
[33m05fd8fa[m Add tests for rejection of mixed type operations for all the types in SwiftIntTypes plus Float and Double, for binary non-logical operators in _The Swift Programming Language_ "Basic Operators." Until rdar://18695154 is fixed, + and - are disabled; this leaves 1440 tests. Approved by Dmitri.
[33m2c3e5d0[m Add missing keyword argument following changes for rdar://problem/18778670
[33m22f2452[m Only allow labeled parameters with function type to claim trailing closures, as opposed to any unlabeled argument.
[33mda2e3c4[m Revert "Only allow labeled parameters with function type to claim trailing closures, as opposed to any unlabeled argument."
[33mcfa22e0[m Add test for transparent inlining with ObjC-protocol substitution.
[33m6c3e43f[m Runtime: Fix race in conformsToProtocol failure case.
[33mf64bdb3[m Only allow labeled parameters with function type to claim trailing closures, as opposed to any unlabeled argument.
[33m0bafa4d[m Restore the module context and generic parameter list to protocol conformance mangling.
[33m9b2fed0[m <rdar://problem/18856858> ArrayBridging validation test temporarily XFAILed
[33m801dc3d[m Debug info: Actually encode the Swift version number instead of constant 1.
[33m679c662[m Runtime: Be more conservative in locking getForeignTypeMetadata.
[33mdf13cab[m IRGen: Stop marking witness table symbols as dynamically referenced.
[33me0c7bb7[m CMake: mark essential stdlib as target library
[33m90cb504[m Runtime: Switch swift_conformsToProtocol over to the new implementation.
[33m88ebe10[m Runtime: Put some conservative locking on the foreign type uniquing cache.
[33me773d9a[m IRGen: Unique the metadata for imported structs and enums at runtime.
[33mdb63818[m Remove old-style API notes infrastructure
[33m59e9044[m CMake: remove dead code from old-style apinotes build
[33m64bc43f[m CMake: use a less fragile way to check for the core standard library
[33ma2d27bf[m CMake: use translate_flag in handle_swift_sources
[33m01a0034[m [aa] Add ProjectionPath::computeSubSeqRelation() and use it to teach AA how to check for partial aliasing.
[33mbb47ce9[m COWArrayOpts: strong_release on the array is also harmless
[33m5f32f6b[m Fix the bots by requiring two options on this test that never can co-exist as true.
[33mef82526[m Runtime: Hack up support for conformance lookup on ObjC classes.
[33m4d4698b[m IRGen: Handle CF types and (improperly) imported value types.
[33mab892a7[m SILCombiner: Delete dead partial_apply more aggressively
[33mdfac918[m Runtime: Add ObjC weak referencing support to SwiftObject.
[33m2b3e4f0[m Update todo
[33m0885c56[m Runtime: Invoke objc_destructInstance before deallocating class instances.
[33mefa166c[m IRGen: Don't lazily emit witness tables.
[33m3b0b2e8[m IRGen: Remove redundant runtime registration in JIT code.
[33m0155444[m Runtime: Walk up superclass chains to find class conformances.
[33m4ad4b2d[m Remove newly dead swift::findAddressProjectionPathBetweenValues.
[33m5f70b01[m [load-store-opts] Refactor load store opts to use the new ProjectionPath infrastructure.
[33m139bf03[m Runtime: Cache nondependent generic witnesses for lookup.
[33mbb48674[m [aa] Move address projection path AA to use projection path infrastructure.
[33m596f406[m [aa] Refactor all projection path logic into a class called ProjectionPath.
[33m7b34373[m [aa] Add PartialAlias. This currently is not returned by any routine or used anywhere.
[33mf205082[m IRGen: Register JITed conformances with the runtime.
[33m03a5d72[m Get rid of virtual functions. Use CRTP instead.
[33me954ac9[m CMake: normalize checks for Apple operating systems
[33m3422429[m Remove assertion that can be triggered only by undefined behavior
[33m741ba42[m Simplify XCTest CMake code
[33m2dc7678[m Runtime: Handle the easy cases for protocol lookup.
[33m6dad51f[m Revert "Add a couple REQUIRES: CPU to tests."
[33me2b974d[m docs: fix ReST warnings
[33m4881c39[m Remove unnecessary elements form these CHECK lines.
[33m62b91da[m Make the debug scope requirements even stricter.
[33m9fe784e[m Debug Info: Make the local versions of variables in main appear as local. <rdar://problem/15859689> Local variables should list top-level variables
[33mdc8aa1f[m Add a couple REQUIRES: CPU to tests.
[33mc960a38[m [sil-simplify-cfg] Generalize simplifySwitchEnumToSelectEnum to simplify arbitrary simple switch_enum diamonds into select_enums. It supports now not only boolean-like enums, but any simple enums with integer case tags. This version of the patch fixes dominator tree related  problems that were found in the initial version of the patch.
[33m38f4ab8[m XFAIL this test so we can get perf numbers. It is due to a configuration issue on the buildbots.
[33m002598f[m [llvm-arc-opts] swift_unknownRetain returns a value. Make sure to propagate the result before deleting it.
[33mc8d180e[m Generalize the switch_int instruction into switch_value instruction, which may switch on arguments of builtin integer types or function types. The later is required for implementing a more efficient speculative devirtualizaiton implementation. Implement lowering of switch_value into LLVM code.  In case of integer operands, it reuses LLVM's switch optimizations. Support for switching on function types is not yet bullet-proof and will be refined in the subsequent patches.
[33m25d1d5e[m Move the check for required debug scopes into the SIL verifier.
[33m8b28801[m Coding style corrections #2
[33meb72d7f[m Coding style corrections
[33m0e05c73[m [load-store-opts] Change ForwardingKind to be a c++11 enum class instead of an enum.
[33m995f365[m Part of the fix for rdar://problem/18677108 (tests and more changes go to SourceKit). The swift’s part handles the cases when an implicit accessor was created, but its body is not synthesized; e.g. in case the owning PatternBindingDecl is invalid.
[33mf016754[m Add a new select_value instruction. This instruction should be the equivalent of select_enum, just for builtin int types. Such an instruction is needed e.g. to efficiently implement conversions of Int raw values to C-like enums.
[33m4370723[m Really fix this test by creating separate tests one for when the stdlib is compiled with checks and one where it is not.
[33m67c058f[m Fix no-asserts build after r23025
[33mec02730[m SILCombiner: fix_lifetime(alloc_stack) -> fix_lifetime(load(alloc_stack))
[33mdd2d62b[m SILCombiner: Collapse existential pack/unpack/ref_to_raw_pointer casts
[33m6c484e3[m Remove requirement-collection and generic signature creation logic from Sema.
[33m72e9ca5[m Move the computation of generic signatures into the archetype builder.
[33m9d83898[m [func-sig-opts] Fixup test.
[33mad2c4af[m [llvm-arc-opts] Remove swift_unknown{Retain,Release}(null).
[33m698dbaa[m [llvm-arc-opts] Standardize location of filecheck checks and use check-label.
[33m81568bf[m Runtime: Beginnings of protocol conformance lookup.
[33me9790e7[m [rc-id] init_existential_ref and open_existential_ref do not change rc identity.
[33mf33e630[m [func-sig-opts] Enable func sig opts.
[33md677cc7[m [func-sig-opts] Use the debug scope of the old function instead of the new function when turning the old function into a thunk.
[33mbf3ddb4[m SIL.rst: Fix up some omissions in the calling convention section.
[33m7bbf6da[m SIL.rst: Document instructions added for working with BridgeObject.
[33m26eae47[m Runtime: Conditionalize the ObjC-bridging parts of bridgeObjectRetain/Release.
[33m6fd9724[m Runtime: We don't need a metadata cache for block types if we don't have ObjC interop.
[33m2d480aa[m Remove duplicate checks for if a default no-argument initializer can be defined.
[33mae5ed11[m Don't include zero-byte fields in args to struct constructor.
[33m72387fa[m Link swift against libclangToolingCore instead of libclangTooling.
[33m037dfd7[m [llvm-arc-opts] Give a better flag name to be clear which arc opts one is disabling by passing in this flag.
[33mee5751d[m [llvm-arc-opts] Add a flag to turn off llvm arc opts so I can see how far we are from eliminating it.
[33mcaca3ea[m Include outer generic parameters in the generic signatures for nominal types.
[33md8a0c83[m Enumerate requirements in (roughly) the same order as we do when building generic signatures.
[33m1c712e0[m Archetype builder: add witness markers to requirement enumeration
[33mf270d7c[m Archetype builder: don't prematurely lower to a dependent type when enumerating requirements.
[33md2a7b58[m [stdlib] Remove all FIXMEs from doc comments
[33m73956eb[m [stdlib] Better predicate docs/name for lexicographicalCompare
[33m05abe4d[m [stdlib] public init for EmptyGenerator
[33m743d6af[m Fix typo
[33m4df8f66[m Replace the default-entry with a corresponding case-entry in switch_enum[_addr], if possible.
[33medb9a6c[m [pre-commit-benchmark] force needed CMake variable
[33mc77d7e3[m Revert a combination of 11 commits
[33m0bb4322[m UnXFAIL array_mutable.swift
[33mc4b4e90[m Revert "LOCAL: Revert "Adapt to llvm change "Remove the PreserveSource linker mode."""
[33me6c44a3[m COWArrayOpt: We could (and are now) also use a strong retain on the array storage
[33m9d78508[m LOCAL: Revert "Adapt to llvm change "Remove the PreserveSource linker mode.""
[33m5957b8b[m [stdlib] Array nil state elimination, part trois
[33me7fb0ea[m [stdlib] Array nil-state elimination II
[33mc962235[m [stdlib] Array nil-state elimination I
[33mf7bf9bf[m [stdlib] Still more nil buffer elimination
[33m8ced867[m [stdlib] Nix an unneeded typealias
[33m6b8502b[m Store a fatal-error function in slots of eliminated vtable and witness table methods.
[33m37762bd[m Adapt to llvm change "Remove the PreserveSource linker mode." The llvm commit message suggests that the linker mode might be re-activated again. Therefore I have only commented out the relevant code and not removed it.
[33m7a1463e[m [stdlib] Nix _ContiguousArrayBuffer._base, part deux
[33m838fc13[m [stdlib] Drop unused operators
[33mc06e899[m [stdlib] Kill _ContiguousArrayBuffer._base, part I
[33mcc0c66d[m [stdlib] destroy redundant property
[33m788cb84[m [stdlib] Fix idiotic bug in ManagedBufferPointer
[33m291063c[m [ClangImporter] Add more non-CF types, this time from CoreMIDI.
[33m2f41598[m [test] Always update modules when checking PrintAsObjC output.
[33m39649f6[m [ClangImporter] Handle empty selector pieces for AnyObject method lookup.
[33m97106b5[m [test] Add a driver test for -force-single-frontend-invocation.
[33m182d24f[m [test] Whole-module mode with private functions with the same name and type.
[33mc41b302[m Audit all SILPasses to ensure that new instructions are never created without a valid SILDebugScope. An assertion in IRGenSIL prevents future optimizations from regressing in this regard. Introducing SILBuilderWithScope and SILBuilderwithPostprocess to ease the transition.
[33m3548890[m Change uses auto to auto* where applicable.
[33m34b93f1[m Remove a stale and confusing comment.
[33m7c8364f[m [stdlib] More array nil-state destruction
[33m84a955d[m [stdlib] Construct HeapBuffer without AnyObject
[33m91e621d[m Reapply "[func-sig-opts] Teach func sig opts how to handle multiple @owned arguments."
[33meba89b1[m Implemented swift_once with C++11 call_once.
[33meaf22e9[m Make malloc_size a platform stub called swift_malloc_size.
[33ma7c7d66[m Fix non-darwin target-triple for out-of-tree.
[33mf40f3a9[m New implementation of dead function elimination, which includes dead method elimination.
[33mf82dbb8[m Revert "[stdlib] Make some structs public which adopt MirrorType, because the conformances are accessed in Reflection.nm"
[33mf0a3655[m [stdlib] Make some structs public which adopt MirrorType, because the conformances are accessed in Reflection.nm
[33me7ddfe4[m [stdlib] Make ArrayType public because it is accessed from tests.
[33mf2a0e33[m Revert "[func-sig-opts] Teach func sig opts how to handle multiple @owned arguments."
[33m82c0e90[m [func-sig-opts] Teach func sig opts how to handle multiple @owned arguments.
[33m46846c4[m Revert "[stdlib] _ArrayBufferType: drop baseAddress"
[33me79bdc8[m [func-sig-opts] Refactor func-sig-opts to make it easier to handle multiple @owned arguments.
[33ma014c65[m Expose canInstUseRefCountValues as swift::canNeverUseValues.
[33mea88457[m Add SILArgument::hasConvention() to easily check if a SILArgument's parameter info has the given convention.
[33m1adda3e[m [stdlib] non-nil ContiguousArray
[33m6daf5cf[m [stdlib] Don't use AnyObject.self as ClassMetadata
[33mf07b42e[m [stdlib] replace an assign with a swap
[33m60e79b7[m [stdlib] Replace an unsafeBitCast
[33m24570fe[m De-intrinsify and remove the _does*OptionalHaveValue functions.
[33mf2658bf[m SILGen: Use select_enum_addr instead of a library function for "does optional have value" queries.
[33m8802e97[m [build] turn stdlib internal checks OFF in Release
[33m35a2584[m [stdlib] Work around rdar://18619176
[33mf8f82a9[m [stdlib] ContiguousArrayBuffer: tiny logic cleanup
[33mac79309[m [stdlib] _ArrayBufferType: drop baseAddress
[33m2691142[m Unbreak build by update for LLVM API change.
[33ma71e88b[m [stdlib] Use ''' instead of """ to deconfuse Emacs
[33m1a9f96e[m [stdlib] Drop unneeded protocol requirement
[33m1c2ec91[m Update validation test for diagnostic drift.
[33me728728[m SILGen: Redispatch protocol class method and init requirements.
[33mdb4ff15[m SILGen: Implement partial application of generic methods.
[33mfd7ce02[m Runtime: emit BridgeObject metadata on all platforms
[33m44ca2ea[m Runtime: suppress BridgeObject metadata on platforms without ObjC interop
[33m9272228[m Demangle: extract std::string data without going through c_str() API
[33m1bbd69d[m [func-sig-opts] Enable function sig opts on fragile functions.
[33mc98ce54[m IRGen: Emit protocol conformance records.
[33m59f3ef1[m Print the source and target type names when a dynamic cast fails.
[33mdf016d3[m [stdlib] _ContiguousArrayStorageBase : NSArray
[33ma0a66e3[m Reapply "[func-sig-opts] Add SILFunction::findReturnBB to easily find the unique basic block containing a ReturnInst in a SILFunction."
[33m7b77423[m [stdlib] Kill redundant protocol requirement
[33mef30948[m Revert "[func-sig-opts] Add SILFunction::findReturnBB to easily find the unique basic block containing a ReturnInst in a SILFunction."
[33mc89c902[m Fix some 80+ errors. NFC.
[33md6c7c52[m Add operator lookups to the set of top-level names being used.
[33m2b47f3e[m Emit the list of nominals declared or extended in the primary file.
[33me654786[m Change temporary "swiftdeps" format to be YAML-compatible.
[33m241a627[m The list of decls provided by a file should not include private decls.
[33mca6639c[m Track types that we perform qualified lookup on from the primary file.
[33m9afdd1b[m Print the top-level names "provided" by a file along with its references.
[33mfc09bd4[m Add basic reference tracking based on name lookups.
[33m42011d9[m Constify the mangler. No functionality change.
[33mc42bdcf[m [func-sig-opts] Add SILFunction::findReturnBB to easily find the unique basic block containing a ReturnInst in a SILFunction.
[33mcbcfa97[m Don't allow bare generic type syntax "<T1>T2" in Swift, only SIL.
[33m3a7647e[m [sil-mode] Add syntax highlighting for ref_to_unmanaged and unmanaged_to_ref.
[33m3f36560[m [simplify-inst] Simplify ref <=> unowned and ref <=> unmanaged round trips.
[33mdf42e26[m Runtime: Define a type for protocol conformance records.
[33m9bcccad[m [CMake] Fixed typo in the description for the CLANG_APINOTES variable.
[33mec4e5c0[m [Frontend] Add option and test for the "-playground without the transform" mode.
[33m0e55e05[m [Frontend] Allow explicit control for enabling the playground instrumenter.
[33m60cb1a6[m Support for eliminated witness methods in SILWitnessTable.
[33m6786969[m [stdlib] Introduce _SwiftDeferredNSArray
[33mce99c04[m [stdlib] mv files NSSwiftXXX => SwiftNativeNSXXX
[33m418aa75[m [stdlib] Rename _NSSwiftXXX => _SwiftNativeNSXXX
[33m43c9d38[m [stdlib] Drop needless "Swift" from some names
[33m393c520[m [stdlib] Separate source file for shadow protocols
[33m44c0ab4[m [stdlib] Internal protocol renaming
[33m3eea8e3[m Set SILLinkage of witness tables according to the protocol visibility.
[33m7081022[m highlight the ranges of the LHS/RHS of binary expressions when they statically overflow and diagnosed with an error, e.g.:
[33m4988637[m [sil-mode] Highlight select_enum.
[33m5bd06b1[m [rc-id] Strip off instructions (not arguments) before checking dominance. This resolves the recent regressions resulting from my fix commit.
[33maf10399[m [rc-id] Teach RCId how to strip off StructInst, TupleInst, and TupleExtractInst.
[33m5266a0d[m Fix documented nominal type descriptor offsets in ABI.rst.
[33mf6813e1[m Typo in comment
[33m1a24b1b[m IRGen/Runtime: Expand the private data area in metadata caches.
[33mf761fc0[m IRGen/Runtime: Put a reference to the metadata pattern in the nominal type descriptor.
[33mebde372[m [stdlib] Add space to Core Graphics type printing
[33md3d031c[m [CMake] Set SWIFT_REPL_ARCLITE based on SWIFT_DEPLOYMENT_OS instead of hard-coding "macosx".
[33m1fd4cf1[m [CMake] Added a CMake variable, CLANG_APINOTES, for selecting the Clang used by API notes compilation.
[33m1f6238f[m [rc-id] Check dominance before recursively stripping instead of vis-a-versa.
[33m7d1471c[m Note that Bridge refcounting has a bit to discriminate refcounting kind.
[33m2de7b31[m Update typed-access-tb-aa.sil test for correction to UnknownObject alias analysis.
[33m02d5104[m Fix linkage of vtable methods.
[33maa7aa29[m [stdlib] Delete the FastEntryPoint files for real this time.
[33mc6a8826[m [stdlib] Scrap bit-rotted FastEntryPoints.s. Rewrite refcounts using __atomic.
[33m5f2b0e8[m [test] Fix run commands in Interpreter/builtin_bridge_object.swift.
[33m657070a[m [ClangImporter] Recognize OBJC_ENUM/OPTIONS along with CF_ENUM/OPTIONS.
[33m56f7797[m Remove trailing whitespace. NFC.
[33m5d087cd[m Add in -*- C++ -*-. NFC.
[33m79688b6[m [cmake] Add option boolean DISABLE_ASLR to add_swift_executable.
[33mfc369ce[m Give Builtin.BridgeObject nil as an extra inhabitant.
[33m5a2f48e[m Add a Builtin.BridgeObject type.
[33m0b7836b[m Addendum to r22877 to make test independent of stdlib.
[33mb9d86b0[m Remove lvalue-bindable bit from type variables for function parameters.
[33ma2129fa[m Fixed a crash in SourceKit caused by leaving invalid accessors in AST in some scenarios (<rdar://problem/18640140>).
[33m9857aaa[m [StdlibUnittest] Use _UnitTestArray now
[33m981a156[m [stdlib] Add _UnitTestArray[Buffer] temporarily
[33m4becea9[m [test] Rewrite test from r22857 to not rely on the SDK.
[33mcc23b8a[m Replace some unqualified lookups with direct lookups.
[33mca4df0c[m stdlib: use 'count' for parameter name consistently
[33mf88190a[m Reapply "stdlib: libm's sqrt and llvm.sqrt are not semantically equivalent""
[33m05bf3a3[m Stop leaking lookup caches; attach them to the ASTContext instead.
[33m448822b[m Fixed an issue in IfConfigStmt parsing leading to source ranges verification assertions (rdar://problem/18251200).
[33mc799f36[m [StdlibUnittest] Try to use ContiguousArray
[33mc5e3700[m [CMake] Use the correct path for opt when setting up llvm-opt, when using xcodebuild.
[33md95b9c9[m Revert "stdlib: libm's sqrt and llvm.sqrt are not semantically equivalent"
[33mb0e5358[m stdlib: libm's sqrt and llvm.sqrt are not semantically equivalent
[33m07cd80e[m Update a CHECK line in this testcase for compatibility with r22855.
[33ma0b9c04[m Added temporary -enable-destroyhoisting flag (NFC).
[33ma32a566[m CopyForward: reset postorder traversal each iteration.
[33m40c27c8[m Added -enable-specializer flag.
[33m08108ec[m XFAIL this test to unblock the bots.
[33mb23dc5c[m Minor fix in implicitly unwrapped optional suffix parsing (rdar://problem/18634543)
[33md4792fb[m [serialization] Always serialize conformance data for imported decls.
[33m9d9f9ef[m Re-apply "[serialization] Reject loading a module with the wrong case."
[33mc3a4ae0[m Remove a hack that was obsoleted by LLVM r219798.
[33md238a3f[m Don't emit line numbers for subprograms that are thunks / bare functions. <rdar://problem/18670152> Stack trace is a lie
[33mac86dc2[m Raise an error on declaring a protocol initializer with default args.
[33me871742[m Fix diagnostic category typo "parseing" -> "parsing".
[33m477594a[m SILCombiner: Simplify select_enum_addr -> load + select_enum for loadable types
[33m7b790e1[m Revert "[sil-simplify-cfg] Generalize simplifySwitchEnumToSelectEnum to simplify arbitrary simple switch_enum diamonds into select_enums."
[33m9572cc8[m [cmake] Suppress an unused variable warning
[33mc127b80[m [buildbot-script] add --reconfigure option
[33md76fa20[m [buildbot-script] Suppress "set +x" noise
[33m59f834e[m [buildbot-script] Display issued commands
[33m93b864f[m Temporarily disable one of this tests RUN lines until <rdar://problem/18709125> DCE is dropping debug intrinsics, Was: DebugInfo/closure-multivalue test is failing is resolved.
[33m55d035a[m [build scripts] Debug swift + RelWithDebInfo llvm
[33m108f424[m [sil-simplify-cfg] Generalize simplifySwitchEnumToSelectEnum to simplify arbitrary simple switch_enum diamonds into select_enums. It supports now not only boolean-like enums, but any simple enums with integer case tags.
[33m5f03e42[m SimplifyCFG: Don't early exit before splitting critical edges
[33m383ebdc[m Revert "[stdlib] ArrayBuffer: replace unsafeBitCasts"
[33mfc862c1[m [stdlib] bisect replacement of bitcasts 0..<2 of 6
[33m7573d42[m Fix checks for globalinit_* functions. I missed this in my commit r22795: Mangle names of globalinit_{token,func} like other private entities.
[33mdaeed72[m Simplify and chose a better name for invalidating the Deserializer's function cache.
[33m6b6581a[m Invalidate the deserializer caches after each SIL linking pass. This avoids that the deserializer(s) keep references to deserialized functions during the whole optimization passes (especially dead function elimination).
[33m5ef5df8[m [stdlib] bisect replacement of bitcasts 0..<3 of 6
[33m4a1d2e6[m [stdlib] ContiguousArrayBuffer: truthful types
[33mb9bdbb8[m Revert "[stdlib] ContiguousArrayBuffer: truthful types"
[33m4d2dff1[m [stdlib] HeapBuffer: no lying to the type system
[33m00e1b67[m Revert "[stdlib] HeapBuffer: no lying to the type system"
[33m69735ae[m Revert "SILGen: Use select_enum_addr instead of a library function for "does optional have value" queries."
[33m8b9772d[m Revert "De-intrinsify and remove the _does*OptionalHaveValue functions."
[33m7a24c85[m De-intrinsify and remove the _does*OptionalHaveValue functions.
[33m05bacc4[m SILGen: Use select_enum_addr instead of a library function for "does optional have value" queries.
[33m3f23b82[m SIL: Rename SILGlobalAddr to GlobalAddr.
[33mb9d5a7a[m Revert "[stdlib] ArrayBuffer: replace unsafeBitCasts"
[33m8119458[m [stdlib] HeapBuffer: no lying to the type system
[33m14043e8[m [stdlib] ArrayBuffer: replace unsafeBitCasts
[33mf765ffd[m [stdlib] ContiguousArrayBuffer: truthful types
[33m7eb173e[m Revert "[serialization] Reject loading a module with the wrong case."
[33m7fa4028[m stdlib comments: remove a false statement that fatalError is a no-op outside of debug mode
[33m86a37df[m stdlib: fix grammar in comments
[33m7188785[m stdlib: clarify that toString and toDebugString are better alternatives to Printable and DebugPrintable
[33m5aa27ce[m [serialization] Reject loading a module with the wrong case.
[33mc371dd4[m Remove unused function
[33ma623886[m Teach the LLVM level ARC optimizer about swift_fixLifetime.
[33m7b59959[m Move createSwiftAliasAnalysisPass from LLVMARCOpts.cpp => LLVMSwiftAA.cpp
[33m90a34d8[m Mangle names of globalinit_{token,func} like other private entities. This allows making global addressors fragile (They use globalinit_{token,func} for initialization of globals).
[33mafe73f3[m [stdlib] Disable a check on i386, where it breaks
[33m5cac4f4[m LLVMPasses: Replace some assert(0)'s with llvm_unreachable
[33m37daef2[m Reapply "[rc-id] Enable RCIdentity analysis."
[33m8a2c6d2[m Simplify RUN line.
[33mf88dabb[m Top-level variable declarations should show up as local variables with static scope for the main() function in DWARF. <rdar://problem/15859689> Local variables should list top-level variables
[33m5e023e2[m Set the human-readable name for main, because the function is scope-less. Testcase in the following commit.
[33m0e618cd[m Add the flag DONT_STRIP_NON_MAIN_SYMBOLS to add_swift_executable.
[33m0b12dd1[m These casts are not rc identity preserving we can't strip them
[33m329fa51[m Reapply "Verifier: Cannonical SIL should have split critical edges for non cond_br terminators"
[33me4588e4[m Revert "Mangle names of globalinit_{token,func} like other private entities."
[33m15f7847[m [stdlib] Disable a check on armv7, where it breaks
[33mbfe8a27[m [serialization] Don't try to cross-reference generic params of SIL functions.
[33md3fcfc8[m Handle toplevel locations in InlinedLocation. This fixes a crash that with the unoptimized stdlib caught by the buildbots.
[33md80af7b[m Simplify handling of SILFIle locations in SILLocation.
[33mea65d1e[m SIL: Remove the builtin_function_ref instruction.
[33m1a26fc2[m Remove workaround for closed <rdar://problem/16094902>
[33mb5cfd00[m Mangle names of globalinit_{token,func} like other private entities. This allows making global addressors fragile (They use globalinit_{token,func} for initialization of globals).
[33m2ae07c2[m Make _HashingDetail.fixedSeedOverride public because it is accessed in validation-test/stdlib/Hashing.swift.
[33mf80b3f5[m Make checks invariant to the file ordering in debug info test.
[33m215929b[m Revert "[StdlibUnittest] Try to use ContiguousArray"
[33m6919428[m [stdlib] Nix an unused protocol and rename another
[33m7890b01[m Add -gnone to a test that tests that we don't emit debug info if we don't emit debug info. <rdar://problem/18636257> ☂ Audit the results of running tests with SWIFT_TEST_OPTIONS=-g
[33mc3760fe[m Add -gnone to SIL testcases that do not work with -g. <rdar://problem/18636257> ☂ Audit the results of running tests with SWIFT_TEST_OPTIONS=-g
[33me3f9a20[m SIL: Move SILGen and passes over to use "builtin" instead of "apply (builtin_function_ref)".
[33m8a27fb8[m [stdlib] Integrate BridgeStorage into the stdlib
[33m414b163[m reflow comment
[33m4ccf572[m Reapply r22739 using the new DebugLoc mechanism in SILLocation.
[33md1c9f71[m Enhance SILLocation so it can hold separate locations for diagnostics and debug info. Drop most of the special SILLocation handling from IRGenDebugInfo and eliminate lots of redundant code.
[33m1007acb[m Revert "Verifier: Cannonical SIL should have split critical edges for non cond_br"
[33m56c4cb2[m [stdlib] Kill off _isUniquelyReferenced
[33m4e31ae0[m [stdlib] ArrayCast discipline
[33mfe68e75[m Add a -gnone option that can negate a previous -g option.
[33mdfa1166[m Archetype builder: introduce "redundant" requirements to better track the requirements written in the source.
[33mf4a8555[m Verifier: Cannonical SIL should have split critical edges for non cond_br terminators
[33m0c94e53[m [sil-opt] Add a -resource-dir option.
[33m506a1b0[m [stdlib] Modernize ArrayBuffer uniqueness check
[33m59ed849[m [emacs support] parse more StdlibUnittest output
[33m4bdb946[m [stdlib] ArrayBufferType: identity is base address
[33m543f6b3[m [stdlib] Don't nest Array inside ContiguousArray
[33mcf8e450[m [StdlibUnittest] Try to use ContiguousArray
[33mdbd2866[m [test] Fix arm64 TBI test to emit assembly again (rather than IR).
[33m9262300[m Fix incorrect use of std::move.
[33mea2106c[m Comment parsing: transform testcases automatically to include non-ASCII characters
[33m3da435d[m stdlib: Fix doc comment on Dictionary.init()
[33m2af40ae[m Revert "Revert "SimplifyCFG: Don't count 'free' instructions during jump-threading""
[33m1dedc7a[m Mem2Reg: Split critical non cond_br edges
[33m088f777[m SimplifyCFG: Split critical edges before updating SSA form
[33m664d718[m SimplifyCFG: Add a pass to split all critical edges
[33mac34b02[m Add utility function to split all critical edges in a function.
[33m214a8c5[m CFG: Allow splitting of critical edges for all terminators
[33mad0e20a[m Make isa work with SwitchEnumInstBase.
[33m6145377[m LoopRotate: Fix volatile method instructions and open_existential cloning
[33m40c7050[m IRGen: Fix unpacking of optional existential metatypes.
[33me9f06ee[m Comment parsing: implement basic parsing of inline markup
[33mfea8a86[m Add an array bridging race test that I forgot to add and commit some time ago
[33m350c41c[m Revert "Change the SILLocations for enum element dispatches to make the line table"
[33m1fa082b[m Fix a RUN line missed in the test/[1_]stdlib reorg
[33m279ba3b[m [stdlib] Add tests to diagnose a bot failure
[33m903459d[m [stdlib] ManagedBuffer updates
[33mab69e26[m [stdlib] Actually run the ArrayCore test
[33me83c117[m [test] Hack: run stdlib tests first to start long-running tests earlier.
[33mb7a63a7[m [test] Drop -parse-stdlib from %target-run-stdlib-swift.
[33m3671607[m [test] Drop -enable-source-import from almost all tests that use IRGen.
[33mec0d980[m Add a testcase for <rdar://problem/18444716> Return locations may have smaller line numbers than cleanup locations
[33ma64a269[m Debug info: Use the end of a call expression as the location for a call.
[33md0a3cd6[m Change the SILLocations for enum element dispatches to make the line table more consistent. emitEnumElementDispatch may be invoked several times so it should use the location of the first pattern rather than TheSwitch.
[33md6e5caf[m Assert monotonically increasing line numbers within the same basic block at -Onone. This is currently turned off by default because it also reports false positives, but it is an incredibly useful mechanism to find linetable bugs.
[33m7c52fa8[m Switched over to direct execution in the RUN line for the -parseable-output Unicode test.
[33mc79e208[m enhance SILGenFunction::emitLoad to know how to produce a loadable value as +0 when the client requests it.  This avoids emitting some pointless retain/releases.
[33m88df3e4[m teach SILGenFunction::emitIgnoredExpr to try a bit harder to avoid emitting LoadExprs (unless they have a side effect that must be emitted).  This is good for -O0 code quality in general, but is important to avoid materializing 'self' values in initializers that semantically don't have to happen.
[33m657e3f2[m Attempt to fix the ASan buildbot by disabling sanitation of globals.
[33m558439b[m simplify the implementation of emitMetatypeOfValue a bit, NFC.
[33m6912253[m teach DI that value_metatype doesn't require its argument to be fully initialized, allowing some cases of "self.dynamicType" in initializers before self is fully initialized.  There is still more to do.
[33m63d3c86[m Simplify SILGen to always emit the base of a dynamicType expr at +0, avoiding some retain/releases.  There is nothing that requires a +1 base and the extra retain/release occasionally get in the way.
[33m5a34002[m [Sema] Update wording of diagnostics for useless #os() checks
[33md562acb[m [Sema] Change diagnostic of useless #os() check to indicate why it is useless.
[33mbc26ff6[m [ClangImporter] Since we can handle them now, enable clang diagnostic warnings in the importer.
[33mbec6758[m Enable tests which use ~= for Ranges.
[33md2a7fd7[m Remove x bit in file permissions of some test files.
[33mff6d226[m Use SILModule::isWholeModule() to check for whole-module compilation in Devirtualizer
[33mb51b3ed[m Mark public compiler intrinsics with // COMPILER_INTRINSIC
[33m8f275da[m [Parser] Update #os(...) parse tests for r22720.
[33mb74feaf[m [ClangImporter] Make sure to use the right clang::SourceManager when resolving a diagnostic-related source location during clang module building.
[33mf4e061f[m [Sema] Add diagnostic for #os() used outside of if statement guard.
[33m6ae6fa7[m [Sema] Add warning for #os() checks that always pass.
[33m71116b4[m [Sema] Use type refinement context of storage as parent for accessor functions.
[33m330752b[m Revert r22710 and r22711 implementing ObjC weak ref methods on SwiftObject.
[33ma536a67[m Revert "SimplifyCFG: Don't count 'free' instructions during jump-threading"
[33m5bf693d[m SimplifyCFG: Simplify CondBranchInst's condition
[33m90440fd[m InstSimplifier: Simplify select_enum instructions
[33m84b8f39[m Revert "Add requirements among distinct associated types with the same name."
[33m1e06048[m SimplifyCFG: Don't count 'free' instructions during jump-threading
[33mcb84803[m Fix -[SwiftObject allowsWeakReference].
[33m82f6260[m Runtime: Add ObjC weak referencing support to SwiftObject.
[33mf2a046a[m [stdlib] Remove obsolete workaround
[33m5c7738c[m Correct a gyb-o
[33mf765fc8[m [Sema] Add tests for version-based availability checking of ObjC imported APIs.
[33m4833f31[m Allow private_external to be parsed and processed correctly
[33m5b9cd8d[m Revert "[CMake] Remove shims/ folder as an explicit output of copy_shim_headers."
[33mb7b226d[m Runtime: Provide ARC methods for the root metaclass.
[33me2f5a06[m Massage this testcase so it works on both trunk and 602.
[33m99c09e0[m Massage this testcase so it works on both trunk and 602.
[33m4343d4b[m fix: select_enum_addr_inst does not specify that it reads from memory
[33m45963a4[m Revert "comment parsing wip"
[33m3dac00f[m comment parsing wip
[33m1d02589[m Make LLVM-level linkage of fragile Xyz and XyzExternal symbols match
[33md55ba99[m LLVMARC: Don't bail on obj_retain/release or unknown_retain/release
[33me5084ae[m CodeMotion: Make release sinking more aggressive by looking through casts
[33mbb46f4b[m SIL: Remove the global_addr instruction.
[33m6ee6f3d[m [SILGen] Add SILGen for potentially unavailable global functions.
[33m863db9d[m [Sema] Add tests for unavailable types in inherits clauses.
[33ma60a52d[m SIL: Add a "builtin" instruction to represent builtin invocations.
[33m9f8641f[m [IDE/CodeCompletion] Fix crash when picking up declarations from the protocol conformances of a type declared in a non-primary source file.
[33m633e672[m [Frontend] Set the primary file to the code-completion point if one exists.
[33m807434e[m Work around an elusive crash in DwarfDebug::endFunction(). <rdar://problem/18592152> Unchecked Swift builder is sometimes crashing in AsmPrinter::EmitFunctionBody
[33md1cef59[m Do copy forwarding across inout args.
[33mfea5de2[m stdlib and runtime: coding style fixes
[33m8d68624[m stdlib: fix doc comment syntax and coding style
[33m5c33278[m [stdlib] Add ManagedBufferPointer
[33m8ab25ab[m [Sema] Make method availability version ranges contravariant.
[33mb938132[m Eliminate RootPotentialArchetypes; we can simply give PotentialArchetypes a defined ordering.
[33maf898ff[m Add requirements among distinct associated types with the same name.
[33m4fcbf5a[m [Sema] Add checking for declarations with potentially unavailable types.
[33m0968847[m QoI: Typo correction for mistyped associated types.
[33m7d6ca8c[m Reinstate r22662 "Preserve the names of zombie functions and use them as linkage names in the debug info.""
[33maf8a363[m Replace another “find the associated type!” loop with a query into the archetype builder. NFC
[33m489e82c[m Use the archetype builder’s type resolution more directly.
[33m95e333b[m Archetype builder: remove uses of lookupQualified to find associated types.
[33m70fd4a4[m [test] Fix previous commit to pass -tbi instead of +tbi.
[33m3fa1df6[m [test] Fix test that explicitly wants to turn off TBI on arm64.
[33mc459a57[m SILGen: Allow castFromNativeObject to AnyObject.
[33m5338a29[m Revert "Preserve the names of zombie functions and use them as linkage names in the debug info."
[33me102c52[m Improve parsing of '>>?!>?' jumbles in type context.
[33mc1de49e[m Teach -debug-generic-signatures to dump information for types, too.
[33m8866920[m Make IsRecursive a single bit and use more LLVM-ish naming. NFC
[33m40ab2db[m Factor out a visitor for all potential archetypes.
[33m475cf10[m Add dwarfdump --verify to the Foundation testcase.
[33mc7761d9[m [Sema] When looking up member types, use associated types as a last resort.
[33m81e3216[m [Sema] Don't validate decls that conform to known protocols ahead of time.
[33mbdfb461[m Preserve the names of zombie functions and use them as linkage names in the debug info.
[33ma69fc98[m Fix wrong argument labels in ARM specific code in stdlib.
[33m78aee1a[m [sil-dce] Fix a bug in DCE. Replace dead BB args of basic blocks with Undef.
[33md686157[m Enable whole-module-optimizations for the stdlib and for tests.
[33me59c4b6[m Add -primary-file options to prevent whole-module-optimizations. This is needed for tests which define internal functions which should not be eliminated.
[33md0697f2[m Make internal stdlib functions public, which are called from the stdlib tests. And make sure that all those public identifiers are preceeded with underscores.
[33m3d80081[m Make compiler intrinsic _getBool public.
[33ma0e161d[m Resolve regression resulting from enum_is_tag to select_enum transition.
[33m0542dc4[m Fix comment.
[33maa6c57f[m Remove special-casing of avaliable_externally functions when emitting debug info for them and unconditionally emit debug info for all functions.
[33mf6c7a99[m SIL verifier: Add check for constant argument requirement of llvm instrinsics
[33mf8fe884[m Add availability checking for references to classes to Sema.
[33m963d8c7[m Continue parsing type-simple after parsing a collection type.
[33mf9a6d88[m Archetype builder: unify different associated types with the same name across protocols.
[33m1d77f04[m Teach pattern resolution to use the correct generic type resolver.
[33m6bf12fa[m Avoid emitting -Onone shadow copies twice and fix a notorious line table issue as a side-effect. <rdar://problem/16963544> TestSwiftStepping fails
[33mf4518aa[m Stop banning optional multidimensional array types.
[33m02808fb[m Remove resolvePotentialArchetypeToType() in favor of PotentialArchetype::getDependentType()
[33m59a355a[m Eliminate the notion of an archetype "index"; it's useless now. NFC
[33m1380f75[m Archetype builder: resolve nested types to associated types directly.
[33m57ff959[m Add conformances with ArchetypeBuilder::PotentialArchetype::addConformance().
[33ma449e91[m Archetype builder: replace generic parameters vector with root potential archetypes.
[33mf844ab4[m Store the generic type parameter type for non-associated potential archetypes.
[33mc4cd133[m Archetype builder: enumerate requirements directly from the potential archetypes.
[33m91ddaf5[m Archetype builder: start tracking the locations and reasons for specific requirements.
[33mafa1ba6[m Drop stdlib internal access for two tests
[33m2d85042[m [stdlib] Internalize HeapBuffer[Storage], OnHeap
[33mdb3ca38[m SILSSAUpdater: Clone constants to their users
[33m3f36a4d[m Use %target-run-stdlib-swift in more tests
[33m4bd1dbd[m API Notes: correct more mis-audits
[33m7ca765f[m stdlib/Character: fix code style
[33m16f0bf1[m Add additional sanity checks to the debug scope creation while fixing an off-by-one error in the boolean condition.
[33m8bd1646[m Revert "Add additional sanity checks to the debug scope creation."
[33m5736787[m [stdlib] Make 'Character' a struct
[33m1f38b12[m [stdlib] Fix typos in sanity check strings
[33m17c16c7[m remove redundant check.
[33mcad7462[m Add additional sanity checks to the debug scope creation.
[33maa3241e[m Remove the isAvailableExternally guards for emitting debug info. Functions with external availability are emitted into IR so they can be inlined by LLVM, hence we do want debug information present there.
[33m943cf63[m Revert "[func-sig-opts] Temporarily enable function signature opts."
[33m2e3acba[m Add availability checking for properties to Sema
[33m4968d8f[m Link in the right places and correct -Xlinker.
[33m587c818[m [stdlib] Use addressors in HeapBuffer
[33md410ee7[m Move FixedPointDiagnostics to the validation testsuite
[33mdc4dde5[m Remove dead code. NFC.
[33ma124a20[m Clean up debug dumps.
[33m9205bf6[m SIL: Remove enum_is_tag.
[33mc2fc9f5[m SIL passes: Work with select_enum instead of enum_is_tag.
[33md4316bd[m [func-sig-opts] Temporarily enable function signature opts.
[33m689621e[m Debug Info: Make several soft assertions into hard ones.
[33m5197c09[m Clean up this testcase.
[33mbb72646[m Ensure that the line table for the new SIL-generated main function begins with user code and that the boilerplate is counted towards the prologue.
[33m0420d9f[m Make the intention of the fallback logic for computing the linkage name of a function clearer.
[33m993d9c5[m [func-sig-opts] If we already made a specialized version of a function, do not respecialize, just bail.
[33maece1e2[m Correctly mask off the witness-table bits in class existential (and existential metatype, and unowned class existential) values when checking for extra inhabitants.  We don't guarantee the meaningfulness of these bits.
[33mb07fd30[m Change ASTWalker to preserve AbstractFunctionDecl body kinds when walking.
[33mf8ce21d[m [CMake] Remove shims/ folder as an explicit output of copy_shim_headers.
[33m7676c82[m Add compile time config flag for detecting objc-interop.
[33m5f0439c[m Debug info: Emit proper locations/scopes also for available_externally functions. Otherwise LLVM will get confused when inlining these functions.
[33m9f88e12[m Fix the assertion failure reported in rdar://18566121 by being more restrictive when stripping casts to obtain a static class of the instance.
[33med22906[m Add helper methods to strip upcasts. This is required for upcoming devirtualizer patches.
[33ma99d86d[m Fix wrong updated linkage for globals in a serialize-all compilation.
[33m7de8c10[m [func-sig-opts] If we already have a specialization of a function, reuse it and convert the current Function to a thunk. This ensures we can ignore whether or not the function was originally a thunk which could potentially be fragile. This should only occur rarely so we should not be doing more work in the common case.
[33mb350841[m stdlib: remove old migration aid for ConstUnsafePointer
[33m445afdc[m Delete the old call graph code.
[33m20d2b07[m Use the new call graph in the performance inliner.
[33m3007f65[m Move the generic specializer to using the new call graph.
[33m7284f31[m Make output order of specialization less fragile.
[33m74e27aa[m [stdlib] uniqueness checking for users
[33m9d43ae4[m Fix 80-column violations in generic specializer.
[33m89e60f3[m Add protocol witness tables to existential metatype layouts.  Introduce new SIL instructions to initialize and open existential metatype values.
[33md39d570[m Debug info: Stop abusing the Local flag for the calling convention. The calling convention is encoded into the mangled name.
[33mac683e8[m Make this test a bit more deterministic. <rdar://problem/18559019> DebugInfo/closure-multivalue.swift failing with recent ToT changes
[33m19e595d[m [SILParser] enable sil_stored for structs.
[33mc0c5ef8[m [SILParser] parse address and mutableAddress without a body.
[33mc406e3b[m [SILPrinter] do not print implicit @objc.
[33m695cced[m [SILPrinter] we print all top level function decls.
[33mbbe9479[m [Parser] parsing A<C, B<V>?>?.
[33me734d48[m [SILParser] work around issues when comparing PolymorphicFunctionType.
[33mef3ff24[m CMake: don't use target_link_libraries on a "target" library.
[33m512da79[m [stdlib] Switch some shims to use id
[33me4d8ea4[m [stdlib] Add a FIXME
[33mca8b168[m SIL: Add select_enum and select_enum_addr insns.
[33m7cae8fd[m update for upstream API change.
[33mcc9bc0c[m [stdlib] Kill _swift_isUniquelyReferenced @asmname
[33m6c235c8[m [stdlib] Migrate some @asmnames into SwiftShims
[33mb108945[m [stdlib] Break up shims.h
[33m83eec23[m [stdlib] Revert "Gyb ManagedBuffer..."
[33ma7a032d[m Temporarily undo no-whole-archive change.
[33m1134fbd[m Use clang++ to link swift modules/programs.
[33m27116c7[m API Notes: Correct audit errors
[33m1952296[m API Notes: Add WebKit audit
[33m8d806d0[m Enable emission of debug locations for externally available functions. This fixes LLVM assertions as outlined in the comment.
[33mf477b26[m Fix two IR correctness bugs related to not using the LLVM datatype in DebugTypeInfo.
[33m2f14ba9[m Rename variable for consistency.
[33m4e4ebd8[m MicroStdlib test: refactor RUN lines according to Jordan's review
[33mf444a38[m [func-sig-opts] Restrict the set of functions that we will optimize.
[33m05f25e9[m Add the utility SILFunction::isPossiblyUsedExternally().
[33m206d6c3[m [serialization] Serialize shared_external as shared.
[33madd7539[m [stdlib] Use a lifetime-managed "with" construct
[33m269c372[m [func-sig-opts] Extract out utility method removeDeadBlocks() from simplifyCFG so I canuse it in FunctionSignatureOpts.
[33mb4c0663[m Add a helper method SILInstruction::replaceAllUsesWithUndef().
[33ma134598[m Parser: parsing addressor and mutableAddressor.
[33mc7c30bf[m [verifier] shared_external is a valid linkage for a fragile ref like shared since both are semantically the same things.
[33m6a04c00[m Add SILGen for UnavailableToOptionalExpr.
[33m652f875[m [global-variable] When deserializing global variables, only deserialize if the current module does not have a gv with the same name.
[33m1bd44a8[m [func-sig-opts] When creating a new argument, pass in the decl from the old argument.
[33mc97ab1f[m [func-sig-opts] When splicing BB from one function to another, change the debug scope of each instruction to be the debug scope of the new function.
[33m2bb3269[m Add code to the verifier to make sure that functions with shared visibility always have bodies.
[33m8fa7112[m Fix 80-column violation
[33mdc4d381[m De-intrinsify the _injectValueInto functions.
[33mbbcd3af[m SILGen: Use SIL instructions to directly inject optional values.
[33m0aa115c[m Add diagnostics for potentially unavailable initializers.
[33m50b2ca7[m Add a micro-stdlib to the validation testsuite
[33maacb5ef[m Runtime: use std::max_align_t on Apple platforms and a replacement otherwise
[33m41fe389[m [stdlib] Synchronization-free empty array buffer
[33mab045d9[m [stdlib] Tiny formatting fix
[33md669b8f[m [stdlib] Always inline _isClassOrObjCExistential
[33m08ed3e5[m [stdlib] Use addressor for ManagedBuffer
[33m01f6f81[m [stdlib] Gyb ManagedBuffer for Array storage
[33mfec872a[m RCIdentifyAnalysis: Don't strip raw_pointer_to_ref
[33m2962317[m Revert "Runtime: add a static assertion that swift_max_align_t is correct for"
[33mbca99fd[m Runtime: add a static assertion that swift_max_align_t is correct for Darwin
[33ma6a68d4[m SILGen: Avoid using a stdlib function to get optional values.
[33m5c9c675[m Revert "Remove type check workaround for invalid casts"
[33m08f7410[m stdlib: fix coding style
[33m069ad18[m Revert "SILGen: Avoid using a stdlib function to get optional values."
[33m28805f0[m SILGen: Avoid using a stdlib function to get optional values.
[33md3a54b0[m Remove stray dump.
[33m335fa9d[m Update test for debug info change.
[33m9180f07[m Some clean-up of box-to-stack promotion.
[33m9ce17cf[m Stub implementation of _swift_classConformsToObjCProtocol
[33me186886[m Set triple from llvm on non-darwin platforms.
[33m22c7a75[m Don't do foundations or objc linking on linux.
[33meac8ca2[m [stdlib] Use a universal empty array buffer
[33mcac5807[m SILGen: Emit "main" as a SIL function.
[33m6d7a952[m Runtime: move swift_getObjectType() to a C++ file
[33m0a38068[m [sil-devirtualizer] Always try to devirtualize the invocation of a method from a static class of an instance, even if the default case cannot be devirtualized completely.
[33m88d8a28[m [sil-devirtualizer] Devirtualize the "default" case (i.e. none of the checked_cast_br checks match the class) when performing speculative devirtualization, whenever it is possible.
[33m5e91fd3[m Extend ClassHierarchyAnalysis to provide information about indirect subclasses. This is used e.g. by the upcoming devirtualizer changes.
[33m6cabeee[m Add a few helper methods for finding method implementations or overrides inside a given class or its superclasses. This can be used e.g. by the upcoming devirtualizer changes.
[33m972d460[m [IDE] Adjust CodeCompletionString::getFirstTextChunkIndex() to consider chunks containing the parameters or the left parent for a constructor call.
[33mbef9edd[m Revamp the CopyForwarding pass, NRVO, various corner cases, unit tests (NFC).
[33mbfa7525[m Fix -sil-print-only-function to print SIL before transforming it.
[33m43b928b[m Added ApplyInst::getArgumentOperandNumber to avoid hard-coding this in many places.
[33m89a53d1[m Make StoreInst operand position enum public for the same reason as CopyAddrInst.
[33m245097d[m Add a UnaryInstructionBase::getOperandRef helper so I can safely get to the operand.
[33m66b75ba[m Make CopyAddrInst operand enum public.
[33md855103[m Upgrade debug info tests to the new LLVM debug metadata format. Thanks to Duncan for helping out with the upgrading!
[33m1bc0053[m Only emit used markers for witness tables on Darwin
[33m872a02f[m Runtime: don't use metadata for Builtin.UnknownObject when !SWIFT_OBJC_INTEROP
[33m13289d4[m SILGen: Global accessors must always be non-fragile.
[33m59814bd[m Add type checking for potentially unavailable method references.
[33m52b9368[m Thread a LazyResolver through the archetype builder.
[33m73fb0f7[m Give PotentialArchetype::getType() access to the archetype builder. NFC
[33m49e3762[m Archetype builder: eliminate the "archetype assignment" phase.
[33mc9e0ed1[m Archetype builder: move the "root" protocol into the potential archetype. NFC
[33m1491bc8[m Use generic signatures when inferring requirements.
[33m56f8e8c[m Eliminate the primary archetype map from the archetype builder. NFC
[33mc0f4b11[m [stdlib] Don't expose uninitialized memory
[33m65ec2cd[m [stdlib] Minor ManagedBuffer cleanups
[33mb740ad0[m Revert "[stdlib] Use a universal empty array buffer"
[33ma934abf[m Remove type check workaround for invalid casts
[33m0d3402e[m Fix for problems with compiling the DeltaBlue benchmark and add a corresponding test.
[33mb13aadb[m [emacs-support] More StdlibUnittest error parsing
[33mf2f068c[m [stdlib] Use a universal empty array buffer
[33md47835a[m Robustify test/Interpreter/SDK/objc_switch.swift
[33m97cfe4f[m Runtime: define our own max_align_t that matches the definition in libc++ for Darwin and is correct for x86_64 Linux
[33mb818622[m stdlib: remove an invalid cast in Character implementation
[33m43f68b6[m Enable dead function removal for internal function in whole-module compilation.
[33m60dcb9a[m Make compiler intrinsics public (part 2).
[33mef120db[m Changed test for Dictionary init crash
[33m949e0b0[m Drop the @sil_self attribute.
[33m80ba35c[m IRGen: Tighten up test/IRGen/class_with_stub_initializers test not to false-positive if @llvm.used ends up ordered after the class metadata.
[33m3b874ea[m [CMake] Make it an error to build without having the PerfTests checked out.
[33m204e9ee[m Fix testcase for upstream IR printer change
[33md2d12d9[m ClangImporter: refactor construction of the Clang argument list according to review comments
[33mc17c060[m Verify that a stub initializer appears nowhere within the vtable.
[33m58146ec[m Remove stray debug dump.
[33m18e2ab4[m SILGen/IRGen: Leave stub initializers out of the vtable.
[33mc1eefb1[m Reapply "stdlib: Remove dead semantic Array._setElement function
[33m3fcdfd4[m Remove the "swift/Basic/Optional.h" header.
[33m042569a[m Optional: Replace uses of Nothing with None.
[33m24720ab[m [serialization] Make serialization::DefaultArgumentKind an enum class.
[33m9891c7f[m Replace swift::Optional with llvm::Optional.
[33me999f40[m Replace "optVal = Nothing" with "optVal.reset()" for Optional<ArrayRef<T>>.
[33m4adeb66[m Drop uses of Optional's variadic forwarding constructor.
[33m2a76f18[m Drop uses of Optional::cache.
[33md3a9e58[m Use Nothing instead of {} to initialize Optionals.
[33m2bd116c[m Revert "stdlib: Remove dead semantic Array._setElement function"
[33mcfd4a09[m stdlib: Remove dead semantic Array._setElement function
[33mb7da429[m Document array.get_element_address in HighLevelSILOptimizations.rst
[33m67f461c[m Modifications to tests, needed for the previous commit (Remove dead arrays which are constrcuted with _allocateUninitialized)
[33m48e4c95[m Remove dead arrays which are constrcuted with _allocateUninitialized
[33m10133eb[m Fix wrong effects attribute for Dictionary.init()
[33m3b06080[m Fix a warning about fallthrough in builds without assertions
[33m19642a8[m Restore a test for writeback conflict SIL diagnostics for a container without addressors
[33mb2b19c6[m SwiftShims: #ifdef-guard uses of Objective-C constructs
[33m27601ff[m ClangImporter: use GNU11 C language mode on non-Darwin
[33me45f931[m Remove duplicate library from the dependency list
[33m782833f[m SIL: Remove the project_existential* instructions.
[33md769498[m Update for upstream LLVM API change.
[33m55f5962[m Ensure that we validate materializeForSet accessors after we generate them.
[33m79e39cd[m SILGen: Replace the remaining uses of project_existential with open_existential.
[33maea5f01[m Remove dead failing IRGen/function_types.sil test.
[33m00fd417[m IRGen: Remove support for existential methods.
[33m49a6c8e[m Do all target info management in Clang, and drop -target-abi / -target-feature.
[33m30c65ef[m [ClangImporter] Use Clang's driver to handle options, not its frontend.
[33m2e8d4bc[m Add handling of potentially unavailable overloaded global functions to Sema.
[33m3a606b9[m SIL: Drop the protocol_method instruction.
[33m699cee5[m [Printer] print AST types used by SILDeclRef in SIL mode.
[33md90a3d6[m SILGen: Remove dead code for special-case lowering of protocol methods.
[33m23f91d9[m SILGen: Open existential bases of property accesses.
[33m98d5aff[m Correct library dependencies to allow linking with GNU ld
[33m1ba2cbc[m [stdlib] explanatory comment
[33m43deddf[m [stdlib] Move ManagedBuffer prototype into stdlib
[33mb6f28be[m ArraySemantics: Teach array semantics about getting the address of an array element
[33mbeb7d94[m Enable devirtualization even a method to be invoked is implemented by one of the superclasses.
[33ma9f0cc0[m SILGen: Open existentials when invoking their methods.
[33m39cfa6b[m SIL cloner: Remap opened archetypes in TypeSubstCloner.
[33m63346a0[m Avoid changing the CFG if devirtualization of a method call is not possible due to unavailability of information about the implementation of this method.
[33md269d5c[m Basic: Add dependency finding for libuuid.
[33me5e796f[m Add tests for: Don't call reserveCapacity if constructing an empty uninitalized array.
[33m8cca0ae[m Solver: eliminate construction constraints. We never need to retain them.
[33mb47f4d1[m xfail parser test while I look at the failure on swift-stdlib-release-asserts-noopt.
[33mf2abd76[m Runtime: untie Lazy<T> from libdispatch
[33m006dcec[m Code completion: always validate typealiases
[33mcd4b943[m Don't call reserveCapacity if constructing an empty uninitalized array.
[33mb833355[m ArrayNew test: simplify checks
[33m8541ffd[m Convert UnsafePointer's memory property and subscript operator to be addressed.
[33me718865[m Fix a pair of bugs with property addressors.
[33m50c9909[m Remove redundant semicolon
[33m1fa4f42[m Use mutable addressors for Array, now that doing so doesn't prevent us from using a getter for immutable accesses.
[33m5087132[m Fix an out-of-date and unnecessary assertion which triggers when deserializing ComputedWithMutableAddress subscripts.
[33m88b8254[m Lift the restrictions on addressors so that you can define properties and subscripts with the get+mutableAddress combination of accessors.
[33m560f999[m SILGen: Claim orig and subst parameter clauses in sync when emitting calls.
[33mf3fa19c[m stdlib: add tests for operator overloads on Strideable
[33mfcb7d40[m StdlibUnittest: move expectType() predicate to the library
[33mc93f32a[m [stdlib] Eliminate needless intermediate class
[33mdad8498[m Don't assume 'uuid_string_t' type is defined
[33mff8d641[m Push uuid system dependencies out of header.
[33me3573b2[m Drop expected-* annotations from test; it's too messy to -verify. NFC
[33med46e65[m runtime: Simple wrappers to skip objc refcounts
[33m073af87[m Fail more gracefully when we're unable to map a dependent type to an archetype.
[33m156020d[m [stdlib] Rename 'countElements' => 'count'
[33mb05f1ad[m [stdlib] Comments for _getBridgedUnsafeBuffer
[33m8cb8e15[m Add Sema tests for potentially unavailable global functions.
[33mc8ecf66[m [stdlib] cross-reference radar in FIXME comment
[33m7f0439b[m [stdlib] Disable one more mixed-sign case
[33m41359fb[m [stdlib] Disallow mixed-sign arithmetic
[33md8122fd[m [testing] Purge use of mixed-sign arithmetic
[33m8fc89cd[m stdlib: Add implementation of snprintf_l for linux
[33mdfb98c8[m Fix stub typo: darwin -> linux
[33m26130d9[m [SILParser] add a validation test to verify parsing of stdlib deserialized from module.
[33m137ada1[m [emacs-support] parse more Stdlibunittest errors
[33mb0cc378[m [emacs-support] parse Stdlibunittest errors
[33mf6654aa[m ABCOpts: Invariant values must strictly dominate the header
[33m075c227[m fix <rdar://problem/18502220> [swift-crashes 078] parser crash on invalid cast in sequence expr
[33mdcfbc3c[m Briefly describe the last change made to the serialization format on the minor-version line.  The goal here is to cause merge conflicts instead of silently merging two identical version bumps.
[33mdc18319[m Missing bits of r22381: make something a bitfield that was meant to be and bump the serialization version.
[33m7e1df22[m IRGen: Remove dead code for lowering existential upcasts.
[33mbe45322[m SIL: Drop the upcast_existential* instructions.
[33m10eeb06[m SILGen: Upcast existentials using open_existential instead of a bespoke instruction.
[33m252c2ff[m stdlib: add a regression test for assert accepting a string literal
[33ma899491[m Give opened existential archetypes globally unique identifiers.
[33mc2d80c2[m Change swift_once_t to be actually pointer-sized on non-Darwin
[33m0197e15[m Runtime: untie swift_once from libdispatch
[33m28a393c[m Revert "stdlib: Enable compiling blocks on non-darwin."
[33m8c303ef[m Representational changes towards get-and-mutableAddress properties.
[33m27363b2[m Fix 80+. NFC.
[33med124f6[m [func-sig-opts] Expose the ValueDecl argument of SILArgument's constructor in SILBasicBlock::createArgument.
[33mfe95e64[m [func-sig-opts] Add SILArgument::isSelf() and SILFunction::hasSelfArgument().
[33m3749a98[m Record the reason a declaration is potentially unavailable.
[33m67fc3b4[m Don't first-pass type-check decls from other files when validation will do.
[33mc4ce202[m Move handling of 'final' and @NSManaged properties into validateDecl.
[33m8a6e07f[m SILCloner: Apply cloning transformation to the replacement type and conformances in substitutions.
[33m7d6924f[m [Parser] generate conformances for substitutions in specialized conformance.
[33m4f5d34c[m [Printer] update the implementation of ProtocolConformance::printName.
[33mfdcb617[m [Serializer] update SIL linkage of global addressors in getAllSILFunctions.
[33m7447c06[m [SILParser] disable availability check when parsing SIL.
[33mb75ce69[m [Parser] correctly parse dependent in associated_type_protocol.
[33mc6d4cc0[m [Printer] add sil-disable-ast-dump to disable dumping top AST decls.
[33mc4233e9[m [Printer] use SIL print options when printing SILWitnessTable.
[33mff16e49[m Fix indentation
[33mac9e6d3[m stdlib: Include header for condition_variable
[33meabbd15[m stdlib: Enable compiling blocks on non-darwin.
[33ma1e0b0f[m Driver: More stubbing for Linux support
[33me16e9d5[m Fix a typo.
[33mc098645[m SIL: Conformances relate to formal types, so change witness_method's lookup type to a CanType.
[33m5f1fb56[m Change order of dependencies to fix link error
[33mad410d6[m Add stub REPL driver for non-Apple
[33md7e724e[m StaticString: use a less error-prone bit masking construct
[33m4f38403[m stdlib: fix bugs in StaticString.isASCII and add tests
[33m41a48f2[m StdlibUnittest: add Printable and DebugPrintable testing predicates
[33m9fb5d59[m Revert "SILGen: Upcast existentials using open_existential instead of a bespoke instruction."
[33m152aa9e[m Revert "SIL: Drop the upcast_existential* instructions."
[33mf33d3a7[m Revert "IRGen: Remove dead code for lowering existential upcasts."
[33mcca52df[m Fix ArrayNew test
[33me16e29b[m Update for upstream LLVM API changes
[33m35cfa7d[m fix a memory corruption introduced in r22301 (Don't increment refcounts of inlined SILFunctions for the purpose of debug info generation.)
[33m15eb155[m Add SILGen for API availability query expression.
[33mdd1826a[m Fix some link errors on systems with more strict linkers
[33mb9ccbb7[m IRGen: Remove dead code for lowering existential upcasts.
[33m1e343fb[m SIL: Drop the upcast_existential* instructions.
[33md639892[m SILGen: Upcast existentials using open_existential instead of a bespoke instruction.
[33mce34e9f[m Use an appropriate number of bits to store RequirementKind
[33m1e5d815[m Allow runtime to compile without an Objective-C compiler
[33m34a81f0[m Runtime: allow some runtime code to compile when !SWIFT_OBJC_INTEROP
[33m97b166f[m Fix a warning about redundant comparison of unsigned char to 0
[33md396134[m Portability: use std::make_tuple instead of relying on a libc++ extension (an implicit constructor in std::tuple)
[33m5b29b6ea[m Revert "SILGen: Upcast existentials using open_existential instead of a bespoke instruction."
[33m0518f20[m Revert "SIL: Drop the upcast_existential* instructions."
[33mfd23404[m Revert "IRGen: Remove dead code for lowering existential upcasts."
[33m04872c8[m SIL: Verify that init_existential instructions are fed a lowering of their formal concrete type.
[33m9ae097e[m IRGen: Remove dead code for lowering existential upcasts.
[33m727c9b5[m SIL: Drop the upcast_existential* instructions.
[33m99da363[m SILGen: Upcast existentials using open_existential instead of a bespoke instruction.
[33mfb6f195[m Portability: use std::make_tuple instead of relying on a libc++ extension (an implicit constructor in std::tuple)
[33mba877f9[m Fix warnings about falling off the end of a function without a return
[33mb9ccc2d[m Don't try to include TargetConditionals.h on non-Apple platforms
[33m599b6f1[m Use Swift's own wrapper instead of std::is_trivially_copyable
[33m165cecf[m Include required headers
[33md225e49[m Fix warnings about && nested in ||
[33m9b717b6[m Don't try to pass Darwin-specific linker flags on non-Darwin
[33m3230520[m Force use of clang even on non-Darwin, for now
[33mfe39104[m Include headers required for waitpid()
[33m26ea0b0[m Remove a workaround for an old compiler bug that is not needed now
[33m7a53df0[m Remove unused includes
[33mb246c6c[m Remove traces of the custom Swift zone
[33mfb34d07[m Only include malloc/malloc.h and asl.h on Apple platforms
[33m457baf1[m Remove dead code
[33m8fdd6ac[m Fix warnings about falling off the end of a function without a return
[33m4073699[m Use more portable syntax to specialize templates from a different namespace
[33m67e52ca[m Fix a bug in TransformRange::empty()
[33m78096ff[m Only build FunctionNameDemangle on Darwin
[33m4a103e4[m Include cassert in Demangle.h because it uses assert()
[33m932953e[m Allow CMake to succeed on non-Darwin systems
[33m0758795[m Don't force use of libc++ on non-Darwin systems
[33m38bf8c6[m Allow build-script.sh to work on non-Darwin systems
[33me7f7033[m SILGen: Fix up handling of 'self' parameter when opaque protocol requirements are accessed through class-constrained type.
[33mdd7c153[m Disable problematic check in ArrayNew test; I did not intend to commit this
[33m8d43599[m Pull isFinal down to properties, methods, and subscripts instead of pushing it down when type-checking the class.
[33mf8455d3[m stdlib/Unicode: fix invalid casts in Character._SmallUTF16
[33ma2c4a7a[m stdlib: remove redundant parens
[33m03d3d3b[m stdlib: rename IntEncoder to a more descriptive _SmallUTF8Sink
[33m9c7d27c[m Add an OS version check for API availability to standard library and runtime.
[33ma04ee3a[m stdlib/Unicode: allow transcode() to operate on mutable value-typed sinks
[33m92dc4ee[m Don't increment refcounts of inlined SILFunctions for the purpose of debug info generation.
[33ma372458[m Fix and expand the AtomicInt test
[33m2ab8f0c[m StdlibUnittest: remove debug output from race tests
[33mf20225a[m Access properties and subscripts in the most efficient semantically valid way.
[33mc04992b[m stdlib: Remove Array.convertFromHeapArray.
[33m8faf876[m AST: Drop array injection functions from vararg representations.
[33m93cb4dd[m Runtime: Remove dead HeapArrayMetadata kind.
[33mb95fa01[m IRGen: Remove dead heap array support code.
[33ma312670[m SIL: Eliminate the dead 'alloc_array' insn.
[33m313e4a8[m Add radar number for disabled test.
[33m6923101[m Rename "AccessKind" to "AccessSemantics".  NFC.
[33m9eb4f5b[m SILGen: Use Array._allocateUninitialized to form array literals.
[33m149abe1[m CopyForwarding cleanup, and add a check for alloc_stack after copy_addr (NFC, disabled).
[33me0afb13[m Remove the APINotes library; it lives in Clang, now.
[33m5cb3566[m Turn the location for the break out of a switch case into a cleanup location. <rdar://problem/18401152> stepping out of the body of the case that was taken goes back to the case statement
[33mff3f8c0[m CopyForwarding: fix new isInit() helper to handle StoreInst. (NFC, disabled)
[33m9a6699a[m Enable inlining of functions with the global_init attribute.
[33m1410688[m StdlibUnittest: add an autorelease pool to the master race thread to stabilize memory consumption
[33m1f635d0[m Add a CSE support for 15 SIL instructions that were not covered by the CSE pass yet.
[33m4b5d80a[m Try to stabilize ArrayNew test by making it resilient to memory allocator implementation details
[33m4138fa5[m stdlib: add a test for Array of enum values
[33m83b0692[m StdlibUnittest: simplify code
[33me7a08ec[m Remove dead code from ArrayNew test
[33m502a5b4[m Remove a change which accidentially went into the previous commit
[33ma4c7d89[m fix coding style in stdlib: move non-attribute keywords in same line as function declaration
[33m054b8f2[m Change the way CopyForwarding updates uses. Still disabled (NFC).
[33m44a9935[m [simplify-cfg] Refactor simplifyConditional and teach it how to simplify (cond_br (enum_is_tag)) when there is a dominating enum_is_tag on the same value.
[33m44b0eac[m Mark materializeForSet conditional writebacks as auto-generated so that the unreachable code diagnostic doesn't complain if it manages to inline the materializeForSet.
[33m595376d[m Add an option to swift-ide-test to test the debugger's handling of 'private'.
[33m4cce346[m Have CompilerInvocation::getMainModule() lazily create the main module.
[33m70b023d[m Change the SILLocation for exit branches in if statements to that of the last instruction in the previous basic block. Previously the location of the condition was reused for this, which caused really unintuitive stepping behavior in the debugger.
[33ma156180[m Make this test less sensitive to the code-generation patterns of the mandatory optimizer.
[33mafd1901[m add a comment
[33mbe59a13[m Whitelist value-witness functions as being dead (inline-only) and therefore allowed to come without debug info. This fixes a test suite failure with unoptimized stdlibs. Thanks Erik for helping debug this.
[33m42b9bf3[m stdlib: use addressors in {ContiguousArray,Slice}.subscript(_: Int)
[33m408f693[m Update abitypes test for SIL linkage changes
[33ma7f3e42[m [stdlib] finish public non-protocol docs
[33m3b517cb[m Add a clarifying comment.
[33m5e894aa[m Reference deallocating constructors in the SILVtable to prevent dead function elimination.
[33m1e7f0f8[m Add tests for printing metatypes
[33mf6fb506[m stdlib: 'internal'ise an initializer
[33m1b3771c[m Fix a pair of bugs with rvalue addressed subscripting.
[33m1fec4d9[m Address Doug's review.  NFC.
[33mb0a8436[m Add some SILGen tests for addressors and fix some bugs involving non-member variables with addressors.
[33m624aa74[m [stdlib] document public API in Range.swift
[33m6716136[m Demangling support for mutableAddressor.
[33md1b6dfa[m [stdlib] pick off more public non-protocol docs
[33m66d2ba4[m [stdlib] underscore APIs made visible by r22212
[33maa32a44[m Bump the module file format version for the addressor changes.
[33mfac2c13[m Don't advertise 'address' and 'mutableAddress' in the "I expected an accessor here" diagnostic.
[33m1fb9515[m [Verifier] Don't enforce archetype scopes for deserialized extensions.
[33m9aed764[m Re-apply "Verify deserialized Swift decls as well as imported Clang decls."
[33m8a886b5[m [stdlib] Fix incomplete parameter rename
[33m42cef97[m [stdlib] Misc protocol comment propagation
[33mb727b6d[m Treat potentially unavailable global variable references as optional.
[33mc8d0747[m IRGen: Don't attempt to lay out witness tables for @objc protocols.
[33mdefaf07[m SILGen support for addressors.
[33m824e78d[m [stdlib] pick off public non-protocol docs
[33m795799b[m [stdlib] Propagate Hashable docs
[33m411bcf2[m [stdlib] Propagate CVarArgsType docs
[33m03288b8[m [stdlib] Propagate UnicodeCodecType docs
[33ma2df9c6[m reapply r22223 with a testcase update:
[33m69470a2[m [stdlib] Propagate Strideable docs
[33mdbde275[m [stdlib] Propagate Reflectable docs
[33m6bb89ae[m [stdlib] Propagate RangeReplaceableCollectionType docs
[33m24fe53e[m [stdlib] Propagate OutputStream docs
[33m5de6540[m Revert "Dramatically improve DI diagnostics in initializers fixing rdar://18414728."
[33m42b2139[m Add AST pointer to TypeRefinementContext.
[33mf5c80b1[m [stdlib] Propagate ExtensibleCollectionType docs
[33m06986b7[m Re-apply the series of commits to remove redundantly-serialized conformances.
[33ma7c6527[m Parsing and Sema support for addressors.
[33m16cb523[m AST support for accessors.
[33mea47b64[m [stdlib] Propagate IntegerArithmeticType docs
[33m3f4e7f5[m [stdlib] Propagate RandomAccessIndexType docs
[33m218d25e[m [stdlib] Propagate BidirectionalIndexType docs
[33m9623c52[m [stdlib] Misc protocol comment propagation
[33m88750f6[m Dramatically improve DI diagnostics in initializers fixing rdar://18414728.
[33mc38e320[m [stdlib] Propagate ForwardIndexType docs to models
[33mb2d0ef6[m [stdlib] Propagate FloatingPointType docs
[33m649c35f[m [stdlib] Propagate integer protocol docs to models
[33m6559392[m Start re-namespacing APINotes and its dependencies.
[33m03a5e44[m Make some internal functions in Hashing.swift public so that they can be access from validation tests. This is a workaround to fix a fail in the swift validation.
[33mfbd91f7[m Add missing 'public' modifiers in StdlibUnittest
[33mc16c510[m Set SILLinkage according to visibility.
[33m45c2005[m Revert the series of commits to remove redundantly-serialized conformances (22195 to 22199).
[33m7c9ebaa[m [stdlib] Propagate LiteralConvertible docs
[33mf8f7030[m Make compiler intrinsics public.
[33mf780a1c[m [stdlib] Propagate NilLiteralConvertible docs
[33mf4a7812[m [stdlib] Propagate SequenceType docs to models
[33mfec622d[m Revert "Verify deserialized Swift decls as well as imported Clang decls."
[33m76f9313[m [stdlib] Propagate GeneratorType docs to models
[33md4de1bf[m [stdlib] Propagate BooleanType docs to models
[33m1dd7272[m [stdlib] Propagate CollectionType docs to models
[33m44c1709[m Add EnumElementDecl::getArgumentInterfaceType().
[33ma2bee9e[m Make TypeBase::getTypeOfMember() prefer interface types.
[33mbdacc06[m Check off crasher #025.
[33m6cd5123[m SILGen: Use the formal type when taking dynamicTypes of values.
[33mf518ff5[m Remove the dead Builtin.typeof function.
[33ma49874a[m Verify deserialized Swift decls as well as imported Clang decls.
[33m988b8c2[m [Serialization] Preserve a deinitializer's interface type.
[33m7fe346a[m [Serialization] Preserve the decl context for a NormalProtocolConformance.
[33ma5685d6[m [Serialization] SIL witness tables should reference existing conformances.
[33m82011c9[m [Serialization] witness_method should reference existing conformances.
[33meea6c17[m [Serialization] init_existential should reference existing conformances.
[33mb28cfbc[m Remove setUseMCJIT calls in lib/Immediate/Immediate.cpp - now that the old JIT has been removed, MCJIT is the default.
[33m3af1bd5[m Remove the dependence on the old JIT - it has been removed from master.
[33m45e1dd3[m API Notes: Back out a single audit decision on NSColor.
[33m07cccf2[m [stdlib] More Documentation
[33ma9897a1[m [stdlib] Don't test internal APIs in validation
[33mbfb6fc7[m IRGen: Reabstract lowered dependent types when substituting into a generic context.
[33m232cec4[m SIL: Rename TypeConverter::getInterfaceType{In,OutOf}Context
[33m4b39fcc[m Remove #include of JIT.h from lib/Immediate/Immediate.cpp.
[33ma00085e[m [stdlib] Document public non-protocol API thru 'B'
[33m505257a[m API Notes: This contains audit for most of AppKit!
[33m76422d0[m Switch the interpreter and REPL modes (lib/Immediate/Immediate.cpp) over to MCJIT.
[33m530844f[m [stdlib] Document public VarArgs protocols
[33m6e782b0[m [stdlib] Document public Unicode protocols
[33m98c7b64[m [stdlib] Underscore/sanityCheck Unicode internals
[33m143e6cb[m Customize diagnostic for an IBOutlet of non-@objc protocol.
[33m3397e2e[m [stdlib] Make StringElementType internal
[33mdf33350[m Switch string interpolation protocol over to initializer requirements.
[33m55afb33[m Associate argument labels with the callee in the solver.
[33maf5389c[m Add a type annotation to help the type checker.
[33m5d519a6[m [stdlib] Minor fixups for r22152
[33m1d2df53[m Remove redundant definition of getSpecializedLinkage
[33m771266d[m Favor unary operators with matching argument/contextual type.
[33m8b4a5b4[m Generalize the favored-constraint handling code for calls.
[33m4db2974[m Refactor the favored-constraints optimization for binary expressions.
[33ma5d2f81[m Add tests for _canBeClass
[33m285464e[m Test for _isClassOrObjCExistential: a Swift closure is not a class
[33m7da858c[m Add tests for _isClassOrObjCExistential()
[33mda32b67[m Allow class/static properties to overload instance properties rdar://problem/18409106.
[33mec7a4fa[m Construct type refinement contexts for #os(...).
[33m5c5cc99[m Provide Fix-Its for the RawRepresentable interface change.
[33mc99a982[m [sil-extract] Actually delete functions in sil-extract.
[33m1fed0ab[m Add a function that computes a mapping from subexpressions to their parents.
[33m7218fcb[m Tweak cf_type_bridging test to work on iOS.
[33m561ab69[m [simplify-cfg] Canonicalize enum_is_tag on Optionals to always be on Some by swapping cond_br arguments if we have a .None check.
[33ma30dbd1[m Add some helper methods to CondBranchInst for getting True, False operands and a swapSuccessor method.
[33m6ff318b[m Remove dead code.
[33md9c10b1[m Extend parsing of #os(...) to allow queries for multiple platforms.
[33m7a08716[m Runtime: Factor out a helper function on Metadata to say when metadata refers to a class type.
[33m40e9a0f[m [stdlib] Fix memory safety with evil collections
[33m070987d[m Add unit tests for VersionRange lattice operations.
[33m67144bf[m CompilerInvocation::setModuleName affects both FrontendOpts and IRGenOpts.
[33m77caabc[m Fix a bug in capture propagation and closure specializer where we were not checking if functions were external declarations.
[33m947b49c[m [SILParser] parse protocol conformance where the substitution can be Base.Element = x.
[33md8b2188[m [SILParser] work around PolymorphicFunctionType with input or result type being PolymorphicFunctionType.
[33m85c1a8b[m [SILParser] parse substitution with a protocol.
[33m0d4e945[m Construct type refinement context hierarchy in Sema.
[33ma185af4[m Don't forget to name-bind main.swift if it's not the primary file.
[33md2ffcf6[m Runtime: Foreign classes are classes.
[33me35323b[m Restore the expected autorelease count for 32-bit simulator in ArrayNew test
[33m4a938f3[m Add validation test for case in rdar://problem/17963339.
[33ma54452f[m De-Gyb Assert.swift.gyb
[33m7764f64[m Simplify assertion machinery in the standard library.
[33m531f311[m Add missing Security dependency
[33m3119e6d[m Remove the tables that track the types that conform to "known" protocols.
[33mf0d03ef[m Drastically restrict the set of alternative literal types checked by the solver.
[33m79890ee[m [closure-spec] Do not specialize a closure into a callee passed the closure if the callee takes multiple closures.
[33me78e620[m Remove debugging code from the ArrayNew test
[33mea460fa[m Revert changes that I did not intend to commit
[33mae8c529[m StdlibUnittest: make testing return-autoreleased optimization reliable
[33m10b5acc[m [closure-spec] Teach closure specialization to not specialize closures with indirect return and re-enable it.
[33ma474d86[m When checking for shadowed values, account for the fact that we may be checking the rhs of a recursive binding.
[33m728052d[m Fix test that violates the verifier rule.
[33m164ed04[m Stop assuming that the x86-64 address space is permanently limited to only 47 bits.
[33m2fc49df[m Teach SILGen to take advantage of materializeForSet accessors on non-dynamic storage.
[33m5fc9d3f[m Make materializeForSet use the computed pattern on weak/unowned variables.
[33m867fab2[m Make sure to only verify indirect results if the number of parameters to the function is > 1.
[33m04aaf79[m [verifier] Make sure all SILFunctions only have one out parameter and that out parameter is the first argument to the function.
[33mda26c54[m IRGen: Preserve associated types and witness tables in NecessaryBindings.
[33m0098730[m Temporarily disable the problematic check in ArrayNew test on armv7
[33mf9db2f0[m When checking conformances, if we fail to find a witness for one associated type member refrain from attempting to resolve the others. (If any other associated type member has a dependency on the invalid one, we won't be able to substitute and the compiler will crash.)
[33mffc3772[m Revert "IRGen: Preserve associated types and witness tables in NecessaryBindings."
[33m8d9e358[m [closure-spec] Use the signature of the closure's function_ref instead of the arguments of the closure since if the closure is an external declaration, it wont have a first BB.
[33mab92c2e[m Fix = typo in assert. Should be ==.
[33m659a4a7[m Clean up whitespace errors. NFC.
[33m5fca94b[m [SIL Unreachability] Remove spurious warnings in the deinit method.
[33m782fac1[m [SIL Unreachability] Do not report false positives in single statement closures
[33m783a8c6[m Prohibit type declarations within generic functions, which were causing the compiler to crash.
[33mb0dea16[m IRGen: Preserve associated types and witness tables in NecessaryBindings.
[33m5af2334[m Dynamic properties should have dynamic accessors, always.
[33mb63a754[m Temporarily disable the problematic check in ArrayNew test on arm64
[33mbee33a0[m Sema: Ban pattern bindings without variables in globals and properties.
[33mb2891be[m When performing module lookups, respect the resolution mode when deciding whether or not to validate any found declarations. Doing so prevents another common source of stack overflows in the validator, and addresses crash suite scenarios 002 and 004. (rdar://problem/18232499, rdar://problem/18232668)
[33mb5680b2[m [stdlib] Document Stride protocols
[33mee05987[m [stdlib] Document StaticString protocols
[33m160438e[m Fix <rdar://problem/18199087> DI doesn't catch use of super properties lexically inside super.init call
[33m5c85fa5[m [stdlib] Document Reflection protocols
[33ma11db37[m Explicitly trigger cmake as follow up to r22091.
[33m2e6ac37[m [stdlib] document RangeReplaceableCollection
[33m45953c5[m Solver: try binding collection literals before non-collection literals.
[33m042a710[m Dump full name with references.
[33m1ea993c[m If the generic type parameters of a class or struct declaration are invalid or otherwise broken, we should treat the declaration as invalid, and be more careful about doing anything that could lead to the creation of bogus archetypes. (Such as implicit constructor/destructor generation, or conformance checking.)
[33m436e135[m Prevent another stack overflow in the type checker by avoiding recursively validating generic parameter lists. (rdar://problem/18072109 and crash suite scenario 021.)
[33m310672b[m ArrayNew test: replace calls to _fixLifetime with calls to _blackHole, which consumes the whole value, not just the address
[33m7e0a6d6[m Fix ArrayNew.swift test on 32-bit simulator
[33m9e5003e[m API Notes: Mark dispatch_retain and dispatch_release as unavailable.
[33mc61280c[m API Notes: Mark several APIs as unavailable.  - Make NSZone functions unavailable radar://16688847  - Distributed Objects subsystem should not be imported into Swift radar://16689104  - NSCalendarDate is available in Swift, but deprecated radar://16689207  - Do not import NSMethodSignature class and related methods radar://16689329  - NSInvocationOperation should be unavailble in Swift radar://17921785
[33m317f809[m API Notes: Fix several bugs that effect availability info propagation.
[33m02ebcad[m [stdlib] document remaining Policy.swift protocols
[33me3097f8[m Fix test/Interpreter/layout_reabstraction harder.
[33md436b5d[m Constraint solver: look through type variables after unwrapping optionals.
[33m9bf27a4[m Fix Dictionary.swift test on 32-bit iOS simulator
[33mee51fa9[m Make test/Interpreter/layout_reabstraction test pointer-size-agnostic.
[33m18042db[m [Global Opt] update SILGlobalOpt to use static initializer if possible.
[33m5ba1930[m [Global Opt] add helper functions to analyze static initializer in SILGlobalVariable.
[33m9f279fb[m [Global Opt] Refactor lowering of LiteralInst in IRGen. NFC.
[33m82d7daf[m Revert StringInterpolationConvertible back to class method requirements.
[33m7f2757b[m Update validation suite to use initializers for literal conformances.
[33mf1e47a7[m Switch string interpolation protocol over to initializer requirements.
[33mb9aa760[m stdlib: add more tests for delayed Array bridging
[33m3ebf5cb[m Switch the string literal protocols over to initializer requirements.
[33m13b44b7[m Revert "Suppress CrashTracer aggregation for crashes in non-production compilers."
[33m65fd550[m stdlib: remove Doxygen markup
[33m4f73579[m stdlib: add a radar reference to a fixme
[33mb64f6a4[m stdlib: attach documentation comments to array types
[33mb095339[m stdlib/Array: implement delayed bridging
[33mf9f3d26[m stdlib: improve comment
[33m0e7e60b[m Remove stale comment
[33mbda201f[m Fix typo in the test name
[33m2475a4e[m stdlib: mark _stdlib_AtomicInt class 'final'
[33m188f14e[m stdlib: fix warning about extraneous '_'
[33m4402ebf[m Fix enum instruction simplification.
[33m31d2cac[m Bump the serialization minor version.
[33m8cae5ba[m Generalize 'isDirectPropertyAccess' to allow for direct (i.e. non-polymorphic) access to accessor functions, and use this in materializeForSet for computed properties.
[33m5b22baf[m Suppress CrashTracer aggregation for crashes in non-production compilers.
[33m0279b57[m SILGen: Class-constrained generic bases are +1 for setters too.
[33mcacec26[m [stdlib] doc-comment BitwiseOperationsType
[33md59bc71[m Fix typo in comment.
[33m856c6b6[m [TypeChecker] Refactor the accessibility calculations for declarations into a separate TypeChecker::validateAccessibility() function.
[33m52dd5d1[m [stdlib] doc-comment more public protocols
[33m657e6a9[m [stdlib] doc-comment some protocols
[33m2e86b69[m [closure-spec] Refactor all logic determining if we should specialize into the gatherCallSites method.
[33m2d792ba[m SILGen: Class-constrained generic property getters have a +1 base.
[33m9957b99[m [closure-spec] Perform some small cleanups. NFC.
[33m59992e3[m [closure-spec] Move closure specialization behind a flag so the test will pass.
[33m4438816[m [closure-spec] Turn off the closure specializer for now. I found additional issues that need to be fixed and I do not want to block the submission while I am fixing them.
[33m31df902[m Revert "[rc-id] Enable RCIdentity analysis."
[33m5ddf4dc[m [stdlib] doc-comment integer arithmetic protocols
[33m33bebac[m [stdlib] Boilerplate doc-comment wording change
[33m2f2a9ba[m Demangle: Preserve generic contexts after generic types have been demangled.
[33m0add2f3[m Remove dead method.
[33md206f6b[m [stdlib] Doc-comment floating point protocols
[33m713125f[m [stdlib] doc-comment compiler protocols
[33m214c7bc[m [stdlib] Correct some ReST markup
[33m8c803f7[m [stdlib] internal-ize CharacterLiteralConvertible
[33mdd141c7[m Account for recursive validation when checking if an existential conforms to itself. (rdar://problem/18042380)
[33md98e9aa[m Use the DebuggerClient to find file-local names. This is Jordan's fix, and he said he's going to look into making a Swift-side test.  LLDB will be using this very shortly.
[33md425632[m Switch DictionaryLiteralConvertible over to an initializer requirement.
[33m1ae712e[m Fix test broken in r22030.
[33m0966418[m Move mangling logic for type metadata and field offset into Mangler.
[33m673b95a[m Remove the use of the 'Playground' language option for non-playground things.
[33m2dbf609[m Hash the module name into a private-discriminator.
[33m6a40e00[m [stdlib] doc-comment collection protocols
[33m3972316[m Switch ArrayLiteralConvertible over to an initializer requirement.
[33m25c4b23[m [test] Fix PrintAsObjC tests for less tolerant Clangs.
[33m275b34a[m Fix a recently introduced performance regression on StdlibSort test, which happened  because new sorted() implementation was using closures.
[33m78331ff[m Update HashingPrototype for stdlib API changes
[33m3ca64c2[m Assorted fixes to the emission of materializeForSet accessors, particular for subscripts.
[33mcfc47fe[m Introduce a hack to ensure that we don't type-check the body of a function twice.
[33mb89f493[m Preserve implicitness when applying constraints to subscript expressions.
[33mbd218ea[m Add materializeForSet entries to vtables and protocol witness tables.
[33m7ae26ff[m Serialize the materializeForSet accessor of a subscript.
[33m5b82dc5[m Minor improvements to declaration dumping.
[33m9c1d892[m Fix some bugs involving the implicit generation of materializeForSet accessors for stored properties.
[33m667eae6[m Clarify that the new declaration is placed after the addMember hint and fix the splicing logic.
[33mfab74f5[m When dumping DeclContext chains, be more specific than just "NominalTypeDecl".
[33m75050f8[m Generate an implicit 'materializeForSet' accessor along with getters and setters.
[33mc734630[m [PrintAsObjC] Generate headers as warning-free as possible.
[33mf22fd8d[m [test] Disable GuardMalloc logging, and re-enable the tests that logging broke.
[33m296304b[m [closure-spec] Teach closure specialization how to handle partial applies with one use.
[33m0090ab1[m [closure-specializer] Use getFunctionCost from SILInliner to determine cost instead of using just the number of instructions.
[33me47d5f5[m [rc-id] Enable RCIdentity analysis.
[33m637f07f[m [TypeChecker] Add a '-debug-forbid-typecheck-prefix' check in TypeChecker::validateDecl as well.
[33m479dca9[m [IDE] Add '-debug-forbid-typecheck-prefix' option to swift-ide-test.
[33m374bf23[m [TypeChecker] Introduce frontend option '-debug-forbid-typecheck-prefix' to protect against unnecessary typechecking, for testing purposes.
[33mc864101[m Demangle: Fix demangling of existential metatypes.
[33m5311e7a[m [Global Opt] revert r21996.
[33mc4ed485[m [stdlib] Replace unicode quotes with ascii ones.
[33m1ee1b40[m LLVMARCOpts: We can move retains across an objc_retain.
[33med36ddf[m [stdlib] Doc-comment index protocols
[33m1b37900[m SILGen: Don't try to emit closures in stored property initializers multiple times.
[33m0351a2a[m [Global Opt] update SILGlobalOpt to use static initializer if possible.
[33m3af1873[m [test] Add "XFAIL: gmalloc" where appropriate.
[33m112c7a5[m Revert "Dictionary test: fix for platforms that don't have return-autoreleased"
[33ma134fde[m [stdlib] doc-comment integer protocols
[33m6a19c12[m Convert FloatLiteralConvertible to initializers
[33mfad578b[m stdlib: remove ArrayBonudType
[33meab09f9[m Dictionary test: fix for platforms that don't have return-autoreleased optimization
[33mff59af1[m Only test that all SourceManager buffers are valid when actually still valid.
[33mb05f252[m [stdlib] Drop redundant factory func requirement
[33med52a10[m [stdlib] doc-comment Collection.swift
[33m4dca192[m Switch IntegerLiteralConvertible over to initializers.
[33me23aa00[m Switch CharacterLiteralConvertible over to an initializer requirement.
[33mafa7c44[m [Global Opt] update Parser and Printer to handle InitializerF for SILGlobalVariable.
[33m53151b9[m [Global Opt] add SILFunction *InitializerF to SILGlobalVariable.
[33m3aa75d0[m SILGen: Fix broken value semantics in previous commit.
[33md370295[m SILGen: Materialize class-constrained "self" parameters when passed to non-class-constrained protocol methods.
[33m7f80e00[m Swift NilLiteralConvertible to an initializer requirement
[33mf3d1e5f[m [stdlib] Miscellaneous comments and cleanups
[33m87ed744[m Use DeclContext::getModuleScopeContext() to help find the Clang module unit
[33m37c9618[m SIL: Add comments to reinstate early exit on address-only aggregate fields when we have a Sema check for value type recursion.
[33mc1399cf[m Allow SDK overlays to add 'required' initializers.
[33mdd6fdc4[m Update metatype metadata unit tests.
[33m2eb4c7c[m fix a crash in IRGen when unpacking/packing an enum which as an empty struct as payload.
[33m1f646ba[m [docs] Update AccessControlInStdlib
[33me6e17ac[m stdlib: replace _CocoaArrayType with _SwiftNSArrayRequiredOverridesType
[33m9b62c62[m stdlib: remove implied default 'internal' access modifier
[33m4cf865d[m stdlib: factor all _NSXXXBase classes to a single place
[33mc756296[m stdlib/Array: annotate invalid bitcasts
[33m041c179[m SIL: Continue type lowering after address-only fields of aggregates.
[33m0aef787[m Use read-write locks to protect metadata caches.
[33m15f100f[m New SIL-Opt pass: CopyForwarding (disabled, NFC).
[33m2ca1646[m NFC: Update COW Array pass name string
[33m1c4e08a[m Fix up a tangle of issues related to reabstraction.
[33m215d852[m Fix cached metadata lookup for generics that have an address point offset. Attempt to detect thread races in metadata caches.
[33md93eaed[m Switch BooleanLiteralConvertible over to an initializer requirement.
[33me60b5f4[m [ClangImporter] Add more non-CF types to our list of exclusions.
[33maf52f7c[m [irgen] Now that swift_unknown{Retain,Release} are implemented, have IRGen emit them.
[33m3d3c6fa[m [ClangImporter] Fix crash when a diagnostic is reported during module building.
[33m22b4dcd[m Create an overlay for ALAssetsLibrary:enumerateGroupsWithTypes which accepts ALAssetsGroup types.
[33mec46eef[m Overload dispatch_get_global_queue to work with QOS_CLASS.. constants
[33m0b4df54[m Revert "[ClangImporter] Use a constant for the name of the module created for the imported header."
[33mc3757ae[m [ClangImporer] Expose ClangImporter::getImportedHeaderModule() via the ClangModuleLoader interface.
[33mf7458a8[m Update compiler-crashers testsuite r21946
[33m8ec13a1[m [ClangImporter] Use a constant for the name of the module created for the imported header.
[33mc9d7e6f[m Move AvailabilityAttr::isActivePlatform reasoning to a helper in PlatformKind. NFC.
[33m3e828fe[m Make (set)objectFor(Indexed|Keyed)Subscript unavailable.
[33m8cf718f[m Don't allow a generic parameter with a non-@objc protocol requirement to bind to an existential.
[33m03e2717[m stdlib/Array: add bounds checks to NSSwiftArray.objectAtIndex()
[33mb4bb2b4[m Push down release notes 9/15
[33mdf82379[m stdlib/Array: add bounds checks in NSSwiftArray.getObjects()
[33mcdbd3ba[m stdlib/Dictionary: remove workaround that is no longer needed
[33m395b56c[m Remove a swap file that I accidentally committed
[33m50d497c[m stdlib/Array: fix an issue in fast enumeration
[33mceff82f[m stdlib/Array: add tests for Array -> NSArray bridging
[33m4a1dfdb[m stdlib/Array: remove default parameters in bridging routines, and reorder function declarations
[33m2e99e4d[m [IDE] Fix crash when trying to get the USR of an invalid enum element.
[33mf541019[m [codemotion] Extract out isARCInertTrapBB into ARCAnalysis from GARCOpts and teach SILCodeMotion to use it to not move retains into trap bbs.
[33m2c50e5c[m Move cl::opt in SILFunction into assert builds
[33m1bfdd9e[m [g-arc-opts] Teach the arc optimizer how to recognize more trap BBs in the stdlib.
[33m8eb7bf2[m Re-apply "Don't force-load Foundation under ImportForwardDeclarations."
[33m04d9f96[m [rc-id] Make sure when stripping off arguments that the resulting stripped value dominates the argument.
[33m8556575[m Document ValueBase::getParentBB
[33m51ea3a6[m Add a utility function to split a basic block at an instruction and update the dominator tree and loop info.
[33m12b0e13[m COWArrayOpt: Use ArraySemanticsCall utility
[33mc8679d9[m ABCOpts: rewrite in terms of ArraySemantics call wrapper
[33m6da1647[m COWArrayOpt: Use ValueBase's getParentBB api
[33m813d434[m ArraySemantics: Add wrapper utility for array semantics calls to Local.h
[33m36ad6d2[m ValueBase: Add getParentBB api
[33m73fd579[m SILInstruction: Add setArgument and setSelfArgument to ApplyInst
[33m666f8f0[m Move view-cfg-only-for-function into SILFunction::viewCFG
[33m713ba3e[m CF <-> NS bridging is a subtype. Fixes rdar://problem/18297881
[33me002261[m Diagnose free type variables that correspond to generic parameters.
[33mdd6c32c[m Use ConstraintLocator::Member for members rather than ConstraintLocator::MemberRefBase.
[33m43b6ed3[m Thread constraint locators through opening of generic types.
[33mf27c8d1[m Solver: use literal constraints to eagerly look through optional types.
[33m72a6261[m Emit discriminators *only* for multi-file projects.
[33m0cd5cee[m Slightly improve the private discriminators to also handle the primary source file of a multi-file project.
[33mce07a7b[m [test] Actually set the 'asan' feature appropriately when validation testing.
[33me3400d6[m swift-mode.el: Add "private" "public" "internal" to the list of keywords.
[33mec8acc1[m swift-mode.el: remove val from the list of keywords.
[33m90d0d69[m Store the main SourceFile's private discriminator in the DWARF debug flags. <rdar://problem/18297696> Store a SourceFile's discriminator somewhere in the debug info
[33m001db58[m stdlib: remove trailing whitespace and fix coding style
[33md7acb06[m stdlib/Dictionary: use 'delayed bridging' to keep pointers, returned from a bridged NSDictionary, stable
[33m2487238[m Dictionary test: generalize equalsUnordered() utility
[33m3756257[m Update AtomicInt test for removal of any()
[33m60261a7[m Fix typo.
[33m167d2f4[m Include extensions in ClangModuleUnit::getTopLevelDecls.
[33m6851d95[m Defensive commit: avoid pointer use-after-invalidation.
[33m50a39c3[m Added a test of the driver's parseable output when paths contain non-ASCII characters.
[33m8338e69[m Actually set up the 'rawValue' argument label on derived enum initializers.
[33m213f59e[m [stdlib] doc-comment Arrays.swift.gyb
[33m5a9ccc5[m Add ASTDumper support for AvailabilityQueryExpr
[33mef79191[m [g-arc-opts] Add a test that uses the full RCIdentityAnalysis infrastructure.
[33m4609513[m Remove SILValue::stripRCIdentityPreservingArgs and teach all uses of that method to use the new RCIdentityAnalysis.
[33m6f64c4c[m Update validation tests for raw -> rawValue change.
[33m725f501[m Fixed the escaping of strings in swift::json::Output.
[33m4647eb9[m Create RCIdentityAnalysis a cache for stripRCIdentityPreservingOps.
[33m8ec2b29[m [stdlib] Algorithm.swift: doc-comment public API
[33mc872a95[m Update internal release notes for RawRepresentable change.
[33m491e47c[m Rename RawRepresentable.raw -> rawValue.
[33ma952c55[m [Global Opt] replace GlobalAddrInst with SILGlobalAddrInst.
[33m107dca0[m [stdlib] Separate Sequence type for enumerate
[33m8efc6a5[m Check property overrides as part of validation.
[33md33876e[m Add option to enable experimental API availability checking
[33m9491a0e[m [Global Opt] get ready to replace GlobalAddrInst with SILGlobalAddrInst.
[33m5bdfd59[m [stdlib] Discriminated version of BridgeObject
[33m47272fd[m [Linkage] move getSILLinkage from GenDec.cpp to FormalLinkage.h.
[33m1e9e773[m Revert "[stdlib] any/all algorithms, keyword for contains"
[33m9f4ddfe[m Don't allow an implicit conversion from NSNumber to one of its bridged value types.
[33mc3ca147[m Solver: don't try a default literal type binding when we have contextual type information.
[33m018a229[m Fix SIL test.
[33md3be963[m RaceTest: add radar references for bug workarounds
[33m1a15218[m [sil-value-tracking] Improve overflow analysis for bitwise and + checked trunc  to eliminate cond_fail.
[33ma81a997[m Improve optimization of builtin operations that may overflow. Remove overflow checks if it can be proven that no overflow can happen.
[33md68a5c4[m stdlib: finish implementation of atomics for initializing an ARC reference, add tests
[33m2ecb228[m stdlib/Dictionary test: use AtomicInt to count key/value instances
[33m6c4c549[m Revert r21857 to fix the build
[33ma61e4c2[m stdlib: document that sort() is not a stable sort
[33m5000a98[m stdlib/Unmanaged: change the precondition for non-null pointer to a debug precondition
[33m875fa02[m Hide SILValue::stripSinglePredecessor{Args,RCIdentityPreservingArgs}.
[33m3275fc6[m LLVM_DELETED_FUNCTION => = delete. NFC.
[33m24c138f[m Move SILLoopInfo into swiftSIL from swiftSILAnalysis so that we match the separation in between analysis and IR entities.
[33m0d7996f[m Add parsing of availability query expressions (#os(...))
[33md3b9679[m Add the method SILArgument::getIncomingValues and refactor SILArgument implementation from SILBasicBlock.cpp => SILArgument.cpp.
[33m64fc0b3[m refinement to r21862: don't mark dynamic properties implicitly final.
[33m10c3009[m implement <rdar://problem/18275556> 'let' properties in a class should be implicitly final
[33mc02643e[m Update swift for llvm trunk change r217548.
[33m82ce64b[m [code-motion] When merging states, blot values from EnumToEnumBBCaseListMap after we merge instead of clearing in the middle.
[33ma539168[m Remove extraneous namespace specification. NFC.
[33m296c802[m [ClangImporter] Mark synthesized decls for forward classes as implicit.
[33mf1ccae6[m [ClangImporter] Don't force-load Foundation under ImportForwardDeclarations.
[33m41d875a[m Update comment about ABI version.
[33m5e607b5[m Update test for ABI version.  Not certain why testing did not catch this before.
[33m78a28c0[m Materialize temporaries properly when translating between init? and init! in witnesses.
[33m686e93e[m [test] Make driver tests more robust against paths containing dots.
[33mede74dd[m When solving for call witness argument conversions, post diagnostics in the case of failures rather than raise an assertion. This addresses crash suite issue 040. (rdar://problem/18233081)
[33maf5af53[m Turn on private-discriminator mangling by default.
[33mff5f742[m Update Swift version to '1.1'.  This includes bumping the Swift ABI version to '2'.
[33m48bcad3[m Address review comments for r21845 and r21846, including updates to ABI.rst.
[33m37ec996[m Don't try to copy-initialize an aggregate whose members have
[33mad3601a[m [stdlib] Test for sorted()'s return type
[33m4b94208[m Use extension mangling for all members of cross-module extensions.
[33m86b24b7[m [Driver] Ban files with the same basename in the same module.
[33m904e0c4[m [stdlib] Fix sorted()
[33mfb1fb61[m Update for upstream LLVM API change (unique_ptr).
[33m1d85cc7[m Check user-written functions before looking at any imported types.
[33m756d129[m Rename StdlibUnittest.{getPtr -> getPointer}
[33mb68d147[m stdlib/Unmanaged: trap when attempting to create an Unmanaged from a null pointer
[33m4b19606[m stdlib: fix definition of atomics for 32-bit platforms
[33m96d00d7[m StdlibUnittest: add infrastructure for race tests (see examples)
[33m1bac1e6[m stdlib/Dictionary: convert some 'var's to 'let's
[33m87d18bc[m [g-arc-opts] Guaranteed parameters are always known safe.
[33m2c93cf7[m Mark compiler_crashers/036-lisp-style.swift as passing
[33m5798357[m stdlib: move declarations of runtime entry points for atomics to Runtime.swift.gyb
[33m487f9a9[m Quell warning.
[33me004ad7[m SIL: Carry AST types through init_existential instructions.
[33m0979371[m [stdlib] try to measure sequences before array-izing
[33m7b6a0dd[m [ClangImporter] Add a mode where @class decls are imported as empty classes.
[33md438ebc[m Sink Swift's adapter for NSZone into the ObjectiveC overlay.
[33m3710933[m [ClangImporter] Decls deprecated in OS X 11.0 are not implicitly unavailable.
[33m802b226[m [emacs support] auto-mode for .xxx.gyb files
[33m9bbf4ac[m Improve diagnostic so as not to mystify users.
[33mda95aad[m [ClangImporter] Make sure we don't crash if clang emits diagnostics because of the provided clang compiler arguments.
[33macce45b[m Lock down existential metatype to metatype coercions. Since they're currently unsupported, we'll display a semantic error rather than crash.
[33m122ea9d[m Add overlay cover for dispatch_data_empty
[33m8fcef04[m API Notes: Add notes for a freshly audited half of AppKit.
[33m3a776d8[m [test] Write output to a temp file so we can see why it's sometimes failing.
[33maeef7f7[m Now that we now longer crash, reinstate test.
[33mfa69297[m If an expression fails to type check, and there were no failures posted or constraints to mine for a reason, we can be fairly certain that the reason for the failure was a lack of contextual type data. In this case, we should post a diagnostic rather than let the failure slip through. This addresses crash suite scenarios 001, 005, 020 and 045. (rdar://problem/16712071, rdar://problem/17317691, rdar://problem/17317691)
[33m8502a7e[m The type checker was able to diagnose indirectly recursive inheritance cycles, but the simple direct case would result in a compiler crash. (rdar://problem/16712071)
[33mdcc3b99[m [IRGen] Mark all visible external entities as 'used'.
[33me5bfd3c[m [test] Mark three known crashers as "XFAIL: asan".
[33mfa42cac[m [utils/llvm-opt] Fix Michael's r21680 to handle Xcode's multi-config builds.
[33me762e73[m Handle failability differences in initializer witnesses.
[33m1e76fc5[m stdlib/CommonMethods test: test return type of .all(), too
[33mc467825[m [stdlib] any/all algorithms, keyword for contains
[33md37855e[m [IDE] Fix crash when code-completing inside a closure initializer of a member.
[33m7049168[m [IDE] Annotate the explicit result type of a closure.
[33m085a5d3[m [test] Use the module cache path for %clang as well.
[33m42403f9[m stdlib/Dictionary test: factor our testing utilities into a separate file
[33mc774d7a[m stdlib/String: make this test more strict
[33mdecff06[m Remove the test that is duplicate with test/IRGen/mixed_objc_native_protocol_constraints.swift
[33m7d1e60e[m IRGen/Runtime: Agree on which flag bit means "isNotBitwiseTakable" again.
[33mbf159d5[m [stdlib] Test for r21801
[33m69075bc[m [stdlib] Kill unintended argument label
[33m5a0b582[m Revert "[stdlib] HeapStorage: make init truly unavailable"
[33mfa45f94[m [stdlib] HeapStorage: make init truly unavailable
[33mabe5155[m [stdlib] Prototypes/BridgeObject: kill a warning
[33m63ca6bd[m Tweak diagnostic wording
[33m3cf9a13[m IRGen: Fix some synchronization issues when skipping @objc protocols for witness emission.
[33m61df57e[m API Notes: Corrections to Foundation and UIKit
[33m7be3363[m Reapply Swift Overlay: Make most common security return codes work with OSStatus
[33ma8a09fd[m In a protocol witness thunk for an 'init!' witness of an 'init' requirement, force the optional.
[33m4dca38a[m Debug info: Remove the special handling of AnyFunctionType to add an extra OpDeref to function objects (since Swift doesn't have function *pointer* types). It confuses the debugger and is inconsistent with how we handle other types such as classes.
[33mb23c363[m [func-sig-opts] Teach FunctionSignatureOpts how to perform @owned -> @guaranteed optimization.
[33ma7a541f[m Turn the "expression too complex" note into a proper error, and stop printing any auxiliary diagnostics that are produced as a result of the incompletely solved system. The "too complex" note had discoverability issues in Xcode, and the auxiliary errors were often misleading. (rdar://problem/18151024)
[33m9de15a3[m [func-sig-opts] Update to use the new callgraph and SILFunction::spliceBody to make FunctionSignatureOpts body transfer and thunk formation cheaper.
[33mb1ae807[m SimplifyCFG: Only skip jump-threading for MethodInsts that get lowered to ObjC calls
[33m93494cf[m [func-sig-opts] Add frontend option -enable-func-sig-opts to enable function signature optimization as a late pass. This is disabled by default and is only for testing purposes.
[33m23afba6[m Add in assert to make sure we only call SILArgument::getParameterInfo() on function arguments.
[33m94ed6a1[m Teach private-discriminator lookup to handle lookup into nominals.
[33mf4daadc[m s/DC/container/ in Module::lookupMember, for clarification.
[33med5af5d[m Private structs should not be found by Module::lookupMember...
[33m92aae25[m Allow a failabile initializer spelled init! to satisfy a non-failable initializer requirement.
[33m7c4b119[m Example Objective-C init methods from 'required' witness requirement.
[33mfeddd41[m More band-aid polish.
[33me562c09[m Minor tweaks for public-extension-of-generic band-aid.
[33ma7e42e9[m Don't use the destructor type to compute the @encoding of Objective-C ivar initializers/destroyers.
[33m9b08bd1[m Ban public extensions of generic types from another module.
[33m442f343[m [ASTPrinter] Avoid printing @effects attribute by default.
[33m7de4091[m Two overrides are not compatible if they have a different number of argument labels.
[33mf0b3b52[m [sil-combine] Implement (thick_to_objc_metatype (metatype @thick)) -> (metatype @objc_metatype) optimization
[33md77f20a[m [sil-value-tracking] Let computeSignBit make use of of the fact that StrideOf, StrideOfNonZero and AlignOf are known to return non-negative results, i.e. their sign bit is always 0.
[33m2470f03[m code-cleanup: Use SILValue.getType() instead of SILValue->getType(0)
[33m6a85dc4[m stdlib: fix strange indentation
[33meb14f28[m Add back accidentally dropped source line.
[33m28f707c[m stdlib/String: disable a test for a known bug
[33m419ba5c[m Change RawRepresentable to use failable initializers and property requirements.
[33mecf471b[m Revert "Swift Overlay: Make most common security return codes work with OSStatus"
[33mab563d6[m Add availability query expression (#os(...))to the AST
[33md51c173[m Swift Overlay: Make most common security return codes work with OSStatus
[33m412d590[m CGVector initializers should have named parameters.
[33mc3c8576[m Add special handling of accessibility APIs.
[33mb5f3d66[m More fixes to handle paths-to-Xcode containing spaces.
[33mcacec39[m Drop the separate "LookupName" type for discriminated lookup.
[33m9aa8c5c[m Push lookup with private-discriminators into the AST as Module::lookupMember.
[33m6e48570[m Move SimplifyInstruction into SILAnalysis since it is an analysis.
[33m89be2c5[m Verify that protocol conformances don’t use archetypes from the wrong context.
[33m96aec03[m Verify that an archetype is not referenced outside of its scope.
[33m1d8c75e[m [test] Fix driver tests to handle spaces in the path to Xcode.
[33m1b15146[m [ClangImporter] A StructDecl should always have a RecordDecl as its Clang node.
[33m7894534[m SimplifyCFG: Don't jumpthread blocks that have method instructions
[33m7d51b2b[m stdlib: improve comment for sorted() overload with predicate and reduce comment duplication with gyb code
[33m1cb5716[m Add release note for importing Objective-C init and factory methods as failable initializers
[33mf6c68fb[m SILGen: fix crash in case a function is specialized which contains an Array/Dictionary up- or downcast.
[33m769ba83[m Clean up "self" properly when delegating to a factory method.
[33me620e4b[m SILGen cannot handle recursive local functions; diagnose them in Sema.
[33meea25df[m Allow construction of a final class via a metatype using a non-required initializer rdar://problem/18154062.
[33m928b56c[m [test] Fix allowed allocation size slop in Prototypes/HeapStorage.swift.
[33mdfa498e[m [test] UIImage(contentsOfFile:) is now failable.
[33mc644c9a[m [swift-ide-test] Consolidate -print-ast-typechecked and ...-non-typechecked.
[33mb46d8e7[m [test] NSString(UTF8String:) is now failable.
[33m4e48585[m Remove some dead code: captured variables can never be properties at all, much less @objc properties.
[33me5fcbc6[m [func-sig-opts] Add get{Known,}CallerCallSites to the CallGraph.
[33m225a5ca[m [func-sig-opts] Add the call SILFunction::spliceBody() to splice a function's body onto another function.
[33m1b8ed88[m Move AvailabilityAttr::PlatformKind into its own file
[33m37db85a[m -[NSData initWithBase64EncodedString:options:] can return nil
[33mbc626ff[m [func-sig-opts] Teach SILArgument how to look up its own SILParameter info.
[33m01a2781[m Add missing -*- C++ -*- to header. NFC.
[33m3424055[m SILGen: Test protocol refinements that make initializers non-failable.
[33me8df864[m [stdlib] Change _fixLifetime<T> to use Builtin.fixLifetime now that we lower fix_lifetime to swift_keepAlive in IRGen.
[33m9f3e7c5[m [irgen] Handle lowering of fix_lifetime of addresses correctly.
[33m620170e[m SILGen: Handle 'init' witnesses less failable than their requirement.
[33m1f2ce07[m Release note for @NSApplicationMain.
[33me0b0744[m Remove trailing whitespace. NFC.
[33m9514ba5[m [irgen] Lower fix_lifetime => swift_keepAlive().
[33me5ca8be[m Add README with details on swift-compiler-crashes community repo.
[33m798315e[m Add recent crasher test case from swift-compiler-crashes.
[33m53bbefb[m SILGen: Thread direct access through all uses of emitRValueForDecl.
[33md9a6a95[m stdlib/NSString APIs: update test names
[33m2f15883[m stdlib/NSString APIs: fix indentation
[33m3a7b2c3[m Revert r21706 "Stop checking for 'nil' returns from non-failable Objective-C initializers."
[33mc504086[m Revert r21707 "Remove the SIL is_nonnull instruction. It's no longer useful."
[33meaefb5e[m String's NSString API: Replace factory methods with failable initializers.
[33mfa36bab[m [sil-simplify] Convert Swift test into SIL test.
[33mcc31f9b[m Temporarily fix nullability of -[NSData initWithBase64EncodedString:options].
[33mcdf9488[m Remove the SIL is_nonnull instruction. It's no longer useful.
[33ma775b40[m Stop checking for 'nil' returns from non-failable Objective-C initializers.
[33m29d2f63[m Make swift-ide-test's options respect the defaults.
[33mb6248c8[m Remove the -enable-objc-failable-initializers option.
[33m149d3aa[m stdlib: docs: sort() is not a stable sort
[33m31727d7[m [sil-simplify] Replace condition by an assert as it is supposed to be always true.
[33mb6308ca[m Update UnicodeUTFEncoders for failable initializers
[33m933e4bf[m [sil-simplify]  Peepholes for (trunc (s_to_u (zext x)))->x and (trunc (u_to_s (zext (lshr x 1) Word -> Int64)) Int64 -> Word) -> (lshr x 1).
[33m692ff2f[m Enable imports of failable initializers by default.
[33m19b470b[m Remove '-emit-NSApplicationMain' staging option.
[33md7c98dc[m Add an @NSApplicationMain attribute.
[33mece743e[m Record overrides of convenience initializers.
[33m4be861d[m SILGen: Don't crash when a 'static let' models a 'class var { get }' protocol requirement.
[33m2c23976[m Declare the alignments of various AST types in their own header so that we can freely form PointerIntPairs and PointerUnions without worrying about header circularity.
[33md8ce0b8[m Add basic compilation tests from swift-compiler-crashes (https://github.com/practicalswift/swift-compiler-crashes.git)
[33m9577b59[m Clang importer: compare initializers by their parameter types, only.
[33ma46192a[m Failability initializers: fix the type of an imported initializing constructor.
[33m1f5d81d[m Teach swift-ide-test to look up entities by mangled name.
[33mbbfedf9[m Change qualified lookup to take a (DeclName, discriminator) pair.
[33m122f3bc[m Relax (yet another) driver testcase to allow both bin/swift -frontend and bin/swiftc -frontend.
[33mded2ec0[m [Closure Specializer] fix rdar://18156518
[33m577eee1[m Execution tests for generics that call failable initializers.
[33m02fa026[m Execution tests for class failable initializers.
[33mdaf5a5d[m Factor out version tuple parsing into its own method
[33m55e626a[m Additional test updates for r21669.
[33m5ff2f9a[m Test the fixit for statements beginning with closure expressions.
[33mec92ba8[m [llvm-opt] Instead of guessing where SwiftLLVMPass dylib is, just get cmake to tell us where it is putting it.
[33m67b52ea[m Relax driver testcase to allow both bin/swift -frontend and bin/swiftc -frontend.
[33mb3dc228[m [PrintAsObjC] Only print inner classes if they are explicitly marked @objc.
[33m1c7b8f2[m [PrintAsObjC] Don't print nested classes as nested in Objective-C.
[33mb994a13[m Release notes for failable initializers.
[33mcc06b7d[m tweak the prediate that currently failure from inits where the object is partially initialized to also cover the delegating init case.  The location info is pretty awful on these, but it is more important that we reject these in Beta 1 than it is to be pretty.
[33mf8cba15[m update testcase for r21669
[33m2b8edb8[m [docs] Move some sections in SIL.rst to match SILNodes.def and add some stub docs/full docs for more instructions.
[33md7af8fc[m Swift SVN r21670
[33m5e57dc1[m DI: Complain if an initializer 'self' is released before being fully initialized.
[33mdbf9d8d[m Reinstate macosx.cmake because the B&I build script uses it.
[33ma2b46d8[m [utils/buildbot-script.sh] Use dash for the option.
[33m67b6955[m [utils/buildbot-script.sh] Add an option to build without assertions.
[33m1f2242d[m Remove unused .cmake file
[33mf1a5acb[m distcc support for ios device and simulator
[33mad78204[m Parser: Explicitly ban closures at the beginning of statements.
[33m3c2f165[m SILGen: Copy block arguments, even if they're optional.
[33mecc5016[m Fix an assertion when mangling anonymous closures with generic arguments by setting the Mangler's DeclContext to that of the closure, if necessary.
[33maad7929[m [Parser] Fixup the brace range for an implicit getter to be the braces of the computed variable.
[33m3b6ea78[m HeapStorage test: kill allocation size dependency
[33m8ffd3e7[m Add missing file from OptimizeARC => LLVMPasses transition.
[33m1f9e654[m Split lib/LLVMPasses/Passes.cpp into LLVMARCOpts.cpp and LLVMSwiftAA.cpp.
[33m4c953d7[m Rename OptimizeARC library => LLVMPasses library.
[33mc3c2517[m Push down release notes 9/2
[33m9f1d2a4[m Make this testcase stricter, so it doesn't return a false positive when building against a noopt stdlib.
[33m61b2d15[m [runtime] Remove unnecessary imports of shims.h
[33m9a02e79[m Debug info: emit -O0 shadow copies for let-declared values, even if they are explosions.
[33m30d1f35[m [stdlib] HeapStorage: comments
[33md65284c[m [stdlib] Fix circular module dependency
[33mc16987c[m [stdlib] Add/use unsafeDowncast
[33m27809a5[m [stdlib] Don't @asmname POSIX APIs
[33m2b4d7f7[m [g-arc-opts] Look through enum literal instructions.
[33mccffa87[m Fix comment header
[33m4139fe1[m stdlib: underscore-prefix private type Character.SmallUTF16
[33m2e879d7[m Add a --stress-test-sourcekit argument to the buildbot-script
[33m0275a37[m enhance the SIL is_nonnull instruction to work with values of function type.  This isn't used yet.
[33m14278ea[m DynamicMethodBranchInst and DynamicMethodInst both only work on @objc methods, so add these verifier checks back.  The rest of the changes I made are still correct/useful, as they remove pointless unchecked_ref_cast's to Builtin.UnknownObject, which generates cleaner SIL.
[33m84582fa[m [sil-combine] (retain/release (objc_(existential_)metatype_to_object)) -> no-op.
[33m51a8bec[m stdlib/String: strength-reduce some String methods: prefer StringCore.append over String.extend
[33m6044c97[m utils: vim syntax coloring for swift.gyb files
[33m8237d2a[m StdlibUnittest: remove compatibility typealias
[33m962a501[m stdlib: Optimize convertion from array literal for Array
[33m5f42750[m update a comment.  I could be missing something big, but I see no problem with cocoa bases or mixed-heritage classes.
[33m33b07a0[m Enable this test now, and remove the expected errors, because all of these cases should be accepted.
[33mc16cdf6[m implement support for cleaning up early returns from class initializers that are delegating and/or derived.
[33mffdba8f[m Teach the derived init class 'self' analyzer to look at the refcount result of the self box as well as the address result, so that it picks up retains and releases. Classify releases as interesting usepoints, and ignore the dealloc_stack.
[33mf154cb1[m implement full support for partial liveness tracking of class elements in class initializers, allowing partially initialized and conditionally uninitialized elements at failure points.
[33m5425835[m Rework handling of retain and release instructions in init methods of classes to track the release as something that needs the class reference to be alive at.
[33m14024ea[m fix <rdar://problem/15631987> QoI: DI emits two errors for the same problem at the same location
[33m376d0b9[m Fix: <rdar://problem/18187198> overriding a 'let' property with a 'var' is not kosher disallow overriding a let property with a var: a var property could return a different value every time, which violates substitutability of the 'let' contract.
[33m6d1fef1[m Small LLVM style fixups. NFC.
[33mfc1e595[m Now that enum simplification has been moved into code motion, do not run a separate enum simplification pass. Leave enum simplification in tree for now.
[33m1ba4322[m Make a small fix for LLVM style by inverting an if (condition) {return} into an if (!condition) {continue} return. NFC.
[33mec7cc21[m [g-arc-opts] A struct_extract of the only non-trivial stored field of a struct is always a ref count identity preserving identity.
[33mfb04e90[m [g-arc-opts] unchecked_enum_data is always a ref count identity preserving operation, always strip them off.
[33m713712f[m IRGen: Don't special-case retain/release for multi-payload enums with multiple simple cases.
[33m1b51b60[m [Serialization] Preserve private discriminators through serialization.
[33mfcfd44c[m Use actual Identifiers for private discriminators, rather than strings.
[33mea26f65[m SIL/IRGen: Implement Builtin.bridgeFromRawPointer for arbitrary bridgeable object types.
[33mbba2a37[m More COWArrayOpts cleanup.
[33m1404d96[m [test] XFAIL Prototypes/HeapStorage.swift on 32-bit pending rdar://18185538
[33ma124f63[m [sil-mode] Add highlighting for unconditional_checked_cast_addr.
[33m5561b3f[m Convert Nothing_t::Nothing => Nothing.
[33m847ec9b[m [stdlib] Prototype replacement for HeapBuffer
[33m06414d8[m [stdlib] Add LifetimeTracked to StdlibUnitTest
[33m8770a8f[m [Sema] Allow "redeclarations" within a module if both declarations are private.
[33madc25c8[m Staging: Guard private discriminators under -enable-primary-discriminators.
[33me842dd0[m Don't use a private discriminator for methods in extensions to private types.
[33m77daee9[m Hash the basename of a source file to use as a discriminator for 'private'.
[33m47658c8[m Start mangling names of private declarations specially.
[33mab5fa3f[m stdlib: add a document describing index invalidation rules
[33mb411c10[m Revert "[sil-combine] Strip off ref count identiy preserving operations from retain_value and release_value."
[33m76f0a3d[m After emitting consecutive equivalent isa patterns, restart after the whole group instead of always at the second.
[33m2395820[m SILGen: Only emit base conformances that belong to the current module.
[33m42a2f26[m [stdlib] Add/use unsafeAddressOf
[33m590c254[m Use isa-masking to read the class object pointer from instances of Swift subclasses of ObjC classes.
[33md77d6bd[m Update parsing of availability attributes to preserve whether the micro component of a version tuple is missing
[33mf06c1b5[m Disable a check for a String reallocation bug; it does not reproduce reliably
[33mcb41e95[m Update for upstream LLVM unique_ptrification.
[33m0df4eb6[m Swift-bench: Create all new files in the working directory.
[33m842bb80[m Swift-bench: Cache compilation results.
[33m6e7498c[m Swift-bench: Add opaque for optimizer functions getInt32 and getInt64.
[33m8536c07[m Swift-bench: Handle tests whose running time doesn't depend on number of iterations.
[33m628567b[m [Frontend] Make it erroneous if no frontend action is specified when invoking the frontend, and update tests.
[33m31de6fb[m Swift-bench: Add opt-flags argument.
[33mfb9040e[m Swift-bench: Improve logging.
[33m8f2c13f[m Add a prototype of new hashing APIs (so that it does not bit rot on my disk)
[33m8f4e701[m Swift-bench: Add a wrapper class and implement arguments parsing.
[33m60cf5d3[m SwiftIntTypes.py: remove transitional '_new' suffix from a function name
[33m40103a1[m SwiftIntTypes.py: remove unused code
[33m717171b[m stdlib tests: use simpler interface to iterate over integer types
[33mcf1d572[m stdlib/FixedPoint: precondition for shifts: use a SIL-compile-time constant instead of an expression that will be folded only by LLVM
[33m2b6ccd2[m Add tests for traps in shift operations
[33m4ecfc2b[m stdlib/FixedPoint: fix strange indentation
[33mcb9e5c2[m stdlib: use simpler interface to iterate over integer types
[33mc5181c2[m stdlib/FixedPoint: fix hash computation for [U]Int64 on 32-bit platforms
[33m1bc40d2[m FixedPoint test: use correct argument order for expectEquals
[33m14899ab[m stdlib/FixedPoint: define the same set of 'truncatingBitPattern' initializers on all platforms
[33mcf747b7[m Fix issue with SCCs getting added to the call graph multiple times.
[33m9aa7ace[m Move the closure specializer over to using the new call graph.
[33m9a0df28[m [sil-combine] Strip off ref count identiy preserving operations from retain_value and release_value.
[33m3fa1ed3[m [sil-combine] Make some code more readable by extracting reused values into their own locals. NFC.
[33m6a695f3[m Move DeadFunctionElimination to using the new call graph.
[33m0de5a66[m [Frontend] Introduce FrontendOptions::NoneAction, when the client wants custom control on how to handle an invocation.
[33m8f52302[m SILGen: Implement artificial main for NSApplicationMain.
[33mc29df92[m Small clean-up in dead function elimination.
[33me515c40[m Small clean-up in closure specializer.
[33mb147b51[m Small clean-up in performance inliner.
[33mce73f72[m Sema: Look through metatype conversions to find SuperRefExprs.
[33m75cebe5[m [sil-code-motion] Teach SILCodeMotion how to sink retains out of switch regions.
[33m9418b9c[m [Type Checker] Try harder to synthesize enum Equatable conformance on demand.
[33ma927d65[m [test] Make test in previous commit a bit more interesting.
[33mc353128[m [PrintAsObjC] @import required explicit submodules.
[33m52cf2f4[m Don't add declarations as call graph roots.
[33mdc625f7[m Minor API change in call graph.
[33m36365d7[m In the new call graph, find the SCCs in bottom-up order.
[33m24e3616[m ABCOpts: Use stripRCIdentityPreservingOps directly instead of pattern matching known array retain patterns
[33m11befa8[m [Sema] While checking if a protocol can be used as an existential, assume yes.
[33mc25aab9[m Sema: Handle generalized lvalues in "ignored" position.
[33m0ddc7ee[m Resilience expansion is not an IR-generation concept.
[33med4d8e6[m Cleanup COWArrayOpts.
[33mc782dc9[m [ClangImporter] FSEventStreamRef is not a CF object.
[33mf4358b7[m Set up DI tests for failable class initializers.
[33m4225651[m [Serialization] Keep track of whether a module has an underlying Clang module.
[33mc3660d5[m [Serialization] Ensure that a cached bridging header is null-terminated.
[33m90c7690[m [Serialization] Wrap up serialization options into a class.
[33m6d5094b[m [sil-combine] Split SILCombine into SILCombine.cpp, SILCombiner.h, and SILCombinerVisitors.cpp.
[33m75d8e4d[m [sil-combine] Move isZeroValue out of SILCombine and into ValueTracking.
[33m8287d98[m [patternmatch] Create matchers for all unary instructions that enable further matchers to be applied to the unary instructions argument.
[33m5a1e41f[m Execution tests for delegating and always-failing value initializers.
[33m2c50b0c[m swift -frontend "" shouldn't enter the REPL by default. This patch fixes a problem where a CompilerInvocation with no arguments would set the LangaugeOpts etc. up for the deprecated-integrated-repl, including setting the module name etc.  Now this only happens if you explicitly invoke swift -frontend -repl.
[33mfc5e292[m SILGen: Implement failable class initializers.
[33m985def4[m stdlib: improve performance of string appending
[33m4098c9a[m swift-bench: add shebang
[33m60bf3c1[m swift-bench: add standard license header
[33mdb38195[m Add utils/swift-bench.py, which is a new test harness.
[33m4acc8a3[m stdlib: remove redundant parens
[33m6f10c09[m Tests: use optimizer-friendly string concatenation
[33mf5299e1[m Update for upstream LLVM API changes
[33m9701417[m [sil-combine] String literal concatenation optimization. Constant-fold concatenation of string literals known at compile-time.
[33mea06761[m stdlib/String: add more tests for COW behavior in String (I verified that they fail when fix for rdar://problem/18114265 is reverted, so I removed the original test that depends on regular expressions and Foundation)
[33mf629a7f[m [sil-code-motion] Now that valueHas*InInstructionRange returns the barrier instruction, merge tryToMoveRefCountInstDownInBB into tryToSinkRefCountInst.
[33m8e4c76f[m stdlib/StringBuffer: update doc comment
[33mb617d1b[m [arc] Change valueHasARC*InInstructionRange to return either the offending instruction or Nothing_t::None instead of a bool.
[33m5285b9f[m [codemotion] Refactor loop into std::none_of.
[33m7dfe177[m fix the implementation of some verifier logic (which never considered address only arguments to DynamicMethodBranchInst) and reenable a verifier check I accidentally disable in my last patch.
[33m44a1eb7[m Rework SILGen of optional methods to work with non-@objc situations:   - Split getSelfTypeForDynamicLookup into two pieces, and generalize it     to work on non-loadable protocols.   - Change dynamic_method_branch to take its argument as a protocol of any     protocol type, instead of as something of UnownObject type.   - Teach emitForcedDynamicMemberRef to only do its peephole optimization for     @objc cases, since it is special behavior of objc_msgSend.   - enhance emitDynamicPartialApply & emitDynamicMemberRefExpr to emit the     proper project_existential instruction (not a _ref) when dealing with a     non-classbound protocol.
[33m9fa5d6d[m expose a SILBuilder::getTypeLowering helper method, NFC.
[33m03ee8c0[m [test] iOS does not yet enabled tagged pointer string objects by default.
[33mdc7c565[m further generalize dynamic_method and dynamic_method_br: instead of having them force the subject to "Builtin.UnknownObject", just traffic in the protocol type directly.
[33m5a83459[m Generalize some overly conservative type checker and verifier code: when type checking a reference to an optional requirement (producing a dynamic_member_ref), downcast the receiver to the protocol in question instead of to AnyObject.  At SILGen time, we do an unchecked_ref_cast anyway, and this is a more general solution to the problem it is trying to solve.
[33m525531b[m silgen doesn't support partial method application of protocol methods, but sema let them slip through if classbound.  Reject them until silgen handles them, fixing <rdar://problem/18158354> partial application of protocol method crashes the compiler in silgen
[33m50979a2[m implement SILGen and IRGen support for witness table generation of non-objc optional protocol requirements.  Not testable because sema doesn't allow these to exist.
[33m84de9c6[m ABCOpts: Accept retains of the array as matching retains to subscript checks
[33ma45cb59[m [stdlib] Eliminate some gratuitous @objc labels
[33m28987e6[m More robust FileCheck rules for array_mutable.
[33m18dac28[m [stdlib] Eliminate HeapBufferStorageBase
[33m1cbd610[m [test] Reinstate SILPasses/array_mutable after the revert in r21503.
[33mc1b0378[m Instead of passing type metadata to swift_initClassMetadata, pass the size and alignment of each field.  Take advantage of this to pass a constant size and alignment when possible.
[33m88da462[m SILGen: Clean up 'self' before entering the failure block of a failing initializer.
[33m9348c1e[m [test] XFAIL SILPasses/array_mutable.swift pending rdar://18156344.
[33m6e3c9e6[m Revert "[sil-combine] Strip off RC identity preserving ops from retain value and release value."
[33m9b68a2e[m [sil-code-motion] Combine together SILCodeMotion and Enum Simplification.
[33m801dca8[m Check @objc on properties as part of validation, not just full type checking.
[33meef29da[m -emit-sil: Don't print AST decls if we haven't type-checked the entire module.
[33m0e99a88[m [Serialization] Mark deserialized decls as early-attr-validated.
[33m2665ad5[m Simplify the debug scope handling in IRGenSIL to ignore instructions that don't have a scope.
[33m752a8e6[m Fix a bug in SILInliner's debug scope handling that would clone a new SILDebugScope once per mandatory-inlined call site.
[33md5ade0d[m [stdlib] Actually check the OS version
[33m0ee72a7[m [emacs-support] dedent to column 0 for # directive
[33m5136dc3[m RebindSelfInConstructorExpr nodes should only be created for self init calls within initializers. (rdar://problem/17281900)
[33m6cb2bf9[m IRGen: Implement the dealloc_box instruction.
[33m7c70eb4[m [SIL] disable access control when processing .sil.
[33mc1456ff[m SILGen: Handle initializers that unconditionally fail.
[33m4b6556c[m Remove stale comment.
[33m9dd09cb[m [stdlib] Conditionalize test for tagged pointers
[33m2cb20d4[m [Mangler] mangle the module where an extension is defined if necessary.
[33m082c396[m [stdlib] String.replaceRange: fix value semantics
[33mca3b199[m [build] Build LLVM's AArch64 target even if we're not building Swift for iOS.
[33m292d9b3[m Fix SILCodeMotion: do not move retains across isUniquelyReferenced.
[33m3494d6a[m Track call graph roots with a SmallVector rather than DenseSet.
[33mdee10cb[m Update the new call graph so that edges have sets of call graph nodes.
[33mbe9850d[m stdlib: add a test for passing literals to the IntXX(bitPattern:) initializer
[33m61ef077[m stdlib/FixedPoint: add IntXX(truncatingBitPattern:) initializers
[33m03ce13f[m [sil-combine] Strip off RC identity preserving ops from retain value and release value.
[33me99588f[m [sil-combine] Simplify and generalize switch_enum_addr of loadable type promotion to switch_enum.
[33ma1d4f47[m fix <rdar://problem/18089574> Protocol member in struct + delegating init miscompilation
[33m8d385d4[m Fix 80-column violation.
[33m263f5c8[m [test] Disable test Prorotypes/BridgeObject.swift pending rdar://18143396.
[33m06dc46f[m BridgeObject: Use Builtin.bridgeToRawPointer instead of unsafeBitCast
[33m472b52a[m Enhance DI's collectDelegatingValueTypeInitSelfUses() method to handle destroy_addr's correctly and to generalize the pattern it matches on when classifying self.init calls.  This allows it to handle delegating failable initializers in value types.
[33mfb19653[m [test] Update expected armv7 output for IRGen/abitypes.swift after r21420.
[33m4c65da9[m Make Builtin.bridgeToRawPointer work with class existentials.
[33mc034fd0[m Remove dead code introduced by 21470
[33mef3adb2[m Dont' trivial bitcast between differently sized structs.
[33m0085b94[m [stdlib] AnyObject wrapper for bridging purposes
[33m1676c8d[m Improve clarity/consistency of deinit diagnostics
[33mfd28d2c[m [test] Change the -Xllvm test to use more stable llvm options.
[33md04cb7d[m Only attempt to compute the interface type of an enum element if its parent enum type is actually generic (rdar://problem/17186190). This prevents the compiler from crashing if a user nests an enum declaration within a generic type. (We'll just emit a diagnostic, as intended.)
[33m2719a13[m Add statistic to call graph builder for calls to builtins.
[33m8cfc608[m Debug info: Gracefully handle anonymous variables. Found via <rdar://problem/17999350>
[33mb402c67[m [stdlib] Comments and clarification
[33m349e730[m [stdlib] Add a missing mode string in a .gyb file
[33m51e7101[m Fix typo in comment.
[33m46be672[m Execution tests for cleanup of partial value initializer failures.
[33m564f298[m stdlib: add a test for reflecting Unmanaged; this used to crash
[33m07505db[m Revert "Relax test case to work with 32-bit and 64-bit ints."
[33m1023da1[m Relax test case to work with 32-bit and 64-bit ints.
[33m001c00f[m stdlib/Dictionary: add a doc comment for _DictionaryBuilder
[33m7784ce9[m Simplify the test and make it independent of sizeof(Int.self) to allow it to pass on 32-bit platforms
[33me556630[m Fix a problem found by ASAN.
[33mc118a4a[m IRGen: Fix crash when array of empty type is index_addr'ed.
[33m99cc760[m Add an @inline(__always) function attribute.
[33mde2a02b[m Simple execution test for failable value initializers.
[33me9c7cef[m SILGen: Return nil on the failure path from failable value initializers.
[33m2cd1c7d[m Add an isResilient check in SILType.
[33m62e0634[m API Notes: fixup to r21443. This fixes iOS device test.
[33m9ce5894[m Fix raw_fd_ostream calls for ToT constructor changes
[33m16d8294[m Don't allow bridging conversions when we're processing favored constraints.
[33mb3f6219[m Add a very rough mutual exclusion mechanism to prevent a UIView from trying to provide its QuickLook object recursively. The same logic used for NSView is also used here basically verbatim. This is because in playgrounds, you can get a view to log itself as part of its drawRect method due to the way we defined our instrumentation. This very simple mechanism only works because drawing can only happen on the main thread - otherwise, we'd need something smarter than an NSSet of UIView pointers. Fixes rdar://17895769
[33m3997db5[m API Notes: Commit API Notes v13 (with copyWithZone returning N)
[33m3932a24[m [Devirtualizer] remove a hack that disables devirtualizing via specialized conformance.
[33mea73121[m [stdlib] Make a method final
[33m51c1433[m Add magic "literal" __DSO_HANDLE__ to refer to the DSO handle.
[33m31303ce[m NFC: remove unused codes.
[33m1a5e9b4[m Restore building SpriteKit overlay that I accidentally disabled
[33m203cbaa[m stdlib: remove unused GYB code
[33m7c943d5[m stdlib: remove migration aids for IntXX.asSigned(), IntXX.asUnsigned()
[33m44bf1a8[m stdlib/Printing: print floating point numbers with appropriate precesion for the type
[33m28e9088[m Fix FloatingPointIR test for arm: there is no Float80 on arm
[33mea48185[m stdlib: don't silently truncate Float80 literals
[33m3e5154b[m stdlib: fix typo in private API name
[33ma3350db[m Add statistics to call graph construction.
[33m125846a[m Consider capacity >= mincapacity the _fastPath in requestUniqueMutableBackingBuffer.
[33m3b9fe96[m Handle new OMF_initialize enumeration case in the Clang importer.
[33md63be08[m SILGen: Forward failure from a delegated value constructor.
[33m6149384[m Debug info: add a test for rdar://problem/16990007.
[33m3de439e[m Support debug info when compiling textual SIL files. - Use SILFileLocations when compiling .sil with -g. - Fix a crash when trying to find the Builtin module.
[33m6c07fb4[m [stdlib] Revert UnsafePointer casting change
[33m1b60e87[m [SILParser] reconstruct requirements in the same way as how type checker generates them.
[33m9a7b869[m Revert "Add @effects(readnone) to _swift_isClassOrObjCExistential"
[33m0b19aaf[m [SILParser] handle generic signature with depth.
[33mdc6f63c[m When Clang says to coerce an argument to a struct type, it means that the argument should be passed as that expanded sequence of types.
[33mf3ac094[m Store ASCII string literals as UTF8
[33m17c4a50[m Let the switch_enum instruction return a unqiue enum case for the default block, if possible.
[33m9f49c21[m Add an option -sil-print-no-color to disable coloring the SIL output.
[33mf7eb94b[m Change the test to actually test the API it advertises to test
[33m2124857[m Use withUnsafeMutableBufferPointer when mutating the buffer instead of getting an immutable buffer and casting it
[33m70e815b[m [test] Update tests for r21391
[33med828d2[m Add INSTALL parameter to handle_swift_sources routine, and pass it from add_swift_library/add_swift_library_single.
[33m4d0a6d7[m Update unittests for LLVM API changes in MemoryBuffer
[33mbc12821[m Update tests for a change in debug info metadata format
[33m42b25d9[m Update for upstream LLVM changes is MemoryBuffer APIs
[33me45fe99[m Update for upstream LLVM API changes in debug info gerenation
[33m34a1050[m Add data structures for a new, more detailed, call graph.
[33me9095b6[m [test] Update expected autoreleased objects on i386 in stdlib/Dictionary.swift.
[33m9a495b5[m Inline _arrayReplace into replaceRange.
[33m121e65c[m [test] No seriously, don't stop StdlibUnittest when the debugger interrupts select().
[33m7f9e49b[m Diagnose conditional downcasts to CoreFoundation metatypes.
[33me00aaad[m Allow dynamic casting of foreign metatypes.
[33mafb85f0[m [test] Don't stop StdlibUnittest when the debugger interrupts select().
[33mcec0e61[m Remove the tests for compare() that was removed in r21398
[33m07f8479[m Zap the string compare API.
[33m7db1d04[m stdlib: add a comment for using modular arithmetic
[33mc70f90e[m Remove errant directory creation inside the source root.
[33m5319d8d[m Remove the overflow check because the variables are indices that must point to valid elements of the array of chars.
[33me858faf[m Rename method. NFC.
[33m7b30e83[m Move contents of CallGraph.h into CallGraphAnalysis.h.
[33mfeae9cc[m Remove include of CallGraph.h since it is not needed.
[33m1c0d8c9[m [test] Add an interpreter mode to the tests.
[33m64d8f31[m [IRGen] Register Objective-C classes explicitly in immediate mode as well.
[33mbdf7071[m [test] Combine two tests into one.
[33mefb9a39[m Diagnose conditional casts to CF types; they'll always succeed.
[33mb3166b4[m [ClangImporter] Exclude some more non-CF types from CoreGraphics' PDF support.
[33m61ee5f7[m Allow dynamic casts between foreign classes and other classes.
[33m9d2e2cb[m Don't treat missing imports as an error when -debugger-support is on.
[33m9b0d643[m Move 'Playground' into LangOptions and out of FrontendOptions and IRGenOptions.
[33m9ddf57f[m Don't treat missing imports as a fatal error in REPL mode.
[33mf8face4[m Add INSTALL parameter to compile_swift_files routine to fix builds of PerfTestSuite.
[33mae32ab7[m Add tests for conversions between AnyObject and CF classes.
[33m74438c2[m Test CFString <-> String implicit conversions.
[33m397f4a9[m Remove user-defined conversions from the type checker.
[33mcd32734[m Add missing case.
[33m1771652[m Handle CF <-> Objective-C toll-free-bridged conversions in the type checker.
[33m2886625[m Clang importer SDK: separate out CoreFoundation.h so we can build it up.
[33m4a45129[m Remove the workaround for the malformed fieldNames field in JITed code. Now that the JIT is doing the right thing again, we can restore full reflection support. Fixes rdar://18007839
[33m4b2ccff[m [stdlib] Replace assert(false) with compile error
[33m18bbf0d[m stdlib/Dictionary: implement fast enumartion for NSEnumerator of bridged Swift.Dictionary; this allows us to autorelease less.
[33m5a17642[m If a pattern-binding expression fails validation via a short-circuit, the type check process will cease before a failure could be posted. In this case diagnose the problem to prevent a verification assert later on. (rdar://problem/17087795)
[33mc23434a[m SILGen: Wrap the result of a failable value constructor in an optional.
[33mdde9485[m Fix embarrassing bug in -_cfTypeID. Thanks, Joe
[33m9404f1c[m Dictionary: in fast enumeration, don't autorelease objects that Dictionary has a strong reference to.
[33m0f3d106[m Implement -_cfTypeID on SwiftObject.
[33mfe8213e[m Cope with leading acronyms when turning factory methods into initializers.
[33mc5ec180[m Dictionary: remove some autorelease traffic by avoiding immutable creating immutable NSArrays (which autorelease objects internally), and by building the code in ARC mode (so that autorelease optimization kicks in).
[33ma741ecc[m Dictionary test: split leaking tests further so that they can be fixed separately
[33m9a267ef[m Dictionary test: separate tests that leave objects on the autorelease pool from those that don't
[33mf1c3d87[m StdlibUnittest: add setUp and tearDown functions, which are executed before and after every test
[33md603db4[m Make factory methods unavailable when there is already a corresponding initializer.
[33ma9eb2b4[m Ignore the exact spelling of the fp register.
[33m9e55da4[m [sink] Teach SILInstruction::isIdenticalTo how to handle retain_value. This is why we have not been sinking retain_value from predecessors.
[33m3624daa[m Change matchCondFail => matchNoSideEffectUnreachableBB and expand it to match any literals. This can be expanded over time.
[33m756722b[m Weaken test against an innocuous .code directive that apparently gets added on certain LLVM versions.
[33m1a8f5e1[m Remove -enable-optional-lvalues and its language option; they're always on anyway.
[33m7c69056[m Remove the always-on ImportCFTypes language option.
[33m7cae0cf[m Remove -enable-dynamic and its language option; it's always on anyway.
[33m83c8001[m Look for UIApplicationDelegate properly.
[33m67d0efd[m Use SILGenFunction::getMethodDispatch() to decide on delegating-initializer dispatch.
[33mff94dd5[m Use conformsToProtocol to check that @UIApplicationMain classes conform to UIApplicationDelegate.
[33m1307c03[m [test] Fix FileCheck typo in test IRGen/autorelease.sil.
[33m9cf1bf0[m Add a comment explaining the purpose of the test
[33m52ef296[m Use different TypeInfo instances for generic types whenever anything major about IRGen for that type would change, including the IR type of the value's components.
[33m0934cf5[m Test for a generic context, not just whether an enum has ts own generic arguments.  Noticed by inspection; no test case.
[33mb0e15c0[m [test] Fix some optional handling chnaged by an API notes update.
[33m9841171[m Use 16K segment alignment on 32-bit arm.
[33m0e66624[m CSE ThickToObjCMetatypeInst.
[33mae0ff91[m Teach the various forms of stripping to ignore single predecessor args from br and cond_br.
[33md1c76de[m Unbreak iOS build after r21324.
[33m5709a86[m Start importing Objective-C initializers and factory methods using failable initializers.
[33mb30b212[m Remove the term non-PHI and instead use SinglePredecessor.
[33m73434aa[m Rename SwitchEnumInst::getBBCase => getUniqueCaseForDestination.
[33m0f7053b[m Remove SILBasicBlock::getBBArgIndex(SILArgument *) in favor of SILArgument::getIndex().
[33m7c9b29a[m Remove stray APInt.
[33m6d7ace6[m Make sure that when stripping non phi rc identity preserving args from switch enums, we only strip off switch enum inst if our BB is mapped to the first payloaded case of the enum.
[33m96ef981[m Change CondBranchInst::getArgForDestBB() so that it returns SILValue() if the TrueBB and the False BB equal and so that it takes the SILArgument instead of the index.
[33md32bda4[m ARC: Ignore more failing blocks
[33ma36be37[m [ClangImporter] Check for the existence of a submodule before loading it.
[33mcfbdfdd[m [CMake] Add dependency on the ObjCARCOpts LLVM transforms library.
[33m16e41ad[m Make Builtin.canBeClass return a tri-state
[33m411ad98[m Add @effects(readnone) to _swift_isClassOrObjCExistential
[33m87d1c91[m [g-arc-opts] Look through non phi rc identity preserving arguments.
[33mf314511[m Add SILValue::stripNonPHIArgs and SILValue::stripNonPHIRCIdentityPreservingArgs for looking through SILArguments that are not PHIs in a load-store and ARC optimizer context respectively.
[33m5038acf[m Remove trailing whitespace. NFC.
[33mdec1bea[m Add support to SILArgument for finding the index of the SILArgument and a method on CondBranchInst to return the ith argument associated with a specific BB.
[33m577172c[m Diagnose partial applications of operators <rdar://problem/17994020>.
[33m1fb0f88[m [stdlib] Make UnsafePointer conversions explicit
[33mf7ebe89[m Set up the ARM retainAutoreleasedReturnValue markers correctly in optimized builds.
[33mfa75ee9[m SILGen: Remove bogus "cannot handle specialized type references" assertion.
[33mf14a1d7[m Made the PlaygroundTransform support InOutExprs. This allows e.g. array.append() to be logged properly.
[33mc454ace[m [Frontend] Rename EnableObjCAttrRequiresObjCModule -> EnableObjCAttrRequiresFoundation and enable it by default.
[33m14355ba[m API Notes File: 3d drop of Foundation, CoreData, UIKit
[33mfa6c359[m API Notes File: Add notes fro Objective C framework
[33me1cbcb2[m Allow a label in the single-element tuple corresponding to an enum case <rdar://problem/18063900>.
[33m3aceb2d[m Update the test for previous commit to include indirect parents.
[33ma4e5c11[m [TypeChecker] When visiting a protocol, validate all inherited requirements.
[33mafca235[m Allow a local function to capture a local function that itself does not have captures <rdar://problem/18053114>.
[33m24f14d9[m [Closure Specializer] add it to pass manager.
[33mbc004b6[m [Generic Specializer] handle specializing inherited conformance.
[33m344ecfd[m Add a new 'fail' statement to the AST for failing from an initializer.
[33mebf4c1e[m Allow "return nil" in a failable initializer to initiate failure.
[33m38bc16f[m A non-failable initializer requirement cannot be satisfied by a failable initializer.
[33mc0d301b[m Fix a typo in define name.
[33m75d6a75[m Rename PrecommitBench to PerfTestSuite.
[33md02b55b[m Code completion: fix bugs that prevented completion for overrides to work in extensions
[33macd30c9[m Rename '-enable-objc-attr-requires-objc-module' to '-enable-objc-attr-requires-foundation-module' to accurately reflect its behavior.
[33me3261af[m [Driver] Don't pass -module-name to the LLDB REPL.
[33m358bd09[m Instrument mutations of ivars in playgrounds. We accomplish this by generalizing the case of references to variables.
[33m0156c63[m remove an inadvertently added test.
[33m07d8963[m fix <rdar://problem/16554056> __FUNCTION__ in deinit for NSObject subclasses crashes the compiler
[33m9c26f89[m QoI: Provide a specific diagnostic when a failable initializer overrides a non-failable one.
[33mce9ce59[m Diagnose delegating from a non-failable initializer to a failable one.
[33m5028556[m Fix llvm-opt and leaks-runner for good.
[33ma1d2773[m Diagnose attempts to chain to a failable superclass initializer from a non-failable one.
[33m9be2802[m Calls to failable initializers produce the appropriate optional type.
[33m0777d6d[m Remove the assumption that constructing a T always produces a T.
[33m42dc448[m Reflect failability of an initializer in the optionality of its result type.
[33mc06e22d[m Revert r21291; it's breaking the standard library build.
[33me6f051f[m Reflect failability of an initializer in the optionality of its result type.
[33m64bd844[m Parse failable initializers.
[33mcd799f8[m Revert "Add an inline(late) attribute"
[33mf1ffbf0[m Revert "stdlib: Add a _isClassOrObjCExistentialAndSizeofAnyObject function"
[33m87fe2bf[m stdlib: Add a _isClassOrObjCExistentialAndSizeofAnyObject function
[33m7aa62ce[m Add an inline(late) attribute
[33m8837251[m Add an isReadNone API for function refs and use it in CSE
[33ma36249f[m Just create the bin dir with mkdir -p to unblock people, bots for now.
[33mba3386b[m Add ${SWIFT_BINARY_DIR}/bin as a dependency of llvm-opt and leaks-runner.
[33mcaabe78[m Parser: when recovering from an incomplete 'for' statement, don't set the source location of synthesized AST nodes to point to EOF.  This causes the source range to span more tokens than the parent node does.
[33m5ecaed6[m stdlib: Add tests for sorting routines.
[33m4027d14[m stdlib: Replace quicksort with introsort. Also, unite predicated and unpredicated versions of all functions via GYB.
[33m826f6cf[m Update for upstream LLVM API changes
[33mfc8af07[m Remove long_tests requirements in the validation testsuite
[33ma74a29e[m Move long-running code completion tests to the validation testsuite
[33m6a5f598[m Code completion: include access control keywords in override completion
[33m670c598[m stdlib: remove ImplicitlyUnwrappedOptional.hasBool, IUO is not a BooleanType
[33m5533655[m Remove old single basic block ARC optimization pass. It is bitrot now.
[33ma759420[m [llvm-opt] Add wrapper script "llvm-opt" that automatically loads swift llvm dylib.
[33meeca7e5[m [load-store] We no longer perform single BB load-store opts so we should always have a post dominator tree. Remove NULL check.
[33mc956e8a[m Remove AssertDebug test; validation-test/stdlib/Assert.swift covers the debug build configuration
[33m32aafa5[m [test] Don't use %clang-importer-sdk in test availability_ios.swift.
[33m4a9245f[m Move Assert.swift test to the validation testsuite
[33m9ae778a[m Remove long_tests requirement from tests in the validation testsuite
[33m9276660[m Move long-running Unicode tests to the validation testsuite
[33mb689a27[m Move FixedPointArithmeticTraps test to the validation test suite
[33m577ea23[m Refactor FixedPointArithmeticTraps test to use StdlibUnittest
[33m1bdf864[m Do not penalize optional-to-optional conversions when processing the associated value-to-optional conversions. Doing so can result in incorrect ambiguity errors when applying optional-typed arguments to function overload sets with optional and non-optional parameter types. (Hitlisted: rdar://problem/18028526)
[33m22ea43e[m Change the default -sil-view-cfg mode to truncate.
[33me5047fa[m Truncate SIL lines when generating DOT from -sil-view-cfg.
[33ma0a3f81[m Remove temporary -enable-global-opt flag
[33m9fb3507[m stdlib: use unchecked arithmetic in _floorLog2 because it can never overflow
[33mda5a441[m Rename ArrayOpts to COWArrayOpts.
[33m31dc995[m [Print QuotedString] print \u{..} instead of \x.
[33m2fae615[m Update for upstream LLVM API change.
[33mceb81ec[m Push down release notes 8/18
[33mcdc876f[m stdlib: remove 'public' from some internal bit twiddling functions
[33mf90b1b3[m Added release note for removing "+" on Characters
[33mfd50a50[m stdlib: Add floorLog2 function.
[33m5808309[m stdlib: port Assert.swift test to StdlibUnittest
[33mcae11e1[m stdlib/Assert: add overloads for assertionFailure(), preconditionFailure(), fatalError() that accept string interpolation
[33m1660487[m stdlib: disallow concatenating Characters with "+"
[33m4ffa05c[m Add the CapturePropagation pass to specialize closures on constant arguments.
[33mbd299c9[m Move getSpecializedLinkage into Local.cpp
[33mb86c0df[m comment correction
[33mf5a9eab[m Fix crash when a block has two incoming edges from the same terminator.
[33m532ca77[m stdlib/String: fix a memory safety issue with using foreign indexes (indexes obtained from a different object)
[33mf1f3025[m Add call graph edges based on direct calls.
[33m1d97e5e[m Fix the description of sil-view-cfg.
[33mb1f7743[m Remove trailing whitespace. NFC.
[33m56d51ca[m [g-arc-opts] Teach the ARC optimizer how to strip off ref count equivalent operations such as casts and ref count identity preserving typed geps.
[33mcbf6f15[m CSE: Calls that participate in cse need to be readnone
[33m97b6216[m Add option to view the CFG after optimizations
[33m7a58f76[m Revert "[test] Disable autorelease optimization test on arm64 pending rdar://17999904."
[33m980ccb7[m [stdlib] Fix reserve when extending String
[33ma7f886a[m stdlib/Printing: add a regression test for rdar://17222588, this works correctly now
[33m5bffe7b[m stdlib/Reflection: add a regression test for rdar://17098079; this does not crash anymore
[33me6c586a[m stdlib/NSString APIs on String: add tests for the rest of the APIs
[33m8342c4a[m stdlib/NSString APIs on String: add more tests
[33m1dbca01[m stdlib/NSString APIs on String: add more tests
[33ma64dcee[m stdlib: remove a stale FIXME, '!= nil' is now required to test Optionals for the presence of a value
[33m61f9b11[m StdlibUnittest: add expectEqualUnicodeScalars() assertion function for precise String comparison
[33m29de855[m stdlib/String: add an XFAIL'ed test demonstrating a String bug
[33m2869641[m stdlib/String: add tests for using indices from one String with a different String
[33m203057d[m stdlib: add a test for string literal concatenation
[33m823291e[m StdlibUnittest: add a compatibility typealias to allow PlaygroundLogger to transition to the new APIs
[33m4076068[m Revert "Revert "[sil-combine] ({struct_extract,unchecked_enum_data}  (unchecked_ref_bit_cast)) -> unchecked_ref_bit_cast when the two instructions  are just layout compatible bit casts.""
[33ma6c5547[m [ClangImporter] When importing attributes for a class, use the @interface.
[33m8cca039[m StdlibUnittest: rename TestCase to TestSuite since it contains multiple tests
[33mfd92ef7[m Use the *Swift* ABI version in the objc_imageinfo.
[33mdc001d3[m stdlib: Don't check overflow on UnsafePointers they are unsafe
[33me76a6c7[m Add -sil-print-pass-name option.
[33m70caa2e[m stdlib: Don't check for overflow in subscript accesses to ContigousArrayBuffer
[33m4cc4039[m remove an unnecessary #include in the middle of a file.
[33m1f54d02[m [Closure Specializer] check in a pass to specialize closure.
[33mcd6b046[m SimplifyCFG: We only change the CFG of the current function
[33mfeb15c0[m [Basic] Include the diagnostic ID in the DiagnosticInfo that the diagnostic consumer receives.
[33m338739d[m ABCOpts: Comment code that matches an integer passed to the bounds check.
[33m86d43be[m IndVars: Store the increment of an induction variable
[33meffa193[m ABCOpts: Cleanup - use PointerIntPair instead of reinterpret cast
[33me0173f4[m ABCOpts: Move member variables to the top of the class
[33m12832ab[m Add a missing CHECK line.
[33m9977f78[m stdlib: unbreak build with INTERNAL_CHECKS_ENABLED=NO
[33m35d9fc2[m [stdlib] Doc comment reduce algorithm
[33m84abad0[m stdlib: clarify a trap error message
[33m1eba71e[m [stdlib] Doc comments and parameter naming, NFC
[33m7a80e12[m Minor standard library cleanups. NFC
[33m15b1790[m Fix generic definitions of &= and ^= for bitwise types <rdar://problem/18018525>.
[33m27a8897[m Optimize enum_is_tag branching to switch_enum when the enum is not of the given tag.  Only currently supports case where the switch has 2 possible tags.  rdar://problem/18010012
[33m27f357a[m Parser: feedback on r21194.
[33mce9c0a8[m [SILParser] enable @sil_unmanaged on Optional.
[33m938e7c2[m stdlib: introduce UnicodeScalarLiteralConvertible protocol
[33m95ebc15[m [SILParser] look for global variable in other modules.
[33md27e2ec[m [SILParser] clear the vector before calling lookupMember.
[33madb04e5[m [SILParser] parsing "!" as ImplicitlyUnwrappedOptional.
[33m2f80b28[m stdlib: remove a bogus implementation of an unavailable function
[33m90b8849[m [g-arc-opts] When inserting new retain, releases use the stripped pointer of the first retain, not the original argument.
[33mf0043de[m [cse] Add support for address_to_pointer and index_addr.
[33m0fc92aa[m Remove empty Nil.swift from the standard library
[33mcfa2bda[m stdlib/Hashing: use unchecked arithmetic when mixing in the per-execution seed
[33m1070427[m [SILParser] parsing witness table after we already have the declaration.
[33ma44a16b[m [ClangImporter] Test for a module's presence before trying to load it.
[33m8945540[m [ClangImporter] CFPlugInRef is in fact a CF-compatible object.
[33m52a89d5[m sil-extract: disable access control to access members from sil.
[33mde9e819[m Fix minor regression from r21154
[33m5a71cac[m Remove nib-lookup hacks from UIViewController. Fixes rdar://17327189.
[33m04ca5e1[m ABCOpts: Add bounds check hoisting of induction identity accesses
[33mc519ecf[m API Notes File: The product of the 2d nullability audit of Foundation.
[33m7f87bce[m This patch works around an issue with JIT relocations in LLDB generated modules by avoiding access to the fieldNames pointer of the nominal type descriptor. Fixes rdar://18007819
[33mf05cd00[m Handle reference storage types in the optional-injection workaround from r21176.
[33mcd971d0[m [Serializer] canonicalization of GenericSignature.
[33m6f80758[m [stdlib] Add a missing test
[33m21dcd07[m Extend the optional-injection-of-erroneous-nil hack for more entities.
[33mf075c10[m [stdlib] Add a ?? overload with T? on the RHS
[33m5579167[m Add the swift AA pass to the LLVM pass managers called in IRGen.
[33m86b59b1[m Add a score kind for value-to-optional bindings, and ban them during partial ordering.
[33md812966[m stdlib: remove Optional.hasValue property
[33m6770802[m stdlib: mark Optional initializers as transparent
[33m502b4bf[m stdlib: coding style, trailing whitespace
[33m0441ddb[m Revert "[sil-combine] ({struct_extract,unchecked_enum_data}  (unchecked_ref_bit_cast)) -> unchecked_ref_bit_cast when the two instructions  are just layout compatible bit casts."
[33mf6acde3[m Simplify (enum T, Tag, (unchecked_enum_data %Value : T, Tag)) -> %Value
[33m8cc0953[m Fix issue with switch_enum simplification.
[33ma4e5452[m [test] Disable autorelease optimization test on arm64 pending rdar://17999904.
[33m6211052[m [sil-combine] ({struct_extract,unchecked_enum_data}  (unchecked_ref_bit_cast)) -> unchecked_ref_bit_cast when the two instructions  are just layout compatible bit casts.
[33m6460f97[m [sil-combine] Always convert unchecked_addr_cast -> unchecked_*_bit_cast instead of to typed GEPs.
[33m372ea11a[m [IDE] Fix a crash trying to get the extended type of an ExtensionDecl with an un-typechecked AST.
[33m0152349[m [test] Fix some FileCheck fragility in test IRGen/abitypes.swift.
[33mc6d7050[m [Parser] fix printer to not print mutating twice.
[33m8df878c[m Give CGRect/CGSize/CGVector initializers that take Doubles.
[33md23e86f[m [SILParser] parsing Self as part of where clause.
[33m916e9a7[m Fix computation of “favored” constraints for binary expressions <rdar://problem/17943223>.
[33mab3e8aa[m Make SILValue::stripCasts see through UncheckedRefBitCastInst.
[33md5a619b[m Small refactoring of call graph code.
[33m4970157[m [SILParser] parsing extensions.
[33mebf7db3[m [Parser] parsing "<a, b<c>?>" as the generic arguments.
[33m1fc7709[m Fix Dictionary printing test on 32-bit platforms by allowing any key/value order
[33mef3a5cb[m Parser: round-trip @effects.
[33m94f5917[m Fix hashing test for 32-bit:
[33m93b8155[m Remove a fatalError() that I pasted here by mistake
[33me2f2643[m Try harder to fix the Runtime test on 32-bit iOS simulator
[33m680b067[m Fix two tests under 32-bit iOS simulator
[33m7777fe0[m Fix warnings in tests
[33m3a04e08[m stdlib: add a function to squeeze a number in a given range from a hash value
[33m0492048[m Remove TrapTestPrototype, it is merged into StdlibUnittest now
[33mc005433[m Fix the tests that broke with r21137.
[33m54458fb[m Enable access control based devirtualization.
[33mf9d4a84[m Remove the rest of the tryFinal logic. rdar://17890078.
[33maccba56[m Disable the code that adds the 'final' attribute based on access control.
[33m1ef2ee7[m [stdlib] Make StaticString and AssertString DebugPrintable too.
[33m4c667c5[m Infer "dynamic" for Objective-C methods introduced in class extensions.
[33mc94b5cd[m [SILParser] use generics scope when parsing types in protocol_method.
[33m8322876[m Sink retains down in the current BB if they cannot be sunk to a successor.
[33m3f0e430[m fix the build: clang gets more and more unique.
[33ma992d9b[m [codemotion] Check for decrements between retain,cond_br not retain,enum_is_tag
[33m8ab9066[m Relax FileCheck patterns because stdout and stderr are sometimes mixed
[33m2e04424[m Relax the FileCheck pattern to allow the test to pass on iOS
[33m4b9c318[m stdlib: correct trap messages for float to integer conversion
[33m67bf9f9[m #ifdef to allow benchmarking C version of richards.
[33mca03e52[m API Notes File: Add the notes generated as the product of the first nullability audit of Foundation
[33m40d5448[m simplify some code in constraints::matchCallArguments, NFC.
[33m24d4d9d[m SimplifyCFG: Implement general jumpthreading using the SSAUpdater
[33me5e11b9[m LoopRotate: Don't rotate single BB loops
[33me3b33d7[m PassManager: Add flag to only print one SIL function
[33md0718c1[m fix ConstructorDecl::getDelegatingOrChainedInitKind to notice that an init method has the convenience attribute on it when inferring the type of an init that contains no self.init or super.init method.  This allows us to properly infer that these things are delegating initializers, which trickles down to emitting:
[33mb644ff5[m XCTAssert(true, "Pass") crashes in Swift
[33m84514e5[m [CMake] Fix validation testing for variant build.
[33m95d7e65[m Proactively, ensure that the overlay works with NSDictionary::objectForKey: optional return type.
[33mb0a6d60[m fix the ast printer to not print 'convenience' twice in a case that fouled up the sil parser.
[33m764237d[m [g-arc-opts] Cleanup dataflow merging in the ARC optimizer so we do not prematurely clear values due to spurious merge failures.
[33m3ea14f4[m [g-arc-opts] Only remove pairs, when we have the last release and the iterated retain property.
[33m323c788[m [CMake] Support simulator testing with the multiple-variants build.
[33mf7499fa[m There is no Float80 outside x86, conditionalize the code
[33ma5c03a5[m stdlib: trap when constructing integers from Float and Double NaNs.  Not implementable for Float80 yet.
[33m7255f90[m stdlib: move test for floating point conversion traps to the validation testsuite
[33mb3c2f0e[m StdlibUnittest: add a dependency on Foundation overlay
[33mff8f68f[m StdlibUnittest: use builder syntax for 'xfail' and 'skip' annotations
[33m4fa0646[m NSString APIs test: attempt to fix the test on iOS by removing a dependency on a file in the source tree
[33m64a6a73[m Include information about the Swift ABI version in the objc_imageinfo record.
[33m4ceaaa5[m [test] Fix test for r21100 to not rely on empty directories.
[33m0066852[m EnumSimplification was designed to avoid generating a hashmap from BB to RPO, which is well-intentioned, but I think it's simpler and safer just to use an RPO map here. This patch changes the code to:
[33m19f5431[m Remove a land mine. C++ copy ctors need to actually copy.
[33m2d727bb[m [Driver] Reject SDKs older than OS X 10.10 or iOS 8.
[33m7b09119[m Dictionary test: comment out checks that fail on the buildbot.  Apparently, the number of leaked objects depends on the OS version.
[33md31ce19[m [DebugInfo] Actually test the change in r21097.
[33m903cfac[m [DebugInfo] When looking up an imported module, don't include the scope.
[33mbde47cf[m SILGen: Keep the 'let x: NSFoo? = NSFoo()' failing initializer hack from being optimized.
[33mdc6d11c[m [test] Foundation doesn't import CoreGraphics on iOS.
[33m3d45b04[m [stdlib] Make StaticString and AssertString Printable.
[33m5d85c46[m [ClangImporter] CCCryptorRef is also not a CF type.
[33m23ab9d5[m Add a comment to the enum definition. NFC.
[33m6f20c51[m stdlib: fix crashes in CGPoint, CGSize, CGRect mirrors
[33mf243606[m StdlibUnittest: run tests out of process
[33m4444410[m Remove the docs for @semantics(readonly).
[33m4cf6181[m Replace @semantics("readonly") with @effects(readonly).
[33mcd3ab60[m Fix an encoding bug. Testcase in the next commit.
[33m3315905[m Catch fallthrough cases in the handling of InlineAttr.
[33m2e18d8b[m Reorder the fields in the enum to allow less-than comparison on the values.
[33mb432f66[m Teach the inliner not to inline functions with the @effects attribute during the high-level SSA PM. This is the current behavior for @semantics("readonly") and it is needed by the high-level optimization passes because after inlining the semantics/effects information is lost.
[33m478cf8d[m Document the enum. NFC.
[33m1ab312c[m Fix malformed IR after constant fold switch enum.
[33m8176e99[m [ClangImporter] Special-case some known non-CF types whose names end in "Ref".
[33mee22004[m [IRGen] Walk inlineable Clang functions and emit their dependencies.
[33m65cd1ac[m [CMake] If apinotes/ is a Git repository, re-run CMake when HEAD changes.
[33m73cce97[m [CMake] Remove the CMakeLists file from apinotes/.
[33m77ea35a[m Introduce a flag to mark classes with Swift-native refcounting and take advantage of it.
[33m0fb61b3[m Interpreter test for @objc unowned reference.
[33m4645d00[m Don't inherit a designated initializer if there is already a convenience initializer with the same signature <rdar://problem/17785840>.
[33m8e093f1[m Runtime: Fix logic inversion in objc_rootWeakRetained (which is really UnownedRetain).
[33md5d1aa8[m Initialize the variable.
[33m8e44116[m Cleanup: change a flag from bool to an enum. NFC.
[33m615da0e[m Document the new @effects attribute.
[33m8dd52d6[m Add the @effects(readonly/readnone/readwrite) attribute.
[33mf538edd[m Add Foundation dependency to fix the build in some configurations
[33m76999d8[m QoI: improve diagnostics for required/override confusion <rdar://problem/17923290>.
[33m3277397[m Correct the string interpolation optimization (r21066): UnicodeScalar is Streamable
[33me921cc1[m stdlib: dispatch directly to the property getter in _toStringReadOnly
[33m20f7421[m stdlib: refactor StringInterpolation.swift.gyb to use SwiftIntTypes instead of duplicating it
[33m06ac066[m stdlib: underscore-prefix toStringReadOnly, fix 80-columns violations
[33mc75fb72[m Reimplement SILVerifier verifyStackHeight to avoid stack explosion.
[33mfb4fe43[m Handle '?' as an operator character in mangling.
[33md96e940[m Mark the concatination of two strings as @readonly.
[33m2217b29[m Check for overflow in SILFunction reference count adjustments.
[33m33003d4[m Fix 80-column violations.
[33m6358d67[m Cleanup the optimization driver. NFC.
[33mdd803a3[m change LValue from holding its segments as a DiverseList to holding them as a std::vector<std::unique_ptr<PathComponent>>.   DiverseList memcpy's around its buffer on copy and move operations.  This seems safe with all of the current implementations of Cleanup, but is absolutely not with the LValue PathComponents.  These things hold std::vectors, RValue (which has an std::vector in it), and a bunch of other probably non-trivial things.
[33m056e8fb[m Remove a test that I checked-in accidently.
[33m26816e2[m QoI: Improve diagnostic for a missing required initializer with a Fix-It.
[33m59e033f[m Make toStringReadOnly non-public.
[33me67c274[m Convert the toString overloads to GYB.
[33m5de8140[m test that you can't define a ? operator.
[33md7bcbc3[m make ? a general operator character, allowing user defined operators like ??=.  We already reserve ? itself as a special token that cannot be defined (protecting ternary, postfix ?, etc) but add some defensive code to prevent people from defining those operators.
[33m744d1fb[m Remove the non-generic toString versions and create a single @readonly toString function that can be used by convertFromStringInterpolationSegment.
[33ma662814[m IRGen: when comparing two pointers we don't need to bitcast both to char*. We can bitcast one to the other and save a bitcast.
[33m7572081[m change a directory with one file in it to be one file.
[33m882dddf[m Add a test for interpolation with multiple parts
[33m11d4933[m Customize diagnostic for calls to super.init within a convenience initializer <rdar://problem/17922223>.
[33mae52323[m toString() optimizations: 1. Remove incorrect @readonly semantics on two functions. 2. Overload toString for some of the popular types and add readonly semantics so that we can optimize them away.
[33ma27179c[m Don't diagnose the lack of self.init during type checking <rdar://problem/17922223>.
[33mbc144c3[m NSString test: disable the problematic test on iOS simulator and iOS 7.*
[33m54d7a31[m Handle unreachable blocks in StackAllocationPromoter::getDefinitionForValue.
[33mdc6df93[m Attempt to fix a test for NSString API on String when run on OS X 10.9
[33mab8b14f[m StdlibUnittest: allow xfail and skip annotations on tests
[33mb09698a[m stdlib: privatize lazyConcatenate() and related APIs
[33m9d46681[m Add MODULE_DIR parameter to compile_swift_files.
[33m1335a05[m stdlib: remove FIXMEs from stdlib doc comments and add a test to catch these in future
[33m1a9f07f[m Fix tests for Clang importer change
[33mee50510[m Reduce depth of binary_operator_perf test.
[33mcd4c8f8[m Remove an unnecessary null check that was preventing type member constraints from being added to some freshly opened type variables.
[33m3caaac5[m [ClangImporter] QoI: Import 'const void *' as 'UnsafePointer<Void>'.
[33m822f72c[m Revert "Devirtualize class methods based on access control."
[33m0499d24[m Simplify the loop that finds the class member using getDeclaredTypeInContext. NFC.
[33mc66f460[m Devirtualize class methods based on access control.
[33mc17fd1a[m API Notes: Add availability info to global variables and global functions.
[33me63fbc5[m [LLVM Sync] Adapt this use of TargetMachine to the new interface introduced in LLVM r214781.
[33m9b07f35[m Audit NSDictionary's subscript.
[33m8bb7f7b[m IRGen: Fix codegen for weak class-constrained protocol types.
[33m61a3851[m Attempt to fix the Reflection test case failure
[33m321b109[m PreallocatedMap::find fix for yesterday's bad fix. Don't read past end.
[33ma472b40[m Add Mirror conformances for StrideTo and StrideThrough. These are mostly there to embellish the labels for child elements, as the default struct Mirror is doing a good enough job on its own. Fixes rdar://17876067
[33m6cac206[m Solver: if we fail to type-check with an implicitly unwrapped optional type, unwrap it.
[33m8c41e18[m stdlib/NSString APIs on String: change stringByRemovingPercentEncoding property type to be an optional string; add tests
[33m4ff01af[m Remove most of the 'NS' types from the dictionary pattern matching example.
[33m0e7e263[m stdlib/NSString APIs on String: add more tests
[33mbb02b85[m Implicitly introduce .Some(x) to balance out optionals in is/as patterns.
[33mcebf8f3[m Factor plumbOptionals() into a general-purpose TypeBase::lookThroughAllAnyOptionalTypes(), NFC
[33m67de904[m stdlib/NSString APIs on String: change stringByAppendingPathExtension() to return an optional String.  This behavior is not documeted, though.
[33m9d5ba31[m Ban __conversion functions.
[33ma75c7a4[m stdlib/NSString APIs on String: add more tests and fix a crash in _countFormatSpecifiers() that was triggered by non-BMP characters in the format string
[33mef67485[m Push down release notes 8/4
[33mcf09436[m Keep +[GKLocalPlayer localPlayer] as a factory method.
[33madab072[m stdlib/NSString APIs on String: add tests for substringWithRange()
[33m015bf17[m Use preferred formatting for && in an "if" across lines. NFC
[33medc664c[m stdlib/NSString APIs on String: change return type of stringByAddingPercentEncodingWithAllowedCharacters() and stringByAddingPercentEscapesUsingEncoding() to String?, and add API notes for NSString to the same effect
[33m045eca4[m Code completion: when preparing a pattern for closure expansion in function parameters, don't consider autoclosures to be expandable
[33m6e3a9e9[m NewStringAppending: attempt to fix this test under ASan by making it independent of memory allocator implementation
[33mddefab2[m stdlib: adjust the suggested default implementation to reserve the correct amount of storage
[33mefa4d20[m Fix missing space from r21001.
[33m0d3d78c[m Warn if a subclass method has a 'T!' param where the superclass has 'T'.
[33m5197f3c[m [test] Don't assume Dictionary contents are ordered.
[33mf6321ec[m [test] Remove unnecessary declaration from DebugInfo/implicitdecl.swift.
[33m7eacae4[m [stdlib] Make String.extend/append overloads available
[33me70c19f[m [stdlib] Don't allow String() + Character("x")
[33m70b388b[m [stdlib] Add append() to ExtensibleCollectionType
[33m91fb509[m Outside function input types, ban single-element tuples with a label and variadic tuples.
[33mb534677[m EnumSimplify. Minor potential fix to avoid iterator invalidation.
[33m91069e1[m Get XCTAssertEqual working with [T] and [T:U]
[33mb13083b[m Provide better fixits for optionals-as-booleans (rdar://problem/17833968)
[33m3ed6ed8[m Update the test for UnsafePointer API change
[33m51d0b96[m StringSlicesConcurrentAppend: attempt to fix this test under ASan by making it independent of the allocator implementation details
[33m1ec2b36[m [stdlib] Implement String.reserveCapacity
[33mbc34ed1[m Fix PreallocatedMap::find to check for missing keys.
[33m71cf758[m Mitigate exponential solver behavior (rdar://problem/17162690)
[33m27be763[m [IDE] Fix a crash trying to walk the getter of a lazy property with an un-typechecked AST.
[33m3b35162[m Fix 80-cols violation
[33m9fc959b[m [stdlib] UnicodeScalarView : RangeReplaceableCollectionType
[33mdb1bbda[m One more missing bitPattern:
[33m10ee277[m Add a few missing bitPattern:'s
[33m0c5cbd8[m [stdlib] String : RangeReplaceableCollectionType
[33maaaedef[m stdlib/pointer types: give all pointers to objects (COpaquePointer, Unsafe*Pointer) equivalent APIs, and change the initializer from a bare integer to require a 'bitPattern:' label.
[33m9bec796[m [stdlib] Lazy and eager concatenate
[33m6e401c2[m stdlib: add a mirror for the Unicode scalar String view
[33m1c484d9[m Allow bridging "as" patterns in switch cases <rdar://problem/17408934>.
[33mc25eac6[m Dynamic casting: fix an overrelease in object-to-value casting via bridging.
[33m4c0075f[m stdlib: fix mirrors for UTF8 and UTF16 String views so that they actually work instead of causing a stack overflow
[33m6e6e20a[m [test] Added an integrated "-test-createCompilerInvocation" tool to swift-ide-test.
[33m8db11fd[m [driver] Added an API for creating a CompilerInvocation from driver arguments.
[33m56473c3[m stdlib: change out-of-bounds subscripting traps on mirrors to be _preconditionFailure()s.  Some of these checks are clearly redundant (for example, the check of array subscript), but since we have no tests for these traps (and reflection is not fast in general), I prefer to keep this transformation as straightforward as possible.
[33m60b9293[m Use the dynamic casting infrastructure for casts that bridge from Objective-C.
[33m5746e4e[m stdlib: rename _fatalError to _sanityCheckFailure.  Name similarity between fatalError and _fatalError has caused some damage already, as some memory-safety checks in Mirrors are _fatalErrors.
[33m54c4dbb[m Fix weird formatting; NFC
[33me32acec[m VarArgs: use "is" checking on metatypes to check for floating-point arguments on x86-64.
[33mdc926bc[m Runtime: Intercept -_tryRetain on the magic base classes of bridged containers.
[33mdf9fd70[m Dynamic casting: test class-existential-to-value casts via bridging.
[33mc66a1ef[m Dynamic casting: handle value-to-class-existential casts via bridging.
[33m4c06dff[m Dynamic casting: Handle object-to-value casts that use bridging.
[33m3143478[m Validation testsuite: remove placeholder test, there are real tests now
[33m0b28008[m Fix a use-after free introduced in r20886
[33m6d4f8ad[m stdlib/String: fix a race in _StringBuffer.grow()
[33m63304b5[m Introduce AvailabilityAttr::prettyPlatformName() to improve diagnostics.
[33m29108b9[m Weak-link to Objective-C classes that Clang considers to be weak-imported.
[33mf52c678[m Track the minimum deployment target and use it for 'unavailable' computations.
[33m2688dd4[m stdlib/Print test: simplify code
[33m76fc166[m stdlib: add missing file comment
[33ma53f7f5[m Formatting cleanup and comments; NFC
[33m4c44880[m s/NSPoint/CGPoint for portability to iOS
[33m24aa149[m Fix a crash in IRGen to unblock Michael. We need to bitcast to void* before comparing two metadata objects.
[33ma7e485d[m [stdlib] _StringCore.replaceRange precondition checks
[33m6edfddc[m [stdlib] Remove obsolete _precondition check
[33mf270a5b[m [stdlib] _StringCore : RangeReplaceable
[33m1fd2577[m Refactor parts of the Devirtualizer. Rename methods and move the method that seaches for point-of-construction for classes outside of the function that does the devirtualization. Now we have a utility that devirtualizes a class given a ClassDecl. NFC.
[33m5eebe94[m Fix a copy-and-paste mistake. Give the pass a real name. NFC.
[33ma805b4b[m [test] Foundation doesn't import CoreGraphics on iOS.
[33mc75bdc8[m [test] Drop import of UIKit in this test; we don't want to bring in OpenGL.
[33meff9c61[m stdlib: attempt to fix Runtime.swift test on some systems; looks like a compiler bug -- all I changed is inlined the _withUninitializedString function into the caller
[33m782ecab[m API Notes: Teach Clang Importer about nullability of globals and functions
[33m68244bd[m API Notes: mask before setting the Nullability
[33m000df96[m stdlib: remove @semantics("readonly") from toString while this change is being discussed and redesigned
[33m509dfb6[m valueHasARCDecrementsInInstructionRange needs iterators to be in the same BB
[33m69482f3[m [stdlib] make test workaround not platform-sensitive
[33m23ee8d3[m [stdlib] Make Array RangeReplaceable test generic
[33ma6d9e85[m [Accessibility] Downgrade "public method in private struct" to a warning.
[33mc593d49[m Rework the _ObjectiveCBridgeable to use inout parameters rather than returns.
[33m811d002[m Use library entry points rather than witnesses for bridging an object to a value type.
[33m63a37b2[m XCTest assertions will eventually EXC_BAD_ACCESS
[33mfe8e659[m [ClangImporter] Hack: import selected constants from Security as CFStrings.
[33m1743234[m [driver] Added support for disabling the check that input files exist.
[33m666e4ee[m Further work on handling exceptions in XCTest
[33me068b72[m Capture a few specific diagnostic cases that don't seem to be covered anywhere else.
[33m0896a12[m Further improve type checker diagnostics through a variety of means.
[33m94623d6[m [stdlib] ...and remove the stray printlns, too
[33m921045c[m [stdlib] Enable commented test part
[33m22044b0[m stdlib/Assert test: don't run tests where we execute 'unreachable' LLVM IR instruction; we are not guaranteed to crash, instead the code can enter an infinite loop which will cause the test to time out
[33m09b569c[m Synthesize trivial accessors when overriding a property in another file.
[33m084ad2f[m [Load Store Opts] use BBArguments to merge in multiple stores.
[33m43cbe39[m Fix SourceManager::closeVirtualFile when the end loc is the buffer end.
[33m2b73716[m [ClangImporter] When a submodule is imported, so is the top-level module.
[33mb682e0c[m [ClangImporter] Don't try to recover if an Objective-C module can't be loaded.
[33mc026073[m [Load Store Opts] more refactoring. NFC.
[33m65f4dc3[m Cleanup SIL tests. NFC.
[33m1f8ec23[m [stdlib] Correct/test _StringCore.reserveCapacity
[33ma38f62a[m Rename tests. NFC.
[33m2ce50db[m When inserting an inline cache sink the class_method instruction next to its only use. I did not observe and performance difference with this change.
[33m8c589b6[m Ensure explicit submodule interface printing test test the right thing
[33mdb24ff2[m [IDE/CodeCompletion] Update copyAssociatedUSRs() to walk overridden declarations exhaustively, including protocol conformances.
[33m8094d8d[m [IDE] Add utility function for walking overridden declarations, including protocol conformances and clang declarations.
[33m612e7e6[m Don't adjust line numbers in the PlaygroundTransform. LLDB now uses #line directives to ensure that the source lines are reported correctly.
[33m439e7ec[m Separate forced from conditional tests. NFC
[33mfd3fa72[m Dynamic casting from Objective-C bridged value types to class types.
[33mf98a535[m [Load Store Opts] fix typo.
[33m0b7cd65[m [Load Store Opts] separate the feasibility check. NFC.
[33m2f988f4[m [PrintAsObjC] Don't use OBJC_DESIGNATED_INITIALIZER for protocol initializers.
[33m4eebcb9[m Change ASTContext's LoadedModules map to be keyed by Identifiers, not strings.
[33mbf366de[m Don't find submodules via name lookup.
[33m3722438[m [driver] Fix an assertion failure when running "swiftc -v -force-single-frontend-invocation".
[33m9036891[m SILCombine: Test case for 20893
[33m00dd90d[m [stdlib] Robustify _StringCore extensibility test
[33mbcc7bd3[m [stdlib] Construct String from NSString, publicly!
[33m64b9943[m Fix test check line
[33mc3e1f98[m Fix RestructuredText error
[33m6802c2d[m Document the enum_is_tag instruction.  Thanks Michael for pointing out that i'd missed this
[33m80c2dc7[m SILCombine: Don't optimize away stores to alloc_array if the alloc_array itself is stored
[33m142a32a[m stdlib/Assert: allow string interpolation in assertion messages
[33m587a37c[m Set swift_stdlib_asserts lit feature only when stdlib checks are enabled
[33ma79339e[m stdlib/Assert: adopt new names for trapping functions:
[33mf41361c[m Don't release address types when deleting apply instructions.
[33mc39bcf7[m Fix an obvious typo that snuck in by mistake last commit.
[33m28022fc[m Add a silcombine optimization to remove alloc_array instructions that are only written into.
[33mc5b71e9[m Don't use punycode when mangling names for Objective-C metadata.
[33m89889fa[m [sil-mode] Add enum_is_tag.
[33mcec7168[m Remove unneeded argument.
[33mc506c6d[m Update the program that generates huge random swift files to modern swift.
[33m1408b8c[m When deleting Apply instructions make sure to release consumed arguments to prevent a leak.
[33mc5fe89d[m Teach codemotion about enum_is_tag so that it can move retains.  This is exactly the same logic switch_enum currently has
[33m76631d1[m Catch exceptions thrown during assertions.
[33m3a2b516[m EnumSimplification should know how to analyze enum_is_tag and see whether a specific branch is a specific enum element.
[33m64e5c0b[m [IDE/CodeComplete] Add associated USRs to CodeCompletionResult. If the completion result is a declaration, it contains the USR of the specified declaration and all overridden declarations.
[33m5f02ce8[m [stdlib] Use Range<UnsafePointer> in _StringBuffer.grow()
[33m5465993[m [stdlib] UnsafePointer : RandomAccessIndexType
[33m28731b0[m Fix crash in box-to-stack promotion.
[33m46d85a7[m [driver] Implemented support for emitting parseable output.
[33me47ded9[m [driver] Added a separate Parseable OutputLevel.
[33m34af354[m Added a document describing the design of the driver's parseable output format.
[33ma69eb17[m [json] Added a basic JSON serialization class in swiftBasic.
[33mc510b1d[m [Driver] Infer libFOO.dylib from a module name of FOO and vice versa.
[33m6d2a3bb[m SILGen: Load 'self' at +1 for class-constrained generic methods.
[33m0331b72[m [PrintAsObjC] Don't print extensions of CF types.
[33ma526dfc[m [IDE] Make sure to match-up the SEWalker.walkToDeclPost() calls with the SEWalker.walkToDeclPre() ones.
[33m9ab436a[m Expect stricter scoping requirements from inlining and clonening passes.
[33mbd81003[m The --tree-only option to swift-demangle was not doing what it promised to do, instead refusing to print anything. Fix it
[33ma3b85b2[m Set the debug scope for transparently inlined instructions to the scope of the inlined call site. Also fix a bunch of typos in the related testcase.
[33m6cc5fa2[m Mark another function as @readonly.
[33mdb0e49d[m Don't consider a setter to be overriding if the base setter is inaccessible.
[33mb0ec163[m API Notes: Mark UIView's notionEffects as optional.
[33m08e5bff[m Mark some more conversion functions as @readonly.
[33m40111a4[m Fix module interface printing for submodules
[33m18c6f52[m When mangling a type within an extension, pass down the extension’s generic parameters.
[33m52ecfc8[m Mark some more string builders as @readonly.
[33m7bc2309[m Maintain some more type sugar through substitution involving dependent types
[33m685bb84[m Minor cleanup. NFC.
[33m0192838[m [driver] Fixed Verbose output for cases where there's a single Command to execute.
[33m93f7f2a[m [driver] Fixed a bug in DummyTaskQueue where it would not generate unique ProcessIds.
[33m6cf3021[m Added support for specifying the terminator used by Command::printCommandLine.
[33m1b98005[m Cache the class hierarchy construction. Before this commit we scanned the vtables every time we wanted to know who are the subclasses of a class. Now we scan the vtables just once.
[33ma627411[m [ClangImporter] Imported NS_OPTIONS structs should not conform to BooleanType.
[33m9042645[m [ClangImporter] Preserve all of Clang's availability attribute information.
[33m9f64db0[m Fill out the implementation of AvailabilityAttr.
[33mddcc1b7[m Parse the @availability attribute in full.
[33mc485690[m [ClangImporter] s/OSX/OS X/ in the deprecation error message.
[33m5257550[m [ClangImporter] Don't mark generated 'unavailable' attributes as implicit.
[33m1a65ce0[m Print @availability and @asmname on their own line.
[33m8419d20[m [stdlib] ImplicitlyUnwrappedOptional is not Boolean
[33m020c589[m [stdlib] AutoreleasingUnsafePointer is not Boolean
[33m104da67[m [stdlib] Make && and || generic
[33md1f7336[m Infer requirements from the where clause of a generic parameter list.
[33m61715b1[m Remove some dead code: pattern parsing is now never used for argument lists, so inout can't appear there and we don't need to propagate an "isArgumentList" bool down through pattern parsing.  NFC.
[33m6bf57e9[m Revert "Serialization: introduce a conformance cross-reference so we don’t serialize normal protocol conformances in modules that didn’t declare them."
[33m0184d97[m Partially revert “Maintain the DeclContext of a NormalProtocolConformance as the type declaration or extension.”
[33m182e0b0[m Revert "When determining the generic parameters used in a conformance, query the DeclContext."
[33mae454c4[m Revert "Don't emit protocol conformance cross-references for conformances owned by Clang modules."
[33m1aa74e8[m Add a check for the implicit import line to this testcase.
[33mbc2071a[m make 'inout' be a keyword, to match var and let.
[33m2b59a39[m Don't emit protocol conformance cross-references for conformances owned by Clang modules.
[33mc7a5b1d[m stdlib/runtime: fix leaks in swift_bridgeNonVerbatimToObjectiveC
[33m5670eca[m Dump 'where' clause as part of GenericParamList dump. NFC
[33mea21309[m [stdlib] _StringCore: ExtensibleCollectionType
[33m1614ed7[m [stdlib] Improve comments
[33m8150b92[m stdlib: fix leaks of Swift.String when passing them from runtime to Swift (in mirrors and demangling)
[33m0194e26[m stdlib/UnsafePointer: add more doc comments
[33m30749d9[m stdlib/Reflection: really fix a leak when reflecting a class (turned out to be in swift_ObjCMirror_count)
[33m9c8d30e[m stdlib/Reflection: fix over-release that I introduced in r20671 trying to fix a leak.  The release was valid only for some code paths.
[33mfd0921b[m Redeclaration checking: disallow overloading on 'mutating'
[33m2573eff[m [SILParser] fix issues in parsing associated type decl.
[33ma2beb62[m fix <rdar://problem/16786168> Functions currently permit 'var inout' parameters fix <rdar://problem/17867059> ` upgrade logic should be removed
[33mfc7dbfe[m [IDE] Remove unavailable declarations from code-completion results.
[33m73d50e4[m Don't permit creating specialized conformances of specialized conformances...
[33m1167c17[m Fix XCTest build.
[33maa275ea[m Use the generic parameters of the context of a member to substitute into its type.
[33m48ef4ef[m IRGen: Don't read an ObjC isa field directly when building a generic subclass of a generic superclass.
[33m9d7f29b[m [IDE] Use std::regex to match the syntax that the comment URL regex strings are using.
[33mc0e593b[m Clean up previous commit.
[33mbaf466b[m Sema: Diagnose nested generics.
[33m50aac71[m [stdlib] Arrays : RangeReplaceableCollectionType
[33m14542a7[m API Notes: Incorporate framework authors' feedback on UIFont
[33m77f2837[m API Notes: incorporate Kuba's feedback on UIView
[33m97025f1[m Remove compiled python file.
[33mc367362[m Properly flag opaque existential types as not being bitwise-takable.
[33m36a27a6[m Replace the typeOf value witness with an initializeBufferWithTakeOfBuffer value witness.
[33m9fafa1c[m Make deserialized locations default to line 0, which tells the debugger to ignore them, while still referencing the module file needed to perform type lookups, etc. <rdar://problem/17648201> After setting a breakpoint, the first step action is malfunctioning
[33m867429b[m Make XCTAssertEqualWithAccuracy work with CGFloat
[33me9b36df[m Fix test for mutable hoisting.  Unfortunately the placement of the loop BB could be after the return block when printed, so checking for the closing brace after return isn't always going to work
[33ma7cebec[m Handle simple argument SSA case in jump threading.  This is only the case where the BB we are jumping to has a single predecessor which is our threaded block
[33ma3677cb[m Simplify the case where an enum_is_tag inst dominates a switch_enum and so we can replace the switch with a branch
[33m6cc4b4f[m Perform jump threading on enum inst feeding enum_is_tag
[33m2ac6177[m IRGen: Fix another bug in the lowering of checked_cast_br.
[33m37b354b[m When determining the generic parameters used in a conformance, query the DeclContext.
[33mba040d9[m Maintain the DeclContext of a NormalProtocolConformance as the type declaration or extension.
[33me098ce8[m Serialization: introduce a conformance cross-reference so we don’t serialize normal protocol conformances in modules that didn’t declare them.
[33mbd2bd78[m [stdlib] Add RangeReplaceableCollectionType
[33m1df5699[m Also try to add final to non-public members of public classes.
[33madb0d7a[m SILGen: Diagnose recursive types.
[33macf904a[m Use $binding$generator as debug name for generators instead of $generator. rdar://problem/17860627
[33mad90978[m [g-arc-opts] Clear Partial when we clear and make sure we propagate partial into successors and predecessors if "Other" has the partial property.
[33mf93cee9[m Reapply patch for rdar://17023083 which I reverted earlier because clang patch for waninrg goupr name is in. Also run %check-in-clang on the translated output.
[33me4c9c40[m Do not emit debug info for declless/anonymous variables. It is impossible to determine a mangled type name  if the type is generic, and the debugger can't really do anything with an anonymous variable anyway.
[33m564564d[m [g-arc-opts] Change RefCountState::getValue() to assert if Value is NULL, add a method RefCountState::hasValue() for that query and update logging to use hasValue() before calling getValue().
[33m164a483[m Fix CHECK-LABEL line. NFC.
[33m01bd551[m Sema: Diagnose unsupported references between local functions.
[33md197964[m Rename -integrated-repl to -deprecated-integrated-repl
[33mfdcee9c[m Clean up the command line interface for 'swift'
[33m5f98995[m [g-arc-opts] Invert dependency in between RefCountState and its subclasses in clear() and call the subclass clear instead of the superclass clear.
[33md1e45a1[m When coercing an expression through a known type to a builtin type, account for the fact that the expression may already be of the known type. (rdar://problem/17499275)
[33mfa1cd18[m IRGen: Don't drop unsupported fields from non-fixed @objc class layout.
[33me4cbf76[m Add a TypeInfo method to UnimplementedTypeInfo that snuck in.
[33m5a05388[m API Notes: incorporate feedback from DevPubs.
[33mb4f1db9[m IRGen: Stub out an UnimplementedTypeInfo class.
[33m80a21c8[m [stdlib] Fix my last commit (oops!)
[33m287e43a[m [stdlib] Clean up the other half of array casts
[33mf6dc791[m Revert patch in r20767
[33ma16f01c[m IRGEN: re-apply r20748 (fix to CheckedCastBranchInst lowering) with support for non address types!
[33me4b37bc[m Properly check whether we're in an extension when determining settability of a 'let' property.
[33m81b2f47[m Patch to silence warnings about mismatched property ownership attributes by bracketting header with specific group warning pragma clang. This patch also requires patch for rdar://17845264 which is currently in TOT. This is //rdar://17023083
[33mcd31f6a[m [Load Store Opts] add comments and remove clear inside the loop.
[33mab21c59[m [stdlib] Clean up half the array cast machinery
[33mdcc04bf[m Remove help text for -i mode
[33ma9ac767[m Revert "Fix the lowering of CheckedCastBranchInst. We need to cast the argument to the correct pointer type."
[33mec4f8d3[m stdlib: fix a heap overflow that colud happen when appending to a string slice
[33m5d2627e[m Document a function and cleanup debug message. NFC.
[33m391fb88[m TrapTestPrototype: pass environment to the child process to allow the test to pass on 32-bit iOS simulator
[33m6296c14[m stdlib/_StringBuffer: documentation comments, coding style
[33m190db64[m stdlib: document current plan of record for reserveCapacity() semantics
[33mfe8618a[m Scrap the custom allocator until we have time to fix it.
[33m3add65d[m [test] Fix un-terminated cstring in test stdlib/NSStringAPI.swift.
[33mcbdefd7[m Unbreak iOS builds: there is no NSRectEdge on iOS
[33m4a33110[m [test] Disable tuple printing test pending rdar://17855302.
[33maf25d7c[m [test] Fix un-terminated cstring in test Interpreter/SDK/libc.swift.
[33mfc05064[m Foundation overlay: introduce correctly-typed NS{Min,Max}{X,Y}Edge constants that correspond to macros in the SDK
[33mac0d9b8[m stdlib/CGFloat: GYB'ify initializers that convert between CGFloat and integer types.  Never miss an integer type again.
[33mc17b692[m stdlib: pull out information about integer types into a reusable file
[33m875738a[m Fix the lowering of CheckedCastBranchInst. We need to cast the argument to the correct pointer type. Testcase in the next commit.
[33ma124e32[m Generate a runtime fail for bitcasts with different sizes instead of a failed assert. Fixes <rdar://problem/17821040>
[33m4833d83[m PIC: Fix a bug in the cache size threshold and fix the docs. Thanks Greg.
[33m8d3c548[m PIC: Fix a bug in the code that collects subclasses. We want to collect indirect subclasses as well as direct sub classes.
[33m230547f[m PIC: when sinking the StrongRetain instruction use the bit-casted class reference. This allows the ARC optimizer to remove the retain-release pair after inlining.
[33mbfb7814[m Remove a Python bytecode file
[33m80dd63b[m Don't allocate values out-of-line just because they're not bitwise takable.
[33m584795e[m Replace the typeOf value witness with an initializeBufferWithTakeOfBuffer value witness.
[33m0cb8bf0[m Implement polymorphic inline caches.
[33ma643754[m Teach the verifier run getFieldNo to make sure it does not crash.
[33m2550881[m Wire up and validate multiple levels of generic parameters in extensions.
[33mdb085b9[m Fix rdar://problem/17584531 ("Crash in emitDynamicSubscript on access of multiple Foundation containers by subscript")
[33m5cb2d71[m Factor generic signature validation out into its own routine. NFC
[33m934527a[m Eliminate all uses of the typeof value witness.
[33m6165da9[m Rename some of the emitTypeMetadataFor... routines to make it clear that they're requesting a dynamic type.
[33mbd7f3e0[m Remove some pointless code; we should just use the declaration context here
[33mb639447[m Test module names in extension matching.
[33m79d5c69[m Remove CheckedCastKind::ArrayDowncastBridged. Nobody F'ing Cares about it now.
[33m2a9ba67[m refactor some call emission logic w.r.t. inout arguments to expose the LValue for the inout argument to SILGenApply.  NFC.
[33mdf0712f[m Remove dead virtual method.
[33m6d04cc4[m revert r20720: getting RValueSource's for self arguments is futile: we need a concrete SILValue when emitting the Callee object so we can look things up in method tables etc.  Without reengineering all of Callee, that isn't going to work.
[33m1bace82[m Move addArgumentToBranch to Local.h so we can use it in LoadStoreOpt. NFC.
[33m6e7f83f[m Internalize old array casting entry-points
[33mfbbfe26[m Check presence/absence/arity of generic parameters during extension binding.
[33ma8cb45a[m API Notes: add UIView + a couple of corrections to UIKit audit.
[33md85414e[m Split the function into two smaller functions. NFC.
[33m658b8f0[m [Load Store Opts] remove AA and other members from LSBBForwarder. NFC.
[33mb894763[m push RValueSource down into the 'self' parameter emission logic in applications a bit farther, NFC.
[33m0a248aa[m Rename method. NFC.
[33m6a80cbb[m [stdlib] Capitalize the cases of Bit
[33m7c7fb3e[m Restore "[Release note] deferred array cast checks"
[33m1fec0af[m Disallow value-to-optional conversions between argument and parameter types when resolving overloads for operators applied to nil literal operands.
[33me2f243b[m Add stats. NFC.
[33m898bf23[m Move the CallGraphAnalysis to a new file.
[33m4ccfdb6[m Disable monomorphic inline caches for classes that are not at the bottom of the hierarchy. <2% improvments on DeltaBlue.
[33mad213ce[m Remove unused TypeChecker::getNSStringType(). NFC
[33mcb1dc81[m Revert accidental commit.
[33m7faa588[m Add a basic Class Hierarchy Analysis. At this point it only lists classes that are inherited from in this module.
[33mf6c144f[m The linker pass can import new vtables. Flush all analysis.
[33m0b562db[m Revert "[Release note] deferred array cast checks"
[33m657c53f[m Small test of name lookup behavior for extensions with generic parameters.
[33m2162893[m Start validating the generic parameters on extensions.
[33mfa6a739[m Debug info: Add an end-to-end test to catch LLVM backend regressions.
[33m8db3907[m NSStringAPI test: allow to pass under iOS simulator
[33md9dc321[m [stdlib] Tests shouldn't use internal entry points
[33m97d3320[m Release note deferred array cast checks
[33m0481b87[m Move target configuration setup into CompilerInvocation.
[33m18b8122[m [stdlib] Defer array bridge cast checks
[33m5847a0f[m [stdlib] defer Array element down-cast checks
[33mebcaab1[m [stdlib/core] add Array init from _CocoaArrayType
[33m6067bae[m Fix comment in r20694.
[33md9ab58d[m remove some dead code I accidentally left in my last patch, NFC.
[33mfcb6b3d[m Fix <rdar://problem/17391625> Swift Compiler Crashes when Declaring a Variable and didSet in an Extension
[33me5fc178[m Allow overrides to leave out the ownership qualifier of the decl they override.
[33m16ff9ca[m [Serialization] Preserve ownership modifiers on variables.
[33m01dd78a[m [stdlib] Add missing _sanityCheck diagnostic
[33ma8225da[m [stdlib] ArrayBridge.swift => ArrayCast.swift
[33m0320ef8[m [stdlib] Consolidate array casting entry points
[33mfca8237[m TrapTestPrototype: relax CHECK line to allow this test to pass on iOS
[33m48851bc[m IRGen: Remove inaccurate assertion about extension methods.
[33m7c97642[m Don't check the inheritance clauses of extensions as part of validating the type they extend.
[33me8c79f3[m SILGen: Ignore the result of a "for" loop increment.
[33m1f20ed3[m [LLVM sync] adapt these tests to upstream LLVM type uniquing goodness.
[33mc655d08[m Debug info: don't conflate generators and loop variable bindings. <rdar://problem/17058606> for loop range variable shares name with iteration counter - that's wrong and misleading <rdar://problem/16786106> [Xcode 6.1] foreach generators are always named "$generator"
[33ma0bc927[m Change parsing and representation of extensions to accommodate generic parameters.
[33me466b46[m revert r20658, restoring us back to producing the "inout writeback to computed property" error when detecting an inout writeback problem.
[33ma730912[m revert the non-debug-printing pieces of r20661.
[33m6d49b68[m fix <rdar://problem/17790793> Not forming a TypeExpr for tuples
[33mc91e0f9[m [stdlib] bugfix: Copy bridged NSMutableArray's
[33m5f52a10[m CMake: add a hack that lets us add compile/link flags to the default variant of target libraries.
[33mc7e87ba[m Remove unused parameter from revertGenericParamList. NFC
[33mac33242[m Give extensions generic parameters and signatures within the AST.
[33m3e32ff1[m stdlib/String: change String.stringByAbbreviatingWithTildeInPath into a property, to match recent Foundation headers
[33m98188d1[m NSString APIs on String: add more tests
[33m3751991[m Adapt to llvm debuginfo change: use DITypeArray instead of DIArray in some places
[33ma0c8140[m Reflection: fix a leak in TupleMirror
[33mbdc78be[m Reflection: reorder dump() arguments so that one can print to a stream and take advantage of default values
[33m35344b7[m TrapTestPrototype: relax assertion for iOS
[33m8c277e3[m StdlibUnittest: add a prototype of a Swift-based driver for trapping tests
[33mab33113[m Add a dumpVerbose method to Type and TypeBase.
[33m7f89cc3[m [Driver] Remove -Ofast.
[33m06d3700[m [ClangImporter] Use adapter modules for imports in a bridging header.
[33m9a13a71[m [stdlib] Consolidate bridging protocols
[33mc477314[m [Driver] Only link in arclite if deploying to pre-8.0 iOS or pre-10.10 OS X.
[33md0433fd[m [test] Update for Clang r214119 "Change __INTx_TYPE__ to be always signed."
[33m7676259[m Fix http://swiftwtf.tumblr.com/post/91934970718/xcode-6-beta-3 to compile into the behaviorly correct code by CSE'sing subscripts that are identical.
[33m0159a14[m Don't instrument "self" in a constructor.
[33mf22ad4c[m Enabled IRGen testcases to enable UseJIT, which is typically disabled when compiling normally, and thereby emit and check for class initialization without interfering with PlaygroundTransform testcases that use classes.
[33m4d03ef6[m Rip out my previous work that produced perplexing "inout writeback to computed property" errors when SILGen could determine that there was an inout writeback alias, and have the code instead perform CSE of the writebacks directly.
[33mf5549dc[m A small cleanup suggested by Chris. NFC.
[33mf6a025d[m [driver] Added support for the '--driver-mode=' flag.
[33mebbf503[m In all cases where playgrounds need to register classes, UseJIT will also be set, so we don't need to check.
[33m2010702[m Make this friendlier for the LLDB REPL. <rdar://problem/17834651> The next token may be EOF and does not technically belong to this virtual source file, so instead let's end the previous virtual source file at the beginning of the #line token and not confuse the SourceManager. No testcase here , because it's impossible to create such a situation without going via LLDB.
[33m66890d5[m [PrintAsObjC] Mark 'internal(set)' properties as 'readonly' for frameworks.
[33m798814e[m [ClangImporter] Import typedefs of other CF types as typealiases.
[33mf205552[m [LLVM sync] Adopt the new API introduced in LLVM r214115.
[33m0b56282[m Release note lvalue '?'.
[33m7ff5de5[m Enable lvalue '?' chaining.
[33m13fd70e[m Sema: Diagnose OptionalObject failures arising from BindOptional expressions.
[33m8bc7093[m Canonicalize the new error message for "optional as boolean".
[33ma09e0d5[m DI: Handle 'assert' instructions in the SelfInit state.
[33m5496c4b[m [stdlib] Default == for Strideables
[33mf467efe[m [stdlib] Un-break a test
[33m6d1f574[m [stdlib] Separate file for Array bridging/casting
[33m920a8ff[m Make using the -i flag an error
[33m96a5df8[m Remove one more optional-as-boolean.
[33mf55c751[m Add a fixit for optional-typed expressions used in conditional expression positions.
[33md8bb7aa[m Update SIL test for new optional-to-boolean conversion codegen.
[33m94dac12[m Remove the BooleanType conformance from optional types (rdar://problem/17110911)
[33m4d90c2c[m API notes: Mark NSView's layer property optional. radar://17814756
[33mc658caa[m Test calling setters and getters of the API noted properties.
[33mc76eeec[m [stdlib] Drop obsolete @availability
[33m9f93d94[m Eliminate the ~> hack in the type checker I introduced in r20626.
[33m214e2f0[m [stdlib] Drop @availability for renamed protocols
[33m6b3a901[m [SILParser] fix a few issues to enable parsing of sil from swift array.
[33m4ece9b1[m [stdlib] Default bitwise assignment operators
[33m1436c35[m now that Beta 5 has branched, we can remove some migration stuff from what will become beta 6.  This resolves:
[33mbf6e42a[m Add missing test case updates to 20627
[33mbd75425[m Remove the notion of non-inheritable conformances entirely <rdar://problem/16880016>.
[33m3cb58e8[m Restrict non-final class protocol conformance when Self is part of the requirement signature.
[33md90f34a[m [stdlib] RawOptionSetType : BitwiseOperationsType
[33m1fc40c5[m Bring back -parse-stdlib in the interactive driver
[33m1c80e64[m fix <rdar://problem/17828355> curried final method on a class crashes in irgen
[33m2484353[m Push down release notes 7/28
[33m2f2b31a[m buildbot-script: use the proper test target name for SourceKit when running the validation testsuite
[33mf75968d[m stdlib: add a trap() function that traps in debug and release modes
[33mca07053[m stdlib: rename fatalError() to debugTrap()
[33m7f2d50a[m Code completion: try harder to eliminate duplicate results in visible name lookup
[33m5e82e13[m stdlib: NSString APIs on String: more extensive tests for getCString() and getFileSystemRepresentation()
[33mb204bed[m stdlib: NSString APIs on String: add a test that shows getCString() behavior when supplied a string with unpaired surrogates
[33me9a7f91[m Revert "Add the frontend option -disable-sil-perf-optzns." Revert "For debugging purposes allow passes to stop any more passes from running by calling PassManager::stopRunning()."
[33m4bacaff[m SILGen: Implement lvalue BindOptionalExprs.
[33m0b802ce[m String: add some unavailable subscript overloads for String with integer (or integer range) indices.
[33m02cb9be[m [devirt] Disable devirt of inherited protocol conformances for Seed 5.
[33m1893e31[m Sema: Pull infix assignment operators into optional chains.
[33me527571[m Sema: Propagate lvalue-ness through optional chains.
[33m31d6f95[m [stdlib] UnsafeBufferPointer: add ".count"
[33mf650c85[m [codemotion] Do not move retains over switch_enum if the switch_enum has a default case.
[33m6f12625[m Change pass manager pass limit to consider each invocation of a function pass on a function as a "pass being run". This eases bisecting on SILOptions::NumOptPassesToRun.
[33m7136c53[m For debugging purposes allow passes to stop any more passes from running by calling PassManager::stopRunning().
[33maf22232[m Add missing include. NFC.
[33m112269f[m Add the frontend option -disable-sil-perf-optzns.
[33m06a9ea5[m stdlib/String: fix hasPrefix() and hasSuffix() to perform proper Unicode comparison
[33m84f9371[m Add more AST verifier checks for OptionalEvaluation and BindOptional.
[33ma4c1ef9[m stdlib/Algorithm: add an overload for startsWith that accepts a comparison predicate
[33mee176e7[m [ClangImporter] Give NS_OPTIONS structs a static 'allZeros' property.
[33m6d7d141[m [Serialization] Sanity-check alignment of AST data.
[33m5c1e9d7[m [Accessibility] Store setter accessibility explicitly.
[33m4f6b85c[m Add a new OptionalEnum type to encapsulate the "enum-value-or-nothing" pattern.
[33m3175251[m [IDE] Handle annotation of clang submodule imports properly.
[33mc2dee83[m Add expected failures for <rdar://problem/17821399>.
[33m61f64f3[m stdlib: Add a '??' nil-coalescing operator.
[33mbb6337c[m random typo
[33m0ea3dbc[m Lex '??' as an operator.
[33m7292662[m stdlib: mark Float.value as private
[33m0b76e88[m stdlib: fix memory leak in _stdlib_NSStringNFDHashValue
[33m7fcc484[m [stdlib] Construct UnicodeScalar from UInt16/UInt8
[33ma611637[m Add a unit test to validate that the new runtime machinery constructs generic class metadata properly when the superclass has an unexpected prefix.
[33me3ed526[m Remove dead function.
[33m3884eb9[m Add infrastructure for the Swift validation testsuite
[33m2a4a892[m Fix <rdar://problem/17817395> optimize (enum_is_tag (enum v, tag) tag)
[33m10d2e7e[m Debug info: Emit a more efficient representation for -O0 shadow copies for explosions by copying them into a single, aggregate alloca. This also happens to hide <rdar://problem/17815972> for llvm-600.
[33mcbdbe2c[m IRGen: Handle call substitutions T: AnyObject = AnyObject (or other @objc existentials).
[33mf2ecef6[m Parse @sil_unmanaged correctly.
[33mb81c4b2[m Revert "[stdlib] Concise operators for advance(i, +/-n)"
[33m96e9bfb[m [stdlib] Fix Range trap test
[33mdc407c6[m [runtime] Improve unrecognized-selector error message for pure-Swift classes.
[33m92637e7[m [stdlib] Integer index operations don't overflow
[33maae4a3d[m [ClangImporter] Pass through diagnostic locations for imports.
[33m51dcd8b[m [ClangImporter] Tweak diagnostic for a bridging header that can't be rewritten.
[33md8077fc[m [ClangImporter] Print notes for macro expansions and include locations.
[33m0b933ac[m [ClangImporter] Use #line when reporting module build errors.
[33m29f8c25[m Move #line state into the Parser and out of the SourceManager.
[33m0712910[m APINotes: Use the property's notes to set the accessor's types.
[33m16f6c73[m Use unchecked arithmetic for offsets to HeapBuffer values and elements.  If these were able to overflow then we'd have already failed in the initializer of the HeapBuffer
[33me473436[m [runtime] Remove workaround for Swift marker bit in ObjC class data.
[33m9381056[m When we have a non-optional weak @IBOutlet, prefer the @IBOutlet diagnostic.
[33md1ccc7e[m Fix the metadata unit test and ensure that it gets set up correctly for at least my build configuration.
[33mff92b5f[m Remove -[no]implicit-objc-with.
[33me9037bc[m Default swift-ide-test to -implicit-objc-with like the rest of the world.
[33m71d8e16[m [stdlib] bitwise assignments for NS_OPTIONS
[33m5b3a3bd[m An imported initializer is required if it is used to conform to a protocol requirement.
[33mb2ac0e3[m [stdlib] Concise operators for advance(i, +/-n)
[33mfedd707[m [stdlib] Add missing mode string to .gyb file
[33m14e83b7[m Add test case for '<rdar://problem/17796401> Swift Compiler never finishes compiling lazy collection reverse/filter/map'
[33md0b4d12[m Implicit unwrapped optionals get defaulted to nil, too <rdar://problem/17726756>.
[33m7d30512[m [stdlib] Improved doc comments
[33meee8f1b[m [emacs support] swift-mode.el: adjust for ` and '
[33m9b1cf66[m stdlib: add semantic requirements to the doc comments of Equatable and Comparable
[33med855af[m stdlib/String: use the Unicode collation algorithm in String's and Character's conformance to Comparable
[33m61f3cd9[m Unbreak the test for the availability attribute
[33mc52e927[m stdlib: fix grammar in doc comments
[33m2470d2f[m stdlib: add doc comments for Equatable and Comparable
[33mbc0648f[m Test UInt construction from a CGFloat
[33m6d0934d[m Introduce a new 'renamed' modifier on unavailable attributes.  This allows Xcode to emit fixit's when we rename something, e.g.:
[33m681059a[m Make CGFloat conform to Strideable but not RandomAccessIndex.
[33m5056744[m Allow construction of CGFloat from the sized Int/UInt types and vice-versa.
[33m0d2d2d3[m Debug info: Improve handling of storage-less variables.
[33mfb9defc[m IRGen: Add a "getBitMaskForNoPayloadElements" accessor for enum layout.
[33m089fd8d[m stdlib/String: rename the function in one more place, follow-up for r20543
[33mc44b42c[m stdlib/String: add a test that shows that equality comparison of strings is performed according to the deterministic Unicode collation algorithm, which allows us to use the hash of the NFD form.
[33m1a28fdc[m Manpage update for swift/swiftc driver changes
[33md571b86[m Release note for swift/swiftc driver changes
[33m07a3c7c[m Switch to the new swift/swiftc commmand line interface
[33meff3839[m stdlib/Character: add Hashable conformance
[33mfbcbd2e[m stdlib/Hashable: add a doc comment about hashValue/equality comparison consistency requirement
[33m64aa0ea[m When instantiating a generic class, compensate for unexpected forematter from the superclass.
[33ma38b282[m StdlibUnittest: move checkHashable to unit testing library, it is a utility that is useful in general
[33m9302423[m stdlib/Character: trap when trying to construct a Character from more than one grapheme cluster
[33m48c3e41[m [ASTPrinter] Print 'mutating/nonmutating' for accessors.
[33m77f3113[m Revert "IRGen: Add a "getBitMaskForNoPayloadElements" accessor for enum layout."
[33m085fa05[m Shorten an init for an llvm::ConstantInt
[33m7cb4219[m Remove some incompatible options from bin/swift
[33mf1fe319[m [Driver] Don't save .o in -g mode anymore (unless asked to).
[33m69533b5[m [Driver] Invoke dsymutil after linking when invoked with -g.
[33m706934b[m stdlib/Printing: fold a small test into the existing one
[33mfe5da5b[m IRGen: Add a "getBitMaskForNoPayloadElements" accessor for enum layout.
[33m0769a4c[m Don't do @IBOutlet checking on an invalid property.
[33mf149d35[m Constraint application: perform a scalar-to-tuple conversion when we need one.
[33maa92979[m stdlib: eliminate an inconsistent overload of == on NSString that would make == and != inconsistent in non-generic code, and that would not be used at all in generic code.
[33mc028336[m Also combine strideof_nonzero to index_addr
[33m5f60f5f[m IRGen: Add some paranoia assertions to ensure emitObjCPropertyMethodDescriptors is consistent with var and subscript decls.
[33mcb8f19d[m SILParser: add more diagnostics.
[33m24be396[m Cope with null witnesses
[33mbd80eb7[m [stdlib] Make "required/override" checking happy
[33m27cbb5a[m stdlib/String: change == to perform string comparison after NFD normalization
[33me00e41a[m [stdlib] Remove String.compare()
[33mec60160[m Clang importer: try harder to mark initializers from protocols as required.
[33m2324d84[m StdlibUnittest: demangle names in error output
[33m6193c4d[m Fix some stdlib tests after API annotations landed
[33mdb71d20[m IRGen: Fix misorderings and omissions in extended method types for protocols.
[33m413ded0[m Update apinotes README with the -target option.
[33m0ad6ad6[m API notes: add a "Required" field for Objective-C methods.
[33m573cb7d[m Removed an unnecessary variable.  Thanks Ben!
[33mb68de9d[m Update strideof in stdlib to call new strideof_nonzero.
[33mce68523[m Add strideof_nonzero to the compiler.
[33m3590f4a[m Alignof can never return 0, so don't max against 1
[33mc6a21ff[m Omit scope entry and exit for playground top-level code. Added a testcase for scopes.
[33mcf91513[m Debug info: Emit shadow copies for by-value parameters at -O0 to ensure that they are visibly for the entirety of the function.
[33mb4b2b31[m Remove debug code that was accidentally committed.
[33m0c28c9c[m Add a test verifying that conformance checking respects access control.
[33ma6abd7a[m Remove some uses of NL_IgnoreAccessibility in lookups.
[33m00a787e[m CMake: Pass -target to -apinotes compilation.
[33mc2adafc[m Revert "stdlib/String: change == to perform string comparison after NFD"
[33m8c7a971[m Correct a doc edit-o
[33m64e7374[m Mark NSString's designated initializers.
[33m4866705[m [stdlib] Fix typo in availability message
[33md3012a0[m Replace an 'override' with a 'required' for init(coder:).
[33ma3d5a8a[m stdlib/String: change == to perform string comparison after NFD normalization
[33m815d09c[m Release notes for changes to 'required' initializers
[33m6742613[m Swap an em dash for -- in a comment to satisfy the sourcekit tests
[33ma6a3e48[m Work around inability to deserialize local typealiases <rdar://problem/17795074>.
[33m5fc8ac7[m Require the 'override' keyword for initializers that override designated initializers.
[33meee00ca[m Require 'required' keyword when overriding a required initializer.
[33ma792eb6[m [stdlib] release notes, @availability attributes
[33md00e888[m [stdlib] Rename reinterpretCast => unsafeBitCast
[33m4a34eeb[m Fix pre-commit-benchmark
[33m8942077[m stdlib/String: move enough bridging machinery into the core standard library so that core library can bridge a String to Objective-C
[33m297c0a7[m stdlib: coding style
[33m304b4f3[m [stdlib] Sequence and Generator documentation detail
[33md0369e6[m stdlib: mark init(bitPattern:) @transparent, this should be a free abstraction
[33m2d27594[m stdlib: clarify the comment: "same value" -> "same numeric value"
[33m1a7648b[m [stdlib] String.stringWithBytes: drop length param
[33m993c7e0[m [stdlib] Replace .toSigned()/.toUnsigned() methods
[33m20532dc[m Clarify release note
[33m7c9a6ba[m Use swiftc in CMake's add_swift_executable, add_swift_library
[33mf793cf0[m Arithmetic traps test: add run lines for new tests
[33m619adb9[m Make the pre-inc/dec diagnostics tests actually pre-inc/dec.
[33me23480f[m [test] Enable long tests for iOS on the buildbot.
[33m997780a[m [test] XFAIL test IDE/sdk_sugar.swift pending rdar://17791048.
[33me2d64da[m Update a test missed in r20467
[33m0db920b[m Reject obvious inout argument aliases with a good diagnostic, for example:
[33mc69ea64[m Add specializations of prefix/postfix increment/decrement for integer types.
[33md2ef235[m Move the lit tests over to the new swift/swiftc interfaces
[33m563a8e0[m Revert "AST: Verify that identity expressions don't change the type of their subexpression."
[33m8af0278[m AST: Verify that identity expressions don't change the type of their subexpression.
[33m39eb145[m APINotes: Teach the YAML converter about OS availability.
[33mddaa294[m API notes: turn FactoryAsInit into 3-state on YAML side.
[33m1866c66[m Mark the UIKit and AppKit classes as completely audited for nullability.
[33m992f541[m [ASTPrinter] Print the underlying type of a typealias independently of PrintOptions.TypeDefinitions.
[33me152c4d[m Sema: Disallow partial applications of payloaded enum case constructors.
[33me92c81d[m [ClangImporter] Treat shims.h as a system header in NDEBUG builds.
[33m1552531[m Testcase for the playground transform.
[33mb681804[m Eliminate optimization levels 0-3 in favor of -Onone/-O/-Ofast.
[33m836c9d6[m Rename -Ofast to -Ounchecked.
[33m309d007[m Make swiftc default to -emit-executable even with no inputs
[33m915657f[m Introduce NoInteractiveOption and NoBatchOption opt flags
[33m9bc668b[m Fixes to the playground transform to make it work with the test case I'm working on.
[33m25fa3f3[m Sema: Diagnose ambiguous member references devoid of context.
[33mb1b6886[m Add missing required initializers to _NSContiguousString and _NSOpaqueString.
[33m8f5180c[m [stdlib] Add entry point for array literals
[33mcbad369[m TODO comment to remind me of what I wanted to change.
[33m8ca4345[m Simplify the highlighting in the subscript case of the inout writeback diagnostic to not include the index which is confusing.  For example, in:
[33m720fc09[m ArrayOpts: handle local variable arrays, not just inout args.
[33mf36ff58[m Add array.init semantics.
[33mcd799f6[m Sema: Coerce structural lvalues when binding to non-lvalue type variables.
[33m5322d81[m AST: Function types don't propagate lvalue-ness.
[33m6d2afe7[m [Accessibility] Observing overrides must be able to access the base setter.
[33ma3211d0[m [stdlib] dynamic NSString.localizedStringWithFormat
[33mafd88ca[m Add parsing support for swifti
[33m3a43d4c[m Revert "SILParser: add diagnostics."
[33m00b6a5c[m Import Objective-C properties marked weak/copy as weak/@NSCopying.
[33ma2af37a[m Split PrintOptions::printEverything into printEverything and printVerbose.
[33m4521194[m Improve diagnostic for missing 'required' initializers.
[33m1cc28d4[m An initializer requirement can only be satisfied by a required class initializer in a non-final class.
[33m587d7e7[m Fix an assertion when a required initializer overrides a non-required one.
[33m070ee77[m Treat imported initializers from Objective-C protocols as 'required'.
[33md07dfe8[m Allow @inline to be attached to constructors.
[33m6251151[m SILParser: add diagnostics.
[33m4751c8c[m Separate gyb outputs for static target libraries to avoid race
[33m97853b8[m API notes: add support for global functions to the binary format
[33mec2b717[m Update some direct Substitution accesses I missed.
[33m7922487[m [Driver] Switch debug info to use ld's new -add_ast_path option.
[33mc72fe37[m [test] Drop the ability to set a custom 'ld'.
[33m9628b72[m API notes: factor common function information into a base class.
[33m623aba1[m Encapsulate Substitution's state.
[33m1e16a23[m API notes: add support for global variables in the binary format
[33mf6df2fc[m Add SIL parser and IRGen tests for enum_is_tag
[33m77b0099[m Add a test for serialization under optimizations.
[33m9222a16[m API notes: add a small YAML -> binary -> YAML roundtrip test.
[33mbffcf5c[m API notes: factor common variable information into a base class. NFC
[33m4d524d7[m API notes: record the module name in the control block.
[33m766c981[m stdlib: underscore-prefix String.core
[33m7a3e406[m Propagate @inline(never) attribute to llvma
[33mfe326db[m Update for upstream LLVM changes
[33m52f3ba2[m stdlib: underscore a private String initializer
[33m36d41e0[m stdlib printing test: only print public declarations
[33mc2b5703[m API notes: rework CMake support so that we can separate the API notes sources.
[33m15fe0e2[m Avoid double negative in comments
[33m9aa5ef4[m Module interface printing: limit parameter underscoring rule to constructors.
[33m315b400[m Module interface printing: drop the rule that variables of underscored type are also considered underscored.
[33m2f78896[m Module interface printing: drop the rule that functions that mention underscored types are also considered underscored.
[33mb46f1fa[m stdlib: remove 'public' from two functions on underscored types
[33m1007ef3[m Module interface printing: add an option to filter declarations based on access control
[33md3456b6[m Rename test/APIAnnotation to test/APINotes to match the library name.
[33m0eec030[m API notes: validate that YAML input doesn't have duplicate classes/protocols/methods/properties.
[33mfd2c67c[m [stdlib] Generic String init from integers
[33m61e5cbb[m stdlib: coding style: don't hide 'public' at the end of line with attributes
[33m26c3285[m stdlib: StaticString and UnsafePointer should be free abstractions even in debug builds
[33md168ad3[m stdlib: don't use Builtin types in public APIs, this is quite pointless
[33md44a953[m [docs] comment out nonsens ReST, which breaks the build
[33m2f89b3b[m [docs] Fix Sphix error, which breaks the biuld
[33m6735788[m [docs] fix broken ReST, which breaks build
[33m2b5d016[m stdlib: underscore-prefix MaxBuiltinIntegerType and MaxBuiltinFloatType
[33m37cd51b[m stdlib: don't use 'private' in stdlib
[33m09561ae[m stdlib/Printing: when printing objects without Printable conformances, print demangled names
[33m64fca20[m docs: add policy for access control in stdlib
[33m807619b[m Force classes to be realized before forming a metadata reference to them.
[33m5a5525d[m Remove some temporary files
[33m2896b63[m Fixup test to pass with SWIFT_STDLIB_INTERNAL_CHECKS both ON and OFF.
[33m1ae1f75[m Move most type metadata lookups into their own readnone functions, and make those functions memoize the result.
[33m81c1d08[m Don't test for specific LLVM attribute list numbers. This is very brittle against the exact order in which attribute lists are used in the module.
[33m462cb85[m Revert "Remove XFAIL.  My change are causing different sil to be generated for array access, and so the test now passes.  Note, I have *not* fixed the bug"
[33ma7556c8[m Enable transparent inlining of some generic functions.
[33m5f06ae4[m Teach the inout aliasing diagnostic that a certainly narrow class of AST expression (which lower to different SILValue's are actually identical.  These are the expression involved in turning an integer literal into an expression.  This is totally a hack in that we assume that all "convertFromIntegerLiteral" are side effect free, but is close enough to be useful for this diagnostic.  The right answer is to implement real attributes to model this (rdar://15587352).
[33maac2a6c[m Start teaching the inout writeback diagnostic to handle subscripts.  The first step is to handle cases where the index lowers to exactly identical SILValue's.  This is presently pretty uncommon (except in the moderately common case of a direct reference to a "let Int"), but is a nice base case.
[33m4ec0a81[m Add linkage SILLinkage::SharedExternal for deserialized functions with shared linkage.
[33m5279e94[m adjust the inout writeback note to be hopefully understandable by mere mortals while also being googlable and stack overflowable.
[33m860b888[m Make a test from r20359 more robust
[33mcd9f144[m API notes: start trusting the API notes produced by compiling the YAML sources.
[33m16a4641[m Add an 'isLValue' recursive type property.
[33md347e93[m API notes: Add a CMake option to build the compiled API notes files from YAML sources.
[33m31611db[m SILGen: Update test for implicit final propagation changes.
[33ma464562[m Fix <rdar://problem/17755462> Predictable memory opts removes refcount operation
[33mdfa97a1[m API Notes: yaml-to-binary: fix nullability mapping inconsistencies.
[33m611384c[m APINotes: Teach YAML to binary about protocols.
[33m4af55a4[m Move the definition of dump out of the header.
[33m246d4bf[m Remove XFAIL.  My change are causing different sil to be generated for array access, and so the test now passes.  Note, I have *not* fixed the bug
[33me0add45[m Add isInBounds to stdlib and use this for bounds checking on array subscript.
[33m31cf2c4[m Add optimisation for switch_enum -> enum_is_tag.
[33md6877f6[m Add enum_is_tag instruction.
[33m99d8ce9[m Sink struct instructions when all predecessors differ by only a single operand
[33ma96009c[m Add a 'swifti' symlink to stage in the upcoming driver changes
[33mb5d5cf0[m SILGen: Don't crash when peepholing a ForceValue of nested OptionalEvaluations.
[33mca785c9[m Release-note the submodule changes.
[33med8f1c5[m Handle scoped imports for Clang submodules.
[33ma0d3d31[m [ClangImporter] Make the 'value' field of plain C enums public again.
[33mf62be84[m add some rationale
[33mbea41c0[m [Alias Analysis] handle casts in projection path.
[33m12e598a[m Respond to CR feedback from Jordan: - Change the comment preceding isDeclMoreConstrainedThan to a doc comment - Add tests for comparisons between IUO values and 'nil'
[33m9ceca6d[m Add in a small TODO. NFC.
[33mdf33434[m Revert "[stdlib] Remove protocol availability annotations"
[33mec533fa[m [load-store-opts] Enable global load store opts.
[33md6eaa1b[m [stdlib] Remove protocol availability annotations
[33m478c41f[m [stdlib] Drop withUnsafe[Mutable]PointerToElements
[33me783ab1[m Support equality comparisons between 'nil' and non-equatable optional types (rdar://problem/17489239)
[33m255046c[m Revert "Validate variables in invalid patterns"
[33mf7b883f[m [IDE] Make sure to XML-escape the pretty printed declaration in Comment to XML conversion.
[33m00f9ca5[m [stdlib] Rename [_]elementStorage=>[_]baseAddress
[33mb96e081[m Fixed the PlaygroundTransform so it doesn't make the testsuite crash.  Restored the print/println logging functionality.
[33me3f8d0e[m [stdlib] rename UnsafeArray => UnsafeBufferPointer
[33me570866[m [stdlib] On-demand unique contiguous Array storage
[33m41dec5b[m Invoke TryAddFinal after type checking.
[33mbd21ef4[m TryAddFinal - a walker that attempts to add 'final' when to decls.
[33m6043c29[m Don't print implicit attributes unless requested
[33mb4ab66a[m Remember when AbstractStorageDecls and AbstractFunctionDecls are overridden.
[33m3f4a72e[m Validate variables in invalid patterns
[33mf48829c[m API notes: add the ability to translate a binary API notes file (.apinotesc) into YAML
[33m9fbc4b0[m Remove stripCasts added in r20327.
[33mbf8bcf0[m stdlib tests: use more specialized expect*() functions
[33m6fc7ef2[m Make it easy to safely get a shared_ptr to a Node given a plain old pointer to it. This is a small step towards getting all Demangler APIs to return Node* but still retain ref-counting
[33mdfe2ba4[m [stdlib] const-correct withUnsafePointer APIs
[33m0af674c[m API Notes: Add YAML to binary conversion.
[33m0a1be06[m [Alias Analysis] accessing different fields of the same object do not alias.
[33m1a6c80a[m [stdlib] .first and .last are var:T?, not func->T
[33m1c2cd46[m stdlib/Printing: fix pointer printing on 32-bit platforms
[33m49a5e7f[m Small clean-up in inliner.
[33mca6d58a[m [test] Mark NSObject's 'description' property as readonly for SILGen/IRGen.
[33m709327b[m [test] Fix submodules_smoke_test.swift again.
[33m0d4af93[m Release note pointer name changes
[33m1438d61[m [stdlib] Rename ConstUnsafePointer=>UnsafePointer
[33m03dca56[m Add merges missed in r20316
[33m21669b3[m [stdlib] Add "Mutable" to [Autoreleasing]UnsafePointer
[33m6867ce2[m fix <rdar://problem/17763388> ambiguous operator emits same candidate multiple times
[33mccb9005[m stdlib/runtime: link in the demangler
[33md8e5c0f[m don't print the @transparent attributewhen dumping out a candidate list in diagnostics.  We don't want this exposed to users.  This resolves rdar://17763062.
[33m80748a5[m stdlib/Printing: add DebugPrintable conformances to unsafe pointer types
[33mdf21376[m Punycode: implement a UTF-8 encoder for use in demangler
[33md5e7ffb[m stdlib/Unicode: remove a stale comment
[33me7b4e6c[m Punycode encoder/decoder: separate core and parts that depend on UTF8 encoder/decoder
[33m734c0a9[m Revert "Punycode encoder/decoder: separate core and parts that depend on UTF8"
[33m56342b0[m Punycode encoder/decoder: separate core and parts that depend on UTF8 encoder/decoder
[33m87ed6c8[m Demangler: add a unit test for the copied string quotation code
[33mf24f98b[m Demangler: remove dependencies on llvm::raw_ostream and swift::QuotedString
[33md14f17b[m Change 'getLogicValue()' into a property 'boolValue'; change 'getArrayBoundValue()' into a property 'arrayBoundValue'.
[33m9325c5a[m Sema: pattern binding for derived 'hashValue' property is not conditional.  Found by inspection.
[33m0a04edd[m [test] Disable part of submodules_smoke_test on iOS due to OpenGL differences.
[33m409cf4e[m Generate a separate .o file for the static target libraries
[33mf7b4f16[m [test] Fix submodules_smoke_test.swift to actually build the file.
[33m7c76fe9[m ArrayOpts: Be more precise when checking for release-after-retain.
[33mbd7ddff[m ArrayOpts TODO comments.
[33md473159[m Implement the start of a diagnostic to detect cases where inout aliasing violations are introduced, as these are obvious miscompilations and clearly mystifying to our user base.
[33m54fb27b[m Mark assignment operators in the stdlib as 'assignment'.
[33m7feeecf[m Sema: Bring back 'assignment' as an infix operator modifier.
[33m710b35b[m enable SILGen diagnostic emitters to add fixits and source ranges.  NFC.
[33m2c3ab47[m [stdlib] O(1) Array<non-verbatim> round-tripping
[33mecd3cbb[m [test] One more @objc -> dynamic change.
[33mce1e02c[m [ClangImporter] Remove hack for non-property 'description' and 'hash'.
[33md23f8e3[m Revert "Add a compile_swift_NAME target to avoid rebuilding .o files"
[33mc06a072[m After investigating, there is no actual reason why the SpriteKit mirrors had to be disabled on iOS. So, just do the right thing. One change, of course, is to use UIImage on-device instead of NSImage. Both can be built from an NSData, and according to purplefish, the NSData we get back is of the correct image format to be reconstructed on either platform. Fixes rdar://17593122
[33m58befc4[m [ClangImporter] Handle submodule imports.
[33m6ee53ff[m [Serialization] Preserve submodule import paths through serialization.
[33md82edd9[m Release note 'dynamic'.
[33m3ac89dc[m Enable 'dynamic'.
[33m9b63a6d[m SILGen: Don't check requiresObjCDispatch for dynamic_method lookups.
[33m436acb0[m Foundation: Remove the prepareWithInvocationTarget overlay.
[33m247cc91[m add some assertions I forgot in r20281
[33m2c1bfc6[m add a "kind" discriminator to PathComponent to pave the way for new functionality, NFC.
[33m406f76f[m Add a compile_swift_NAME target to avoid rebuilding .o files
[33m5197fe0[m Move noErr to Darwin with OSStatus as its type. rdar://17285288
[33m55e3e4b[m declare 'noErr' in the overlay to be of type Int32 (to make it compatible with OSStatus) rdar://17285288 This line, and those below, will be ignored--
[33mec32bc0[m API notes: separate classes from protocols in the binary representation.
[33m197a01f[m Fix accidental diagnostic change.
[33m6348149[m Rename ObjCClassInfo to ObjCContextInfo, to also cover protocols.
[33m079b5e5[m [stdlib] += no longer appends array elements
[33m38e097c[m Small simplificiation to inliner code.
[33m9224f03[m Work-around rdar://problem/17687851 in unreachable code test.
[33mc1ec714[m [GlobalLoadStoreOpts] add testing case for r20114.
[33m8b05b42[m Sema: Lock in '!' lvalue support.
[33mff02def[m Adding "typealias NSRectEdge = CGRectEdge" in the overlay. rdar://16593744
[33md8e4b2c[m The Demangler should only use one currency to vend nodes externally, as it makes clients' lives much much easier - I am specifically thinking LLDB here, since the debugger likes to store nodes it gets out of the demangler as it generates types out of them. Since we are storing everything as a shared_ptr<Node>, having some accessors return Node* and some NodePointer is really not buying us much. Fix things here
[33m59ba50d[m Pass reference to content to the YAML parser, instead of filename.
[33md0823e5[m Demangler: simplify code
[33mbd92c01[m Demangler: print fatal errors to stderr
[33m2faeb84[m Rename ObjCClassInfo to ObjCContextInfo, to also cover protocols.
[33m0d5504c[m Make the "downcast only unwraps optionals" diagnostic a bit more friendly.
[33mb983dbb[m Use static and out-of-line function definitions rather than re-opening namespaces. NFC
[33mb199da5[m in top-level code, have SILGen memoize the global_addr instructions it generates into VarLoc, to give it a trivial amount of CSE.  This isn't important generally (global_addr turns into a trivial constant in LLVM IR) but unblocks some other SILGen stuff I'm working on.
[33m518b9c5[m Update release notes 7/21
[33m624fb01[m auto_closure got renamed to autoclosure
[33m23ed1c0[m Demangler: remove dependency on SmallString
[33mb502010[m s/auto_closure/autoclosure in XCTest
[33m4c49802[m Drop the  ~= overload for NSObject <rdar://problem/17639977>.
[33mbc481f0[m implement <rdar://problem/16859927> remove the underscore in "auto_closure"
[33meed37dc[m Remove bridging of NSPoint, NSSize, and NSRect because they are OSX-only.
[33md6be38d[m Ban downcasts that do nothing more than unwrap optionals <rdar://problem/17643982>.
[33me33bb4c[m Demangler: remove SmallVector from punycode encoder and decoder interface
[33m96bc600[m Allow a required initializer to be inherited or synthesized <rdar://problem/17276877>.
[33m26277fc[m Demangler: remove StringRef dependencies in the demangler interface and PrettyStackTrace dependencies in the implementation
[33m18c5b73[m Demangler: remove dependency on swift::Optional
[33m5c71e50[m stdlib/String: add tests for trapping on out-of-range String.UTF16View indexes
[33m2af9bc9[m stdlib/Dictionary: underscore-prefix implementation details (even not marked as public)
[33me6d2194[m stdlib/String: trap when attempting to increment or index using String.UTF8View.endIndex
[33m085b566[m [stdlib] Fix the NSValueBridging test for iOS
[33m3731a0d[m [stdlib] Deal with various zero-division scenarios
[33m8091436[m [stdlib] Bridge the types NSValue wraps explicitly
[33m9c267d5[m Add some missing cmake dependencies
[33m8e853fd[m [stdlib] Add isEmpty first() and last() to lazy collections
[33mc9e55b4[m [stdlib] Add first() and last() to Array types
[33ma1c1d09[m [stdlib] Add first, last, and isEmpty algorithms
[33m21ead19[m [ASTPrinter] Check the isMutating bit for printing 'mutating' for a function; revert the change that serialized the attribute.
[33m56dbab6[m move prefix+ up to being next to prefix-, NFC.
[33m6aaac97[m Fixed point arithmetic traps test: reenable Int8 multiplication test, the LLVM bug is fixed now
[33m62ed200[m add a flag that allows us to reject SIL-only decl attributes, and use it to reject @sil_stored in .swift files.
[33m1419645[m Add a special diagnostic when a type has no accessible initializers.
[33m270cf80[m [swift-demangle] Teach swift-demangle to filter stdin if given no arguments.
[33m4ce7d0f[m Enable optional lvalues.
[33m8e757bd[m Sema: Diagnose OptionalObject constraint failures.
[33mb815991[m SILGen: Optional unwrapping produces an lvalue, not an unmanaged value.
[33m140801f[m Revert "Extended the playground transform to handle print()"
[33m89d1cb3[m [Accessibility] Private extensions cannot contain public methods.
[33m2119961[m [Accessibility] A public extension cannot be declared for a private type.
[33m8f52041[m [Accessibility] A private class cannot contain public methods.
[33m4b5ce87[m Fix r19963 to /not/ respect access control when it's disabled.
[33m3c8c533[m Inherited initializers are public if the base class's init was public.
[33ma419138[m [PrintAsObjC] Print 'struct Foo' or 'enum Foo' instead of 'Foo' when necessary.
[33m167b67e[m Fix <rdar://problem/17127126> swift compiler segfaults trying to generate a setter for a lazy property in a subclass of NSObject
[33m9d8be27[m simplify some code now that attr mutability isn't tied to getAttrs() vs getMutableAttrs().
[33mf9f31fe[m renumber declattributes to be more dense.
[33m72e97f6[m fix printing of accessors to be more properly parentheses nested.
[33m4868738[m now that DeclAttributes is a single word, there is no reason to deal with it indirectly through another pointer from Decl, just embed DeclAttributes directly into Decl and get rid of the "getMutableAttrs" nonsense.
[33m6ad0245[m [modules] Serialize 'mutating' attribute so we can print it in the interface.
[33m32af1c6[m ABCOpts: Enable per default
[33m21dd66b[m Code completion: don't adjust implicitly unwrapped optional types to normal optionals
[33m26376f0[m [IDE] Fix crash when code-completing inside an erroneous computer let variable.
[33me581e65[m SILGen test for implicit force of IUO.
[33m4155d52[m Sema: Preserve lvalue-ness through implicit forces of IUOs.
[33m3075dee[m Mark 'NSConstantString' unavailable.  Implements <rdar://problem/17306671>.
[33mefa1ff8[m [IDE/CodeComplete] Add CallParameterClosureType chunk, which resolves optional & alias types for closure type parameters.
[33m993b822[m API Notes: complete parsing of the YAML format
[33m5209dab[m [test] Update tests now that NSStringFromClass() returns demangled names.
[33mb1edda0[m [test] Reinstate test KVO_dynamic.swift now that arclite is fixed.
[33mde368b9[m [stdlib] Make algorithms safe with illegal predicates
[33mf771c11[m [test] Reinstate test autorelease.swift on armv7 now that llvm is fixed.
[33m1960c22[m Extended the playground transform to handle print() and println() calls, forwarding them appropriately to versions in the PlaygroundLogger.
[33mf6b0682[m Array bounds check optimization pass
[33m2eeec98[m SIL Passes: Kill dead code and stale comment
[33me848559[m Update ABI.rst for several months of changes to the class metadata layout.
[33m47865a1[m NFC: space.
[33m8f0ba46[m NFC: comment typo.
[33m6bbbf05[m [stdlib] _partition doesn't need to be public!
[33mec8b29c[m [stdlib] Fix the public interface of partition
[33m94d317c[m [pre-commit-benchmark] fix -O handling
[33m076d310[m Remove -import-tighter-objc-types option; we're turning it on by default.
[33m422fc4b[m API notes: factor 'unavailable' into a common base for methods/classes/properties.
[33mb697fe1[m [SILParser] fix parsing issues for stored_with_trivial_accessors.
[33mc556d92[m SILGen: Implement codegen for lvalue ForceValueExprs.
[33mac1a050[m [stdlib] make some bridging classes final
[33m497eeff[m [driver] Allow -force-single-frontend-invocation and -emit-objc-header[-path] to be used together.
[33mae0dfd4[m Change the layout of the extended class-object header: add a flags field, add an instance address point field, and reserve some additional space.
[33md3f4f5a[m [buildbot-script.sh] don't add symlink to clang tree
[33m71913ae[m [stdlib] Rename @semantics for array bounds checks
[33m4f7fa53[m [pre-commit-benchmark] Tabulate output
[33m403a7e0[m [pre-commit-benchmark] Fix parsing bugs
[33mcae6d2e[m [pre-commit-benchmark] Look in the right directory
[33m2b65071[m [pre-commit-benchmark] debuggable subprocess calls
[33m2dfae9e[m [test] Disable KVO_dynamic temporarily. It's too inconsistent for XFAIL.
[33m8eb7d43[m [Parser] Introduce a convenience wrapper for Parser functionality.
[33mae3e822[m Add a skeleton for API Notes YAML-to-binary conversion
[33mfb9beed[m Clang importer: clean up handling of Objective-C property API notes.
[33m0095221[m API notes: simplify our handling of method merging.
[33md1cfab0[m Remove redundant FactoryAsInitKind definition. NFC
[33m9487fe4[m Update regex for pre-commit-bench.
[33me4cfd3a[m Reflect ranges in the half-open format - it's not always consistent with what the user typed, but at least it resembles language syntax, and is more consistent with what LLDB already does too. Last chunk of work for rdar://16117421
[33m7eb1d26[m Revert accidental commit
[33m1cf9a4a[m Revert my change. Greg's message was better.
[33m154e79c[m Code completion: include variables declared in 'if' and 'while' conditions
[33m72acc07[m [pre-commit-benchmark] clone benchmark repo...
[33m7bf01a5[m Add a Mirror for NSCursor. This should be the last Cocoa Mirror that we need to write for this release - barring any last-minute critical incoming. Fixes rdar://16681585
[33m94e3adc[m Update utils/pre-commit-benchmark for new benchmark repo.
[33mf696330[m Properly indent apply/partial_apply methods in TypeSubstCloner.
[33m7cad515[m stdlib: add tests for a fixed bug in advance()
[33mb0c3a56[m Code completion: fix some type checking issues of closures
[33m31f0b0a[m Code completion: fix crash when a closure is called in place
[33m8234c70[m Code completion: fix delayed parsing of closures
[33m69b2a8f[m [test] This XFAILed test apparently happens to pass on some platforms.
[33m06aee5d[m [test] Fix run commands for XFAILed test Interpreter/SDK/KVO_dynamic.swift.
[33m62fcf6a[m Demangler: remove dependency on swift/Basic/LLVM.h
[33mea87c75[m [test] Add a test that runs `swift -Xllvm`.
[33m250bb97[m Add an array optimization pass that hoists make_mutable calls.
[33m2327fa4[m Update benchmark code, lfsr.swift.
[33m00060d6[m Revert r20137 because it breaks the arm64 build.
[33m7e01ad3[m Add an XFAILed KVO-with-dynamic test as a reverse-canary for <rdar://problem/17697837>.
[33med88875[m Sema: Propagate lvalue-ness through the postfix ! operator.
[33mad72077[m Verify that ForceValueExprs preserve lvalue-ness.
[33m9f5c1a5[m Add an -enable-optional-lvalues flag to stage in optional lvalues.
[33m7fab0c9[m Add a skeleton for API Notes YAML-to-binary conversion
[33m3a90aaf[m [stdlib] Ensure full bounds checking for Array
[33m47be33a[m Combine lines to attempt to appease the bots
[33mea13161[m Add swiftc as a symlink to swift
[33m904d1b2[m [ClangImporter] Drop the "current import" tracking for bridging headers.
[33mfce31de[m Serialize bridging headers into the merged module file.
[33m4d704c3[m Revert "[stdlib] Array resilient slicing"
[33ma84f46c[m [stdlib] Add prefix/suffix functions on Sliceable
[33m11e196a[m [StdlibUnittest] expectEqualSequence, refactor
[33m4e54faf[m [stdlib] Fix symmetry of bounded advance()
[33m83d01d3[m Allow for bridge conversions for conversions to CVarArgType, as opposed to only other bridge types. (rdar://problem/17687255)
[33mbedb5f1[m Move KnownObjCMethods.def into swift-ide-test; that's the only place using it.
[33mdab7ece[m API notes: which the Clang importer over to API notes completely.
[33m97f894d[m In the importer SDK, move NCWidgetController into the NotificationCenter module.
[33me3ce08e[m API notes: keep track of classes that have designated initializers.
[33m134fef2[m [build] Don't build swift-ide-test if it's in PATH_TO_SWIFT_BUILD already.
[33m9fe6a99[m [test] Add a test-specific module cache path for test/IDE/print_clang_foundation.swift.
[33m3260a41[m [Global Load Store Opts] fix a issue when a BB is its own predecessor.
[33m533a94a[m Use API notes for Objective-C class/protocol nullability defaults.
[33m52f7cd4[m [PrintAsObjC] Print ownership qualifiers on properties.
[33ma0d33f7[m Fix another test with a hard-coded reference.
[33m65f17d0[m dded support for overriding the accessibility of a ValueDecl.  The REPL needs this so that the user can construct structs they declare.
[33m080f233[m Remove a few hard-coded references from instance method metadata.
[33m017c281[m resolve <rdar://problem/17527814> remove old unicode escape parsing logic from beta 5
[33m7f5696f[m SILGen: Make @objc final decls work correctly.
[33md214e1a[m fix <rdar://problem/17686667> If super.init is implicitly inserted, DI diagnostics have no location info
[33m195a4b3[m Reapply r20101: switch 'convenience' from being a specially handles contextual keyword to being a decl modifier just like the rest, this elimiantes a bunch of special case code for handling it.
[33md2315f2[m revert r20101, I built one tree and tested another.
[33m9b0d88e[m switch 'convenience' from being a specially handles contextual keyword to being a decl modifier just like the rest, this elimiantes a bunch of special case code for handling it.
[33mb2220fc[m API notes: use API notes for property nullability information.
[33m39e77dc[m Enable loop rotation and LICM
[33m6f2b8fa[m LoopRotate: Add option to disable rotation
[33m08db87c[m Clang importer: load API notes whenever we load a Clang module.
[33m96e2e8d[m Demangler: replace llvm::SmallVector with std::vector
[33m6b00df1[m Revert "s/clangRewrite/clangRewriteCore"
[33m5223a63[m Add another xfail'd test for code-completion in property closures
[33m537ac90[m DemanglerOptions: remove redundant member initializer list
[33m70e0577[m Demangler: replace LLVM reference counting with std::shared_ptr (which is not actually necessary here, since all tree nodes could be just allocated from a single pool)
[33m31ced12[m Finish renaming "side car" to "API notes"
[33m72a6ea1[m Rename SideCar library to the APINotes library
[33m716d548[m Start generating .apinotes files for each of the frameworks that have them.
[33m527fbf5[m Module interface printing: change the implementation of the underscore rule so that important protocols are not hidden
[33m3f4436a[m Code completion: add simplistic support for keywords
[33m082d79b[m Code completion: include __FUNCTION__ in results
[33mc4138bd[m stdlib/Dictionary: coding style, remove unneeded line breaks
[33m4c4f83f[m stdlib: underscore-prefix requirements of _BridgedToObjectiveCType and _ConditionallyBridgedToObjectiveCType protocols
[33m2113e3a[m Walk through the initializer for a lazy property in SourceEntityWalker
[33m2f1c9c2[m spell the attribute correctly.  It helps to save before committing.
[33m887ff4c[m eliminate VIRTUAL_DECL_ATTR, switching accessibility (the last holdout) over to using a combination of attribute aliases and "NotSerialized" to provide the equivalent functionality.
[33m6fb4699[m move the utility functions that map a string to a type/decl attribute ID out of ParseDecl into Attr.cpp, allowing us to give them a better name and dox comment them.  This elimiantes a duplicate copy from the IDE layer as well, ensuring consistency.
[33md4e702d[m Side car: simplify binary format by removing the module ID.
[33m702ed73[m Side car: split "known Objective-C methods" by module.
[33ma9ed330[m rip out "AtLoc" in DeclAttributes, now that each individual attribute tracks the location of its associated @ (if present)
[33mfdaa28c[m fix a warning about a zero length array, by ripping out all of the old declattributes code. :-)
[33m1bd9d81[m [SILParser] fix a few issues to enable parsing of sil from swift array
[33m61df8d7[m s/clangRewrite/clangRewriteCore
[33mbfef826[m Combine CHECK-NOTs in print_stdlib test
[33m073d3a4[m Print precedence and associativity of infix operator decls
[33mf86a5bf[m Follow clang renaming of libclangRewriteCore.a to libclangRewrite.a.
[33m7b4a176[m [enum-simplification] Emit simplest refcount op on payload when moving ref count ops from enums to payloads.
[33m877367a[m Have XCTest use string interpolation everywhere.
[33me804dab[m Fix spacing in diagnostic
[33ma0f09b5[m Side car reader: wire up the Objective-C selector and method tables.
[33m92500d3[m Update some debug printing in ARC
[33m09f465e[m Don't print sugar or generic parameters in extensions
[33mb73b33e[m Side car reader: load Objective-C property information.
[33m84c5af6[m Side car reader: wire up identifier table and Objective-C class table.
[33me2d9f6f[m [stdlib] Fix clamp parameter name
[33m304f272[m [stdlib] Array resilient slicing
[33m3d61398[m [stdlib] Add clamp method to Interval
[33m55adb2e[m Add SDK test for <rdar://problem/17653064>.
[33mfa2f22e[m IRGen: Handle CFunctionPointer in GenClangType.
[33mc4fbf67[m PrintAsObjC: Handle CFunctionPointer.
[33m09cfd4a[m CFunctionPointer is representable in @objc entry points if the function type argument is.
[33mfd26fa8[m Jordan suggested I could use a named constant here instead of hardcoding the string, so that LLDB could share the constant and we'd never get out of sync again. It's a clearly A Good Idea, and even though this entire isLLDBExpressionModule() is a temporary hack, this improvement is worth it
[33m2ec78d1[m Side car: load and validate control block.
[33mb3a18ee[m Add a skeleton of a side-car reader, along with basic testing.
[33m31c1c20[m Print attributes in the order they were written.
[33m29edb64[m Make sure we instrument all function-like things, e.g. constructors, and not just regular functions, for playgrounds.
[33me623dac[m The magic module name is now __lldb_expr_, so adjust the detection logic.
[33mc5f17f2[m Side car: remove extraneous SIDE_CAR_BLOCK wrapper. It adds no value here.
[33mc4f798e[m [stdlib] Make our BidirectionalIndexTypes Comparable
[33mf94bc5d[m Update indentation of test to be consistent with the rest of the file.
[33meeca6f6[m Disable unowned/unowned(unsafe) IBOutlets for now; we can wait for optionals to work there.
[33m6592366[m switch weak/unowned/unowned(unsafe) to the new declattributes machinery.
[33meb0af0a[m IBOutlet: don't require optional for array or unowned IBOutlet properties.
[33m5700c90[m Add some tests for malformed availability attributes.
[33m3a5bfd6[m Re-add invalid parse tests for the accessibility keywords.
[33m759b7b7[m Add a test that 'private' is rejected on imports and operators.
[33mf35db30[m simplify the interface to parseNewDeclAttribute, NFC.
[33md75c957[m switch raw doc comments off of VIRTUAL_DECL_ATTR, they can just use NotSerialized now.
[33md125ac1[m stdlib/runtime: stdlib casts to existentials: correctly project the buffer as required
[33m7f80ba7[m [test] XFAIL Interpreter/SDK/autorelease.swift on armv7 pending rdar://17694203
[33mf04a37f[m stdlib: make NSDictionary.Generator initializer private (users should call NSDictionary.generate())
[33md9d789f[m stdlib: rename NSDictionaryGenerator to NSDictionary.Generator
[33m41643d0[m Revert "Remove @transparent from a few functions in the stdlib."
[33m74f29fe[m Side car test: encode all method information in the side car data.
[33mb3d7c2e[m Side car test: handle data associated with Objective-C properties.
[33m5a8b0f4[m Side car testing: start emitting Objective-C methods
[33m7e67368[m Side car: start emitting the Objective-C selector table.
[33m99cb365[m Side car: write the Objective-C method table.
[33m2825b9f[m move @transparent and @requires_stored_property_inits to the new attribute model.
[33md47255d[m Remove dead var that snuck in.
[33m8366cfc[m Side car: emit Objective-C property data.
[33me5d7111[m [load-store-opts] Change load store opts single BB pass to be a simple forward dataflow with an intersection merge operation.
[33m4c7a1e5[m Side car: clean up representation of Objective-C properties and methods.
[33mf21bcae[m remove support for attribute inversion (i.e. @!foo).  This doesn't work with decl modifiers and our direction has been established to use "nonfoo" or foo(not_for_you) style of attributes.
[33m1907ad9[m Move 'mutating' and 'nonmutating' onto the new attribute processing machinery. Also:  - merge the test/decl/func/functions_new.swift testcase into test/Sema/immutability.swift,    where the bulk of similar tests are.  - Move the type checking logic for 'dynamic' out of ValidateAttrs into TypeCheckAttrs  - Change the encoding for 'override' to 49 so that stuff vbr's so much more densely :-)
[33m6f3fe21[m improve a diagnostic to talk about the "override modifier" instead of "override attribute"
[33m42c7002[m SILGen: @NSManaged property accessors always use objc dispatch.
[33m1c42e7c[m In recursivelyDeleteTriviallyDeadInstructions, call the callback before we mutate the state of the to be deleted instructions.
[33ma12880a[m [dominance] Implement PostDominanceInfo::properlyDominates(SILInstruction *, SILInstruction *)
[33me41678c[m ClangImporter: Set clang nodes on implicitly-propertized imports.
[33m16533ae[m SIL: Verify that class_method doesn't try to vtable-dispatch foreign methods.
[33m36b2fd2[m SILGen: Only dynamically dispatch 'dynamic' methods in extensions.
[33m7ee33aa[m If a type is used as a superclass, force-generate its implicit initializers.
[33mfe30b66[m move "override" onto the new fangle decl modifier code, instead of being a virtual attribute.  As part of this, introduce a new "NotSerialized" flag in Attr.def. This eliminates a bunch of special case code in the parser and elsewhere for handling this modifier.
[33m36b035b[m Remove @transparent from a few functions in the stdlib.
[33m19488ac[m Side car data: emit Objective-C class information into the side car file.
[33me36c31d[m Side car data: emit side car file from KnownObjCMethods.def.
[33m5e7b22a[m Test more cases of delegation to foreign initializers.
[33mac0e0e6[m Side car data: basic emission of side car file with identifier table.
[33ma31c2ab[m Make it easier to tweak the EnableDynamic and ImportUnion flags in testing.
[33m0cb3091[m SILGen: Foreign initializers always require @objc dispatch.
[33mc3c1489[m Declare access control for XCTest overlay.
[33me8d4ec4[m Fix some unused variable warnings during -DNDEBUG build due to variables only being used in asserts.
[33mafdf527[m Skeleton for a SideCar data library.
[33m85b7529[m [LICM] move cond_fails down to enable register promotion at llvm level.
[33m6931b1f[m SILSSAUpdater: Check the right pointer before we dereference it
[33me672513[m Now that CGFloat is a struct, it needs to be reflected separately. We can still just reflect its native buffer, but an explicit Reflectable conformace is required. Fixes rdar://17682337
[33mb730ab0[m Add a Mirror for Interval types
[33mea8b7a4[m Extend the attributes machinery to enforce the "OnFoo" flags in Attr.def at sema time, and extend them to cover all declaration types.
[33mb29192f[m Diagnose non-optional @IBOutlets <rdar://problem/17654693>.
[33m3ad9c58[m Disallow (with a nice fixit) the infix modifier on func decls, it is just validated and ignored anyway.  It is still required on operator decls though.
[33m666e198[m Fix horrible mistakes in r19972 ("attribute" -> "modifier" diagnostic changes)
[33m7b62fa0[m [ASTPrinter] Introduce a callback invoked after printing the name of the declaration (the signature for functions).
[33m10815eb[m s/attribute/modifier/ in a number of diagnostics.
[33m2d3ae53[m Add a test that "super.foo" doesn't get around access control.
[33m52bdeba[m SILGen: Emit ObjC thunks for initializers in extensions that fulfill @objc requirements.
[33m5e9e346[m IRGen: Lower enum payload types before classifying them for layout.
[33m2f157e3[m SIL: Avoid reentering type lowering when lowering struct and enum types.
[33maa7f8f4[m [g-arc-opts] Perform sanity check that we do not merge Argument paths with non-Argument tracking paths correctly.
[33m8a9b9fd[m CMake: Create the directories we need before for object files, libraries
[33mb09a3a3[m [test] Disable enforcement of a buggy Range<Int> bounds check in 32-bit.
[33mb5f682b[m [stdlib] @availability for renamed protocols
[33m67536db[m Respect access control in visible decl lookup (and code completion).
[33m820e8e0[m fix serialization of availability attributes on typealiases
[33m7fadf47[m Remove extraneous dependency.
[33me0b0205[m Remove the @assignment attribute entirely.  It doesn't do anything except enforce its own little constraints.  The type checker isn't using it for anything, and it is just clutter.
[33ma652396[m Fixup for r19109.
[33meab2792[m Disallow [NSArray makeObjectsPerformSelector:]
[33md046c9d[m We no longer need to tee the output from this test.
[33m1c1462f[m CMake: when building a static library, add a dummy .c file.
[33m380e63b[m tidy up some lldb attribute stuff, nfc
[33m71cd924[m Rename swift_stdlib_core -> swiftCore and swift_runtime -> swiftRuntime.
[33mc5c1279[m fix <rdar://problem/17669805> Availability can't appear on a typealias
[33m45eec9a[m Remove 'interface' from the method names of SILFunctionType.
[33md04cfb3[m CMake: Start sorting out dependencies for the -static variants.
[33m6774717[m CMake: Only print out the SDKs when we’re doing an SDK build.
[33md1ba188[m Use SWIFT_BUILD_STATIC, not SWIFT_BUILD_STDLIB, to guard creation of static libraries.
[33m68d061a[m [test] Don't write output files to /var/tmp/.
[33m5402030[m implement <rdar://problem/14607026> Restrict use of '<' and '>' as prefix/postfix operator names
[33m166ebb2[m [stdlib] Add Range pattern matching
[33ma14a949[m SILGen: Give dynamic thunks a proper mangling.
[33m76114d7[m SILGen: Use dynamic thunk as the vtable entry of dynamic overrides.
[33mc719314[m Update C pointer interop spec with the state of the implementation.
[33md311eb5[m Re-enable building of static libraries.
[33mcae36c9[m Broaden the "favored constraint" binop optimization to work with simplified expression types, and not just default literal tyvars.
[33mfa991ca[m [stdlib] deep debugDescription for Interval/Range
[33m9c6d990[m [docs] Correct a missed protocol rename in LangRef
[33mf0911fd[m Update the .gyb file.
[33m726623b[m add operator attribute changes to the internal release notes, these should get sent out to -users at some point.
[33m5f55052[m pull operator decls into the attribute flow: have the parser attach attributes to operator decls, and validate the attributes in the type checker.  This allows us to reject invalid operator decls (resolving a fixme) and restores syntax coloring of 'infix' on an operator (a regression in my last patch).
[33m57cd250[m Change "operator infix" to "infix operator" for consistency with the rest of the declaration modifiers and with the func implementations of the operators.  This resolves the rest of: <rdar://problem/17527000> change operator declarations from "operator prefix" to "prefix operator" & make operator a keyword
[33m8991456[m Switch infix/postfix/prefix to be declaration modifiers instead of attributes, eliminating the @'s from them when used on func's.  This is progress towards <rdar://problem/17527000> change operator declarations from "operator prefix" to "prefix operator" & make operator a keyword
[33mac6cd14[m move operator attributes off of validateAttribute onto the nicer AttributeChecker
[33ma3c17dc[m move the @infix/@postfix/@prefix attributes onto the modern attribute infrastructure, NFC.
[33md3ee752[m remove the old .. operator.
[33m4dd6c6e[m fix a use of the old range syntax.
[33mf1a6921[m Fix an assert in store-to-load forwarding.
[33m8eba52f[m LoopRotate: Silence unused variable warning in release mode
[33m3350244[m LoopRotate: Update comment to reflect reality
[33mc50e396[m Add APIs to update preserved analysis information for dominance and loop info
[33m12cb97d[m PassManager: Reset state and remove all currently owned transformations
[33m6b6e42e[m Remove line that was committed in error due to a previous experiment.
[33me998695[m [g-arc-opts] Refactor global arc opts to use the PostOrderAnalysis.
[33m938623b[m [enum-simplification] Teach enum simplification to use the post order analysis.
[33m7d57515[m Add in a post order analysis that lazily recomputes post orders for functions when they are invalidated.
[33mc400bd5[m [enum-simplification] Use valueCanBeUsedInInstructionRange to be more aggressive with hoisting releases.
[33m2ee9dab[m [arc-analysis] unchecked_ref_bit_cast can never use reference count values in a way we care about. Trivial bit casts do not either as long as we are not converting a ref count value to a trivial value.
[33m4f115c6[m [arc-analysis] {struct,tuple}_element_addr, unchecked_take_enum_data_addr do not use reference counted objects in a way we care about.
[33mf45ea97[m [arc-analysis] ReadNone builtins that do not take values with reference semantics can not use values with reference semantics.
[33m0ac4233[m Remove PreallocatedMap::operator[]. Change PreallocatedMap::find to return .end() if the map is not sorted in release builds.
[33m7ca4004[m [enum-simplification] Use .find not [] when accessing various maps.
[33mcced061[m [stdlib] Printable conformance for Range
[33m9ecbdc2[m [stdlib] punctuation fix in comment
[33m8b41540[m [stdlib] Fix a typo Dmitri found
[33mbe37cd9[m [stdlib] Trap invalid Ranges of Comparable Indexes
[33m61c954b[m [stdlib] Rename a test consistently with others
[33md85a7f5[m [stdlib] Pointer types are not BooleanType's
[33mcb050ee[m [stdlib] Add Interval support
[33mb53ed94[m stdlib: replace masking arithmetic with less complex code
[33m45f9706[m stdlib/Dictionary: remove 'public' from more Dictionary implementation details
[33m08d6650[m stdlib/Dictionary: move implementation of Dictionary.bridgeToObjectiveC() from Foundation overlay to core stdlib, and remove 'public' from some Dictionary implementation details
[33ma5c079a[m Replace the class_protocol attribute with a "class" requirement.
[33mfd2c4dd[m Remove dead ‘val’ diagnostic.
[33m9b4ee30[m [sil-code-motion] Use valueHasARCDecrementsInInstructionRange.
[33m8685173[m [arc-analysis] Add two functions for applying canUseValue and canDecrementValue to a contiguous range of instructions in the same BB.
[33ma2b0d85[m [enum-simplification] Fix up some comments.
[33m48b9290[m All of our SILPass tests have been using "_" not "-" as a delimiter. Rename the few remaining tests to fit this convention.
[33m1e7dfd3[m Instead of XFAILing this test, add a requirement until rdar://16847192 is complete.
[33m2b9d048[m [enum-simplification] Rename PredCase => EnumCase.
[33m0412b0c[m [stdlib] BooleanType is just for Bools
[33mbf55e6b[m [stdlib] s/FloatingPointNumberType/FloatingPointType/
[33m801a929[m Add in comments to GlobalARCOpts.cpp. NFC.
[33m652bb85[m Remove bogus assert and tighten up induction variable determination.
[33mcbcf9ab[m s/LogicValueType/BooleanType/
[33m6d1095f[m Protocol names end in "Type," "ible," or "able"
[33mdff53de[m Dictionary and Array bridging tests: remove incorrect FIXME comments: if the Dictionary or Array has native storage, there is no reason to expect any bridge operations
[33mfe5c3a2[m LoopRotate: Don't assert on certain loop forms
[33me45fb7c[m Allocation instructions return non-zero pointers.
[33mbbfd7ca[m Teach the code that searches for values that can be zero about additional instructions. This helps to remove a comparison of a pointer to zero inside the Array implementation.
[33md9281b1[m Small modification to SCC finder to improve clarity.
[33mdbd0a6f[m SILGen: Test that super dispatch honors 'dynamic'.
[33mf35e50e[m [PrintAsObjC] Include IBOutlet/IBAction/IBOutletCollection in the header.
[33m355316a[m stdlib/Dictionary: when bridging from Objective-C, recognize bridged native Dictionary storage and adopt it if KeyType and ValueType match exactly
[33md0f029c[m Some code cleanup, per feedback.
[33m6a75d3d[m Now that the most problematic user conversions have been removed from the runtime (thanks, Doug!), we can remove the operator-specific user conversion handling code matchCallArguments. Doing so cleans things up a bit, and addresses rdar://problem/17540796, rdar://problem/17012694 and rdar://problem/16958107.
[33m00e166f[m Sema: Don't allow 'dynamic' and 'final' on the same definition.
[33mfed9b8d[m SILGen: Honor 'dynamic' when invoking initializing ctors from allocating ctors.
[33mba55719[m [Driver] clang::driver::getARMCPUForMArch() moved to llvm::Triple::getARMCPUForArch().
[33m893ca42[m SILGen: Have protocol witnesses honor 'dynamic'.
[33mc5a0711[m Sema: Push 'dynamic' down from properties onto accessors.
[33mbc6951d[m Followup to r19830: preserve the original token so we report the correct location for the operator error, and added a test for the error reporting for operators in non-global scopes.
[33m09be2f3[m Optimize the comparison builtin. This peephole allows us to remove the control flow in the string literal constructor. I did not notice performance changes in our string benchmarks.
[33m4a8a07e[m Fixed a problem in the type checker when LLDB uses it. Debugger variables are stand-ins for variables that exist already in memory, so they should not be default initialized.  This patch ensures that the type checker does not automatically assign such variables a default initializer.
[33m3459222[m AppKit overlay: Make NSApplicationMain overlay public.
[33mbb3ad55[m Document the use of the non overflowing arithmetic when multiplying sizeof() by 8.
[33m9cbf6df[m stdlib/Dictionary: add _DictionaryBuilder, which is faster than adding elements one by one.
[33mbc682c8[m stdlib: coding style: don't hide 'public' at the end of the line where it is hard to notice it
[33mee06efd[m stdlib/Dictionary: when bridging Dictionary of non-verbatim-bridged types to NSDictionary, perform bridging operation in O(1), and defer bridging of the contents until the NSDictionary is accessed
[33m78fc120[m Add a KVO execution test for r19851.
[33m5986b77[m Use an empty type encoding string for ivars, rather than a null pointer.
[33mbd9ead4[m Remove -[no-]strict-keyword-arguments.
[33m8882999[m Add Array semantic model.
[33mda59d30[m Greatly improve type checker performance when inferring types for certain binary expression applications
[33m65d8cb9[m CSE upcast instructions.  <rdar://problem/17625307>
[33m2211efa[m Add a test for induction variable recognition.
[33m0219830[m Add a SIL SCC visitor and an induction variable analysis.
[33m26206d9[m [AST] Add the braces source range to invalid VarDecl nodes that have rejected accessors due to syntax errors. This allows AST clients to consult the source range of the braces for computed properties even when there are errors. Addresses the first part of <rdar://problem/16747499>.
[33m47d04dd[m AST: Always require objc dispatch on foreign accessors.
[33m0e8021b[m [ClangImporter] Add frontend option -dump-clang-diagnostics for debugging.
[33m3a3a5f6[m change 'operator' to be a keyword instead of a contextually sensitive weirdo, part of rdar://17527000.
[33meaf84f5[m SILGen: Use the 'dynamic' attribute to decide whether to emit ObjC dispatches.
[33mf4a4709[m Use unsafe arithmetic for basic sizeof and alignof calculations.
[33mb24e19b[m [PrintAsObjC] Handle unparenthesized closure input types.
[33m98ab6d8[m Perform unsafe arithmetic on sizeof() calculations. This calculation is unlikely to overflow. I did not see a noticable performance change to the string benchmarks.
[33m68a7ac0[m SILGen: Don't reemit the magic __FUNCTION__ literal into the same std::string on every use.
[33mce51ad0[m [Driver] Set -target-cpu options for x86 targets as well.
[33mba0df38[m Fashion police
[33m04e1110[m Fix the ordering of #includes in lib/Driver/Tools.cpp.
[33m373f0ce[m [Interpreter] Honor -F when trying to dlopen framework dependencies.
[33m07e696c[m Delay the complaint about "operators only allowed at top level" till the DebugClient gets a chance to decide about globalizing them.
[33m0fe539f[m Renamed swift::createDriverOptTable() to swift::createSwiftOptTable().
[33ma61becc[m Updated the header guard in swift/Option/Options.h.
[33m465eeb9[m Moved everything in swift/Option/Options.h into the swift namespace (from swift::driver).
[33m2d6c9e9[m Moved Swift's option table from swiftDriver into a new swiftOption library.
[33mcf14fef[m Removed an unnecessary #include from CompilerInvocation.cpp.
[33m5a861b3[m [ClangImporter] Define header guards for <iso646.h> so it's never present.
[33m959a36b[m Add a part of the testcase I forgot to commit in my previous commit.
[33m940d473[m Teach the optimizer not to split aggregates with unreferenced members such as unions or bitfields.
[33m8078fec[m fix <rdar://problem/17625253> Remove the 'strong' context-sensitive keyword
[33m3dfff3a[m Fix tests that were broken by my last changes.
[33m2cd27ad[m Tweaks to get PlaygroundLogger to build and work in a world of accessibility-enforced rules
[33m06c6379[m Add -enable-dynamic staging option.
[33ma0a37e2[m Sema: Don't inherit 'dynamic' if an override was already explicitly 'dynamic'.
[33mcb8e123[m Remove user conversions (@conversion __conversion) as a user feature.
[33mae23d3c[m Remove all test dependencies on __conversion.
[33ma0f72c5[m Change _swift_fmodf to return float
[33m86f5812[m stdlib/Array: hide some Array implementation details:
[33m8ea2b6b[m stdlib/Array: remove some dead code that supported 'Array' being named 'NewArray'
[33m54efce9[m stdlib/Dictionary bridging: optimize NSDictionary to Dictionary conversion during eager bridging
[33m0e59dca[m stdlib/Dictionary bridging: don't wrap NSDictionary in Dictionary<K, V> when either K or V is bridged non-verbatim
[33m909d494[m stdlib/Dictionary: remove debug output that I accidentally committed
[33m4c5d6b0[m Fix warnings in the Dictionary test
[33mfebc98d[m stdlib/Dictionary: change internal bridging interfaces so that wrong code (that does not copy NSDictionary) looks wrong
[33mcf6842e[m [stdlib] Drop the "by" method on Range<T>
[33m0cbd541[m [stdlib] Floating point types are Strideable...
[33m4c31d81[m [stdlib] Striding over closed ranges
[33m3437435[m [stdlib] Striding over half-open ranges
[33mac4703d[m LLVM headers and Emacs mode annotations
[33m818bc58[m PerformanceInliner; always inline transparent calls. Just to be sure.
[33mc36bedd[m [stdlib] Every FloatingPointNumber is Strideable
[33mbec9a26[m [stdlib] Strideable refines Comparable
[33mddcd37b[m NFC: Factor PerformanceInlining profitability logic.
[33mff1357d[m Update regex in the pre-commit-benchmark script.
[33m5b49d59[m Remove the @ from @final and @lazy, the last major piece of rdar://17168115.
[33mffde489[m remove an old class that isn't testing anything useful.
[33mc6356d2[m PerformanceInliner should inline cold transparent calls.
[33mfe95f81[m introduce a new 'DeclModifier' flag on attributes, which mark that the attribute is a "modifier" of a decl, not an "attribute" and thus shouldn't be spelt with an @ sign.  Teach the parser to parse "@foo" but reject it with a nice diagnostic and a fixit if "foo" is a decl modifier.
[33m9e89dba[m [stdlib] make FloatingPoint.swift.gyb parse as swift
[33meb1a5cf[m [stdlib] Add Strideable protocol
[33m0a15d01[m Rely on the stdlib's runtime assert and undefined behavior to promote 3/4 remaining unchecked_addr_cast types to object bit casts.
[33m1563822[m Remove unused variable
[33m1f78f82[m Sema: Make overrides inherit the 'dynamic' attribute.
[33m9ddad1d[m Sema: Basic parsing and checking for 'dynamic'.
[33m3e3f4a6[m Revert "infix + and - for RandomAccessIndex"
[33m35dcc3a[m Move the @optional attribute to being a SIMPLE_DECL_ATTR, which simplifies a bunch of code, makes them more consistent with the other attributes, and is generally the newfangled way to do things.
[33m64c6d32[m [stdlib] infix + and - for RandomAccessIndex
[33mbde0d30[m Fix fmod() covers. Add CGFloat to the math.h tests.
[33mb56c3a8[m [stdlib] Drop Sliceable conformance for Range<T>
[33m8dba1a0[m [Driver] Set the '-target-cpu' for non-64 arm as well.
[33mb84a337[m [stdlib] Drop ReverseRange
[33me261dda[m [stdlib] Give reverse() the eager/lazy treatments
[33m58f9469[m [stdlib] Disallow indexing integer ranges with Int
[33m9918145[m [stdlib] Drop RandomAccessRange
[33m6752d85[m [Accessibility] Private members cannot override public members.
[33m6b053e6[m [IDE] Add support for Swift extension declarations to the document substructure. Add tests for struct, protocol and extension. This addresses the first part of <rdar://problem/15818966>.
[33mc7adb49[m Blocks "are" classes, from the runtime perspective.
[33ma90e241[m An array/dictionary only bridges to Objective-C when its element type can be bridged at runtime.
[33mc90cd11[m [PrintAsObjC] Only include internal decls if we have a bridging header.
[33mbb6c62d[m [Driver] Disallow bridging headers with framework targets.
[33m0f0714f[m s/must have (internal|public) access/must be declared $1/ in diagnostic.
[33m7decdc3[m Eliminate the “verbatim” return bit from TypeChecker::getBridgedToObjC.
[33mfd2707f[m Simplify the check in TypeChecker::getDynamicBridgedThroughObjCClass()
[33m9320f1a[m Claim 'private', 'internal', and 'public' as full keywords.
[33m254930a[m Update stdlib for r19751.
[33m1adbbd7[m add a testcase for: <rdar://problem/17226384> Setting an @lazy optional property to nil has a strange behavior (Swift)
[33m1d951bc[m Remove the unused isConditionallyBridged from some TypeChecker APIs
[33m40fcb27[m [Accessibility] Check the subject first for setter accessibility attributes.
[33mee6d4bf[m [Accessibility] Extensions with accessibility can't conform to protocols.
[33m4bb1948[m Add a test for the accessibility of nested types within a public extension.
[33m1ee0376[m Add a test for "public(set)" on a property in a private extension.
[33mf588ed4[m Don't use the word "accessibility" in diagnostics.
[33m5b80dc3[m Respect accessibility for scoped imports.
[33m9d6ada0[m Add an admonition for adding new sugared types: test them in PrintAsObjC!
[33m470718d[m Add a missing null check to the archetype opener. This unfortunately won't make the new Range work any easier, but it essentially turns rdar://problem/17598049 into rdar://problem/17597651.
[33mac6c8c3[m Peephole (apply (thin_to_thick_function f)) to (apply f).  <rdar://problem/16860102>
[33mb14a2cf[m Implement all the missing conversion instructions in isIdenticalTo.  These are in the same order as those listed in writeSILInstruction to make it easy to see which ones are simple conversion instructions
[33m7e5e1b8[m [pre-commit-benchmark] Default to one run at -O3
[33m8587dd6[m [pre-commit-benchmark] Bugfix
[33mc183ceb[m CSE ref_to_raw_pointer
[33m267fc43[m Assert in CSE that instructions are equal to themselves.  This will catch errors where key lookups won't match themselves because some instructions are not implemented in InstructionIdentityComparer
[33m1aad2fa[m Add RefToRawPointerInst to isIdenticalTo
[33m44b93b5[m [XCTest] Fix enumerator names after r19732.
[33m3e994a2[m [PrintAsObjC] Don't print private protocols in the generated header.
[33m9e970f3[m [PrintAsObjC] Handle dictionary sugar syntax.
[33mcf53b74[m Don't infer @objc on private members.
[33mc99b417[m [ClangImporter] Handle underscore-punctuated enum names (used by CoreMedia).
[33md347bb5[m Conversions between like-optional types are treated as optional-to-optional, which can be problematic if the arities of the two optional types are different, but the most-bound types are the same. In these cases the type checker will generate a bind/inject/evaluate sequence, which may inadvertently flatten nested optionals to a 'nil' value. (rdar://problem/17412649) What we really want here is something similar to a value-to-optional conversion, but inner expressions may not yet be simplified during constraint generation, so we'll need to "peephole" it in during application.
[33m8cfde77[m Part of logging an NSView is redrawing it if it's dirty However, a view can ask to be redrawn by setting its needsDisplay flag to true When this happens in a playground, the self.needsDisplay = true line forces the view to be logged - logging the view forces it to be redrawn, and unless there's a way out that does not force-redraw, this ends up being an endless loop & of course at some point we run out of stack, and "random" crashes ensue
[33md95272e[m Remove unnecessary uses of __conversion in the test suite.
[33m2f3f6ac[m Make "true" and "false" Boolean literal constants for the BooleanLiteralConvertible protocol.
[33mf0621d1[m stdlib/Dictionary: eliminate invalid reinterpret casts
[33m435a8dd[m stdlib/Dictionary: copy the NSDictionary before wrapping it, so that NSMutableDictionary and other mutable NSDictionary subclasses don't break Dictionary's value semantics
[33m19f3875[m stdlib/Array: remove === and !== for array types
[33m0523fea[m stdlib/Dictionary: rewrite iteration over wrapped NSDictionary not to rely on NSDictionary.allKeys, it leaves the array of keys on the autorelease pool.  Not very bad, but it is better if we can avoid it.
[33m863a92c[m Remove stray sentence and fix grammar in release note
[33m96b7819[m stdlib/Dictionary: remove workaround that is not needed anymore
[33m3a1e07e[m Improve type inference for the element pattern and sequence of a for-each loop.
[33mc1228c7[m ClangImporter: Track when structs have unreferenceable storage.
[33m8b7cc4f[m Make -i compatible with shebangs and forward arguments correctly
[33mbcae024[m fix @objc in ios-specific test.
[33mc249599[m [ClangImporter] Don't crash when a decl is definitively not in a module.
[33mae5cd10[m LICM: remove redundant check
[33mfaa0fc4[m [Accessibility] Setter requirements must be public for public conformances.
[33m51eb926[m Add a SIL LICM  pass
[33m73d268f[m XCTest: Use the new convention for format strings
[33m785058f[m Release notes for CGFloat change
[33med35c76[m Remove discussion of type sugar from C pointer interop docs.
[33m3f4a07f[m Remove accidental commit: we don't need to annotate this as @objc
[33m55c7b72[m IRGen: Use property-style ObjC encoding for property metadata.
[33m76d0e58[m Fix case insensitivity.
[33m02999ca[m Reinstate the @ on the @objc attribute.  This is largely a revert of r19555 with a few tweaks.
[33m39fe347[m Update pre-commit-benchmark script for output changes.
[33m3e7cea2[m Fix SILType::getMetatypeInstanceType by lowering the type.
[33m7ed7be9[m Put cocoa on the slow path of String.subscript.
[33m9d12bbd[m Added -enable-global-opt flag.
[33m757348c[m Don't hoist SIL addressor calls out of cold blocks.
[33m7f96701[m Allow ColdBlockInfo to be used conveniently in a SIL module pass.
[33md31fe2e[m [test] Add explicit CFString->String conversions to test stdlib/Unicode.swift.
[33m8fb9a19[m Replace the "string" property of String.UnicodeScalarView with a String initializer.
[33m0d6df5f[m Remove Bool <-> ObjCBool conversions.
[33me6a71b8[m Remove the implicit CFString -> String conversion
[33med54826[m Replace the implicit NSRange -> Range<Int> conversion with a toRange method
[33m973cadd[m Replace String.UnicodeScalarView's user conversion to String with a "string" property
[33mf6645eb[m Fix argv when using -i in the frontend
[33m9e2b68c[m Introduce CGFloat as a distinct struct type.
[33mc86df0b[m Array semantics docs. Reword a few things and incorporate DaveA feedback.
[33m95ac813[m stdlib/Dictionary: coding style, comments, renamed type generic parameters
[33m12aaf75[m stdlib: remove 'public' from private functions
[33m4556f92[m stdlib/Dictionary: comments, coding style, more semantic _sanityChecks
[33mdc39ed2[m utils/vim: add syntax highlighing for 'public', 'private', 'internal'
[33m977d901[m stdlib: hide quickSort and insertionSort
[33m8fb09ef[m stdlib: update comments and parameter names for startsWith() algorithm to clearly reflect semantics
[33m9f4c417[m SIL: Forward-declare witness tables with correct linkage.
[33mbdecfe7[m Mark the string builder as @readonly to allow us to remove unused strings.
[33ma227fca[m Mark the Array and Dictionary builders with the readonly marker to allow removal of dead code.
[33m73e07f3[m Add a link to the high-level optimizations document.
[33m0eedfdc[m Rename pure->readonly.
[33m5427102[m Remove stray @ from 'public' and 'internal' missed in r19672.
[33m93b3d5f[m Add Mirror conformance for UnicodeScalar. This doesn't need anything special, a _LeafMirror should suffice
[33mac90133[m Update tests for accessibility modifiers becoming context-sensitive keywords.
[33mda29f09[m Update stdlib for accessibility modifiers becoming context-sensitive keywords.
[33m3f59d6b[m Drop the '@' from access control modifiers.
[33mb6ca5f3[m Add Mirror support for String.Index
[33m1c5fc49[m [test] Note a bug number for an XFAILed test.
[33me73b312[m EmptyCollection and CollectionOfOne are similar enough that they can be reflected together. I am a little unhappy with having the summary be a string argument instead of inlined, but I couldn't come up with a quick solution to do otherwise, and it didn't seem worth spending a lot of time dwelling upon that
[33m2826391[m [CMake] Fix SpriteKit single-platform build.
[33mbd80c74[m [CMake] XCTest is not ready to be a TARGET_LIBRARY.
[33m342202d[m Generators don't need Mirrors
[33m3db1a54[m [Accessibility] Turn on access control for everyone.
[33mf0fc440[m One last cleanup for access control.
[33m22f2cde[m [CMake] Mark SpriteKit and XCTest as TARGET_LIBRARY targets.
[33mcb9edef[m [CMake] Default to assuming Clang and LLVM are built together.
[33m15b42fd[m Move the Foundation-specific Mirrors in their own file. These are not as obviously boilerplate as other ones, so there is less to be saved, but Foundation.swift is an over-crowded file anyway
[33m253b2e2[m Change the doxygen style of comment from @ to \\
[33mc8309a3[m Document the "pure" attribute.
[33m3f476f2[m Add a small peephole optimization to remove pure functions with no users.
[33mf09df57[m Add a utility function for checking if a function has a specific semantics tag.
[33m4fd20e7[m Use The Mirror Generator to simplify the CoreGraphics mirrors - a little bit of magic, but much less boilerplate Oh, and add a test case for those Mirrors, since none was there
[33m8f72ab7[m SILGen: Substitute the types of physically-accessed lets.
[33m64bb537[m Implement Mirrors for the UTF8/16 view on Swift Strings
[33md77f7b9[m Unbreak the iOS build by only compiling the SpriteKit mirrors on OSX
[33m953f740[m [stdlib] Trivial comment fixups
[33m94e04be[m [stdlib] Make RandomAccessIndex Comparable
[33me67975d[m [utils] add pre-commit-benchmark script
[33mfaa4004[m [Accessibility] Public types/functions cannot have private generic parameters.
[33mdeaab50[m Add an execution test for extensions to CF types.
[33mf693c5c[m fix rdar://17405715 - lazy property crashes silgen of implicit memberwise initializer
[33m0cd01ee[m SILGen: Correctly determine whether property accessors are dynamically dispatched.
[33md611059[m Refactor the UnsafePointers Mirrors to use the all-powerful Mirror Generator Reduces some boilerplate
[33m36f035e[m Per Dave, generators don't really need to be reflected
[33m9a9d364[m Refactor SpriteKit mirrors to use The Mirror Generator These were especially painful to look at, since they were identical and could not be unified due to an IRGen bug
[33m86ebdaf[m The Mirrors Generator II
[33me37829e[m SILGen: Factor 'getMethodDispatch' out of SILGenApply.
[33m5ad1320[m Add a loop rotation pass
[33m6466da1[m Add a SILSSAUpdate utility
[33m2e83bdf[m Add a convenience function on SILBasicBlock to move it after another Block
[33m7207b6c[m TrivialCloner: Also clone the basic block for operands
[33m21de790[m Add CFG utilities to update 'phi' nodes and split critical edges
[33md77b821[m SILLoopInfo: Add a verification method
[33m4a5ba0f[m DominanceInfo: Add a verification function
[33m132a29e[m Remove unnecessary wrapper type GenericParam.
[33me9439ff[m Remove implicit conversion from _DictionaryElement.
[33m8b61c71[m Overlay NSApplicationMain to fix its argv type.
[33md8de1a9[m Remove two more implicit conversions used only within the standard library.
[33m2bddbc7[m Replace OnHeap<T>'s implicit conversion with a computed property.
[33md62d98d[m Replace an implicit conversion with a computed property (library implementation detail).
[33m76b2430[m [Accessibility] Add some basic tests for member lookup.
[33m2836c47[m [Accessibility] Public enum cases cannot have private payloads.
[33m2ebcd5d[m Hide the representations of DictionaryIndex and DictionaryGenerator.
[33m0c31ff5[m Move bridging conversions into the type checker.
[33me5e00e9[m Check the dictionary key and value types against the requirements of Dictionary.
[33mae76bdb[m Another .. -> ..< change.
[33m63b561a[m fix <rdar://problem/17556858> delegating init that delegates to @transparent init fails
[33ma885d1b[m Transfer the buffer for the module documentation file only when it exists.
[33mb20abdf[m stdlib: fix grammar in Array comments (they used to say 'a Array')
[33m09bbec7[m stdlib: fix a crash in String.rangeOfString when the result is NSNotFound
[33mb9b7121[m More updates for '0' being new invalid buffer ID
[33m894c1e6[m One more getPtr() -> get().
[33mc248852[m Update to ToT r212398 where BufferID is unsigned and has 0 be the invalid buffer.
[33m0d0deff[m Update which matches clang r212408, ie, using ErrorOr for file loading
[33m151d34d[m Update for r212388 which uses non-intrusive refcounting for TargetOptions
[33m67aeb2e[m adjust to mainline API change (IntrusiveRefCntPtr::getPtr() renamed to get())
[33ma9ee1f8[m stdlib: remove withUnsafePointerToObject
[33m6f5a2e5[m stdlib: remove LifetimeManager, it is completely unused, withUnsafePointer-like functions provide safer idioms
[33mf61bf5d[m stdlib: remove withObjectAtPlusZero(), now we have built-in CF bridging support
[33m92d8903[m Update references to isUniquelyReferenced in tests
[33m1911aae[m stdlib: hide isUniquelyReferenced
[33m62c772a[m stdlib: hide Objective-C bridging implementation details
[33m00fe3bc[m stdlib: hide swift_keepAlive
[33m735bf5e[m stdlib: hide swift_bufferAllocate
[33m8a3c73e[m stdlib: hide countLeadingZeros
[33m55c1366[m Fix a typo in the code that initializes the inliner. The high-level inliner does not inline @semantics functions. We did not notice this change because there is no code in the standard library that is annotated with @semantics.
[33m6cf0cf6[m IRGen: Assert that categories are never emitted for foreign classes.
[33mf0c2ce4[m Sema: Reject objc-ness in extensions to CF types.
[33m19e0ce9[m [Accessibility] Public classes may not have private superclasses.
[33m4c438ec[m [Accessibility] A public enum cannot have a private raw type.
[33m56ec3c9[m [Accessibility] Properly treat typealiases as distinct types.
[33mb892892[m Disallow use of TypeBase::getAs/isa/castAs with sugared types.
[33m0fac468[m [Accessibility] Public protocols cannot refine private protocols.
[33m1b589e1[m stdlib: Remove a redundant _precondition from _asUTF16CodeUnit
[33me95a9e9[m stdlib: rename private API _asUnicodeCodePoint to _asUnicodeScalar
[33meacd26b[m Split the optimization pipe into two parts: high-level and low-level optimizations. In the high-level we don't inline functions with special semantics to allow high-level optimizations.
[33maf160e9[m SIL: Lower dependent member types when substituted into context.
[33m6b45c48[m correctly disable this
[33mfd326a4[m disable two more tests that take 60s to run and are very narrow in terms of utility.
[33m190d490[m improve the doc comment on toInt to be more specific about what it does.
[33m24ffd63[m turn two tests into long_tests, they take 2 minutes each to run.
[33m0ad1c24[m fix <rdar://problem/17493994> String.toInt() returns 0 (not nil) for some non-numeric characters
[33m011d5c6[m reformat some test lines NFC.
[33m03c9f87[m IRGen/Runtime: Add a "primary generic parameters" count to generic parameter descriptors.
[33m764cd48[m Adding a test case for hoisting SIL global addressors.
[33m3ff33be[m SIL GlobalOpt pass: hoist init calls to the outer preheader.
[33mece48b0[m update test for @objc diagnostics change.
[33m81f1e66[m stdlib: hide encodeBitsAsWords
[33m594dfe5[m stdlib: hide swift_MagicMirrorData_summaryImpl
[33mcd5a624[m IRGen: Emit more accurate property metadata.
[33m7f35164[m stdlib: hide roundUpToAlignment
[33m99d35cb[m ReST parsing: fix a bug in parsing field list items that don't have a blank line in between
[33m29ab26c[m stdlib/UnicodeScalar: hide UnicodeScalar.isPrint(), it is not Unicode-aware
[33m6e5060d[m stdlib/UnicodeScalar: remove arithmetic operations, they interact in non-obvious ways with double-quoted literal sytax; "1" - "1" used to compile
[33mcf2c538[m stdlib: change ReverseRange.isEmpty() into a property
[33mac7fee3[m stdlib: add Dictionary.isEmpty property
[33m3422201[m stdlib/String: move lowercaseString and uppercaseString properties to Foundation, and have them forward to Foundation.
[33m8361bcc[m stdlib: fix some 80-cols violations
[33m37b597f[m Remove redundant checked_cast_br by looking up the dominator tree.
[33m795d22b[m Add another pass of CFG simplification after inlining.
[33m9d80cf2[m Remove extra whitespace after paren, and fix comment.
[33m7a56499[m Start making @objc not start with an @ sign:  - Change the parser to accept "objc" without an @ sign as a contextual    keyword, including the dance to handle the general parenthesized case.  - Update all comments to refer to "objc" instead of "@objc".  - Update all diagnostics accordingly.  - Update all tests that fail due to the diagnostics change.  - Switch the stdlib to use the new syntax.
[33m2942122[m mark some global variables const, fix trivial coding standards issue.
[33mcb97c11[m Fix a super-obscure bug where we could attach the doc comment attached to a token when backtracking, because we didn't restore the lexer state to before the comment, preventing it from being attached to the token that followed it after backtracking was restored.
[33mc1537fd[m Reject explicit uses of CFRetain/CFRelease/CFAutorelease
[33mbdd1ec3[m Update stdlib and tests for accessibility, again.
[33mcdd8532[m Remove @private from the stdlib.
[33mf18dc41[m [Accessibility] Honor private(set) with -enable-access-control.
[33m40e9cd8[m Check 'public(set)' modifiers a little more.
[33mb3addba[m Split "private(set)" attributes out into a separate class.
[33mf6378f9[m richards benchmark: Use fatalError.
[33md30c430[m Fix broken asserts in richards benchmark.
[33m314dbc6[m Forgot to add the most important part of the patch to the previous commit.
[33mb0548f1[m Start using the Mirror Generator
[33m9d189ff[m When importing record types from C/ObjC, treat Clang's record layout as authoritative.
[33mdfeaa1c[m FixedPointArithmeticTraps test: don't check for LLVM Int8*Int8 bug, it is not present in all LLVM branches that we care about, and it is an x86-only bug
[33mf429684[m [Serialization] Allow witness conformances to be "incomplete" when writing.
[33m47962b7[m [stdlib] Slightly broaden inout violation tests
[33m6aadb1a[m APIs in XCTest now uses UInt, not Int. Fixup for r19536.
[33m8cb6d45[m Only remap NSUInteger to Int in system frameworks
[33m37c3ec4[m Rename the -import-tighter-objc-types option and add it to the frontend.
[33md6586cb[m The Mirrors Generator
[33m8db106e[m [stdlib] Optimize Array member sort
[33m1f68ff4[m [stdlib] Detect/fix potential memory-safety issue
[33me5d18b0[m Convert the GlobalOpt pass into a proper SILModuleTransform.
[33mce9802c[m ClangImporter: Allow unions and structs with bitfields to be imported.
[33m0a00691[m Add a staging option to enable import of unions and other partially-importable structs.
[33m2658e62[m Rename modules named 'Swift' in the frontend
[33m6326182[m More precise semantics on array.check_bounds.
[33m0c205b3[m stdlib/OutputStream: fix println() comments
[33m10fae3e[m Remove -enable-string-pointer-conversion staging flag.
[33m0598b6d[m Casting runtime: Use the runtime's constant for reserved bits in an ObjC pointer.
[33mb1cc0a2[m SILGen: Forward an upcast existential when we take it.
[33m7d1371c[m -verify: Bring over Clang's "+" to signify "at least one" diagnostic to match.
[33m61d12a3[m Add a test for local enum == synthesis.
[33m8080ca6[m [Accessibility] Public functions/initializers may not use private types.
[33m234a79a[m [Sema] Correct the text of a diagnostic.
[33m6dde77a[m [stdlib] Delete Range.swift
[33mf0f55c0[m Array docs. Minor wording.
[33m544e316[m Explain array.check_bounds semantics.
[33mdfbd8b7[m Don't desugar paren type when code-completing func params
[33mc2ae63b[m stdlib/UnicodeScalar: hide APIs that don't work with non-ASCII correctly
[33m7802479[m stdlib: don't use '\returns' in comments
[33m5b459f6[m Add support for new range operator '...' and '..<' in vim syntax files.
[33m75fd9ca[m stdlib/overflow checking for fixed point: add a test that checks all combinations of types and operations
[33m9df52fd[m Add reference to a rdar for TODO in comments.
[33me4b6202[m stdlib/overflow trap test: the optimizer is becoming more and more powerful; load constants using functions that are truly opaque to the optimizer
[33m0c3f9ff[m PrecommitBench: Add cmake rules for building the testsuite.
[33m8e139cf[m [build] Don't use target_link_libraries() to add flags that are not linkage.
[33mdbeb2a4[m [build] Fix missing whitespace in some APPEND_STRING calls.
[33mf9440d0[m Sema: Correctly resolve the metatype of '.member's found by optional unwrapping.
[33m37d69a4[m Allocator: round the size of an allocation up to the alignment on all allocation and deallocation paths.
[33m6df1205[m Documenting the Array semantic model.
[33m312c55a[m [stdlib] Range WIP 1: create RandomAccessRange
[33md459ee4[m Since all NSObject subclasses are Equatable, we can just use XCTAssertEqual/XCTAssertNotEqual.
[33mef71158[m [gyb] Support importing local .py files
[33mf0bcc5c[m [Accessibility] Fix existing checks to work with protocol requirements as well.
[33m43ca8fc[m [Accessibility] Check requirements and default definitions of associated types.
[33m1769dd9[m Mark some more things public...and mark ArrayType internal again!
[33m04534da[m Add --show-sdks option to buildbot-script to print versions before building.
[33maf8421c[m [utils] Move gyb into a .py file
[33m6d284b2[m IRGen: Emit class properties as @objc class methods (not instance methods).
[33me6227bc[m Remove XFAILs for 32-bit targets. This was part of <rdar://problem/17411843>
[33m04095fb[m *Start* importing more availability information from the SDK.
[33mc77157e[m Protect against failures due to recursively type-checking a SubscriptDecl.
[33m2618061[m Eliminate a pointless and wrong initialization from swift_bridgeNonVerbatimFromObjectiveCConditional.
[33m2f02a85[m Remove unused variable.
[33md6f0a52[m Fatal errors during -verify should always be treated as errors.
[33m5ecbad6[m Instead of defining __swift__, rely on the 'annotate' attribute to define custom unavailability in Swift (v1).
[33m1a332db[m Remove the UIKit overlay for UIApplicationMain.
[33m344fb97[m Add rdar:// for availability test.
[33m1b7a384[m Fix a multitude of issues with extensions exposed to Objective-C (r19116).
[33m89c7e77[m Fix rst errors.
[33mc34b4f6[m Enable string-to-pointer conversions and remove CString.
[33m43bff1a[m Add an example of array bytecode.
[33m0fe142e[m Update the intro section of the doc.
[33m1625193[m ..and also fix a few that the script didn't seem to find
[33mcfe3087[m Per DaveA's script, Remove spurious TABs I introduced
[33m4c2aa4a[m Document our high-level SIL optimizations using @semantics
[33m4efc07c[m Promote warning about T[] array syntax to an error <rdar://problem/17461007>.
[33m5ac98c5[m add a note about the unicode string literal syntax change.
[33m3c539b7[m Sema: Look through optional types for .member lookup.
[33mf3c7bdc[m stdlib/NSString APIs on String: change substringFromIndex() and substringToIndex() to accept String.Index instead of Int
[33m57df21c[m stdlib/comments: UTF-8 and UTF-16 are spelled with a dash
[33m99f9f72[m Add a test for != comparison of COpaquePointer and nil
[33mb31a6d1[m Preserve vararg... syntax in code completions
[33m7e4c678[m stdlib/String: rename String.utf16count -> .utf16Count to follow naming conventions
[33m36cbfe3[m stdlib: fix grammar mistake in API name (introduced by me), and use a better name suggested by Dave
[33m6f814de[m Remove the '-disable-all-runtime-checks' option that predates current SIL-level optimization/inlining scheme.
[33mf7e926e[m stdlib/Arrays: refer to the parameter correctly.
[33mdb4fbb4[m stdlib/Array: use `monospaced text` in a comment
[33mb304e65[m stdlib/HeapBuffer: add a message to a runtime trap
[33m313cfca[m Unicode trie generator: add tests for the generator itself that use non-default trie parameters and fix a few bugs
[33md8ed7b6[m stdlib: convert tabs to spaces
[33m8122715[m Teach the ColdBlocks SIL analysis to recognize the branch hint semantic model.
[33m53cbc3e[m Add a ColdBlockInfo analysis based on DominanceAnalysis.
[33m23cdbd0[m Single quotes in comments ruins SIL mode.
[33m58c57b0[m Use hasArchetype directly on SILType rather than going through Type.
[33md075f06[m Require a minimum deployment target of iOS 7 or OSX 10.9
[33mb5a78c0[m [attribute] remove InlineKind::Always.
[33mef26082[m Add fixit hint to migrate code from the old unicode escapes to the new one:
[33ma85fd34[m [DebugInfo] Update test for LLVM-side changes.
[33m2b2330b[m [attribute] rename @noinline to @inline(never).
[33m62a96d7[m [Accessibility] Check the index and element types of subscripts.
[33m38d3a9c[m Move Access Control plan of record to docs/.
[33ma5bde4e[m CMake: Add COMPILE_FLAGS support for add_swift_library.
[33mf717d00[m Bump module format version number again
[33m1ec9248[m Refactor the code that sets the SSA pass manager. NFC.
[33md2019d3[m Add a an option to the inliner to ignore functions that are marked with the @semantics attribute so that we can perform high-level optimizations on them.
[33m304361b[m Serialization: add initializer cross-references that also include the kind of initializer (designated, convenience, etc.).
[33me506d70[m [CMake] AppKit depends on QuartzCore, and UIKit depends on CoreImage.
[33m169238e[m [Accessibility] Check type accessibility for variables with inferred types.
[33m3412be2[m [Accessibility] Collapse two diagnostics into one, and drop the typealias name.
[33mcfd7851[m [Accessibility] When a private type is used in a public way, show its decl.
[33m287059b[m implement <rdar://problem/17279286> Swift has too many Unicode escape sequence forms
[33mae9f2e2[m [@semantics] add SemanticsAttr to SILFunction.
[33m7dae30f[m rename the integer 'modulus' methods to 'remainder' methods.
[33mf746b8c[m [Accessibility] Public variables cannot have private types.
[33m147d7eb[m Remove unused variable.
[33meb8bd78[m Only reflect NSString categories (outside of Foundation) on String.
[33mdcb9324[m Set link flags for static library targets appropriately.
[33mf13a5af[m [Accessibility] A typealias cannot be more accessible than its underlying type.
[33me348535[m Small clean-up - use hasArchetype() directly in the optimizer.
[33mcff07de[m [IDE] Search for URLs in comments and report them in the syntax model.
[33me64821d[m [IDE] Search all comments for 'FIXME:', 'TODO:', 'MARK:' and report them in the syntax model.
[33m40e6416[m Test improvement missed in r19421
[33ma2aabbe[m Fix assertion failure completing anonymous default arguments
[33m0479897[m Generate different gyb outputs based on pointer size.
[33m7602201[m Stop passing CMAKE_SYSTEM_PROCESSOR to gyb
[33m1b412f0[m CMake: use lipo to combine the target libraries built for each architecture into a single architecture.
[33m315575e[m CMake: Add LINK_FLAGS option for add_swift_library
[33m78117e7[m CMake: Make QuartzCore and CoreImage target libraries.
[33macbed44[m CMake: Teach add_swift_library to handle libraries where the default configuration can’t be built.
[33m5ffb276[m CMake: Give add_swift_library a TARGET_SDKS parameter to limit a particular library to a given set of SDKs.
[33m99d4e0c[m CMake: start building iOS variants for the CoreGraphics, Darwin, Dispatch, Foundation, ObjectiveC, and SpriteKit framework overlays
[33m87c1198[m Use build configurations to handle ObjCBool’s ‘signed char’ vs. ‘bool’ representation.
[33m3fd3f6b[m CMake: when requested, look for the internal iOS SDK rather than the public one.
[33m091744d[m CMake: Map dependencies of a library variant to the appropriate variant it depends on.
[33m59d2ccf[m CMake: set SDK, deployment target, and architecture for library variants.
[33m447ffac[m CMake: Put library variants into the appropriate output directory (e.g., iphoneos/32)
[33m6b2912f[m CMake: Make sure we build “Swift.o” for all of the standard library variants.
[33m6446d69[m CMake: Add support for specifying framework dependencies for a library.
[33m1f78173[m Use build configurations to enable/disable Float80
[33md95b9fa[m CMake: Skeletal infrastructure for building multiple variants of Swift libraries (for iOS, iOS simulator, etc.).
[33ma7b93a3[m CMake: Add SDK configuration logic to find the SDK path and set up common variables that will allow us to build for each SDK. Still NFC
[33m3639262[m CMake: split add_swift_library into a “global” entry point and a _single variant that builds one such library. NFC
[33mab811bd[m Fix the indentation of two lines.
[33m69a0e18[m Revert "docs/StringDesign: remove a paragraph about a deviation from Unicode in"
[33m628a300[m UnicodeTrie tests: add more comments
[33md33a099[m Unicode trie generator: improve comments and function names
[33mff37a42[m Unicode tables: DRY in GraphemeClusterBreakPropertyTable.symbolic_values
[33m3248c3b[m docs/StringDesign: remove a paragraph about a deviation from Unicode in regional indicator handling.  There is no contradiction here: regional indicators are allowed in groups of two, should not be split by grapheme cluster segmentation algorithm, and the producer of the text is responsible for not putting more than two regional indicators consecutively.
[33m3f2006a[m stdlib/UnicodeTrie: add more comments, replace a _precondition()/#if pair with _sanityCheck
[33m27abfcb[m stdlib/String: add a performance FIXME
[33m124eb2a[m stdlib: reword trap messages in response to review from Dave
[33ma37dd8c[m stdlib/Unicode tests: uncomment a test that I accidentally committed in commented out state
[33me3b8a39[m Import C string literal macros as ConstUnsafePointer<CChar> when string pointer conversions are enabled.
[33m0fc7e3c[m Mangle C_ARGV appropriately when typed UnsafePointer<CChar> in the string-pointer-conversions regime.
[33mf8584af[m Update richards.swift
[33mf59f6ab[m The bot is unhappy that these are not marked @public, so mark them @public
[33m3df563f[m [stdlib] Revert r19835 because it doesn't work on iOS.
[33m9abfdb3[m Add a Mirror for UnsafePointer The one design choice here was whether to expose the pointee directly through the Mirror
[33m46d9d0d[m [stdlib] Bridge the types NSValue wraps explicitly
[33m400f177[m Add support for a #line directive. This patch extends the syntax with a new #line directive that is inspired by the homonymous CPP directive. It can be specified in all locations a #if is legal (Stmt, Decl).
[33md545ac1[m [Accessibility] @required initializers must be as accessible as the type.
[33m748efed[m [Accessibility] Protocol witnesses must be as accessible as the protocol.
[33m8e7d45f[m [stdlib] Normalize .gyb files
[33m0f706ba[m Add a Mirror for EmptyCollection. Oh, and test cases too.
[33ma5e8e46[m remove some dead code I accidentally left in
[33m6dfef2b[m [stdlib] Add a test for UnsafeArray precondition
[33m7f3ad6a[m Back out a test change that's not ready yet.
[33m1b9a66e[m ClangImporter: Stop importing pointers as 'CString' when string-pointer conversions are enabled.
[33me38c327[m [stdlib] Dictionary: fix 80-column/endline violations
[33m8500acd[m SILGen: Implement StringToPointerExpr.
[33mc703a76[m [stdlib] Add missing precondition check
[33mc04aae5[m [stdlib] Add some missing mode lines for gyb files
[33mbae70e6[m Add dependency on swiftFoundation so Foundation overlay is built too. This is for // rdar://16726822
[33m9825954[m [stdlib] That's not a doc comment!
[33mfcebadb[m Bit needs a Mirror too. It would be nice if we had automagical reflection for C-style enums, then this would just work OOTB
[33m127a3e5[m [stdlib] give filter() the eager treatment, too
[33m30b995e[m Re-introduce SDK overlays for Core Image that I reverted in r19361. Thank you Doug for pointing out that I did not import Foundation. Sigh, that build systems have different behavior in buildbot and elsewhere. Hope this fixes the buildbot failure. // rdar://16726822
[33ma796c76[m Sema: Allow string-to-pointer argument conversions.
[33mb97490b[m Add a test for the CollectionOfOne Mirror
[33m715565e[m Rename a member function
[33m676547c[m Add Mirror support for CollectionOfOne
[33m8e084a9[m My editor was set up to produce tabs instead of spaces Fix it and recommit
[33mac96ad9[m Revert r19357 (it fails on buildbot only).
[33me35c581[m Revert "Sema: Allow string-to-pointer argument conversions."
[33m52c01c9[m [stdlib] Give filter() the lazy() treatment
[33me99fc08[m stdlib: Add a _convertConstStringToUTF8PointerArgument entry point to assist string-to-pointer conversion.
[33ma4b945c[m Overlays for Core Image variadic methods. // rdar://16726822
[33m73c041b[m Revert one test change that happens after access control goes into effect.
[33m1174282[m Respect access control for member lookups as well.
[33me9f6fba[m Update tests for memberwise accessibility.
[33m5e59d30[m Update stdlib for memberwise access control.
[33m1f6a6fa[m [sil-opt] Always disable access control when running sil-opt.
[33m8c1fcfa[m Make some more stdlib things public.
[33m5557c39[m Update tests for accessibility.
[33ma548fa3[m Sema: Allow string-to-pointer argument conversions.
[33mc56051b[m Remove unused constraint locators.
[33mc23d333[m Add Mirror support for ObjCBool and Selector types
[33me69d5e6[m Check in a testcase that I missed with my previous patch.
[33me1cb901[m fix a comment that John pointed out
[33mf241c66[m implement <rdar://problem/17473876> @IBOutlet attribute shouldn't make properties implicitly optional or weak
[33m67d689d[m Add a vim syntax file for SIL
[33m4c09cc5[m implement rdar://17501765 - Swift should warn about immutable default initialized values
[33m68c7a45[m stdlib/printing: change Optional<T> representation in print to be Optional(...)
[33m4814e00[m stdlib/String: implement Unicode extended grapheme cluster segmentation algorithm
[33ma01b72e[m Comment parsing: increase the maximum size of documentation comment
[33me57d928[m Remove the last code in SILGen which was making address-only casts with the non-address checked_cast instructions.
[33m50a5b30[m stdlib/String.UnicodeScalarView: rename _base to _core
[33mf40e9ef[m Rewrite switch dispatch emission.
[33mba597ec[m Add a convenience method for emitting a break out of a particular statement exactly like a break-statement would.
[33mc178a69[m Add an optional "afterBB" parameter to SGF::createBasicBlock.
[33m519645d[m Add ConsumableManagedValue, which allows a value to declare whether it's owned by the emission code that's working with it.
[33mace9e8e[m Allow cleanups to declare that they should not be completely destroyed when forwarded.
[33mfd66196[m Add CleanupStateRestorationScope, which allows the state of a cleanup to be restored after emitting a path that may have e.g. activated it.
[33m97ce0d2[m Pull a few enum declarations out of SILInstruction.h.
[33m450c21f[m stdlib/String.UnicodeScalarView: fix out-of-bounds read of the underlying NSString when it ends in a high-surrogate code unit
[33m92d8688[m Add the @semantics attribute.
[33m148756e[m Predefine macro "__swift__" when importing Clang modules.
[33m68be290[m remove some operator definitions that aren't implemented anywhere.  We should add these back when/if they are added to the stdlib.
[33mba15e5c[m Warn when a trailing closure is separated from its call site by more than one line.
[33m6f4caa2[m Combine together 2x unchecked_ref_bit_cast, 2x unchecked_trivial_bit_cast, and (trivial_bit_cast (ref_bit_cast x)) -> (trivial_bit_cast)
[33m11ea623[m Add in identity peepholes for round tripping bitcasts.
[33m88f2632[m Allow trailing closures with a line break before '{'.
[33mab14eeb[m [Frontend] For CompilerInstance::performParseOnly() make sure to mark the main buffer so a hashbang is accepted.
[33mca8c683[m [Parser] When failing to match the token in Parser::parseMatchingToken, return the previous source location.
[33m3ae5326[m Tweak the scope guessing for instructions without SILDebugScopes to reuse the scope of the previous instruction.
[33mb7a8fc7[m Revert "Allow trailing closures with a line break before '{'."
[33m6b0d2f9[m [stdlib] Give reverse() the lazy() treatment
[33m0c9fc15[m Allow trailing closures with a line break before '{'.
[33m151ed61[m Add a StringToPointerExpr node.
[33mab322ae[m [stdlib] Introduce/use a free array-yeilding map()
[33ma7f6b97[m [stdlib] Introduce lazy() and use it for mapping
[33mcda8ee6[m Fix the build: add a missing "import Swift"
[33m7e37d3f[m [g-arc-opts] Ensure that if top down we are moving and bottom up we are eliminating (or vis-a-versa), we do nothing.
[33m47c0a7a[m Update array type syntax.
[33m7dfa742[m Restore array value semantics test for C pointer interop.
[33mfe6ef8a[m whitespace
[33mfc392cc[m Sema: Strip out inout conversion constraint systems.
[33m9873300[m [stdlib] Expand testing for Optional<T>() == nil
[33me18d8b0[m [stdlib] filter(x) never creates a Collection
[33ma4db36b[m Revert "Overlay for Core Image variadic methods."
[33mf685f4d[m Change how the DebugClient supplies names to the Name lookup (for lldb REPL and expression parser.)  We used to be only a fallback if no names are found.  But that meant the repl couldn't add overloaded versions of functions that have any versions not provided by the debugger.  Now we augment the result of lookupInModule, and the rest of the resolution mechanism can pick the right variant.
[33mbf102f8[m IRGen: Fix extended method encoding for protocol members that take a single-parameter block parameter.
[33m16aa8a0[m [CodeMotion] handle retain_value as well.
[33md7a7ec3[m Overlay for Core Image variadic methods. With following caveat for iOS. - In iOS CoreImage is main module. - CISampler is not defined in iOS - CoreImage.CIFilter's apply is not available   in iOS. // rdar://16726822
[33m47fde86[m Remove UnsafePointer.withUnsafePointer.
[33mf66bbd9[m Revert "Revert "Expand the amount of unchecked_addr_casts that we can handle.""
[33m4bfad50[m More dead code.
[33m5a08a69[m Remove NewArrayExpr entirely; reject "new" expressions in the parser.
[33m461cde0[m Teach parseMatchingToken() to set a matched location even when it wasn't matched.
[33m8ab0085[m Synthesize a location for ']' even when it's not present in a collection type.
[33m9a190ea[m AST: Remove unneeded expression nodes for __inout_conversion and __writeback_conversion.
[33mb80f401[m ClangImporter: Restore the NSErrorPointer importer sugar for NSError** params.
[33m39dbb30[m Remove staging typealiases from the stdlib.
[33me0dacdb[m Fix complete_from_cocoa tests harder.
[33m25aa832[m [unittests] Update unittests/FunctionNameDemangle/DemangleTest.cpp with the new array type syntax.
[33m6b69614[m Update complete_from_cocoa tests for C pointer change.
[33mc749d8e[m [CodeMotion] sink retains down so we can pair up retains with releases.
[33md09d24f[m Missed a place where I made a DCC, so needed to fixup the result on the way out.
[33mf722d3f[m Remove tons of now-dead code for dealing with the C*Pointer bridging types.
[33mcf89697[m Revert "Expand the amount of unchecked_addr_casts that we can handle."
[33m22f0e39[m Remove the -enable-pointer-conversions flag and dead code.
[33mf0159f4[m Ban the "new" syntax for creating an array <rdar://problem/16951969>.
[33me47a4e2[m Missed a #if. Unbreak the build for people who don't have -DENABLE_POINTER_CONVERSIONS set.
[33m624135d[m Release note C pointer interop changes.
[33mcb48fbd[m Enable pointer conversions.
[33mb6ba0e8[m When simplify type representation expressions, skip OptionalEvaluationExprs.
[33m256f1e5[m Expand the amount of unchecked_addr_casts that we can handle.
[33mab1e997[m Sema: Disallow pointer conversions in operators.
[33mfb7ef8c[m Sema: Allow inout-to-pointer conversions for pointers to arrays.
[33md064fd7[m stdlib: Disable AutoreleasingUnsafePointer's inout conversion when building with intrinsic pointer conversions.
[33m7717b30[m stdlib: Add a default initializer for AutoreleasingUnsafePointer.
[33m202fe50[m Remove tests for bridged pointer types.
[33m17d27e6[m PrintAsObjC: Print ConstUnsafePointer as a const pointer.
[33mf861fcd[m Release-note array, dictionary type syntax
[33mbea1d3d[m Use dictionary type sugar in the standard library.
[33m232bc58[m Infer generic requirements from types, not type representations.
[33m13f7028[m [g-arc-opts] Skip unreachable BB that are predecessors of reachable BBs when merging predecessor state.
[33m3fd80b8[m [g-arc-opts] Add in a comment to a method. NFC.
[33m98649da[m [global-arc-opts] It is not expected, but just in case we get more than INT_MAX BB, bail gracefully.
[33mba15b81[m When using constraint data to generate diagnostics for conversion failures, we usually use the type of the expression in question as the basis type. (E.g., "Cannot convert type 'ExprType' to type 'Foo'.) However, if the expression type is already the same as the type being compared against, use the "first type" of the constraint. This will help us generate a more sensible error message. (rdar://problem/17075954, rdar://problem/17007456)
[33m39bcf3b[m Re-sugar the types we deduce for type variables.
[33m12ad12f[m Teach the demangler to print implicitly unwrapped optional sugar.
[33m6df8f63[m Teach the demangler to print dictionary type sugar
[33m8a0716c[m Synthesize dictionary type sugar during AST printing (when requested).
[33m95e8331[m Import NSDictionary using the sugar type [NSObject : AnyObject].
[33m07a7059[m Preserve dictionary type sugar in the type system.
[33m4ac0f31[m add an 'overflow' label to the second result of the "withoverflow" aritmetic operations, as suggested by Dmitri
[33md67b3d5[m [IDE] Provide the type source range for parameters in the syntax model.
[33m4dcd6cf[m implement <rdar://problem/17101613> standard library should provide a way to test for overflow
[33ma314db9[m Remove another point of non-determinism while tracking failed constraints, and use this as an opportunity to improve certain diagnostics. (rdar://problem/16808495)
[33mc1539b3[m [stdlib] Put the "unsafe" in withUnsafeMutableStorage
[33mc0abfea[m ClangImporter: Bring Jordan's CFunctionPointer into the -enable-pointer-conversions regime.
[33mc777ae7[m Use hasAttribute<NoinlineAttr>() instead of has(DAK_Noinline).
[33m55ca3b0[m Parse dictionary type sugar [K : V].
[33m133c469[m Update for clang r211763
[33m6fb8e75[m SIL: AutoreleasingUnsafePointer doesn't need to be bridged anymore.
[33m2ba706a[m Fix up the code completion test for Clang importer change
[33m108ab1a[m stdlib/Unicode: restore the comment that explains why the function is @noinline; it might be useful for someone reading the code
[33m0e8d76f[m stdlib/Unicode: add @noinline to a large error handling function
[33m612e1a8[m stdlib/unittest/checkSliceable: check the empty slice endIndex..<endIndex
[33m4671211[m stdlib/String: fix two bugs in UnicodeScalarView
[33m9909608[m stdlib, tests: fix some more 'predecessor' names that should have been changed to 'predicate' instead
[33m1fb11d6[m [stdlib] Remove _buffer requirement from ArrayType
[33m321d608[m [stdlib] 80-column / endline layout fix
[33m9a635e8[m Disable test, and use iOS simulator.
[33m6a47e4d[m Use type-simple to decide whether to parenthesize a type in the demangler.
[33mb844728[m Implement: <rdar://problem/17464179> Stop importing decls with CInt and related typedefs
[33me064416[m Update the rest of the testsuite for the array syntax change.
[33m9c3fc9e[m Add iOS availability to test input.
[33m15ddc88[m Eliminate some more sort/unique nondeterminism, this time in autolinking.
[33mafe7437[m Eliminate nondeterminism when getting imported modules from the Clang importer.
[33mb2224ca[m Remove another non-deterministic sort/unique.
[33m9886107[m Fix repeated "-target" that I accidentally checked in.
[33ma825948[m Mark test 'CALayer.swift' as requiring OSX as it has APIs that are marked unavailable on iOS.
[33m7ca6571[m Mangler: mangle entities with their own DeclContext if none is given. <rdar://problem/17458442> Assertion failed: (DC && "empty decl context"), function mangleType
[33m687e1c5[m stdlib: Migrate some stdlib convenience APIs to UnsafePointer.
[33md1aa6fe[m [stdlib] Rename Array internals for clarity
[33mf146b40[m [stdlib] 80-column fix
[33me2c1853[m [stdlib] Expanded Array reallocation testing
[33me274b8d[m Mangler: Set up the DeclContext also when mangling an alias type. rdar://problem/17457346
[33md087a24[m Don't crash in release mode if the Mangler encounters an Archetype without DeclContext.
[33md1e7ff0[m Foundation: Add staging typealiases for C pointer types.
[33mc696acf[m Add mirrors for Range and related objects. The format of the output is clearly not final; Also, test case
[33ma87e9fa[m Make the diagnostic for unsupported existentials more accurate and helpful.
[33me2f6325[m stdlib: Add subscript and .null() interfaces to AutoreleasingUnsafePointer.
[33m1e51a9f[m Add printer support for @noinline.
[33m0ec94df[m Add test for App Extension API restrictions.
[33m7f52195[m Add iOS availability test.
[33ma3b704e[m Mark all imported APIs deprecated in iOS 7 (or earlier) or OS 10.9 (or earlier) as unavailable.
[33mc91ffb6[m Tweak "is unavailable" diagnostic to include full declaration name.
[33m8eec49e[m stdlib: Introduce a staging typealias for the itemsPtr of fast enumeration states.
[33mcd418a9[m stdlib: Add explicit AutoreleasingUnsafePointer(*UnsafePointer) constructors.
[33m22288ba[m Sema: Tweak pointer conversion scoring to better favor no-conversion cases.
[33m0ad0c46[m CSE: add support to the new bitcast instructions.
[33macadc93[m Teach the demangler to print array types as [T] rather than T[]
[33m55df89a[m Print array types as [T] instead of T[].
[33m0501da8[m [stdlib] use noinline to get rid of closure.
[33mc9a1027[m Start warning about T[] syntax with Fix-Its to [T]
[33m9210cd5[m Replace T[] array syntax with [T] in the test suite
[33m37df5c4[m Update standard library to use [T] array syntax.
[33m1860612[m Add reflection support for Swift.Character. Testing will follow
[33m863138e[m [noinline diagnostic] allow noinline on Func Decl only.
[33m6b2c727[m stdlib/String: change UTF-16/UTF-16 transcoder in UTF16View to replace ill-formed code unit sequences with U+FFFD
[33m2967794[m Handle the new array syntax in expressions for construction, e.g., [Int]()
[33m68fa728[m Track old vs. new array syntax in ArrayTypeRepr, so we compute location information properly.
[33m7213cda[m Parse [T] as an array type in type contexts.
[33m4f47469[m [cfg-printer] Add SILFunction::viewCFG() and move the implementation of view cfg into SILFunction. Have CFGPrinter call it.
[33mc9f24d1[m ClangImporter: Keep importing pointers to unimportable types as COpaquePointer in -enable-pointer-conversions mode.
[33m233b119[m Add info about the properties into the optionality sidecar.
[33m2109f9b[m Add UIFont and UIApplicationDelegate APIs to the optionality sidecar.
[33m6d15e0b[m Add resource-dir option to swift-ide-test.
[33m1d1343e[m Handle invalid locations in the serialized diagnostic consumer.  Fixes <rdar://problem/17422366>.
[33me4331e4[m Eliminate non-deterministic behavior when removing duplicate declarations after module lookup.
[33m09bd502[m [cfg-printer] Create options for controlling long lines, max columns, and removal of use list comments.
[33md5948f9[m Fix a bug in simplifyLoopStructure to unbreak the build. The bug was exposed by the pass order change.
[33m544cd15[m [stdlib] add noinline on makeUnique.
[33m17f7202[m [noinline attribute] make it allowed attribute for FuncDecl in Serializer.
[33mab6b9cc[m Sema: Favor pointer parameter solutions that don't convert types.
[33mdd8a5a0[m ImplicitlyUnwrappedOptional is an enum, not a struct. Fix the demangling
[33md96819d[m IRGen: Map *UnsafePointer to Clang types.
[33mc5cf8a0[m [cfg-printer] Add an option to only dump the CFG of a specific function.
[33mcabc53a[m Update the optimization pipeline to be mostly non-iterative.
[33m766316f[m Reduce the inline threshold to a more sane default. It works well with the new pass order.
[33ma3d2883[m Refactor the makeUnique parts of array subscript outside of the closure. We inline this closure with the new pass order.
[33m3f67321[m whitespace
[33m121798a[m Make ConstUnsafePointer and AutoreleasingUnsafePointer representable in ObjC.
[33m8f2d62d[m Add tests for passing literal arrays as pointer arguments.
[33m87dd6ed[m stdlib: Add #ifs to help stage in pointer conversions.
[33m6bb6e1b[m stdlib/String: if we can not get a contiguous data buffer out of NSString, don't call into CoreFoundation to perform UTF-8 transcoding.  CoreFoundation can replace ill-formed sequences with a single byte, which is not good enough to implement U+FFFD insertion.  Instead, use the same transcoding routine as for contiguous buffer.
[33m90f578f[m Add a CFG Printer pass. This should make it easier to visualize SIL Code.
[33m91b2639[m Release-note CFunctionPointer.
[33mce4dcb7[m [ClangImporter] Import C function types as CFunctionPointer<T>.
[33m2de53fe[m Turn @lazy properties into computed properties as part of decl validation.
[33m46b8a97[m ClangImporter: Import pointers as *UnsafePointer with pointer conversions enabled.
[33m0ce574e[m Correct mistake where some 'pred' arguments became 'predecessor' instead of 'predicate'.
[33m7667b82[m [noinline attribute] add noinline attribute.
[33mb1bfbf8[m Fix a refcounting bug in SILClonerWithScopes.
[33mfc13ea5[m SIL/IRGen: Allow unowned/unmanaged storage to be optional at the SIL level.
[33m9bd0b1e[m stdlib: fix some bugs in UTF-16/UTF-8 transcoder that is hidden inside String implementation:
[33ma7b5638[m Add a mode in which access control is respected for module-scope lookups.
[33mcca27d0[m Tag everything in the standard library with accessibility attributes.
[33m20bc9ec[m Add accessibility printing, and test the accessibility inference so far.
[33m6cca352[m Compute accessibility for all ValueDecls, and serialize it properly.
[33m8a38f4d[m Add accessibility properties to ValueDecl and ExtensionDecl.
[33mf6912b4[m Validate which decls can have accessibility attributes.
[33mdeaa0a1[m Parse @private, @internal, @public, and the (set) variants of each.
[33mb828391[m Clarify that the issue is not in the devirtualizer
[33m00e1e0c[m Devirtualizer: work around partially implemented feature in the type system
[33m2017259[m Fixed an assertion that would fire when debug info was made for an AssignExpr where the left hand side was implicit with an invalid source location.
[33m58558fc[m Rename 'succ' and 'pred' to 'successor' and 'predecessor' respectively.
[33m0db8de1[m SILGen: Implement inout-to-pointer conversion.
[33m3fc1042[m [load-store] Refactor load->load and store->load forwarding to use the same underlying method.
[33mf6eefe6[m [load-store] Teach load store opts how to forward stores -> partial loads which are related via typed GEPs.
[33mda93018[m [sil-combine] Canonicalize (multiple-loads (unchecked_addr_cast x X->Y)) -> (multiple-casts (load x) X->Y) where X and Y are layout compatible.
[33mee818e7[m [load-store] Teach load store forwarding how to forward stores -> loads with an intervening unchecked_addr_cast of layout compatible types.
[33m81f5fdc[m [g-arc-opts] Change Global ARC Opts to respect the EnableARCOptimization flag.
[33m5ddc49d[m Change '@objc' to require importing 'Foundation', not just 'ObjectiveC'.
[33m2eb7c03[m [sil-combine] Invalidating an enum address is never necessary. Thus it is ok if we just remove the unchecked_take_enum_data once it is dead.
[33m2749f9f[m [sil-combine] Refactor the SILCombine unchecked_addr_cast -> Typed GEP code to make it clearer what is going on. NFC.
[33m74250fa[m Fix <rdar://problem/16570157> Don't warn about AnyObject inference in for-each loops.  It is obvious that NSArray will return an AnyObject, don't require a ": AnyObject" type annotation.
[33m6f7a8d8[m re-re-commit r19052 with a new fix to make it correct in erroneous cases, avoiding breaking the testsuite.
[33m2ab2e6c[m Change the very cryptic "don't ask" to something more informative
[33mdb3914e[m Disallow conforming to ObjC protocols with requirements that can't be imported.
[33m678bbfe[m [stdlib] Remove posix_read/posix_write asmname stubs.
[33m7d649e0[m Use "_" instead of "c_" for primitive functions accessed through asmname.
[33m7fc8ecd[m [PrintAsObjC] Mark String, Array, and Dictionary properties as 'copy'.
[33mc622615[m Allow class properties to be @objc, and expose them as class methods.
[33m347f330[m Don't import the ObjC representation of Swift extensions in frameworks.
[33mb841308[m [ClangImporter] Pass an appropriate -fobjc-runtime= option to Clang.
[33md2e4115[m [IDE/CodeCompletion] Don't include text annotation chunks in the name. Leading paren in constructor patterns should be included in the description text, but not in the name.
[33m4f5d754[m AST: Add a PointerTypeKind enum and 'getAnyPointerElementType' method to TypeBase.
[33mccd8cca[m SILGen: Implement array-to-pointer conversion.
[33m707505f[m Revert fix for being able to generate debug info in JIT'ed expressions until we can pass all regression tests.
[33ma7fefdb[m Known ObjC types sidecar: add ability to annotate properties.
[33m50178f6[m Add audited APIs to sidecart for NSView.
[33m5f61494[m Add OBJC_CONTEXT(ClassName, Options) to KnownObjCMethods.
[33m954f746[m SILGen: Implement pointer-to-pointer conversions.
[33m460e807[m Refresh release notes
[33m05e5102[m Move NSTextView designed initializers next to each other. NFC
[33mcddae42[m Don't crash (via assert) when trying to enable debug info in Swift JIT'ed expressions.
[33m5b9b67e[m Revert "Remove XCTest overlay"
[33m2da733d[m test/stdlib/NewStringAppending.swift has XFAIL: asan, but the test actually passes on ASanSwift buildbot. Let's just remove the XFAIL, although it still depends on the implementation of ASan's memory allocator. This means the test may start failing again in the future, but this is also true for non-ASan builds.
[33mb8ddf1b[m Since we now build LLVM and Swift with ASan (for ASan-enabled builds), the tests in test/Optimizer/ work again. Removing XFAIL: asan.
[33m67182f4[m Revert "reinstate r19052 with a fix to ConstructorDecl::getDelegatingOrChainedInitKind to make"
[33mbef5cb0[m Make the pass not crash on unreachable code.
[33mc9d9b53[m Update the tests to make them compile
[33mdd974ed[m Update mismatching debug message.
[33mfb3cb3f[m Enable TBI for Swift
[33maa1f68d[m Propagate C flags to LLVM/Clang CMake command (up to now we only propagated C++ flags). Useful to fix one ASan failing test, should be harmless for everything else.
[33m3cdc901[m stdlib/Unicode: fix UTF-32 decoder not to crash on invalid code units
[33m2103b1d[m stdlib/Unicode: fix UTF-16 decoder not to crash on invalid code unit sequences
[33m71427b2[m Parser: don't refer to 'default:' as 'case' in diagnostics
[33mec258c6[m Diagnostic text: don't refer to static methods as functions
[33mc1e2e86[m Fix coding style in a fixit.  We used to suggest "var x : AnyObject", now "var x: AnyObject"
[33m5916a5c[m Add test for rdar://16786220, we don't crash anymore
[33m83b3330[m add a testcase for rdar://17192398, which is already fixed by the nil literal rework
[33mfe14b2a[m reinstate r19052 with a fix to ConstructorDecl::getDelegatingOrChainedInitKind to make it work with not-fully-typechecked asts.  It is gross that a big chunk of Sema got thrown into an AST method. :(
[33m1a1683e[m stdlib: Add internal entry points that can be used by intrinsic pointer conversions.
[33m0a04cae[m whitespace
[33m8c1186c[m SILGen: Add support for address-only Builtin.reinterpretCast.
[33m11f99d8[m [test] Disable test objc_cast.swift on 32-bit pending rdar://17411843.
[33ma002716[m Fix typo.
[33m20b1f2d[m Switch isa and as? processing over to use the new indirect cast instructions when necessary.
[33md0dc196[m Fix a metatype casting bug in the new casting runtime.
[33me842837[m Add some functions to query a CastConsumptionKind.
[33mcd6fc21[m Allow SILBasicBlocks to be constructed after a specific block, and do so when splitting a block.
[33m7b4700d[m Clone SILUndef correctly.
[33m452b023[m Properly analyze CheckedCastAddrBranch instructions in DCE.
[33m2f1a00a[m [g-arc-opts] Now that there are actual cases where we can match up retain_value, strong_retain with release_value strong_release, enable that code path.
[33m067fee4[m [g-arc-opts] Teach the global ARC optimizer to strip off unchecked_ref_bitcast_inst when determining pointer identity.
[33mefc5d6b[m [sil-mode] Add syntax highlighting for unchecked_ref_bit_cast and unchecked_trivial_bit_cast.
[33m2b8923e[m Allow "isa" patterns to downcast collections and bridge through Objective-C classes.
[33m1c86427[m Fix crash when trying to print an inherited type that was not resolved.
[33mbc85c30[m Properly type "a as T[]" as a Bool, not an i1.
[33mc094309[m Add a runtime test for a failed conditional, bridged binding.
[33m37e242c[m Rework handling of optionals for bridging forced and conditional downcasts.
[33m044ff2f[m Eliminate forced downcasting's dependency on conditional downcasting.
[33m50b2d0e[m Rename early binding -> inline caches.
[33m1e721ba[m Revert r19052 because it breaks Interpreter/SDK/block_calls.swift.
[33m6963fa6[m SILGen: Fix a bug in wildcard matching in 'switch'.
[33m6493bee[m Remove now-unnecessary extra retain during heap object destruction.
[33mf43d120[m IRGen: Test bitcast codegen, and fix a bug.
[33m3fc9f84[m AST: Add Builtin.reinterpretCast.
[33me145600[m Update SIL.rst for the change to the checked_cast instructions.
[33m385879b[m Remove the CheckedCastKind from SIL dynamic casts.
[33ma9b7b01[m simplify my previous patch, this wasn't needed.
[33m2283894[m stop marking implicit decls as @objc if they lack the objc attribute.  This prevents synthesized stuff from being reflected back to the runtime, and prevents PrintAsObjC from reflecting it into the generated ObjC header.
[33md9d451c[m SIL: Add unchecked_{trivial,ref}_bit_cast instructions.
[33m7a15e4b[m Don't allow delegating initializers in value types to mutate let properties either.  Thanks Joe.
[33m11c1a87[m fix <rdar://problem/17400366> let properties should not be mutable in convenience initializers
[33maa7d6d6[m Work around SIL optimizer bug to allow stdlib to be built with optimizations
[33m0af4761[m IRGen: Accurately convert SIL block types to Clang block types.
[33m9f122e5[m Add initial support for importing with tighter Objective C pointer types.
[33me47b0c2[m Address Dmitri's review comments
[33m22dc550[m Make bridgeFromObjectiveC return non-optional.
[33mf370ca0[m stdlib: fix a bunch of various Unicode issues, primarily in UTF-8 decoding
[33m48d6a83[m SILGen unconditional dynamic casts using the new unconditional_dynamic_cast_addr instruction.
[33m47427cc[m Ensure that we deallocate opaque existential containers if we dynamic-cast out of them as a take.
[33mf35a181[m Cache the most general possible abstraction pattern the SILModule.
[33ma669306[m Correctly mark the unconditional_cast_addr instructions as reading and writing memory.
[33ma2d5ad4[m Add methods to easily fetch Some and None for a particular optional type.
[33m0b7f8d0[m Add some more useful type-queries to CanType.
[33mfd62de4[m Use bridgeFromObjectiveCConditional where we want conditional bridging.
[33m02bc843[m fix <rdar://problem/17051675> Structure initializers in an extension cannot assign to constant properties
[33me7b26e5[m fix <rdar://problem/17074673> QoI: Property observer error message mentions "variable with getter/setter"
[33m50f9650[m fix <rdar://problem/16789886> Assert on protocol property requirement without a type
[33m91e6584[m fix <rdar://problem/17200672> Let in protocol causes unclear errors and crashes
[33m6593eec[m [g-arc-opts] Implement release post-dominated by use optimization.
[33mc20c41c[m Fix two typos in SIL.rst I noticed upon visual inspection.
[33m24bbc2d[m [Parser] Fix infinite loop when there is a syntax error inside an uncovered statement in a switch.
[33m41bee5b[m Add verifiers for the pointer conversion AST nodes.
[33mdba8a23[m AST: Refactor get*UnsafePointerDecl() lookups onto the AST context.
[33me269523[m Reintroduce discriminator bit stripping in the runtime that was reverted when I undid the array enum change in r19026.
[33mb696082[m Revert "disable this test, it is aborting in the legalizer, tracked by rdar://17218018"
[33m8de060f[m Revert "[stdlib] mask unused bits in uniqueness checks" Revert "[stdlib] Use an enum for ArrayBuffer storage"
[33m3576404[m [global-arc] treat isUniquelyReferenced as known to not decrement ref count.
[33mce73d6e[m Fix a documentation build error I introduced together with this file.
[33mbc47406[m Remove unnecessary test files.
[33m7fabcd7[m Update these tests to use the new DW_LANG_Swift = 0x1e (=30 in base 10). rdar://problem/16700053
[33mb38cd54[m Address rdar://problem/17125445 ("dead _ in top level code crashes silgen")
[33mcc6e3e8[m Fix some issues with type checking indirectly recursive protocol requirements
[33mc4fd1c4[m stdlib: explain the trick used to achieve @noinline without @noinline
[33m1025f13[m Enable pointer conversions in the test that needs it.
[33m7d1cf3d[m Remove XCTest overlay
[33m6844d01[m [Debug Info] Add a test case for class variables.
[33mcf66ae0[m Start to document the DWARF debug info the Swift compiler is emitting so we have an authoritative reference for compiler, lldb, and other consumers.
[33madc5207[m [DebugInfo] Remove unnecessary indirection from byref types. <rdar://problem/17203231> Swift variable has wrong indirect location in the Swift debug info
[33mf60213e[m Update Joe's UnsafePointer changes to account for Chris's ..< changes.
[33mfe5c879[m Work around single-expression closure not returning Void.
[33m08a4856[m Sema: Introduce intrinsic pointer argument conversions.
[33m63e34d7[m fix doc comment.
[33m444d835[m implement <rdar://problem/17054014> map method should exist on ranges
[33m1da7379[m Changing putchar's prototype to match the C version (missing return type).
[33maa722e4[m mark .. as unavailable and add the operator change to the release notes.  I filed rdar://17380298 to track removing .. entirely for GM.
[33m70076cf[m switch the testsuite to use the ..< operator instead of ..
[33m7f69d6d[m strcmp has a wrong prototype, the return type in C is 'int' which doesn't map to Swift Int.
[33m7a2f007[m Peephole (condbr(xor(x, 1)), t, f) -> (cond_br(x), f, t).  Includes a test case for PatternMatch behaving differently between SILValue and other matches on Apply arguments.  <rdar://problem/17332412>
[33mf4a2e82[m Make PatternMatch behave the same for ApplyInst arguments, regardless of whether we are matching a SILValue or another subpattern.  The problem here was that we'd access arguments in one path but operands in another.  Test case to follow soon
[33m2e3863b[m Introduce _ConditionallyBridgedToObjectiveC.bridgeFromObjectiveCConditional.
[33m62cad3d[m add a "..<" operator, which is an alias for ".." and switch the stdlib to use it.
[33m64ac997[m parse ..< as an operator, this will be extensively tested shortly.
[33m2b82e89[m [stdlib] mask unused bits in uniqueness checks
[33m4c1d8da[m Remove a bit of access control work that snuck into the last commit.
[33m727a7eb[m Attributes: Use class names in the DAK_* enum instead of attribute spellings.
[33mce65b6c[m [Parse] Move 'nil' to the "expression keywords" section.
[33m7effec1[m Change ImplicitlyUnwrappedOptional to be an enum type itself, not a struct wrapping an Optional.
[33m89fb9c8[m [stdlib] Factor out Array growth calculation
[33m5c09ca5[m Sema: Don't allow protocols to be used as non-self-conforming existential types.
[33m9e4dfd2[m Add spare bit mask constants for i386 and ARM.
[33m4854ddf[m Add a test that the UInt Mirror does the right thing
[33mda4044a[m I have a theory that the logger is getting malformed strings in some cases because this table of metadatakind to string is incomplete, and as such sometimes garbled data ends up being logged. Even though MagicMirror should only be generated in a few controlled cases, it seems possible that there are more such cases than I initially envisioned - hence the issue. This is my attempt at a fix here
[33ma701306[m Add recursive printing of all inline locations to -emit-verbose-sil. Very handy for debugging.
[33mb1a7a7a[m Reference-count inlined functions to keep them alive until we emit debug info for them and generally clean up the inline scope handling a bit. Fix the debug scope handling for all clients of SILCloner, especially the SIL-level spezializers and inliners. This also adds a ton of additional assertions that will ensure that future optimization passes won't mess with the debug info in a way that could confuse the LLVM backend.
[33m588fb22[m Get rid of the DebugScope variable here and just assign the scope of the enclosing function, which happens to be the correct thing to do anyway.
[33m1b17d5c[m Handle unhandled case in findAddressProjectionPathBetweenValues.
[33m6a29ca7[m This test shouldn't have had a target as it'll break on iOS.  Thanks Jordan for the feedback
[33m4eeee35[m Remove *CollectionDowncastExpr; wen're not using them any more.
[33m39e1b08[m Start using ConditionalCheckedCastExpr and ForcedCheckedCastExpr for collection downcasts.
[33m9b05d63[m Remove SWIFT_ENABLE_GLOBAL_ARC_OPTS option and add SWIFT_STDLIB_USE_ASSERT_CONFIG_RELEASE.
[33m735a23a[m [sil-combine] Rewrite unchecked_addr_cast to access layout compatible first element fields via typed GEPS.
[33m0563f9b[m Make emitCollectionDowncastExpr not depend on a *CollectionDowncastExpr. NFC
[33m4019d28[m Start using the forced collection downcast entry points.
[33mf0186ea[m Rename CollectionDowncastExpr to ConditionalCollectionDowncastExpr.
[33mc05a946[m Fix test to import Darwin and use correct check lines
[33mc7d3c3c[m Rename and move a function that checks for unbound generics.
[33m94072c5[m Replace two uses of asmname with LLVM intrinsics.
[33mb3d7d3e[m [function-signature-opts] Commit initial function sig optimization pass that eliminates dead arguments.
[33ma59e139[m UInt needs a Mirror of its own, it was simply forgotten when writing the gyb file
[33m653a9d2[m Create builtin's for math functions exposed as LLVM intrinsics.  Use these builtin's in the wrappers for functions such as sqrt(Float) and cos(Double).  rdar://problem/16709244
[33ma526eae[m [docs] Bump copyright.
[33m0e6999c[m AccessControl: change "generic parameters" to "generic argument types".
[33ma300511[m Update access control proposal based on today's discussion.
[33m2913abd[m Commit v1 access control proposal, as proposed on 2014-06-13.
[33m658ffa2[m Release note recent array changes
[33m7eb090a[m Macro-metaprogram array and dictionary up/downcast declaration accessors. NFC
[33m4fd936e[m Add a comment blurb at the top of StdlibUnittest.swift.gyb
[33m73c4d76[m tests: switch 'Runtime' test to StdlibUnittest
[33mc448fcc[m ReST: make some functions defined in header 'static inline' to avoid warnings about unused functions.  They are used, just not in all files that include the header.
[33m695b38b[m tests: Remove "expectEqual(0, 1)" line that I added for testing
[33m6452153[m test: convert join() tests to use StdlibUnittest
[33m4904685[m Extract some unit testing helpers from NSStringAPI into a module
[33ma4c232b[m [stdlib] Use an enum for ArrayBuffer storage
[33mff8fe8b[m Add forced downcasting entry points for dictionary, _dictionaryDownCast and _dictionaryBridgeFromObjectiveC.
[33mb948546[m Add array forced downcast operations _arrayDownCast and _arrayBridgeFromObjectiveC.
[33m0850bcc[m Make TypeSubstCloner take a substitution list directly.
[33m7d5a8aa[m Use 'NSColor' instead of 'AnyObject' in argument to 'init' with 'colorsAndLocations'.
[33mfdd774d[m Devirt: No need to sink/clone the class_method instruction.
[33m0621248[m Do not try to devirtualize the call if the class instance is type-casted. rdar://17333697.
[33m3fa019f[m Remove outdated FIXME.
[33ma0f7d9c[m Add an option to run the inst-count pass after performing optimizations.
[33mcb3ea09[m Undo the parts of r18941 that depends on LLVM changes.
[33m68d3dd5[m Adjust test to not depend on the current user account's configuration.
[33m574054b[m Distance SourceManager from llvm::SourceMgr.
[33me58ca84[m Refactor diagnostic printing a bit, in preparation for non-source locations.
[33m93f871e[m Get rid of some control flow for precondition checks
[33m700385e[m SIL: Fix SILType::subst for block storage types.
[33maeaa234[m stdlib: Add a ConstUnsafePointer type.
[33m7c3f911b[m Incremental work to try to hide the type of an AbstractionPattern.
[33mf0e14f7[m Carry the formal types of the arguments in the indirect-cast instructions.
[33m05b51f4[m Add some utilities for parsing verbatim identifiers and AST types.
[33m1fed312[m Allow arbitrary keywords to be used in SIL identifiers.
[33m2ccbccc[m Rename Dictionary downcast entry points to include "Conditional".
[33mc19b92e[m Rename array downcast entry points to have "conditional" in the name.
[33m2195fce[m Remove unneeded call to handle_gyb_sources() as suggested by Dave in review of r18928
[33m7704e19[m libBasic: implement extended grapheme cluster segmentation algorithm
[33me310fd7[m [stdlib] Shed Array's vestigial copy and unshare
[33mc5c17e2[m [stdlib] Sort Arrays using bulk mutation backdoor
[33m9603472[m [stdlib] Add Array.withMutableStorage
[33mbf10db2[m [stdlib] Add an UnsafeMutableArray
[33m85533dd[m [stdlib] Restore Array value semantics
[33macc2c3b[m [stdlib] Prepare array sort for value semantics
[33m821d187[m Add a test ensuring that we prefer non-bridged methods to bridged ones.
[33m1c06c30[m Automatically reflect non-Foundation categories of bridged Objective-C classes onto their bridged value types.
[33mf923013[m implement the last bits of  <rdar://problem/16879701> Should be able to pattern match 'nil' against optionals
[33m60fc0e6[m Implement <rdar://problem/16951729> nil should be a literal type
[33m17e3604[m Make sure all non-inlining uses of SILCloner also clone the SILDebugScope hierarchy. I still need to figure out a reliable way to write testcases for this. For now it's ensured via an assertion in SILCloner::postprocess.
[33m371efa7[m r18747 (which changed how we import macros that expand to nil) regressed on some GCD macros that are widely used.  Fix this by adding them to the GCD overlay.  A more general solution is tracked in rdar://17245039, but that isn't on the critical path right now.
[33m33ca723[m add a test for the byteSwapped property.
[33mfbcebcf[m allow 'strong' to work with optional qualified reference types as well, fixing the case Jordan noted in: <rdar://problem/16954464> Cannot make a strong IBOutlet
[33m102cd40[m [load-store-opts] RetainValue is insert from a load store opts perspective despite it having side effects due to it touching reference counts.
[33mb5cec06[m remove an extraneous space.
[33mab31002[m restore DaveZ's r18786, which adds a .bytesSwapped property.  Not all byte swapping is about endianness.  This resolves rdar://17319884.
[33m115df43[m teach DI how to analyze copy_addrs in a case that only handled AssignInst's, fixing: <rdar://problem/17233681> DI: Incorrectly diagnostic in delegating init with generic enum
[33mb039880[m Revert r18906 "Make Dictionary bridgeFromObjectiveC return nil if bridging fails" while we discuss it.
[33mdd8c668[m Import NSDictionary as Dictionary<NSObject, AnyObject>
[33md3d2092[m Make Dictionary bridgeFromObjectiveC return nil if bridging fails.
[33m0707cf2[m Remove visitSILBasicBlock from SILInliner.
[33m99afca6[m SILGen: Don't leak when we load from unowned references.
[33m2c4a687[m Ensure that we don't emit debug info for function arguments twice.
[33m13c971c[m Revert "Debug Info: Provide a workaround for unary let values and" rdar://problem/15525728 is now fixed on trunk.
[33maac9b3c[m Implement SILGem support for dictionary downcasting.
[33m5bb6969[m Type checker support for dictionary downcasting.
[33m7dad6bc[m Simplify and generalize SIL generation for collection downcast expressions. NFC
[33mc5e3dc4[m Rename ArrayDowncastExpr to CollectionDowncastExpr. NFC
[33m7acecc5[m Add a library entry point for Dictionary downcasting for bridged keys & values.
[33m2d41487[m Add a library entry point for Dictionary upcasting for object keys & values.
[33m47fbf0d[m Extend dictionary upcast support for handle mixed bridging/upcasting.
[33mb127cf5[m [codemotion] Teach SILCodeMotion how to use the ARC infrastructure to be more aggressive in sinking retain insts over switch_enums.
[33m7ca1bbb[m [value-tracking] Teach valueMayBeCaptured that enums are only captured if their operands are captured.
[33mfd8f3b1[m Add more informative DEBUG messages to valueMayBeCaptured and fix a little bit of formatting in ARCAnalysis.h. NFC.
[33m85a3495[m RetainValue, ReleaseValue, and AutoreleaseValue are all reference count instructions. Make them subclasses of RefCountingInst.
[33mc2a4bfd[m Improve test for generic partial applies by having an example where the partial apply takes in an argument.
[33mb75093b[m Add SILGen support for dictionary upcasts <rdar://problem/17289296>.
[33m33ecf58[m For now, only allow bridged upcasting of dictionaries when the destination’s key and value have object representation.
[33m0f1f518[m Type checker: allow dictionary upcasts, including bridging upcasts.
[33mb97ce43[m [sil-combine] Make sure when specializing a function to specialize its return type appropriately.
[33m90d1b06[m [sil-combine] Simplify (apply (partial_apply f)) -> (apply f) when the partial apply is a partial apply of a generic function with a non-generic substitution list.
[33m38b8f22[m Disable tests for Builtin.cmpxchg pending updates to the AST model for it.
[33ma9a4601[m IRGen: Update codegen for changes to cmpxchg LLVM instruction.
[33m4d4a324[m Import Protocol as a foreign class.
[33m6123860[m Type lowering: Handle when the Swift view of an ObjC method has fewer params.
[33m76a8ed4[m [Driver] Eliminate now-unused variable (after r18872).
[33m9a7cfe6[m Optimize sub(ptrtoint(index_raw_pointer(v, x)), ptrtoint(v)) -> x.
[33m61c4e6f[m The command-line REPL doesn't accept pastes properly when it contains a if/else.
[33mcf6fdb1[m The correct devirtualization check needs to be isVolatile and not isForeign.
[33m142db44[m Looks like Protocol is hidden on i386 iOS too.
[33mffae044[m Typo
[33mfa380cf[m Simplify trunc(ext(x)) -> x when the types of the result and x are the same
[33m566c845[m Cleanup error message
[33m9155772[m [Driver] Drop the -arch flag; it does the wrong thing for the iOS simulator.
[33m287d165[m Disable execution test for Protocol objects on 64-bit iOS.
[33m73bda9a[m Clean up pattern match m_zero and m_One to avoid duplication.  Thanks Jordan for the feedback
[33m79f9012[m Early Binding: don't try to devirtualize objc classes.
[33m2a7b156[m Handle CheckedCastKind::Identical in a few places that I missed.
[33m47748ba[m Add stub implementations of the dictionary upcast entry points.
[33m8e34efe[m Add SILGen test for array upcasts (both bridged and not).
[33m1789c4c[m Collapse CollectionBridgedConversionExpr into CollectionUpcastConversionExpr.
[33m96f37fd[m When performing specialization of virtual calls try to sink the retain into the diamond shaped CFG. This will ensure that the ARC optimizer will get a chance to remove the calling convention overhead after inlining.
[33mccc061a[m Add the EarlyBinding pass as a late lowering pass (not a part of the iterating pass manager).
[33mcd1bae4[m Refactor the code that adds analysis passes. NFC.
[33m2bf652f[m [g-arc-opts] Allow removing of increment, decrement pairs after seeing partial merges, ensuring that we still will not move them.
[33m5d063f0[m Add an early binding pass for accelerating virtual method dispatch.
[33mbb0438f[m [Early Binding of Virtual Calls] Add a new kind of unconditional_checked_cast: Identical cast. This cast checks that the class that we inspect is exactly the type we expect, and not a subclass of that type.
[33m1b650dc[m Add helper functions to SILBlock and SILFunction.
[33m9c00e8a[m Simplify add/sub/mul overflow intrinsics where one operand is a 0 or 1
[33m23d3ca2[m Fix 'charater' typo in documentation comment.  <rdar://problem/17249044>
[33m9b72aa0[m Revert "Update to ToT which removed std::error_code"
[33mf6ef780[m Add note to interop model proposal about interop with String.
[33m676b005[m Update to ToT which removed std::error_code
[33ma0c0dc2[m Use std::error_code rather than llvm::error_code
[33mca42a7b[m Turn on metatype-to-object conversions.
[33m23bf30e[m Add a testcase for inline scopes and fix the locations emitted for performance-inlined insrtructions.
[33m904d73b[m Remove unused parameters to TypeSubstCloner ctor.
[33m70fdc6d[m Make SpecializingCloner inherit from TypeSubstCloner.
[33ma5a5d8f[m Add an execution test that exercises metatype-to-object conversions.
[33md54f581[m SILGen: Retain protocol objects before use.
[33m1f203ab[m IRGen: Lower metatype conversion instructions.
[33md306d62[m Remove unused anonymous namespace.
[33mdccd703[m Use <system_error> rather than llvm/Support/system_error.h.
[33mdfea044[m ARM64 -> AArch64 in llvm build configuration.
[33m5ca3882[m Rename array upcast/bridge expressions to "collection".
[33m8a6ee4c[m Fix harder for LLVM/Clang trunk.
[33m0c45c0c[m buildbot-script.sh: Factor out common settings, so that ASan can override them.
[33m5f4db71[m Remove KVOContext from the Foundation overlay.
[33m34a3b8e[m Adjust expected output to match current results on trunk.
[33m2df66cf[m Implement inline scopes for the performance inliner.
[33mfe63f7d[m GlobalAlias has been changing a fair amount lately upstream, but as of r210062 they can point at arbitrary ConstantExprs again, and as of r210734 our use of this can actually pass the IR verifier again.
[33m751301a[m Update diag::Mapping to diag::Severity to match clang r210518.
[33m9ab1136[m Update error_code usage to match llvm trunk.
[33m97ab82e[m ClangImporter: Update for clang API change in r209002.
[33me5c6de2[m [Serialization] Tighten up handling of generic param lists.
[33mafafa9d[m SILGen: Implement metatype-to-object conversions.
[33m6168837[m Fix test clang_builtin.swift on iOS.
[33m9f57368[m Basic IR-generation support for checked_cast_addr in terms of swift_dynamicCast.
[33m1f1c00c[m SIL: Add instructions to convert metatypes to object references.
[33md49a718[m Fix typo.
[33m6aa83e9[m Improve the error message when a nil Optional is unwrapped.
[33mfc3794d[m <rdar://16978397> Overlay most of the rest of math.h.
[33m4b8a8ef[m [g-arc-opts] Move all global arc optimizations under the same debug flag.
[33maaa147e[m Eliminate some uses of PolymorphicFunctionType.
[33m6fb1dc2[m Centralize more dynamic-casting code into GenCast.cpp.  NFC.
[33m509bbe5[m [g-arc-opts] Ignore trap BB during Sequence Dataflow.
[33m9f8cd55[m Split out a file for doing dynamic-cast IR generation.  NFC.
[33m9890d8b[m Add swift_dynamicCast.
[33ma581511[m Permit LLVM's cast operators to be used on Metadata instances, and add ExistentialTypeMetadata::isClassBounded().
[33m79b4526[m Allow ASTContext::getStdlibModule to load the stdlib if it isn't present.
[33m87e9426[m Move TypeSubstCloner into its own file.
[33mdcdcde8[m Rename TypeSubCloner to TypeSubstCloner.
[33mcf9e0d2[m Sema: Introduce metatype-to-object conversions.
[33ma4ea927[m [ClangImporter] If a protocol and a class have the same name, add "Protocol".
[33m8548760[m <rdar://16978397> Add overlays for most of tgmath.h.
[33m2cac7e1[m SIL tools always operate as -parse-stdlib, even when working with modules.
[33mea8e7f5[m Module::forAllVisibleModules should use a proper pre-order traversal.
[33mdcea62e[m [test] "mkdir -p %t" before putting a module cache directory inside it.
[33m9c0a25c[m Add testing for min max.
[33madb917d[m Update ASan build to pass the SDK using -isysroot like the regular build.
[33m5d8323c[m Move initCloned from TypeSubCloner to SpecializingCloner
[33m44ea9da[m Use the same variable in debugging message of SILFunctionPass and SILModulePass.
[33m8dbb7ec[m Split generic_classes.sil test into supported and unsupported cases.
[33ma2d6ee4[m Update NameBinding test for improved diagnostic.
[33mf5f3d5f[m IRGen: Fix misplaced continue.
[33m8f9475c[m IRGen: Allow dynamic class layout for non-ObjC-derived types.
[33me022a97[m [Frontend] Check in advance that we can load the standard library.
[33m03eacc2[m [PrintAsObjC] Forward-declare things for the generated header when possible...
[33m363dfbe[m stdlib: add doc comments
[33m4e7fa3c[m Remove this assertion. Bridging headers will not have an owning module.
[33m4847208[m [SILParser] correctly handles protocol_method on a getter.
[33mdcf7d5c[m Start refactoring type substitution cloning for use in inliner.
[33m1526278[m stdlib: more byte swap feedback
[33m9457715[m Fix up parsing of 'P.Protocol' types, and resolve 'T.Type' and 'T.Protocol' to TypeExprs in expression context.
[33mf6ff297[m Tighten up the semantics of inherited conformances.
[33m59368b5[m stdlib: byte swap feedback
[33m9bdf3f6[m stdlib: add .byteSwapped to integer types
[33mf5749cc[m Track the consumption behavior of the new indirect-cast instructions.
[33m588b91f[m Runtime: Swift is public, we can now stop hiding crash reports
[33m2af6e08[m An operator requirement whose input type involves Self does not make a a conformance noninheritable.
[33mb9ac148[m Small renaming of a couple members.
[33mac903bf[m IRGen: Make our use of spare bits in heap objects tagged-pointer-safe.
[33m0f0874b[m Add variants of the checked-cast instructions that put the result in a different place.
[33m50404f6[m Fix build break in UIViewControllerAdditions.
[33m4f467b7[m Fix build break in XCTest.
[33m4880bce[m <rdar://17086151> Add overlays for open(), openat(), and struct stat.
[33m5e1c15d[m Rationalize the class-instance dynamicCast runtime functions.
[33m2c5474d[m Add CanType::getClassBound(), which returns the best known class declaration bounding a type with a class representation.
[33m3be6a86[m [enum-simplification] Teach enum simplification how to hoist releases into switch regions.
[33mc266b15[m Cache whether a type involves an archetype in the recursive type properties.
[33m54c0baa[m [ClangImporter] Don't recurse infinitely on "#define X X".
[33mbb5b2f4[m [Parse] Allow shadowing the variable a closure expr is being assigned to.
[33m3f97d03[m [Driver] Allow falling back to / for -i mode if xcrun says to.
[33me3517e8[m [stdlib] add two-operand version of min.
[33mfe3a7b0[m When determining whether we can specialize a generic function, check whether any of the substitutions are dependent rather than checking whether the function's substituted type is dependent.
[33m4c284e4[m [stdlib] add two-operand version of max.
[33mdc5f3c2[m <rdar://16878510> Add definitions of stdin/stdout/stderr to the Darwin overlay.
[33maec78d0[m [stdlib] revert r18764.
[33mcc90c81[m [stdlib] add two-operand version of max and use max2 in stdlib when appropriate.
[33mc8ac91e[m Remove trailing whitespace that snuck in. NFC.
[33m59c89e5[m [g-arc-opts] Change Global ARC Sequence Dataflow to use PreallocatedMap.
[33mcf20524[m Fix typo.
[33m18b4650[m Sema/SILGen: Make default argument generators work for generic functions.
[33m1f5fa04[m Move the rest of the dynamic-cast code over to Casting.cpp.
[33m02ef6d6[m Update the "missing SDK" note now that the compiler is almost always in Xcode.
[33me715940[m [Driver] Teach "swift -i" and "swift -repl" to default to the current OS X SDK.
[33mfd97781[m Split the dynamic-cast code out into its own file.
[33mca1207f[m Look through inout types when looking for a member.
[33m41dc9a9[m Make loop_info_printer test dependent on asserts feature being enabled. Without asserts we don't print anything.
[33mdf5f9db[m Fix up preallocated array to deallocate memory.
[33mafe7688[m Allow inheritance of convenenience initializers for Objective-C classes.
[33m1914df7[m Begin making locators non-optional for constraints.
[33mef75f72[m Take first steps towards eliminating un-substituted type variables from our diagnostic output.
[33m7bda183[m rename SuppressedMacros.def -> MacroTable.def
[33m00ad60f[m Set the 'self' type for the initializing type of an initializer properly during deserialization.
[33m4dbff38[m Change NULL/Nil/nil and various other macros to be imported as an unavailable decl, instead of importing them as _Nil (which will be going away when nil becomes an expr).
[33ma83eb20[m Code completion: skip parameters that are defaulted to either of __FILE__, __LINE__, __COLUMN__, or __FUNCTION__
[33mfa71c0d[m Teach _dynamicCastToExistential to check conformance to Objective-C protocols.
[33md148917[m Code completion for overrides: don't offer 'override override func' in a sub-sub-class
[33mb0eb481[m Code completion: display correct syntax and type when using an @optional member on a value
[33m11b23bb[m Code completion for overrides: complete @optional members
[33m11ad8ff[m [enum-simplification] Make enum simplification global and teach it how to infer enum case from switch_enum.
[33ma301dbe[m Add in PreallocatedArray, PreallocatedMap data structures.
[33m218859f[m Fix class metadata emission to properly strip ownership modifiers in a case that it missed, fixing rdar://17220646.
[33m2dc1df5[m Implement <rdar://problem/16954464> Cannot make a strong IBOutlet
[33m125c206[m Move BlotMapVector -> include/swift/Basic/BlotMapVector so it can be used in SILAnalysis and SILPasses. NFC.
[33m615157e[m disable this test, it is aborting in the legalizer, tracked by rdar://17218018
[33m507b158[m Quiet unused variable warning.
[33m858d6a7[m [sil-combine] Unused calls to global initializers are dead.
[33ma4a96fc[m Make sure we emit SILLoop::dump even with asserts off. Just conditionally compile out its body.
[33m8fa0873[m Allow parentheses to suppress the "forced downcast will never produce nil" warning.
[33m0476b98[m Ban the use of "as?" to coerce one value to another; it only makes sense for checked casts.
[33mfb2f72a[m Eliminate type checker support for forced contextual downcasting via "expr!".
[33m08be461[m When performing an "is" check that involves bridging, do a full conditional check.
[33m0cd44d1[m [g-arc-opts] Only run the ARC optimizer on functions that contain reference count instructions that we care about.
[33m4b9af9c[m [g-arc-opts] Only perform alias queries to determine potential decrements and uses if we are a point in the dataflow lattice where such determinations can cause us to change lattice state.
[33mbf47d48[m [g-arc-opts] Hoist out F.size() and enable BB numbering only if asserts (i.e. logging) is enabled.
[33ma12fb01[m [g-arc-opts] Create a context object for the matching set computation which stores an evaluator and both state maps. This allows us to not need to recompute the reverse post order over and over again for a single function.
[33me906137[m [g-arc-opts] Remove old entry point to the sequence dataflow. Now this is run via the evaluator class.
[33m8fe0038[m IRGen: Enable vectorization for OptLevel > 0
[33me50b489[m IRGen: Add missing calls to TargetMachine->addAnalysisPasses
[33m3976d4c[m Fix grammar in comment. NFC
[33m8c10907[m Add a LoopInfoPrinter pass.
[33ma14aa42[m SILLoopInfo: Implement SIL loop info analysis using LLVM's LoopInfo
[33mc882046[m Add more GraphTraits for SILBasicBlocks
[33m7fb33bb[m Simplify loop header structures
[33mc72961d[m SimplifyCFG: Add dominator based simplify of conditional branches
[33m649886b[m [g-arc-opts] Add a comment to clarify the purpose of BBToPostOrderID.
[33m498f9d8[m Update bst.swift benchmark
[33m0c77768[m Make sure that lit can find gyb when doing a separate llvm, clang, swift build.
[33m33fc36d[m Fix this test correctly, so we still test what we are supposed to be testing. = /.
[33m69b79c7[m Fix test that broke due to r18708.
[33m72ea293[m [sil-code-motion] When sinking retain_value, release_value over switch_enum, allow for there to be a dealloc_stack intervening.
[33m6db91f7[m [g-arc-opts] swift_keepAlive does not decrement reference counts.
[33mfd33095[m [g-arc-opts] Enable the Global ARC Optimizer by default.
[33mc2b2e52[m [g-arc-opts] Implement the merge functions to complete Stage 2 of global arc opts.
[33m814274a[m Make some logging easier to read. NFC.
[33m19fd2ce[m Clean-up hashing in CSE by using the stored kind of the inst.
[33m5115536[m Align case labels with switch statement.
[33m5a2b1ad[m Forgot to add test for enum-simplification.
[33m3ba4ca1[m Add support for printing SIL with SIL entities sorted by name behind the flag -sil-sort-by-output-names.
[33m4473429[m [g-arc-opts] Add support for printing out LatticeState enum class elts.
[33m3ebbaaa[m [sil-enum-simplification] Add new pass enum simplification that propagates enum case information down the CFG. Currently it only simplifies ref count operations in the same basic block, but it could be pushed further.
[33mb3e72be[m Remove unused deserialized SILFunctions.
[33mba182e6[m [sil-code-motion] Teach SILCodeMotion how to push retain_value, release_value on enums over switch_enums onto the enum payloads.
[33m5def9ae[m [local-arc-analysis] Teach ARC analysis about more instructions that only use pointers via users. These uses will be caught by the dataflow.
[33meb9a804[m [sil-cse] Teach CSE how to handle unchecked_enum_data.
[33mfb93d14[m Generalize downcasting through an Objective-C class to a bridged value type.
[33m5b3e77e[m [g-arc-opts] Implement the traversal of the RPOT, POT, forgetting all tracked instructions at loop boundaries.
[33m2972dc3[m [g-arc-opts] When creating increments, decrements do not use the SILLocation of the insertion point. If the insertion point is a terminator instruction, the increment, decrement will get a SILLocation that is not valid on non-terminator instructions which will cause an assertion to be hit.
[33m25803ad[m [g-arc-opts] Refactor ARCBBState from GlobalARCSequenceDataflow.cpp -> *.h.
[33m483ba70[m [g-arc-opts] Change ReferenceCountState to work on sets of instructions instead of just individual instructions.
[33m1b907dc[m [g-arc-opts] Remove excessive indentation from DEBUG messages.
[33m1d99cda[m Add a defensive assertion to make sure the Clang importer doesn't return null imported modules
[33m38620ed[m Add a small program to generate lots of random swift code.
[33mb62e2e2[m Sink identical block arguments from predecessors into the destination block.
[33m2acc1c1[m Add support for the "leaks" feature to lit.
[33m5649360[m stdlib/NSString APIs on String: add more tests
[33m92f1da7[m Out of a healthy sense of paranoia, make sure we don't fill in an alignment of -1 in the ivar layout for a dependently-sized ivar.
[33m59a34b7[m Fix a nasty problem with ObjC ivar metadata.
[33ma69e341[m stdlib/NSString APIs on String: fix a bug and add tests for rangeOfCharacterFromSet(_:options:range:)
[33m3e72294[m [g-arc-opts] Add GMALLOC like tool for running leaks while using lit.
[33md4c83c8[m This patch makes it easier for the debugger to insert the values for variables into the SIL for expressions correctly.
[33mffdb442[m Teach the SIL verifier how to check that all of the uses of AllocStackInst are inside the allocation lifetime. This code only verifies cases where the allocation and deallocation are in the same basic block.
[33mdf71a47[m stdlib/NSString APIs on String: fix two bugs and add more tests
[33m085c126[m [test] For 'test/stdlib/Reflection.swift' remove unnecessary #if's and code duplication.
[33m1e87d7a[m Minor clean-up of inliner code.
[33m9e263e7[m Benchmark: make it build.
[33m171fc95[m [ClangImporter] Suppress macros named TRUE and FALSE.
[33m502214a[m stdlib/String bridging: make the test for UTF-8 encoding swow path more robust and add tests non-ASCII strings
[33m8c974df[m SILGen: Emit @objc thunks with external linkage, even when local.
[33m9e492a5[m [Driver] Don't crash when an input file has unknown type.
[33me1496d3[m [test] Fix String test failure on some platforms.
[33m43a8d4e[m [AST] Fix crash when printing a function with a missing parameter type.
[33m8cbefae[m During DCE, eliminate branches to dead regions of code.
[33m577f16c[m [ClangImporter] Import constant globals using 'let' instead of 'var'.
[33m88a64eb[m Revert "ClangImporter: Update for clang API change"
[33mdf0b230[m ClangImporter: Update for clang API change
[33mea7758f[m stdlib/String: implement UTF-8 encoding for Strings that wrap NSStrings for which Foundation can not give us a UTF-8 encoding in O(1)
[33meca9bd2[m stdlib/runtime: don't leak filenames of users' code through calls to runtime trap function for unimplemented initializers.
[33m6054e2e[m [AST] Hide as private symbols that use types from the Builtin module.
[33m829473a[m [AST] Print a 'public' typealias with a 'private' underlying type by printing the declaration but not its underlying type.
[33m208fa36[m [g-arc-opts] enum struct => enum class. NFC.
[33m406e5ca[m SILGen: when emitting default argument generator functions that contain magic literals, don't actually use the source information of the *function definition* to generate these functions.  Doing so leaks information about source code into the binary, and these default argument generators are never called anyway.
[33m473ad2e[m stdlib: don't use assert() in stdlib implementation
[33m5718e5f[m [stdlib] Re-expose 'nil' as a public symbol.
[33mc44731a[m B&I updated the builders to a new iOS SDK - the new SDK means that the Unmanaged<> is unwrapped automatically on our behalf
[33mf4a4e1c[m stdlib/NSString APIs on String: add more tests
[33mbc39517[m Change the preserve-symbols hack for protocol witness tables to survive through 'strip', which is apparently performed by the app store.
[33m1dc6de3[m Add a comment that explains how we disable inlining. NFC.
[33mec22505[m stdlib/NSString APIs on String: add more tests
[33m470fee7[m stdlib: correct a comment to be more explicit that this is a hack
[33m30341ed[m The B&I-sanctioned iOS SDK does not have the right annotations for this to be automatically unwrapped. The Graphics Context comes back to us as Unamanged<> and we need to manually extract the value out of it. Do so for now
[33m3e1ed25[m Add a mirror for UIView There are a couple caveats to this Mirror, discussed in detail in the radar
[33mdd4d9f5[m Make sure we don't inline the cold path by wrapping it with a closure.
[33mcd00cfb[m Fix some build warnings.
[33mb25eeec[m Runtime: automatically enable crash reporting after the announcement
[33m5502325[m Code completion: don't crash when the user is trying to complete attributes
[33m04b17cc[m Add comments. NFC.
[33mf179e4c[m stdlib/Foundation overlay: hide NSSimpleCString
[33mef52068[m SILGen: Don't +1 'self' references for direct property access in constructors.
[33m02b977f[m stdlib/runtime: fix a bug in dynamicCastToExistential1() that prevented print() of values typed as Any to work
[33m38f730c[m Fix a problem with SILMem2Reg exposed by local changes to DCE.
[33m8fe8907[m Add some debug output for dead code elimination.
[33m9917e62[m Make a helper functions static.
[33m705a89e[m Improve diagnostic for the "forced downcast" diagnostic.
[33m2122984[m This adds NSString to the list of quicklookable types in playgrounds This patch allows people to define a func quickLookObject() that returns an NSString, and have the playgrounds pick that up for the sidebar
[33mc5e19b4[m [AST] Hide operator '~>' as an internal symbol.
[33madb17b5[m [AST] If a symbol has a type of a typealias that is not with leading underscore, accept it as public one.
[33mc1de0bf[m Suggest "as T" rather than "!" for implicit downcast fixes <rdar://problem/17029454>.
[33mb191470[m [stdlib] In ContiguousArrayBuffer<T>, vars 'storage' and 'base' where under the 'private' section so I took the liberty to 'privatize' them with a leading underscore.
[33m95bd9e1[m [AST/IDE] Centralize the logic to determine if a symbols is a 'private' stdlib one and hide them more extensively.
[33m1efc2d9[m Reflection: Fall back to using ObjC metadata to get field offsets in ObjC-derived class mirrors.
[33me4a048a[m IRGen: Fix miscomputation in single-payload enum 'switch'.
[33m7230c0f[m [test] Remove a "#if os(OSX)" check from test/stdlib/Reflection.swift, that section can apply and pass the test on iOS as well.
[33m46cae2a[m [demo-tool] Add support for backspacing.
[33me05c148[m [demo-tool] add support for teleprompter prompts.
[33m77eeb6b[m Coding style tweaks.
[33m8156008[m Add a dead code elimination optimization pass.
[33ma9368d1[m Update file contents for rename of DeadCodeElimination.
[33m79b727a[m Rename DeadCodeElimination.cpp to DiagnoseUnreachable.cpp.
[33m3f158a5[m Add back a pause, but a brief one, for newlines.
[33m1c3c12f[m Fix a bug in the partition() method that is used by sort. The problem was that we were swapping the pivot while partitioning the array.
[33m1e5b65c[m Improve the switch statement in this test case to be more idiomatic
[33m0134c6d[m Allow user-defined Swift classes to implement our API for QuickLooks, and have the result of that API be picked up by the Mirrors
[33m4562844[m SILGen: Carefully preserve 'self' at +1 through init delegation.
[33m22329b3[m Extend the _OpaqueMirror to produce summaries that at least reflect the broad category of value being reflected The <opaque> output is clearly useless, and annoying to see scattered around playgrounds
[33m3298beb[m Make XCTestCase.className demangle its result.
[33m278bebc[m Use "is" rather than "isa" for testing against AnyFunctionType in the nullary call fixit.
[33mbd8bc4d[m Fix crash during fixit generation by avoiding a bogus cast. (rdar://problem/16996525)
[33ma79a06f[m [stdlib] Improve efficiency of Array literals
[33m03a59e4[m Add a test for sort()
[33m7610c79[m [SILCombine] optimize unconditional_checked_cast in -Ofast builds.
[33mc4d0063[m stdlib/NSString APIs on String: add more tests
[33mc81e822[m Add some logic to the type checking process to prevent stack overflows while type checking certain kinds of self-referential declarations.  This addresses rdar://problem/1641865, rdar://problem/16994520 and host of other radars that have been filed over the past several months.
[33mfce7a8c[m stdlib/NSString APIs on String: dataUsingEncoding:allowLossyConversion: can return nil, change our API and add tests
[33m94b1957[m stdlib tests: now CString no longer crashes in these cases, re-enable tests
[33mce14332[m stdlib: make UnicodeScalar.escape() independent of current locale
[33mc5f2154[m stdlib/CString: fix two issues with CString.persist():
[33mf47d320[m stdlib/NSString APIs on String: add more tests
[33m04dae74[m stdlib: correct comment
[33m83f7bdc[m stdlib/NSString APIs for String: allow a nil locale to be passed to capitalizedStringWithLocale(_:)
[33m8b44b2d[m Remove the comment that turned out to be not accurate
[33m3944e61[m stdlib/NSString APIs on String: add more tests
[33mbd0c7f4[m stdlib/Dictionary: rename variables to match the new semantics.  No public API changes.
[33mc5fd54a[m Add missing break to case.
[33mceb05a7[m IRGen: Fix weak reference operations for @objc types.
[33m0141da1[m SILGen: Attach an OwnershipComponent to weak/unowned member references.
[33m3a07bdb[m [g-arc-opts] Remove #if 0 section I forgot to remove.
[33mee0d677[m [g-arc-opts] Remove isInterestingInstruction. Its not useful or interesting.
[33m3ba8808[m [ClangImporter] When remapping an init method's name, change the selector too.
[33me64ab0e[m [g-arc-opts] Change ARCOpts statistics collection to match Global ARC Opts so I can compare the two.
[33m445c474[m [g-arc-opts] Wired up the Release->RetainState (TDMap), Retain->ReleaseState (BUMap) dataflow into the pair matcher analysis which matches up sets of retains, releases.
[33m2d00485[m Don't try to autolink the underlying module in a mixed-source framework.
[33m607a5e8[m [test] Most string encodings don't have names on iOS.
[33m70274f3[m [sil-pass-manger] Do not use an LLVM statistic as the counter when deciding that we have iterated too many times. They are compiled out with a release compiler.
[33m3f8f691[m [sil-aa] Update tesrts so that asserts are required. This is necessary since the sil debug options used to generate the test data is disabled when asserts are off.
[33md713c55[m Heap: Sniff out *any* Malloc knobs and fall back on the system malloc
[33md234335[m Make use of the new ForceCheckedCastExpr to ensure that iterator element types are correctly coerced to the contextual type introduced via a named pattern.  (rdar://problem/16265970)
[33m421e547[m [demo-tool] add '>>>NORETURN' marker to allow breaking up the narrative of a single line.
[33mc271df5[m [demo-tool] Make delay between characters more random, but roughly the same speed.
[33m177ee4e[m Add back "return" to wait to complete code.
[33m9515418[m stdlib/NSString API tests: add a missing file in Inputs
[33m464bce4[m IRGen: Put witness tables into no_dead_strip sections.
[33md1a2a2a[m AST printer: don't qualify names from system overlays
[33m063eab6[m demo-tool: increase typing speed.
[33mc4c0b53[m stdlib/String: NSString APIs: add a skeleton for tests
[33mf305cd7[m Look through bridgeFromObjectiveC calls to find forced casts within optional injections.
[33m47bae74[m stdlib/Dictionary: fix a bug in deletion
[33m1650291[m Fix up some expression location calculators.
[33mf8409eb[m Print location in expression AST dumps as well
[33m049cd39[m Add source ranges to expression dumps.
[33mf746481[m Reinstate r18522 "this patch fixes the playground transform to support transforming top-level code" with a hack to remove null elements.
[33m67ca1c9[m Implement the new casting syntaxes "as" and "as?".
[33m75fec75[m Revert "This patch fixes the playground transform to support"
[33m631e89d[m Heap: enable some runtime asserts that double check the compiler
[33m0f9edad[m [stdlib] String API Review: NSString API
[33m80f8b1a[m [g-arc-opts] Extract out the dataflow from GlobalARCPairingAnalysis => GlobalARCSequenceDataflow. Add in the code to implement the bottom up dataflow, but don't wire it up. Pass in the refactored top down dataflow to the old pairing pass so we still give correct results.
[33m329abe5[m Pass an alignment mask during heap array allocation, not an alignment value.
[33m1042b5c[m demo-tool: remove delay between lines, and add random jitter to each keystroke.
[33m145a2a4[m demo-tool: don't wait to send return.
[33md918fbd[m demo-tool: actually clear the screen
[33m22c6e1a[m demo-tool: Don't include "demo is over" text.
[33m3ffbea1[m demo-tool: Add capability to clear the screen in the demo script.
[33m6ddce0a[m [g-arc-opts] Missing file from r18542.
[33mbab5188[m [Parser] Follow-up on r18532, to prevent code-completion giving any results with an invalid 'super.' inside an enum.
[33m592c2bb[m [g-arc-opts] Move the ARC pairing and dataflow analysis into their own analysis file.
[33m01bcc3e[m Add reminders to keep PrintAsObjC in sync with @objc validation.
[33mb27ac72[m [test] Disable a test on iOS.
[33mdba7b24[m [g-arc-opts] Transpose the execution from processing a set of reference counts a basic block at a time many times to processing a set of reference counts on a function many times.
[33md6d2ea4[m [g-arc-opts] Add in support for running the global arc optimizer instead of local arc opts via the flag -Xllvm -enable-global-arc-opts.
[33mf256d65[m [ClangImporter] NSProcessInfo.processInfo() is distinct from NSProcessInfo().
[33m5219bb0[m [serialization] Type and value cross-references are mutually exclusive.
[33m770a3dd[m Fix memory-smashing logic error in dependency file generation.
[33m6c6b684[m Re-enable ARC for the Phonebook program.
[33m95a0319[m Re-enable ARC for RC4.
[33m7f1f1a4[m [Parser] Fix crash when having "super.init()" at top-level.
[33m6af5232[m Re-enable the global initializer hoisting pass.
[33m24469df[m This patch teaches the TypePrinter that lldb_expr_ is a reserved module name prefix, and it should not print it This is a temporary solution to get us through WWDC - we will do better after the conference - Dmitri and I discussed the plan as part of getting this patch approved Radar will be filed shortly!
[33m3a53279[m Disallow null elements in a BraceStmt with an assertion.
[33m6afb4df[m [PrintAsObjC] Handle properties with weak/unowned storage.
[33m65c6b13[m asUTF8() -> .utf8
[33m9c3b9c0[m [IRGen] Hide the symbols used to force-load other frameworks.
[33m5bee45b[m [ClangImporter] Treat non-modular content imported via framework as an error.
[33m4e66603[m [IDE/CodeCompletion] Hide internal symbols from the stdlib overlays as well.
[33ma5f737c[m This patch fixes the playground transform to support transforming top-level code.  This involves these changes:
[33m842e288[m Heap: pre-compute pthread layout details
[33m74f29d5[m Heap: cache dlsym() result
[33m74c7fdc[m REPL code completion: add a smoketest for Cocoa completion
[33m2339bd5[m [stdlib] String API Review: hide contiguousUTF8
[33m2664242[m REPL code completion: use a readable output format
[33mf58196f[m [stdlib] String API Review: drop size()
[33m8445618[m [stdlib] String API Review: hide "split" and "lines"
[33mee261fb[m [stdlib] String API Review: kill byteLength()
[33m57347d5[m [stdlib] String API Review: kill asUTF8()
[33mf14cc96[m [stdlib] String API Review: repeatedValue
[33m7e9d911[m [stdlib] CMutablePointer: manual bridging support
[33mf5f15b3[m [stdlib] ReST comment fixups
[33m8c60c4a[m IRGen/Runtime: Emit distinct type metadata for block types.
[33meab43d7[m [emacs support] swift-mode: support break labels
[33m7cd4341[m Force color diagnostics when using the driver from the command line.
[33me6db58a[m [ClangImporter] Map u_int*_t [sic] to UInt*.
[33m9c00cd7[m Simplify if/else-return to if-return.
[33m67abd61[m Fix code comment to reflect what actually happens.
[33md3838dd[m Fix 80-column violation.
[33m8f52edd[m De-ARCify RC4
[33m1c53181[m Again, fix two problems with implicit conversions: - rdar://problem/16776273, wherein conversions between nil and .None were permitted due to an implicit conversion between nil and COpaquePointer. - rdar://problem/16877526, where we needed to add new equality overloads to handle conversions between nil and .None given the supression of user conversions.
[33mf24baa1[m [test] Create temp directory before using it.
[33m9334522[m Add regression test for rdar://16825565
[33m5855c2b[m stdlib/Printing: remove superfluous newlocale() call
[33mea1d75a[m stdlib/Join: ensure that the test actually fails when one of the checks fails
[33m9a4004a[m stdlib/Join: add forwarding join() instance functions to array and string types
[33m3fab925[m stdlib/BitwiseOperations: add a basic test
[33mb118f46[m stdlib/BitwiseOperations: fix the comment
[33m3ca4c98[m stdlib/Fixed point: switch allZeros to be a static property
[33m2fc5297[m stdlib/Slice: relax assertion to allow Slice<T> to be constructed from a native empty buffer without storage
[33m4693583[m stdlib/Join: fix an ambiguity in 'ExtensibleCollection + ExtensibleCollection'
[33m9043271[m Add an interpreter test for generic overload resolution
[33m5ddee67[m Provide a hacky hook for specifying a class's instance size and alignment for the purposes of deallocation.
[33m795be85[m [IDE/CodeCompletion] Make addParamPatternFromFunction() iterate over inputType instead, so it picks up substituted types. BodyParamPatterns is now only used for the local non-api parameter name. Consolidate the two variations of addFunctionCallPattern() into one function. Update the tests accordingly. This addresses <rdar://problem/16956363>.
[33m8641f5b[m [global-arc-opts] Separate the increment, decrement matching function from the function that actually removes, moves the increments, decrements.
[33m6c280e2[m IRGen: Emit runtime initialization into top_level_code for playgrounds.
[33m1d34a88[m Revert "Fix two problems with implicit conversions: - rdar://problem/16776273, wherein conversions between nil and .None were permitted due to an implicit conversion between nil and COpaquePointer. - rdar://problem/16877526, where we needed to add new equality overloads to handle conversions between nil and .None given the supression of user conversions. (Thanks to Ted for the overloads and test.)"
[33m5c3f40c[m Use a data structure with stable pointers for the Objective-C unowned reference side table.
[33m4fccb06[m Don't leak the allocation for objects with outstanding weak references at deallocation time.
[33mf469d8f[m Fix two problems with implicit conversions: - rdar://problem/16776273, wherein conversions between nil and .None were permitted due to an implicit conversion between nil and COpaquePointer. - rdar://problem/16877526, where we needed to add new equality overloads to handle conversions between nil and .None given the supression of user conversions. (Thanks to Ted for the overloads and test.)
[33m98ce4f3[m Heap: add an assert that would have caught 16979846
[33me2ca13c[m <rdar://16529903> Make UIViewController's nib search find Swift class names.
[33meeb9c4a[m Reapply r17654 since we are branched for WWDC.
[33mb468513[m Heap: add missing lock/unlock
[33mb51b1f0[m "invalid unicode code point" -> "invalid unicode scalar"
[33m46a7728[m Heap: track the last allocation per arena correctly
[33m499eeb8[m revert 18464.
[33m5b7564f[m Deduplicate the isNative check. NFC.
[33md3cdebc[m [ClangImporter] Add missing early exit after emitting a fatal error.
[33m7a4519d[m Remove unnecessary escape in benchmarks.
[33md168ca8[m Make Benchmark.swift compile again
[33mbd88057[m Remove ARC and place manual retains.
[33m9755d8c[m [sil-combine] partial_apply without a substitution list or arguments is equivalent to a thin-to-thick function.
[33mdc2b0a2[m stdlib/Dictionary: fix test after r18454
[33m38130ca[m Remove uniqueness forcing from CMutablePointer array conversion.
[33m8910632[m stdlib/Dictionary: allow NSDictionary to be bridged to Dictionary<K, V> non-verbatim
[33mbbf7b0a[m stdlib/Dictionary: add 'removeAll:' API
[33m652859f[m stdlib/Array: reduce duplication in ExtensibleCollection conformances
[33m36a5eae[m stdlib/Array: all array types are ExtensibleCollections
[33m4679074[m stdlib/Join: new: add a generic join() function that behaves like NSArray's componentsJoinedByString:, or Python's join(), but is generic, operating on any ExtensibleCollection
[33ma9ba72d[m [test] Work around incorrect objc ABI selection in simulator tests.
[33mcfa64f4[m [IDE] For AST printing, adjust recordDeclLoc() invocations at the point where Decl::getLoc() would point, which is generally before the name.
[33m4bdfbd1[m [IDE] Have 'swift-ide-test -annotate-print' also indicate where the printed decl location is.
[33m0a206e2[m [sil-combine] (strong_retain, strong_release (thin_to_thick_function)) is a no-op.
[33m9138ba2[m Add some tests that involve passing bridged arrays between Swift and Objective-C.
[33m973beb0[m [IDE/CodeCompletion] Fix crash with code-completion when using -import-objc-header.
[33m97107d3[m Fix variable name typo. NFC.
[33m6d376f9[m [ClangImporter] Make a missing bridging header a fatal error.
[33m24141b8[m [Verifier] Clean up the scope stack if not visiting a node's children.
[33m06ed116[m [SILParser] parse apply substitutions with conformances.
[33m2245c6d[m Release note typo fix
[33mba01eb9[m buildbot-script.sh: Not all builds are RelWithDebInfo.
[33m24d98ce[m [global-arc-opts] Copy current single basic block ARCOpts -> GlobalARCOpts in preparation for beginning multiple basic block ARC work.
[33mf51ebe8[m stdlib/Assert: fix typo in internal API name
[33m9ca563e[m Reject casts to an implicitly unwrapped optional type.
[33m4c6b8d0[m Runtime: Lock the metadata caches
[33m1e94b0f[m Revert "[IDE/CodeCompletion] Minor enhancement, abort all-visible-modules visitation if we already handled that particular ImportedModule."
[33md9a8923[m [release-notes] Change pointee -> memory and set date.
[33mbbc6a92[m stdlib/Assert: don't print stdlib filename and line number in stdlib traps
[33m6acd173[m Don't warn about inferring AnyObject if the pattern is implicit.
[33m418bec8[m [stdlib] 1-character fix for Array.reserve
[33m4d4a7e9[m [stdlib] Add UnsafePointer precondition checks
[33mc86efe5[m Tests: Enable weak reference testing
[33mb59f9882[m [IDE/CodeCompletion] Minor enhancement, abort all-visible-modules visitation if we already handled that particular ImportedModule.
[33m19987bf[m Runtime: fix zeroing weak
[33m182986b[m Use swift_unknownRelease instead of swift_release in swift_bridgeNonVerbatimFromObjectiveC.
[33m60e44e6[m Doug pointed out that setters/willSet/didSet all need to be adjusted when IBOutlet is promoted to implicit optional as well.  This is mostly for AST consistency, but I agree sanity is important here.
[33m1cb05e5[m When force-casting AnyObject to a contextual type, bridge through Objective-C.
[33m2bc1088[m stdlib/Dictionary: finish removing the assumption that keys and values are bridged back from Objective-C verbatim
[33maf11f8f[m stdlib/Dictionary: continue removing the assumption that keys and values are bridged back from Objective-C verbatim
[33m183b7e3[m fix <rdar://problem/16955318> Observed variable in a closure triggers an assertion
[33m5c532d6[m Introduce a fast path for Array.bridgeFromObjectiveC()
[33mebb1118[m stdlib/Dictionary: continue removing the assumption that keys and values are bridged back from Objective-C verbatim
[33m8c13cc3[m stdlib/Dictionary: continue removing the assumption that keys and values are bridged back from Objective-C verbatim
[33m0d20e71[m stdlib/Dictionary: continue removing the assumption that keys and values are bridged back from Objective-C verbatim
[33m336117e[m stdlib/Dictionary: continue removing the assumption that keys and values are bridged back from Objective-C verbatim
[33m6d30262[m stdlib/Dictionary: continue removing the assumption that keys and values are bridged back from Objective-C verbatim
[33m2aabfea[m stdlib/Dictionary: remove comment that is no longer true
[33m72354e8[m stdlib/Dictionary: continue removing the assumption that keys and values are bridged back from Objective-C verbatim
[33md2ab474[m stdlib/Dictionary: continue removing the assumption that keys and values are bridged back from Objective-C verbatim
[33mc4492b4[m stdlib/Dictionary: continue removing the assumption that keys and values are bridged back from Objective-C verbatim
[33m785aabd[m stdlib/Dictionary: start removing the assumption that keys and values are bridged back from Objective-C verbatim
[33m8d1bc6e[m Code completion: update long-running tests
[33m12ecf4b[m Code completion: 80 cols and add 'const'
[33m69b12ea[m Code completion: update comments
[33ma268024[m [IDE/CodeCompletion] Teach code completion to display the local parameter name if there's no parameter API name. This is for display purposes only. Update all relevant tests accordingly. This addresses <rdar://problem/16768768>.
[33m5819454[m Move benchmark CMake support from ./test -> ./benchmark. Changed the name to benchmark-swift to be more like check-swift. NFC.
[33m5bcfb09[m Update inferior-swift-mode.el to use xcrun directly.
[33m37482de[m stdlib/Dictionary test: remove unneeded reinterpretCast
[33mcc1d8b6[m Look through reference storage types when generating @encodings for property getter/setters.
[33m57f75b7[m Implement bridging from NSNumber to Int/UInt/Float/Double/Bool.
[33m1038094[m Support checked downcasting through a class type to a non-verbatim bridged value type.
[33md4b7bb8[m Factor out the optional-binding code for checked casts. NFC
[33m9ccd1ff[m Make "x is T[]" for array downcasting go through checked casting.
[33m041792f[m Only structs are can be _BridgedToObjectiveC; update test harder.
[33m5bb2232[m Only structs are can be _BridgedToObjectiveC; update test.
[33m2cea48a[m Unify ArrayDowncastExpr handling with ConditionalCheckedCastExpr handling.
[33mf477f06[m Replace ArrayDowncastConversionExpr with ArrayDowncastExpr.
[33mfba449f[m [stdlib] Add an eager reverse() for Array
[33m1396258[m [stdlib] add reverse(c), s/Reverse/ReverseView/g
[33me4e472b[m When emitting diagnostics for failed constraints, favor conformances with fewer unsubstituted type variables. (rdar://problem/16892723)
[33mf7c2aed[m Add an implicit conversion from CFString to String.
[33ma2a4eea[m Use a unique constraint locator path for the operand of a checked cast expression.
[33mef90a92[m Update for macosx SDK change.  The iOS SDK still uses the old macro for now.
[33mf896f70[m Don't emit a category for an empty extension just because we're extending an ObjC class.
[33me71317a[m [AST] Don't count the references to the allocator of ASTContext::Implementation.
[33md17c417[m [stdlib] 80-column fixes
[33md1b774f[m [build] Turn stdlib sanity checks on by default
[33m8ef90dd[m [test] Use __typeof__(__objc_yes) to get the right per-platform type for BOOL.
[33me5fad5e[m Remove unused function
[33m5a4891a[m [stdlib] make Array.replaceRange be a method
[33md22b4d1[m [Driver] Add -version to the -help output.
[33m6dade3f[m [stdlib] Test Array.removeLast
[33m1622fa5[m [stdlib] assert => _precondition/_sanityCheck
[33macda737[m @IBOutlet can only be applied to mutable properties.
[33mc4e6d8e[m Release notes for array and lazy algorithms
[33m2da304d[m Start using the _arrayBridgeFromObjectiveC entry point for checked downcasts.
[33m0b3dd9e[m Fix <rdar://problem/16663515> IBOutlet not adjusting getter/setter when making a property implicit unchecked optional
[33mbb95a32[m Introduce new entry point _arrayBridgeFromObjectiveC for checked T[] -> U[] conversions.
[33m65e1538[m [AST] Introduce ASTContext::getTotalMemory().
[33m2981cd3[m [ClangImporter] Note that Clang's getPresumedLoc handles invalid source locs.
[33m0d8c93b[m fix <rdar://problem/16889110> capture lists in lazy member properties cannot use self
[33m8537f01[m [stdlib] Add lazy and Array filter algorithm
[33m41439be[m Clear out some FIXMEs for functionality that's working now.
[33m9c8f571[m Teach "is" expressions to cope with optionals.
[33ma3ef3a8[m stdlib: sort file list
[33ma5df523[m Code completion: tighten test
[33mfc9d546[m Code completion: don't show internal SIL attributes in types of weak and unowned variables
[33m2f9c8f3[m fix <rdar://problem/16954239> Crash in type lowering when using bridged types but not foundation
[33mfba6b33[m Fix <rdar://problem/16953061> String outlet crashing in silgen
[33m987f099[m Update doc comment for TypeChecker::typeCheckExpression.
[33ma22b391[m Greatly improve performance for type checking large, type-annotated, array literal expressions by directly applying contextual type information to its constituent element expressions. (rdar://problem/16736884)
[33m94d5c81[m Heap: ignore arena tail loss during enumeration
[33m2df46e4[m Don't unwrap implicitly unwrapped optionals before casting.
[33m241f4e9[m [stdlib] Avoid Suicide Sequences
[33m4e5f69c[m Try to fix build on ARM32.
[33ma80603f[m stdlib/Floating point: switch infinity, NaN, quietNaN to properties
[33me7ad745[m Support downcasting from AnyObject to a bridged value type.
[33m97977a2[m Zap some dead code.
[33mc02489c[m Enable support for class properties in protocols. This fixes <rdar://problem/16953517> Class properties should be allowed in protocols, even without stored class properties
[33m17f7684[m [IDE/CodeCompletion] Make collecting and caching the global completion results more efficient.
[33md47fd41[m stdlib/Optional: add tests for trapping on unwrapping .None
[33ma48ad67[m Code completion: make test more strict
[33me0d37be[m [stdlib] Rename (Indexed=>Permutation)Generator
[33m215da18[m [stdlib] Publicize Map, add lazy map()
[33mb763aed[m [stdlib] Array API Review: privatization
[33mbec8048[m [stdlib] Array API Review: insert:newElement:=>insert:AtIndex:
[33m69e1b1f[m [stdlib] Array API review: (new=>minimum)Capacity
[33m49d10f7[m Code completion: hide stdlib-private declarations
[33m200b892[m [stdlib] Array API review: privatize [bB]uffer
[33m8344b6d[m [stdlib] Array API Review: removeAt=>removeAtIndex
[33m04e9f63[m stdlib/Array: add a test that arrays of non-Equatable elements are not comparable with ==
[33mf77ffad[m Check whether we have an initializer *after* building default initializers.
[33m5846923[m [stdlib] Array API review: popLast => removeLast
[33m68abebd[m [stdlib] withUnsafePointerToElements for Array
[33m88dde39[m Code completion: fix use-after-free
[33m5d2d762[m [ClangImporter] A typedef to a typedef should get imported as a typealias.
[33m9a060c0[m In ModuleFile::lookupVisibleDecls(), if the caller requested scoped decls, don't return the all the top-level ones as well.
[33m35d22e9[m [stdlib] Array API Review: owner -> _owner
[33m92307de[m [stdlib] Array API Review: swap init parameters
[33m3119144[m [stdlib] Array API Review: clear() -> removeAll()
[33m187e444[m Code completion: don't report duplicate results for top-level declarations
[33m948ddb3[m Revert "Make 'maybeGet' and 'assertingGet' private API."
[33m2746a7d[m Another Array bridge/cast test from Doug
[33mf29866e[m rework processing of @IBOutlet's to default to being weak implicit optionals, now that we can represent such a thing.
[33m25dc6e7[m Two Array bridge/cast tests from Doug
[33mb00803b[m [stdlib] 80-column fixes
[33ma3b406a[m previous patches fixed: <rdar://problem/16949978> weak implicitly unwrapped optional compiled as optional, not implicitly unwrapped
[33me114121[m r18312 fixed <rdar://problem/15293354> Weak reference to class protocol crashes with "SIL verification failed: isa operand must be a class type"
[33md4280cf[m remove the old functions that SILGen's huge blobs of code to form/decompose optionals for weak pointers.  This eliminates the need to do rdar://16871379, and moves rdar://14921511 forward a bit more.
[33m2fb6a44[m update the SIL dox to reflect that load_weak and store_weak now traffic in optionals directly instead of them taking non-nullable types that sometimes had a nil bit pattern.
[33m052a564[m enable weak protocol test, which was fixed by r18312
[33m6d84785[m Substantially rework how weak pointers are represented in the AST and at the SIL level.  Now, the referent type of a WeakStorageType is always an optional type, instead of always being the underlying reference.  This allows us to represent both optional types.  Before, both of these had the same AST representation of WeakStorageType(T):
[33md83b68b[m Rename class method 'infinite()' to 'infinity()'.
[33m72461d8[m expand this test a bit.  Zeroing weak pointers are still apparently non-functional, and they crash in silgen for trivial weak protocols.
[33me5aa1a8[m Change func 'inf()' to 'infinite()' to match 'isInfinite'.
[33m4352c71[m no need for the nested if, flatten it.
[33mae49b8b[m add an executable test for weak pointers.  It is somewhat concerning to me that without the "w = nil" line that explicitly nil's out the weak pointer, that it fails. I'm not sure what is going on here, but it looks like weak pointers are just broken.
[33m92157d7[m Change 'isSignMinus', 'isNormal', etc., in FloatingPointNumber to properties.
[33ma8c2b61[m Always make 'allKeys' a property (coincides with Foundation).
[33m01d3cce[m Add some more execution tests for array downcasts of non-verbatim bridged types.
[33mef2d73f[m Make 'maybeGet' and 'assertingGet' private API.
[33m16dea15[m Hide CocoaArray ('_' to mark as private API).
[33m0741505[m Rename isNull() to _isNull() (making them private), and make pointers conform to LogicValue.
[33meef618d[m Change some tests to compare against nil instead of using 'isNull()'.
[33m0aba627[m Reinstate "Drive a wedge between array upcasts and array bridged upcasts." Reinstate "Restrict the array-bridged conversion to non-verbatim bridging." Reinstate "[stdlib] Fix T[].bridgeFromObjectiveC" Reinstate "[stdlib] Fix T[].bridgeFromObjectiveC" Reinstate "[stdlib] Move _arrayBridgedDownCast to Foundation"  Reinstate "Replace "can" with "cannot" in a message." Reinstate "Implement support for non-verbatim T[] -> AnyObject[] upcasts."
[33mc91884b[m Convert specializer.swift => specializer.sil. NFC.
[33m263dca4[m Revert "Drive a wedge between array upcasts and array bridged upcasts." Revert "Restrict the array-bridged conversion to non-verbatim bridging." Revert "[stdlib] Fix T[].bridgeFromObjectiveC" Revert "[stdlib] Fix T[].bridgeFromObjectiveC" Revert "[stdlib] Move _arrayBridgedDownCast to Foundation" Revert "Replace "can" with "cannot" in a message." Revert "Implement support for non-verbatim T[] -> AnyObject[] upcasts."
[33mb8c2967[m Create a dedicated implementation file for Substitution. NFC.
[33ma617cfb[m We can compare archetypes directly with pointer equality; this is both faster and correctly handles the possibility of a null archetype.
[33m323ac07[m Replace "can" with "cannot" in a message.
[33m0b13672[m Temporarily restrict this test to OSX to unbreak iOS bots while more investigation happens.
[33m3a8a652[m Drive a wedge between array upcasts and array bridged upcasts.
[33m937504b[m Restrict the array-bridged conversion to non-verbatim bridging.
[33m30c1706[m [stdlib] Fix T[].bridgeFromObjectiveC
[33m6e23f02[m [stdlib] Fix T[].bridgeFromObjectiveC
[33m5fd71e0[m [stdlib] Move _arrayBridgedDownCast to Foundation
[33m001a527[m Make app extension platform names more Cocoa-like.
[33m0b7f82b[m Linetable: Make sure the function prologue ends after manipulating the stackpointer. <rdar://problem/16903725> Line tables seem to assume prologue ends one instruction too early
[33mdf65718[m Implement support for non-verbatim T[] -> AnyObject[] upcasts.
[33m54ac7cb[m [devirtualizer] Fix issues where the position of Self in arguments/substitutions were confused.
[33m26630db[m stdlib/NSString APIs for String: change hash() function into a property
[33m0f3c515[m have TypeChecker::getTypeOfRValue preserve type sugar correctly.  NFC in the testsuite apparently.
[33m9b29be7[m stdlib/Dictionary bridging: change check for NSCopying key conformance to also happen eagerly in Release builds, according to Dave's review
[33mc897ee2[m Fix <rdar://problem/16952186> Crash with @lazy in @objc class
[33mfd4c8a4[m Don't crash when mangling polymorphic function types for debug info.
[33m9d7bacc[m Debug Info: Provide a workaround for unary let values and that get hit by rdar://problem/15525728 and store them in shadow allocas at -O0.
[33m3b61830[m Mark -[NSObject dealloc] as unavailable.
[33mc0e218c[m Mark -[NSExtensionContext openURL:completion:] as unavailable <rdar://problem/16909180>
[33mdaea947[m Prefer available to unavailable declarations in otherwise-equivalent constraint systems.
[33m26320dc[m Per API review, rename 'reserve' to 'reserveCapacity'.
[33md360ecd[m Extend availability checking to other expressions that have declarations.
[33mf0b1122[m Per design discussion today, add back type sugar NSError** out parameters.
[33meab7f90[m Per design discussion today, rename UnsafePointer ".pointee" to ".memory".
[33m0d5b40a[m stdlib/Dictionary: s/removeObjectForKey/removeValueForKey/ per API review emails
[33m6a2192f[m stdlib/Dictionary: add doc comments for new APIs
[33mdce90ae[m Change remaining standard library cases of isEmpty() to a property isEmpty.
[33md213355[m stdlib/Dictionary: address internal API review
[33m80fe298[m [test] Clear out the module cache for the test.
[33m0540da7[m Replace an 'as T' hack with a 'reinterpretCast' hack.
[33mf338c9f[m Extend ObjC methods whitelist to support adding an "unavailable" attribute.
[33ma4d9dcf[m stdlib: extinguish \brief and \c
[33m8215dff[m A trailing closure means that a keyword argument can be omitted, not wrong.
[33m5c453ce[m stdlib/Dictionary: add tests for trapping during bridging a Dictionary whose KeyType is not NSCopyable
[33m6808737[m stdlib/CString printing: fix a null dereference in writeTo, similar to one that was fixed in debugDescription
[33mb345aa4[m Revert "Reinstate Jordan's r18233 now that our branches have caught up with the Clang API change."
[33m5369eaf[m stdlib/Array: add a basic test for trapping on out-of-bounds access
[33m5783d0b[m Revert r19185: Add T* syntactic sugar type for UnsafePointer<T>.
[33m8b70f34[m Revert r18196: Clang importer: use T* type sugar when importing as UnsafePointer<T>.
[33m6606b05[m Revert r18204: Handle T* in an expression context, so long as '*' is postfix.
[33mbe3dbf2[m Revert r18209: Handle simple cases of T* sugar in expressions, where * is infix.
[33m53bf4ea[m Reinstate Jordan's r18233 now that our branches have caught up with the Clang API change.
[33mbed8148[m Revert r18232, r18220: we're not doing T* now.
[33md6e4964[m [stdlib] Make _convertNSArrayToArray meet spec
[33maf92489[m Cache the transformation of Swift types to Clang types.
[33m5e9c2b4[m [docs] ReST fixup
[33m2fc6414[m [stdlib/Array] Improve another comment
[33m6b0c79a[m [stdlib/Array] Eliminate or label unused functions
[33m129e550[m [stdlib/Array] Add deferred typechecking
[33m3e8eb46[m [stdlib] Improve comments and a name
[33m175f740[m [stdlib] delete unwanted FIXME
[33mf57c2b8[m [stdlib] Remove unused functions
[33m3dc699e[m [stdlib] Remove asNSArray; it's obsolete
[33m89be40a[m [stdlib] line length fix
[33mbbbf548[m [stdlib] Do verbatim bridging entirely in Swift
[33me8f71c1[m Rename ObjCMutablePointer to AutoreleasingUnsafePointer.
[33m66e35bb[m [sil-parser] Call default Substitution Constructor so we initialize an ArrayRef<Conformance> correctly.
[33maf3c3b3[m Revert "[ClangImporter] Update for Clang API change in r209002."
[33md7c6bbf[m [ClangImporter] Update for Clang API change in r209002.
[33m46388dd[m [stdlib] Unwrap some lines shrunken by T*
[33mb581365[m [ClangImporter] If a Clang module fails to build, it's not missing.
[33ma012602[m [ClangImporter] Pass diagnostics through to Swift's diagnostic consumer.
[33m3fbfd0a[m [docs] Revise the Array bridge/cast story
[33m732486f[m Heap: simplify forEach logic
[33mf5500f2[m Typos
[33m28d4941[m Fix compiler crash when attempting a checked cast from 'Any' to an objc existential. (rdar://problem/16570374)
[33mbc42a07[m Favor implicitly unwrapped optional type annotations over AnyObject when applying the contextual type of a for/in variable. (rdar://problem/16265970)
[33m81c4e73[m [test] Fix Int size dependence in stdlib/Print.swift.
[33me49ca88[m Check that some pattern-matching-heavy demo code actually runs.
[33mfbb9ed3[m stdlib/Dictionary: address internal API review
[33m46f36e1[m Heap: hashing bug feedback
[33m73f02d1[m Switch a bunch of UnsafePointer<T>'s over to T*
[33m39841c3[m [mangler][specializer] When mangling ExistentialMetatypes or Metatypes, mangle in the representation of the metatype.
[33m46c81c8[m [test] Fix pointer-size dependence in test IRGen/alloc.sil.
[33mcdadebb[m [test] Temporarily disable stdlib/Dictionary.swift on iOS simulator.
[33m7d6740c[m fix rdar://16805609 - <rdar://problem/16805609> Providing a 'didSet' in a generic override doesn't work
[33m432961f[m stdlib/Assert: extinguish \brief
[33m98383a5[m Debug info: Use WeakVHs in DIRefMap so LLDB can safely invoke IRGen more than once (at least as far as IRGenDebugInfo is concerned).
[33m8781e36[m Fix <rdar://problem/16906000> Implicitly unwrapped optional let is not considered initialized, but var is by allowing default initializing let properties.  In classes, the property is mutable in init, and the default initialization is useful.  The benefit we gain by banning this is outweighed by the important usecases that get closed off by doing so.
[33mda6d915[m Differentiate between user assertion and preconditions and the like
[33mddb874e[m Rename _isDebug and friends to _isDebugAssertConfiguration
[33m1b3f588[m fix <rdar://problem/16941124> Overriding property observers warn about using the property value "within its own getter"
[33mdb38b64[m Handle simple cases of T* sugar in expressions, where * is infix.
[33mfed3b6d[m [PrintAsObjC] Remove references to the objc_complete_definition attribute.
[33m99ae560[m [IRGen] Update for LLVM API change in r208983.
[33m2a74838[m Extensions to Objective-C objects fail in REPL if the class is not already initialized and LLDB now gets Objective C categories and extensions initialized properly.
[33m5913edd[m [specializer] Always replace all results of a generic apply with the new specialized apply.
[33m11e343b[m Handle T* in an expression context, so long as '*' is postfix.
[33mb10a2bf[m Fix regression in implicit conversions of implicitly unwrapped optional AnyObject types to their contextual types.  (rdar://problem/16922332)
[33mfc47f11[m Fix crash in CString's 'debugDescription' when the underlying pointer is null.
[33mdef1f53[m Make printing of double's locale-insensitive.
[33mdbd0230[m Heap: delete dead code
[33m4bd4a4a[m Heap: Add tombstones to make the not-found case faster
[33m5455014[m Heap: fix pointer-to-arena lookup
[33m92335b2[m tdlib/Dictionary: address internal API review
[33m2e499b8[m Clang importer: use T* type sugar when importing as UnsafePointer<T>.
[33m806daf3[m Add T* syntactic sugar type for UnsafePointer<T>.
[33m2488ba0[m Release notes for the NSArray* -> AnyObject[]! import.
[33m2c1715f[m stdlib/Dictionary: address internal API review: preallocate storage when creating a Dictionary from a dictionary literal
[33mb054a08[m stdlib/Dictionary: add some comments
[33mf498fab[m stdlib/Dictionary: add tests for Dictionary.{keys, values}
[33m70c0628[m stdlib/Dictionary: address internal API review
[33md35e487[m stdlib/Dictionary: add tests for Dictionary.subscript nil assignment.  This change went in without any tests.
[33m9abf7a9[m stdlib/Dictionary: address internal API review requests
[33m828acd2[m stdlib: hide _NSSwiftArray, _NSSwiftDictionary, _NSSwiftEnumerator
[33m522f332[m stdlib/bridging: update comments according to runtime function updates.
[33m178e2a3[m Printing routines should append ".0" to floats, *not* taking locales into account.
[33mcf55f7e[m fix: <rdar://problem/16264989> property not mutable in closure inside of its willSet and: <rdar://problem/16826319> willSet immutability behavior is incorrect
[33mc462201[m Start importing NSArray* with the sugar AnyObject[]! rather than Array<AnyObject>!.
[33m14f4dd3[m fix a typo
[33mb756fc2[m Don't require paretheses when mixing optional types and array types...
[33m70dfa94[m Extend the coverage of the fast path in the UTF16 comparator to more than ascii.
[33mccd282d[m Release note UnsafePointer change with 'pointee' property.
[33m4bb475a[m Rename UnsafePointer.get/set to a "ptr.pointee" property.
[33mdf4429f[m Perform the class-or-ObjC-existential checks first in the runtime bridging entrypoints.
[33m2d592b6[m Rename local variables. NFC.
[33m345e677[m Re-enable ARC and get rid of the slow property accesses.
[33m22beacd[m Debug Info: Linetable. Emit the end location for ImplicitReturnLocations. <rdar://problem/15204469> Odd line table when passing closure to function
[33mfa898f5[m Force generic parameter types declared in module context to belong to the current SIL module, unless the AST sees them first.
[33mc1db20d[m Rename member_NthContiguous -> _nthContiguous
[33mb34abd4[m Diagnose @objc_block types that aren't representable in ObjC.
[33mf5325f9[m Debug Info: Do a marginally better job of supporting enums by emitting the argument types and underlying raw types. In the long run we'd really want to emit them as DW_TAG_variant_types.
[33m589ce7a[m Revert accidental commit changing ModuleFormat.h's VERSION_MINOR.
[33m3a8208e[m [ClangImporter] Drop support for @partial_interface.
[33mc77b970[m Hoist the check for contiguous storage outside of the comparison loop. Once we know that the storage is contiguous we use the new API _NthContiguous. We can further optimize this code by specializing the access to ascii or UTF-16.
[33m3c50575[m Test that @objc inference rejects methods that take non-@objc-able closure parameters.
[33mfc91eb6[m [sil-aa] Remove type classifier methods from SILType.
[33m8923d50[m Revert "Define BOOL correctly for arm64 in the clang-importer-sdk."
[33ma052c9d[m Imported static inline functions should not use AAPCS on 32-bit ARM.
[33me1aaa80[m Tweaks to the Unmanaged API: remove the bridge methods, add conveniences for unsafely bridging unmanaged pointers into void*.
[33m1955139[m Revert "Remove #if conditional from abitypes.swift test."
[33m059ed4c[m Propagate alignment arguments around through the slow allocation/deallocation APIs.
[33m45a6bbe[m Define BOOL correctly for arm64 in the clang-importer-sdk.
[33m9728804[m Fix some minor internal inconsistencies handling implicitly synthesized constructors.  These don't manifest currently, but do with some other changes I'm working on. NFC.
[33mad18ed8[m Start importing NSArray* as (AnyObject[])! by default <rdar://problem/16535097>.
[33mfe0dbb7[m Remove shorthand "x as T!" instead of "(x as T)!"
[33m3b0e45b[m Fix -[NSUndoManager prepareWithInvocationTarget:].
[33m60b4a57[m Heap: Delete old constant that was fixed in an earlier commit
[33m5030fe1[m Heap: make the introspection future proofing build on the buildbot simulator
[33m172cc3c[m Fix my last commit to accommodate for rename of NativeArray.
[33m5e966fd[m Add basic '==' for Array, NativeArray, and Slice.
[33mbfa7566[m [ClangImporter] Put implicit properties into the list of all class members.
[33m2c84a0a[m [sil-aa] Typed Based TBAA with all the necessary fixes.
[33m9f5d430[m [sil-aa] Add predicates to SILType that will be used in TBAA so that TBAA does not need to touch the AST.
[33m10c1961[m [stdlib] Make test work on iOS
[33m50ef69c[m Allow for implicit forcing of enumerated unchecked optional values.  (rdar://problem/16265970, rdar://problem/16569776, rdar://problem/16931457)
[33m08892f3[m Remove #if conditional from abitypes.swift test.
[33mb723b6c[m Teach requestNativeBuffer() to return nil on an empty buffer.
[33mc7308ae[m [docs] Line wrapping fix in diagram
[33m198b453[m [sil-aa] Given a pair of values (a,b), only dump (b,a) if the aa result for (b,a) differs from (a,b).
[33mb666651[m [stdlib] Rename NativeArray => ContiguousArray
[33mf4f91a9[m [stdlib] rename [Native=>Contiguous]ArrayBuffer.swift
[33mcff11a4[m [docs] Rename NativeArray => ContiguousArray
[33m88ef28a[m [docs] clarify downcast semantics
[33m3f782ce[m Drop QuartzCore overlay.
[33mee401b6[m Fixes a typo.
[33m792e9bd[m Heap: make introspection future proof against OS changes
[33mb966c95[m stdlib/{Array, Dictionary}: make debugDescription forward to debugDescription of container elements
[33m869508d[m [ClangImporter] Make sure the imported header module can see the stdlib.
[33m6f8dbe9[m [CMake] QuartzCore depends on Foundation.
[33m2c15f7f[m improve AST dumper of TupleExpr to print the label names.
[33m9b2aee5[m [SILParser] parse inherited protocol conformance in sil_witness_table.
[33m22633c2[m [IDE/CodeCompletion] Make code completion include the leading paren in calls. The leading paren is included for display purposes only, not inserted in the code if already present. It makes the displayed text in the code completion list symmetrical with respect to open/close parens.
[33m972ddc1[m IRGen: Implement type metadata lookup for dynamic Self.
[33m6b04e56[m Heap: better hash function names and better hashing
[33m6635feb[m Provide sdk vararg overlays for CIFilter and CISampler per rdar://16726822 (also removed a comment in Foundation.swift).
[33m8685b29[m [SILParser] parse specialized protocol conformance in sil_witness_table.
[33m01f3f77[m Make _convertNSArrayToArray work for non-verbatim bridged types.
[33m87904b8[m Make ImplicitlyUnwrappedOptional conform to _ConditionallyBridgedToObjectiveC.
[33me1b37a8[m [stdlib] WIP: complete up/down-cast testing for Arrays of verbatim-bridged elements
[33ma74c44a[m Fix two crashing bugs related to checked downcasts - rdar://problem/16093456 and rdar://problem/16892211.
[33m866f306[m [SILParser] refactor handleSILGenericParams to prepare patches for parsing.
[33m423087c[m Remove a stray dump().
[33mf1fa77e[m IRGen: Fix heap array destructor for types where size != stride.
[33macb7465[m stdlib: underscore-prefix NSContiguousString and NSOpaqueString
[33m8cce55b[m [stdlib] WIP on Array Bridge/Cast Testing
[33m634d85f[m [stdlib] Strengthen a sanity check
[33m586387d[m stdlib: remove unused declarations (the runtime functions are gone already)
[33mfed492b[m [stdlib] Don't assert on empty NSArrays
[33md50a8b4[m stdlib/Foundation overlay: add Printable conformance to Selector
[33m8ee468e[m stdlib/Foundation overlay: add Printable conformance to ObjCBool
[33m2a95696[m stdlib/runtime: teach DynamicCastToExistential1 to handle source values that are existentials
[33mbf8fbfc[m Teach isBridgedToObjectiveC and bridgeToObjectiveC to unwrap implicitly unwrapped optionals.
[33m2ec65be[m stdlib/runtime: use a C++ header
[33m011584a[m stdlib/pritning: untie string interpolation from string initializers
[33m7fc27d3[m Remove @unchecked.
[33m7da31bd[m Disable parsing of single quoted character literals, enabling under a flag.
[33md640eb4[m Introduce support for blacklisting factory-methods-as-inits.
[33m3210f19[m Clang importer: replace the designated-initializer whitelist with a general method whitelist.
[33md8cca3a[m Make IRGen actually work in builds without assertions enabled.
[33mfedd1a4[m enhance implicit initializer generation to return a list of initializers synthesized, for future use. NFC.
[33m8e1a854[m [stdlib] More infrastructure for Array bridging
[33m1601b19[m [docs] Arrays.rst - clarify deferred bridging
[33me383bac[m Rework default initialization of options to run much later, after all of the variables have been type checked.  This allows us to reliably determine the type of the variable and to know whether it actually needs default initialization or not.
[33m6b74826[m Improve diagnostic for @UIApplication mixed with top-level code.
[33m6851c41[m Elaborate that @UIApplicationMain is mutually exclusive with main.swift.
[33m3848f9a[m Debug info: Emit the mangled name for function types, if it is possible. <rdar://problem/16450045> variables of closure type cause "warning: swift types not handled in"... warnings
[33m32dee22[m [sil-aa] Change TBAA to use type oracle instructions instead of the raw types of instructions.
[33mc371691[m Release note @UIApplicationMain.
[33m793fe06[m SILGen: Emit an artificial toplevel for files with @UIApplicationMain classes.
[33m8ae8f28[m Release-note the switch to the LLDB REPL.
[33m4f3f1c8[m Undo mistaken changes from r17975.
[33mda5112e[m Fixed a crash when dumping an anonymous NamedPattern.
[33m780c6bd[m [Driver] Turn on the LLDB REPL by default!
[33m9dd82e3[m Heap: slowDealloc() design feedback from John
[33m8e1a908[m Don't verify the AST in NDEBUG (Release) builds.
[33md4a493e[m [PrintAsObjC] Don't include the ObjC header module in the generated header.
[33m559fa09[m Un-XFAIL this test case; if you see it failing, you need to update your clang checkout.
[33mbcb4f5d[m Add documentation comments for '..' and '...'.
[33mf183e49[m stdlib/bridging: bridgeFromObjectiveC() can fail to bridge the Objective-C object to the desired type.  Model this with an optional return type.
[33mc30901c[m Updated the line offset in the playground transform to reflect the fact that a line got added to the wrapper.
[33m834a38f[m [sil-aa] Add support to SILAA for running various forms of Alias Analysis to enable testing the various AA separately.
[33m897a11f[m [stdlib] Update Arrays doc
[33maceb11e[m [stdlib] bridgeFromObjectiveC for String
[33m6e13190[m Diagnose when @UIApplicationMain tries to coexist with a main.swift file.
[33ma8bbc4c[m [stdlib] String internal API review changes
[33meb9c3a4[m stdlib/runtime: implement bridgeFromObjectiveC()
[33ma3fb501[m Recognize the objc_bridge and objc_bridge_mutable attributes and create implicit conversions for them.
[33mfc57ea2[m Add __conversion as a known identifier.
[33m9eea282[m Switch range operators ".." and "...".
[33m2fe6987[m [IDE] Annotate 'convenience' in an initializer as keyword.
[33md3f7c13[m Allow @objc on local-scope classes.
[33m7959032[m IRGen: Work around an assertion compiling ObjC entry points for local classes.
[33m9b4c9cc[m Print @UIApplicationMain.
[33m09d8d68[m Allow at most one main class per module.
[33m33e5c2d[m [stdlib] Replace the dashes in the comment with parens, as suggested by DaveA.
[33mb70c125[m [stdlib] Remove non-ascii dash character from a comment.
[33m8f67532[m Weaken ordering requirements in test/Frontend/dependencies.swift.
[33m75d0657[m [IDE] Pass the correct range in the document structure for keyword arguments with parameters that have both API and local name. Add a test for the above. This addresses <rdar://problem/16905994>.
[33m6378a66[m Debug Info: Emit the remaining pointer types with pointer size.
[33m5379d0b[m Debug info: Be a little smarter about skipping %swift.refcounted* arguments.
[33m2252263[m Debug Info: Emit archetypes with the size and alignment of a pointer.
[33m067f810[m Parse and do basic checking for @UIApplicationMain.
[33m2d1f1b1[m Fix ConstructorDecl::getSourceRange() to return the signature range if there is no body, not the range of its containing type declaration.
[33m2877bd0[m Add support for dependency file generation with -emit-dependencies.
[33m67f319b[m [Driver] Hook up -emit-dependencies option, but don't do anything with it yet.
[33m80a85d3[m Improve handling of repeated keyword arguments missing at the call site.
[33m1a63564[m Debug info: Enable emission of multi-value explosions function arguments that are not described by a debug value instruction. rdar://problem/15035486
[33m709e577[m Fix REPL test failures:
[33m994aa26[m @NSManaged implies that a variable does not need an initializer
[33m63edc38[m Use a bit to avoid performing early declaration attribute validation more than once.
[33m8478cd9[m Add a mirror for NSSet Part of the playgrounds effort
[33m5977f42[m Add code to initialize anything we need in the special debugger function for LLDB expressions, REPL and playground.
[33med7c05e[m [sil-combine] Disable unchecked_take_enum_data_addr promotion to unchecked_enum_data when the enum type is address only.
[33mfcc346c[m Run clang-format on IRGenDebugInfo.*
[33mbb9be80[m Debug Info: Factor out createPointerSizedStruct for leaf types that have mangled names.
[33medb2c0c[m Runtime: Handle dynamic casts to AnyObject.
[33m7bedd5c[m Recognize colliding imported constructors properly.
[33m2db437c[m Update release notes.
[33m03d8c14[m Heap: walk the threads when running leaks and ignore the per-thread caches
[33m49a5348[m Heap: DaveP says that this is not needed
[33m0222047[m [stdlib] A couple of Array changes...
[33m34edde4[m [stdlib] Array bridging/bridge-cast entry points
[33mc084578[m Remove an accidental commit.
[33mf11e992[m A local cannot be captured before it is declared <rdar://problem/16747992>.
[33mbcab5a9[m [arc-opts] Clear the state of the optimizer when we see autorelease push/pops.
[33m93f423d[m Debug Info: To make life easier for LLDB, emit inout types as structs with an appropriate mangled name. rdar://problem/16900833
[33mf914b05[m Fix typo in test.
[33md866316[m [specializer] Teach the specializer how to handle indentity {unconditional_checked_cast,checked_cast_br} super_to_archetype.
[33m5d95457[m Disallow operator overloads that require implicit conversions for all arguments (rdar://problem/16785445)
[33m1e9f160[m Remove my accidental commit in r18010.
[33m2fb6e3f[m Test for // rdar://16726444
[33mdd92b14[m IRGen: Fix getExtraInhabitants codegen for no-payload enums.
[33m9cfb375[m Debug info: Fix a struct layout bug with zero-sized members. <rdar://problem/16898394> Library won't build with optimization off
[33ma8d814c[m Heap: Make leaks and friends more accurate
[33m699ccd2[m Heap: dead code deletion
[33m185edf0[m Fix what looks like a typo to fix the buildbots.
[33m01a5784[m Remove the unused header that snuck in.
[33md5a9c2a[m Only supersede initializers with other imported initializers when the types match.
[33m9ecb074[m Make the "superseded" diagnostic better.
[33mbca1634[m fix rdar://16889886 - Assert when trying to weak capture a property of self in a lazy closure
[33mcf4fbe3[m Heap: Checkpoint leaks/heap/vm_map support
[33mde9a0c8[m stdlib/printing: remove ReplPrintable protocol
[33m95168bb[m Temporarily soft-fail this assertion. <rdar://problem/16898394> Library won't build with optimization off
[33med68ba8[m stdlib/printing: add Streamable conformance to CString, and DebugPrintable conformances to String and CString
[33m4f921ad[m Unbreak iOS build
[33m2cc8fe4[m stdlib/printing: replace four printing systems with one new one
[33m6aa21dd[m Increase the number of iterations in the benchmark to 10k
[33m91841ac[m Increase the inliner threshold.
[33mff5601a[m Disable the GlobalOpt pass that hoists initializers because it regresses the Phobebook benchmark.
[33m0d426bb[m Change the linkage kind fron PublicExternal to Shared to make IRGen generate the linkonce_odr linkage type. Using linkonce_odr will make sure we use the symbol from the executable and not from the dylib.
[33m0b89fd4[m Fix bad grammar in diagnostic (<rdar://problem/16883149>).
[33mcdf98aa[m The bang is also unnecessary
[33mab66c46[m Release notes for ` -> # and factory-methods-as-inits.
[33m09ec809[m hopefully fix a test on the buildbot.
[33ma19a0d1[m [IDE] Make CodeCompletionContext::sortCompletionResults() sort by full name. This addresses <rdar://problem/16877804>.
[33m359779d[m [Driver] Fix use-after-free caught by buildbot.
[33md7b44f2[m Correctly substitute field types when building debug info for specializations of generic types.
[33m0f758c5[m [specializer] Teach the specializer how to handle identity existential->archetype casts.
[33m5d2ad6c[m [ClangImporter] Import known property accessors with consistent types.
[33me99379b[m Revert "[performance-inliner] Up inline threshold to 225 so that we are at least as aggressive with inlining as LLVM is."
[33m11947c4[m [test] Change UTF-16 test to not mention the language name.
[33m74bc750[m [PrintAsObjC] Use #import for the underlying module (instead of @import).
[33m795f568[m Start diagnosing the use of '`' rather than '#', with a Fix-It.
[33m1efd9fb[m Start accepting '#' in addition to '`' to mark a keyword argument <rdar://problem/16891828>.
[33mc41f0e0[m Make # a real punctuator.
[33m72c60f1[m [performance-inliner] Up inline threshold to 225 so that we are at least as aggressive with inlining as LLVM is.
[33m2c373a8[m [sil-module] Change DEBUG_TYPE to "sil-module" from "libsil"
[33me519151[m [linker] Link in closures references via function_refs during mandatory inlining.
[33m9c0bd85[m Add an ObjC version of RC4
[33mf1073ff[m Remove packaging options from buildbot-script.
[33m93f7ac2[m Fix the name of the initializer for initWithObjectsAndKeys.
[33m37921cd[m Pass null through fixupParserResult().
[33m73528dc[m Enable importing factory methods as initializers by default.
[33m1131d3e[m Fix string constant check for "Swift".
[33m2702c94[m When determining whether an imported initializer is a designated initializer, use the context it's being imported into.
[33m01c2c7f[m Fix camelCase renaming accident. NFC
[33mfad8747[m Adjust test cases.
[33md3f2e38[m Link SwiftRuntimeTests against the entire stdlib instead of runtime.a alone.
[33mbaae246[m Debug Info: Do not crash when the size of a piece cannot be determined.
[33m1e5b911[m More array casting work: - Continue adding support for checked downcasts of array types (rdar://problem/16535104) - Fix non-bridged array conversions post-r17868 - Fix rdar://problem/16773693 - Add tests for NSArray coercions to and from Array<T>
[33m9598880[m Forward SwiftObject's -description to use reflect(x).summary.
[33m132c646[m [build] Find arclite w.r.t. the default toolchain
[33m806d2de[m Runtime: Fix an oversight with the previous gmalloc fix
[33m504701b[m Runtime heap: defer to gmalloc when gmalloc is loaded
[33m932d08d[m [update LLVM+LLDB] Switch to the custom DW_LANG_Swift specifier. Retire DW_TAG_restrict in favor of DW_TAG_APPLE_metatype.
[33m14a6697[m Add an attribute marking the "Debugger function" lldb uses for emulating local contexts.  Get the parser in consultation with the DebuggerClient to handle moving persistent declarations from the debugger function to the source file.
[33m6feb97b[m Make a CMake cache entry for ARCLITE.
[33m4dad2d1[m Use the allocating constructor when delegating to a factory initializer.
[33mf618a98[m Runtime: Remove swift_getClassMetadata()
[33m02fb8b3[m SILGen: Don't overrelease arrays and dictionaries after bridging.
[33mb282c13[m consolidate IBOutlet tests into one file.
[33m0e0c1cf[m release note that weak pointers work with both optional types.
[33m2eb9259[m move test/basic/attr to test/attr, and move the sole name binding test in test/basic/lookup to the test/NameBinding directory.  We now have no basic tests, just advanced ones :-)
[33md751b58[m remove the prohibition of weak pointers being implicitly unwrapped, and update some testcases I missed on previous commits.  This fixes: <rdar://problem/16792095> QoI: misleading error message when trying to make a weak property be implicitly-unwrapped optional
[33m657c04d[m add more tests for IBOutlet, and restore a null check I accidentally dropped that they catch.
[33m4ac6621[m rework validation of IBOutlet element type checking to be recursive, fixing a problem where we didn't allow arrays of strings as outlets.  Also, add a sema testcase for the IBOutlet attribute.
[33me076f10[m rearrange checking for IBOutlet to follow the usual vardecl attribute pattern.
[33mfeddbc1[m fix <rdar://problem/16880044> unowned let properties don't work as struct and class members
[33m2c28ec9[m teach silbuilder that stores of weak and unowned pointers don't affect strong refcounts, allowing more retains and releases to be avoided when manipulating unowned and weak properties.
[33mf369a22[m Remove the isConvenienceInit hack from SILGen
[33me2e36f2[m rework OwnershipComponent: instead of being the root of an lvalue, make it be an interior node that remaps the weak/unowned storage representation to its strong rvalue representation.  This allows it to chain on top of ValueComponent and other memory-addressing things.  NFC.
[33m4b6910d[m Improve the diagnostic when we find an extraneous '()' <rdar://problem/16784814>.
[33ma1812bc[m lazy properties work.
[33m24f06eb[m Rework my handling of @lazy in struct init() synthesization: the underlying storage can be explicitly specified with a memberwise constructor (this already worked) and the presence of the property shouldn't block synth of the default ctor since it is default initialized to nil.
[33m3d69d42[m lazy properties currently don't work correctly when observed, for the same reasons as local properties not working.
[33mc0b5da0[m [please update LLVM] Debug info: Support multi-valued explosions, e.g., tuples and structs that are passed to a function by value.
[33m68fcf04[m Lazy properties don't currently work in non-type-context (e.g. as local variables) because I can't inject synthesized decls into the parent declcontext correctly.  This sux and is fixable eventually, but until I do, reject these with a clean error.
[33m31c1825[m Use the more backward-compatible 'PATH' form of get_filename_component.
[33m27f9691[m generalize createGetterPrototype/createSetterPrototype to work in non-type context's. NFC.
[33m40cd313[m fix a fixme by removing some now-pointless code.  NFC.
[33mc5d96a9[m fix multi-stmt closures, whose bodies may not be typechecked yet.
[33ma412888[m Enhance lazy properties to work with single-expression closures, by reparenting the already-typechecked body of the closure into the synthesized getter's declcontext.
[33m202ee91[m IRGen/Runtime: Use objc_readClassPair to officially register generic classes with the ObjC runtime.
[33m4b752d4[m Trick the driver into getting arclite linked to it.
[33m38a16df[m fix <rdar://problem/16880240> SILGen crash assigning to _
[33mf58d536[m When synthesizing the store to storage from tmp2, make sure to use a memberrefexpr when in a type context.  With this, we can add a non-trivial executable test.  The test verifies that the lazy initializer is called iff the property is read from before being stored.
[33m10db350[m rework how we set up the initializer in a @lazy decl so that the type checker knows not to re-type-check it.  Type checking an already-checked expression leads to all kinds of unfortunate problems.
[33m8689d1f[m Use Optional<T> as the return type Dictionary<KeyType, T> subscript.
[33m65841e8[m reject @NSManaged properties marked @NSCopying, and reject @lazy properties that have a missing or unsupported initializer.
[33m05cb2ba[m This patch does a number of conflated things: 1) Implement sema synthesization of the getter/setter & storage for @lazy properties. 2) Rework has property synthesization works so that the synthesizers call typeCheckDecl   on the stuff they create, instead of having the callers do it. 3) Refactor the synthesized setter portion of addAccessorsToStoredVar out into a    synthesizeTrivialSetter function to mirror how it handles getters. 4) Add a new addMemberToContext helper to handle injection of decls into their parent    declcontext, given that we don't have a proper model for IterableDeclContext's. 5) Use isClassOrClassExtensionContext() a bit more 6) Adjust the synthesized member-wise init method of a struct to work with @lazy    initialized fields.
[33m6339972[m use the new isClassOrClassExtensionContext() method instead of reinventing it locally in this file. NFC.
[33mc18c93b[m remove semicolons from a comment. NFC
[33m49d4fca[m Rename UTF16Scalars to UnicodeScalarView.
[33m35ca554[m [IDE] Don't include name range in the structure for non-api parameters. Update the test accordingly.
[33mab7725a[m introduce a new DeclContext::isClassOrClassExtensionContext helper method, which will consolidate a bunch of places that this is used.
[33mbd63699[m no really, add a testcase for @NSManaged sema issues.
[33med76b03[m Several small things:
[33m6e83fde[m Suggest ".self", not ".Type" (the old name) for +class remapping.
[33m4479eb8[m Import +class and -class as unavailable, suggesting ".type" and ".dynamicType" instead.
[33m43cc4a2[m IRGen: Instantiate ObjC metaclasses and rodata with generic classes.
[33m9744e23[m small cleanups
[33m50075eb[m reject the @lazy attribute on globals, static fields, and protocol requirements.
[33mf86b699[m restructure the AttributeEarlyChecker a bit to avoid some boilerplate, NFC.
[33m83a15ef[m Add a python RC4 benchmark and change the Swift implementation to match
[33md79646e[m parse and start type checking of @lazy attribute.
[33m057d998[m Move the phonebook benchmark into a new directory
[33m40abc88[m Revert r17654 because of a regression in the phonebook benchmark. See rdar://16876395.
[33m46a2939[m try to unbreak the bot.
[33m77ca640[m Add -objc-bridge-array option to import NSArray* as (AnyObject[])!
[33m5159201[m Bridge T[] to NSArray when T is bridged to Objective-C.
[33m9c03b4f[m Miscellaneous cleanups for array bridging in the type checker.
[33m818595f[m explain the full form of closures more.
[33m2dc5ed5[m runtime: add hacks for stdlib: runtime calls to perform casts to existential types that are protocols
[33m583e25a[m capture lists seem to work, add them to the release notes.
[33m780d0ee[m Teach SanitizeExpr to not walk into all of my carefully set up PatternBindingDecls in capture lists and strip off the loadexprs that are there.  This resolves the type checker issues that were afflicting weak captures and a couple of unowned cases.
[33m527da39[m now that unowned pointers basically work with closures in general, wire us SILGen support for capture lists and add testcases for stuff that works.
[33mdc3ca11[m Loosen the constraints on bridging Dictionary<K, V>.
[33m918f373[m [AST] For USR generation, ignore symbols coming from the builtin module.
[33m761c627[m Rework SILGenFunction::emitInitializationForVarDecl to make sure that weak/unowned global variables get emitted with a ReferenceStorageInitialization.  This fixes test/DebugInfo/attributes.swift
[33m293bff4[m Allow and bridge Dictionary<K, V> in Swift-defined @objc entry points.
[33m512d5ea[m Fix: <rdar://problem/16877510> capturing an unowned let crashes in silgen
[33mc6c6c6e[m [Driver] Preserve .o files when compiling with debug info.
[33m63ebd0e[m [ClangImporter] When creating the FileID for the header import buffer, set the main FileID as include location.
[33m087e59e[m [Driver] Delete temporary files unless -save-temps is passed.
[33m2481984[m [Driver] Drop "DriverOption" flag from the option tables.
[33mef1c1a8[m Import NSDictionary* as Dictionary<NSObject, AnyObject>.
[33m2b601c6[m Implement: <rdar://problem/16877304> weak let's should be rejected
[33m368fdd6[m rearrange the order in which we set up initializations, so that 'unowned let' initializations don't drop their ReferenceStorageInitialization transformation.  This defines away another class of problems related to weak and unowned pointers, and allows us to remove a hack added to paper over rdar://16681656.
[33mf83d63a[m Keyword arguments diagnostics: keep buffers alive until the end of the diagnostic.
[33m5db1372[m rename couldReduceRefcount -> couldReduceStrongRefcount and teach it about some new instructions that don't mutate the strong refcount.  This allows us to avoid retains and releases around weak and unowned pointer manipulations, for example for this:
[33mc61b347[m Make Dictionary conditionally bridged to Objective-C.
[33mf8ce2a3[m Fix <rdar://problem/16871284> silgen crashes on weak capture
[33me53e815[m Add missing ObjectiveC in SILGen's bridging SDK
[33m3dda4c9[m SILGen: Reference ObjC initializers and factories through foreign-to-native thunks.
[33m4de43af[m PrintAsObjC: Print Dictionary<K, V> as "NSDictionary *"
[33m104cf17[m SILGen: Bridge Dictionary<K, V> <-> NSDictionary in Objective-C thunks.
[33m335c605[m Allow one to disable verification of a bridging function's parameter/result types.
[33m6bbbda2[m Make the structure of SILGen's "fake" bridging SDK look more like the real thing.
[33m8aa65c0[m teach the AST walker to walk into the capture list of closure exprs, teach the type checker to type check them, tweak the ast dumper to dump out something nicer.
[33mcc0fa4e[m [AST] Ignore unnamed vars for USR generation.
[33m6f473fe[m Added a new entry point to the type checker to allow it to type-check any new external methods that appeared since type-checking last occurred. This allows the playground transform to add new dependencies on external functions.
[33m19aeaf9[m Fully embrace ParamDecls instead of AnyPattern at function creation time, thus removing the need to create param decls at SILGen or Sema.
[33ma5eeb96[m [Parser] Create ParamDecls even for unnamed parameters.
[33m266cd97[m AST printing: print native documentation comments
[33m7949d17[m [IDE] Provide call structure data and keyword arguments in document structure. This will be used to highlight function calls and declarations for QuickHelp and Jump-to-definition. Add test for the above. <rdar://problem/16862981>.
[33mc99ace1[m [Frontend] Drop "-foo=" option variants from -frontend options.
[33m257ee03[m [driver] Use the target triple's OS version as the linker's min OS version.
[33m02f8edb[m Revert "Import 'NSError**' in parameters as typealias 'NSErrorResult'."
[33m3bebef4[m Pass options to LLDB's REPL.
[33mdb872f6[m [Frontend] Make CompilerInvocation::parseArgs additive.
[33m1352536[m stdlib: move REPL hooks to private namespace
[33mb47f0e9[m Code completion: constructor and function call patterns: don't add top-level right after the left paren if the function or constructor requires a keyword for the first argument
[33m72e68f7[m Increase the number of bits in KindAndValue.
[33m614caf2[m -autolink-force-load: use weak instead of linkonce for FORCE_LOAD symbols.
[33m099c80b[m NoReturn folding: Set unreachable uses in different basic blocks to undef
[33m0695e0e[m SILGen: Scope bridging temporaries in allocating inits until after the initializer method has been called.
[33mc1daf3f[m Use perfect forwarding for diagnostic arguments.
[33m666da96[m [IRGen] return false in visitLeafType when the two types are equal.
[33me733f1e[m Lexer: Accept variation selectors as continuations of operators.
[33m8c41b1d[m Under -objc-bridge-dictionary, allow Dictionary<K, V> in an @objc entry point.
[33m59d545d[m Add frontend option -objc-bridge-dictionary.
[33m9b1f4b6[m [specializer] Do not replace generic calls in transparent functions to shared specialized functions.
[33m24aa500[m Adjust diagnostics now that weak/unowned aren't attributes
[33md6957d0[m Make existential-to-concrete metatype casts work.
[33md8a27c6[m Use AddLastArg properly.
[33md1e8be5[m Turn -implicit-objc-with on by default <rdar://problem/16795899>.
[33md410bd0[m [CMake] Re-enable -autolink-force-load to cause the buildbot to fail.
[33m216d8b9[m fixup
[33m737703b[m [Driver] Drop -working-directory option.
[33mc941322[m [Driver] Clean up Options.td, including adding -version and -h.
[33ma698fda[m teach the AST walker to walk into the capture list of closure exprs, teach the type checker to type check them, tweak the ast dumper to dump out something nicer.
[33mcfad645[m Add more support for various safety checks.
[33mf3fa9a8[m Check off: <rdar://problem/16807153> remove parser support for the "-> Self" syntax
[33m4e0323f[m Add release notes about removal of single-quoted literals
[33m43fa916[m Don't accept single quoted character literal anymore
[33m06f18b3[m Drive-by: pass along -no-strict-keyword-arguments.
[33m9da6df2[m Add -no-implicit-objc-with for when we switch the default <rdar://problem/16795899>.
[33mb6e915e[m Introduce "with" into method names that have keyword arguments as their first argument.
[33m90726df[m When the first argument of a method name is API, add it to the first selector piece of the @objc selector.
[33m077c0a9[m [release-notes] Update date.
[33m0e0e151[m SILGen: Reabstract metatypes to thick representation when checked-casting them.
[33m0de9be2[m Remove dead function.
[33ma688897[m Add release notes about Dictionary bridging
[33m51591fa[m stdlib/Dictionary: add implicit conversions:
[33m392f6a8[m stdlib/Dictionary: add fast enumeration tests in Objective-C
[33mb92b646[m Heap: avoid reentrancy when Instruments enables ObjectAlloc
[33m33afb68[m Rename @availability platforms to match Build configurations.
[33medd89bf[m Move definition of @availabilty platforms into Attr.def, and change AvailabilityAttr's representation of platform.
[33mfba2e4b[m Add overlay covers for DISPATCH_QUEUE_CONCURRENT and DISPATCH_SOURCE_TYPE_*.
[33m0ba9e39[m Fix ytpo.
[33mbe7e665[m [IDE] Don't print inherited types and conformances that start with underscore, if PrintOptions.SkipLeadingUnderscoreDecls is enabled.
[33m2426134[m improve hte AST representation of capture lists to build VarDecls and PatternBindingDecls, and inject the vardecls into the name resolution scope while parsing the body of the closure.  This allows references from the body of the closure to be resolved to the capture list, e.g. in cases like the testcase.
[33m6607f6c[m Demangler: Demangle Unicode symbol names.
[33m786ab59[m Revert "[CMake] Build the SDK overlays with -autolink-force-load."
[33m692ef04[m SILGen: Always dispatch Swift class witnesses natively even when @objc.
[33md910d51[m [sil-combine] retain_value, release_value of an enum with payload where we can see the enum is equivalent to retain_value, release_value on the enum payload.
[33mac57959[m Complain about first keyword arguments in methods/initializers that start with "with".
[33m20fb451[m [CMake] Fix dependencies for swiftDispatch.
[33m90c5fbe[m [CMake] Build the SDK overlays with -autolink-force-load.
[33mdde2a8b[m Serialize and honor whether a particular library should be force-loaded.
[33m41700b0[m Add a new (hidden) option -autolink-force-load.
[33m4f07769[m [stdlib] Dispatch depends on Darwin.
[33me02f42a[m Debug info: make sure we're using the internal DW_LANG_Swift enum for now.
[33me3d2c7c[m Handle implicit conversions in the playground transform, so that assignments to properties of superclasses are logged properly.
[33maa70a16[m [load-store-opts] Track, perform load forwarding, and eliminate multiple stores.
[33m4ddcc41[m Add an interpreter test that we can witness Swift protocols with objc methods.
[33m6deba37[m Enable strict keyword argument checking by default <rdar://problem/14462349>.
[33ma23bafc[m Introduce -no-strict-keyword-options in the frontend "just in case".
[33mfcd0816[m SILGen: Emit witness function refs through 'emitGlobalFunctionRef'.
[33m9fee32d[m [load-store-opts] Do not invalidate stores if AA says that an instruction does not alias the store's destination conservatively.
[33mc8c683d[m Renable check for int_trap dependent on optimized builds
[33m02c42cd[m [load-store-opts] Refactor out special cases for strong_retain, cond-fail, and dealloc_stack into a helper function call isLSForwardingInertInstruction.
[33m5c3ebfc[m [stdlib] test file rename missed in r17722
[33m4caeb49[m Missed a heading.
[33mfa74bfc[m Add a proposal for the C pointer language model.
[33m06731bb[m Heap feedback: rename _swift_zone_init_ to _swift_zone_initImpl
[33m05a283a[m When dealing with argument tuple conversions, keep the parentheses around
[33mbbf15af[m Clean up our handling of arguments and types in the REPL under -strict-keyword-arguments.
[33mb12f3f8[m Add TypeBase::getWithoutParens(), which may be useful outside of diagnostics.
[33m8b0c9d4[m Heap: Let Instruments ensure that the heap is setup correctly at launch
[33m47eea01[m [stdlib] Eager non-verbatim bridging
[33m72606a5[m stdlib/Runtime: allow swift_bridgeToObjectiveC to bridge objc existentials
[33m1dce36e[m Make 'T.self is U.Type' work.
[33mf18dbbe[m [load-store-opts] Refactor load forwarding into its own method LSBBForwarder::tryToForwardLoad.
[33mdf44122[m [load-store-opts] Refactor out dead store elimination into LSBBForwarder::tryToEliminateDeadStore.
[33md4698e3[m [load-store-opts] Move invalidateAliasingLoads onto LSBBForwarder and remove unneeded arguments.
[33mf510d16[m [load-store-opts] Refactor out call to recursivelyDeleteTriviallyDeadInstructions -> LSBBForwarder::deleteInstruction.
[33m328dd3c[m [load-store-opts] Refactor/Simplify LoadStoreOpts by including a BBState structure.
[33m1e66774[m [stdlib] swift_isClassOrObjCExistentialImpl fix
[33m0a0dbdc[m Runtime: make the index <-> size functions easier to lookup dynamically
[33m720478b[m Add a URL case to QuickLookObject
[33m1bca09f[m Remove FIXMEs that are already done.
[33m453532c[m Import 'NSError**' in parameters as typealias 'NSErrorResult'.
[33m3a513a6[m Add 'getFoundationModule()' to ClangImporter::Implementation.
[33ma17cec6[m Some test and diagnostic cleanup: - Mine conjunction constraints for constraint failure data. (rdar://problem/16833763) - Rather than crash, add a diagnostic to signify a missing user constraint. (rdar://problem/16747055) I don't have a deterministic repro for this to include as a test, but users hit it from time to time, I'd like to address this issue holistically, and we're hoping that the new diagnostic will help us collect isolated repros. - As promised, remove the temporary "compiler_submit_version" build configuration predicate in time for WWDC. (rdar://problem/16380797)
[33m6389760[m Debug info: Support DynamicSelf type.
[33mc465dad[m Bump VERSION_MINOR for r17675.
[33m160232d[m clarify this comment.
[33mce0e669[m Add _isFast predicate that is true at Ofast
[33mf1d020e[m <rdar://16848707> Add Dispatch overlay with covers for some libdispatch macros.
[33m7de8d31[m [IDE] Syntax color operator decls.
[33m1784315[m [AST/IDE] Keep track of semantic info of imports (resolved module and decls) and report module/decl references via the SourceEntityWalker.
[33mccc23b6[m [IDE] Report module references in type contexts.
[33m1f280bb[m [SILPasses] limit number of iterations to 20.
[33ma9ff0a3[m Migrate the test to manual reference counting.
[33mc800381[m change this to isa<> since we're using a bool return.
[33me489a70[m Switch array default construction to its canonical type sugar form of T[]() instead of Array<T>().
[33m05e9efb[m Don't compile XCTest overlay as being Application Extension safe.
[33m98da27f[m Strip extraneous parentheses from diagnostic output.
[33m16d4b98[m [ASTPrinter] Add more printing options, SkipAttributes/SkipIntroducerKeywords/ArgAndParamPrintingMode.
[33ma842fff[m [Serializer] serialize the parent module of NormalProtocolConformance.
[33mbd62e9d[m [load-store-opts] Keeping performing load store optimizations on a basic block until we no longer eliminate anything.
[33mf3e6b31[m Fix a problem with the type checker trying to create user conversion expressions out of like-types. (rdar://problem/16837295)
[33m017f7e0[m Revert "Emit an error when the user tries to import a submodule."
[33m03d3cf9[m Import the formal type of a property as audited if the corresponding getter method is audited.
[33m51da490[m Compile swift runtime dylibs as being safe for App Extensions.
[33m8aec865[m Update release notes.
[33mc923ae2[m [sil-combine] Eliminate dead thin_to_thick function.
[33md500e40[m Fix <rdar://problem/16843747> Disallow a single semicolon to be used as the only statement within a switch case
[33m709da29[m Implement checks for conditionally bridged types when performing a bridged conversion between array types. (rdar://problem/16540403)
[33mc03b705[m Recognize CF "subclasses" and require CFTypeRef to specifically be 'const void *', not just any 'void*'.
[33me880aac[m Add a convenience routine for searching for a complete word within a camelCase identifier.
[33m6bae711[m Add a test that uses two layers of -import-objc-header.
[33mac59e57[m Emit an error when the user tries to import a submodule.
[33m60c08a2[m Under -strict-keyword-arguments, teach the REPL to create well-formed call expressions.
[33md26f235[m [sil-combine] Eliminate unused unchecked_take_enum_addr_inst.
[33m9aa6ec5[m Be explicit in our use of StringRefs to avoid use-after freed during diagnostic emission.
[33md8831ec[m Print fixes are part of the dump() for a solution to a constraint system.
[33m4e7cee3[m Show notes immediately following a fatal diagnostic, but nothing else.
[33m617da22[m [constant-propagation] An indexing inst that indexes by 0 is a no-op. Teach constant propagation to simplify it.
[33m36cbccc[m Generalize constraint application under -strict-keyword-arguments.
[33m3bd0d69[m Reimplement constraint application for strict keyword arguments.
[33mfd0a78b[m [sil-combine] Canonicalize index_raw_addr byte indexing operations => index_addr object size indexing operations.
[33m4bc0a8b[m SILGen: Change the signature of _convertStringToNSString and _convertNSStringToString not to use inouts.
[33ma3a5447[m Ignore implicit Decls when instrumenting playgrounds.  They don't have source locations inside them so it's not really safe to generate log calls.
[33m48d247d[m Update doc comment for matchCallArguments.
[33m2eedc06[m Begin adding plumbing for the type checker to accept "forward" bridged array conversions.  (rdar://problem/16540403)
[33m5ceecb4[m [serialization] Add a special encoding for the imported header module.
[33m465b083[m [serialization] Serialize the header path used by -import-objc-header.
[33ma0de0e4[m [serialization] Drop swift::serializeToStream and swift::serializeModuleDoc.
[33m20c3535[m [tests] Move mixed-source tests to a subdirectory: ClangModules/MixedSource.
[33me7f29b1[m [SILInliner] stop inlining callees if it is called many times.
[33m1f430cb[m [Frontend] Simplify CompilerInstance::performParseOnly() by only supporting parsing a single file.
[33m69464ac[m Parser/code completion: don't drop code completion bits
[33m8802bbc[m Factor out the argument/parameter matching of matchCallArguments(). NFC
[33m63c5a14[m stdlib: factor out _SwiftNSFastEnumerationState initialization
[33m41a6c97[m Generalize call argument/parameter patching to work on tuple type element arrays.
[33m196cdc3[m Place -Wconditional-uninitialized by storing 'Length' in an optional.
[33ma4f8afc[m Using an optional for 'SILDeclRef::Kind' value (-Wconditional-uninitialized).
[33m3d3491b[m Initialize 'vwtableValue' to null (-Wconditional-uninitialized).
[33m2b2b138[m Placate -Wconditional-uninitialized by using an Optional type, forcing a runtime check for initialization.
[33m3b4b300[m Add some default initializations to placate -Wconditional-uninitialized.
[33m0b2c23f[m Remove special printing of ImplicitlyUnwrappedOptional<T>.
[33m2e18d8a[m Reenable the GlobalOpt pass.
[33m17c3bae[m [IDE] Enhance SourceEntityWalker to provide callbacks for the keyword arguments of a call expression.
[33m8f9aeec[m implement <rdar://problem/16835718> Ban multiple trailing closures
[33m40a8fda[m inline hasExprCallSuffix into its two callers now that it is trivial. NFC.
[33md2a604a[m Remove trailing closure parsing from 'parseExprCallSuffix'.  This is leftovers from one of the old selector syntaxes.  The general expression suffix parsing loop handles trailing closures in a superset of the cases that this code does.  NFC.
[33mfa0afad[m Add a python version for the phonebook benchmark
[33m9afa033[m [Frontend] Make sure we don't do any module imports during parse-only pass.
[33m796afac[m [Frontend] Rename CompilerInstance::performParse() -> performSema() to make it more clear that it is doing parsing + type checking.
[33m1362844[m [Frontend] Separate parse-only functionality into its own function, CompilerInstance::performParseOnly().
[33meeea4ca[m [devirtualizer] Handle covariant return types correctly.
[33m91d6140[m Rename a couple of variables for consistency.
[33mb0aa5e3[m Debug info: Do not emit static variables for metatypes for global class definitions.
[33m8d21def[m Change the demangling of _TtSf from Swift.Float32 to Swift.Float; and that of _TtSd from Swift.Float64 to Swift.Double There has been a shuffling of which are structs and which are typealiases - the demangler should emit the struct names
[33m72c6c11[m Try to make ObjC faster
[33m8d7236f[m [SILSerializer] keep looking for a SILFunction when we find a declaration.
[33mbb8738e[m [devirtualization] Fix up devirtualization of witness methods. Re-enable devirtualization of specialized witness methods.
[33mf4f8e7c[m [ClangImporter] Add a special case for AVVideoCompositionInstruction.
[33md9fc1c4[m Treat AnyObject conformance for an archetype or existential specially.
[33mbaf7312[m Remove unused header from devirtualizer.
[33m9ba37a0[m [PrintAsObjC] Print imported CF types using their typedefs.
[33m07936a7[m [PrintAsObjC] Handle briding *Pointer types.
[33mad386cf[m [PrintAsObjC] Print Array<T> as NSArray *.
[33m5e53c3a[m Allow IBOutlet to appear on properties of array type.
[33m76a27e1[m Update a stray diagnostic that still included "unchecked".
[33mde4c0ee[m Simplify a check to see if a particular struct is Swift.String.
[33me76601b[m Fix 80+ violations. NFC.
[33m2a80687[m [devirtualization] Remove unneeded SILDevirtualization class and perform a bunch of cleanups. NFC.
[33m195e49e[m [devirtualization] Simplify how we iterate over functions in the module.
[33m45ca455[m [devirtualization] Simplify/refactor optimizeClassMethod.
[33mffe31fa[m [devirtualization] Verbose names => less verbose names.
[33medb4946[m Begin updating type checking of array upcasts to conform with the new spec.
[33m05c80a8[m AST: Avoid instantiating all members when implicit destructors are inserted into classes.
[33m87b12ab[m Fix a typo
[33mfb299a4[m [LoadStoreOpt] make sure Loads do not hold deleted SILInstructions.
[33md22ffa8[m Re-lazify the addition of equatable conformances to imported enum types. (rdar://problem/16808612)
[33m9336c8f[m Updated the playground transform to instrument methods of classes, structs, extensions, etc.
[33m9450c28[m test case comment typo.
[33m5dc505a[m Reenable -global-opt after teaching it to avoid hoisting initializer calls unless they are inside loops.
[33m904cccf[m Fixed a bug where the playground transform tried to initialize variables using lvalues.  Instead it now uses a LoadExpr to convert the lvalue to an rvalue before using it as an initializer.
[33mec7d2ec[m Release note the CF import change.
[33m87bf471[m Turn on -import-cf-types and fix the standard library.
[33mcbd6626[m Import CFTypeRef as AnyObject, but wrap it in Unmanaged<> in all the situations that we would wrap e.g. CFStringRef.
[33ma83e574[m Import CF types as managed pointers when they are:   - the type of a const global variable   - the type of a parameter, always   - the return type of a function that has been audited     or has an explicit retained/not-retained attribute   - the return type of an ObjC method that has an explicit     retain/not-retained/inner-pointer attribute
[33mdea1457[m [stdlib] Array doc adjustment
[33m58bc005[m Use the ruby <=> comparator for strings.
[33m3e917be[m Use full DeclNames for dynamic lookup of calls.
[33m083ac18[m [inst-simplify] Eliminate identity unchecked_addr_cast, unchecked_ref_cast.
[33m4d75132[m [sil-combine] Canonicalize unchecked_addr_cast, unchecked_ref_cast of a subclass to a superclass into an upcast.
[33m20bda12[m Give up and restrict the deserialization tests to OS X for now.
[33med4ad29[m [ClangImporter] Don't bother running lookups on submodules.
[33m57e771c[m [Parse] Make Token::isAny and Token::isNotAny variadic.
[33m717966f[m [Parser] Emit error + fixit if 'inout' appears after the parameter.
[33m07a1a0b[m Add in test for r17516.
[33mb56c31d[m [sil-combine] convert_function simplification.
[33m502a9b3[m Move -print-clang-stats to the no-driver-option section.
[33m8a56674[m Remove unused function.
[33me51429e[m ClangImporter: Guard loadAllMembers with ImportingEntityRAII.
[33m4a09c9f[m Add a -print-clang-stats frontend flag.
[33m838d4ea[m Add a really stupid script to just time parsing all of the Interpreter/SDK tests.
[33m9f169ee[m Convert the Ruby phonebook benchmark to english firstname+lastname.
[33m3a90e8e[m Convert the phonebook benchmark to fistname+lastname comparison.
[33m26a3594[m Keyword arguments: handle scalar-to-tuple conversions better.
[33m9e40796[m Keyword argument QoI: properly compute all missing/extra arguments
[33mfcb3b0e[m Rework capture list parsing and generalize it.  Now the preparse is much fuzzier, and the real parse is stricter.  Also, generalize this to support the full "unowned name = expr" syntax in the capture list.
[33m0ceb7ab[m introduce new Token::isAny and Token::isNotAny methods which are helper predicates to see if the token is any of a set.
[33mf053c84[m [sil-opt] Add -target option, and use it in SDK deserialization tests.
[33m3606513[m [stdlib] Factor out _fixLifetime
[33m0c46eb8[m [ClangImporter] Handle decls declared in imported headers.
[33md14b779[m [deserialization] Remove -I from deserialization tests and re-enable Foundation/Darwin/ObjectiveC test per Jordan's request.
[33m4c19605[m [deserialization] Add in appropriate REQUIRES for deserialization tests.
[33m7f29548[m [stdlib] Re-alphabetize CMakeLists.txt
[33m23f98db[m [stdlib] A .utf16 property for String
[33m6234d10[m Change AssertConfig option name to assert-config
[33mbaea80e[m Closures don't have keyword arguments.
[33m11441ab[m Rather than special-case NSString conversions in the type checker, utilize the _BridgedToObjectiveC protocol conformance on the type being converted if available. This will allow us to more broadly accommodate bridged conversions between types.
[33mc20f08c[m [stdlib] Don't bake refcounting details into apps
[33m5fe453c[m Silence unused variable warning
[33m3ba7225[m Fix the driver's handling of the AssertConfig option
[33m4678087[m Add a separate .Sprite quickLookObject type for SpriteKit objects We still want to send out image data for those, but UI consumers need to be able to differentiate - should they so desire - a true image from a software sprite rendered in pictorial form
[33mfce2851[m [deserialization] Enable dumping of modules/overlays that reference SDKs by fixing latent deserialization bug.
[33maef716e[m [sil-mode] Color "let" like we color "var".
[33m5556746[m [stdlib] Array bridging specification tweaks
[33mc76da32[m runtime: Cache the results of swift_conformsToProtocol.
[33m829d3e6[m [ClangImporter] Handle macros that use bitshifts, like "(1 << 0)".
[33mac15f94[m [ClangImporter] Import macros that use ~.
[33m9e61c4b[m [ClangImporter] Import NULL, nil, Nil, and ((void*)0) as Swift.nil.
[33m3c71c4e[m Compute useful effective full names for property accessors, too.
[33m1b2dfb7[m Hack ClangImporter to *always* import "description", "debugDescription", and "hash" as properties.
[33m0306670[m Type parsing: don't create the identifier '_'; use Identifier().
[33m0bab49d[m use consumeIdentifier a bit more to simplify parser logic, NFC.
[33md230228[m store the capture list of a ClosureExpr in the AST and print it out in the AST dumper.
[33m254e574[m Strict keyword arguments: allow trailing closures in scalar-to-tuple conversions.
[33mad0e63b[m fix <rdar://problem/16189360> [DF] Assert on subscript with variadic parameter
[33m84ae58d[m [IDE] For the syntax structure walker report ParamDecls as well.
[33mdfa772d[m [AST] Set the source range of ParamDecl as the argument+parameter range and keep track of its parent pattern.
[33mc24991c[m Fix <rdar://problem/16798323> Following a 'break' statment by another statement on a new line result in an error/fit-it
[33m92af326[m generalize consumeIdentifier to work with self and Self.  Use it in a few more places to simplify code.  NFC.
[33md255983[m Clang importer: synthesize fromRaw/fromMask w/o any keyword arguments.
[33mbafeb84[m Generate unique type metadata for foreign classes.
[33mb6831b0[m Extract a function to create a global string constant for a type mangling.
[33m2b969c4[m Track whether a class is "foreign" in the AST.
[33mc37a909[m Start building the standard library with -strict-keyword-arguments.
[33m54f4c81[m When building string literals, make the argument names match up with the protocols.
[33m22274e8[m When we fail to diagnose an issue with Fix-Its, go directly to diagnostic fallback.
[33me79cd70[m Reapply "Revert "[devirtualization] Re-enable devirtualization of pure inherited protocol conformances with a new refactored implementation and a better test.""
[33m67cb75e[m [irgen] When emitting code for the JIT, do not emit available external witness tables.
[33m1fe794b[m Don't create keyword arguments for the value constructors of imported enums.
[33m1e7d7fb[m Revert "[stdlib] Array bridging specification tweaks"
[33mecb7612[m Strict keyword arguments: handle trailing closures harder.
[33m545eb3b[m Strict keyword arguments: fix locator for conversions.
[33m4248408[m [ASTPrinter] Add an option to always print the keyword argument and the parameter, even if they are the same.
[33mf514d88[m [ASTPrinter] Remove PrintOptions option that is a leftover.
[33m5ccee15[m ReST unittests: remove an empty test array, it is causing a -Wzero-length-array warning
[33ma86aecd[m [stdlib] Array bridging specification tweaks
[33m502e663[m inline parsePatternIdentifier into its only caller, and simplify the result.
[33mcaf5bc4[m [IDE/CodeCompletion] Ignore the internal members of Optional, like getLogicValue() and getMirror().
[33ma039bd5[m Keyword arguments: don't require keywords for trailing closures.
[33m8f2b5a0[m [IDE/CodeCompletion] Remove the space before a BraceStmtWithCursor chunk, if we are going to ignore it then the space is noise.
[33mee28979[m [IDE/CodeCompletion] CodeCompletionString::getFirstTextChunkIndex() should return the chunk index where the symbol name begins.
[33meb7a914[m Bring keyword arguments to subscripts.
[33m88e841c[m Mis-ordering of cases - thanks Joe!
[33mcb53af1[m Add a View tag to the QuickLookObject enum This tag is meant to trade in image data, but be explicit about the fact that this is a "screenshot" of a UI view rather than a plain ol' picture
[33ma0fa68b[m [IDE/CodeCompletion] Expose the getFirstTextChunk() function via a CodeCompletionString method.
[33m5f24181[m [IDE/CodeComplete] Create a separate chunk for the 'override' keyword.
[33m340e947[m Keyword argument QoI: use typo correction to help match keyword arguments to parameters.
[33m3353e15[m [runtime] Don't free() a static empty string.
[33mcb94a2b[m [runtime] Use asl_log() instead of asl_log_message() to log to system console.
[33m07fedc7[m Defer erasing instructions in unreachable blocks.
[33m03a22fc[m Fix a small issue with simplifying unchecked_enum_data.
[33m1a7e648[m [IDE/CodeCompletion] For override completions, separate the introducer keywords like "override func" in a new chunk kind, so that we can sort/filter based on the name of the function.
[33m98a359b[m Keyword argument QoI: diagnostic missing/extra arguments directly.
[33m1262105[m Start parsing capture lists in closure expressions.  Still much work to go.
[33m7f2fa7f[m [IDE] Filter out attributes like @objc and @availability when code-completing overrides.
[33m8f444a4[m simplify some parsing logic by using Token::isIdentifierOrNone more, and rearrange some closure parsing logic to tidy it up, NFC.
[33md83289c[m the 'destructor' keyword got renamed to 'deinit' a long time ago, remove parsing and fixit support for 'destructor'.
[33md3df74d[m rename test
[33mbf66614[m Finish <rdar://problem/16688592> Change "-> Self" syntax, and introduce a new "convenience" context sensitive keyword
[33m2427e36[m Introduce a new "convenience" context sensitive keyword, which can only be used on init decls, with the same semantics as "-> Self".  Switch the ast printer, and fixits to use it.
[33mdd6b0f7[m [stdlib] More Array doc updates
[33mbb66d6d[m [IDE] Don't show '@transparent' in the module interface.
[33mc0e69b8[m [Printer] In PrintOptions, add a general 'exclude attributes' list for the attribute kinds we don't want to print.
[33mc6448c3[m Update release notes.
[33m9151996[m [IDE] Don't show "import SwiftShims" in the stdlib interface.
[33m86df649[m Fix <rdar://problem/16797372> Bogus error: self.init called multiple times in initializer
[33m62f9932[m Accept an Identifier instead of a StringRef in the new "could not find member" diagnostic.
[33m4f7a3d4[m Start enforcing strict keyword argument usage and ordering under -strict-keyword-arguments.
[33m76523f7[m move a note up, it didn't make the submission cutoff.
[33m3bdd781[m [release-notes] Add new section.
[33m96afbe7[m Remove "expression does not type-check".
[33mab576bb[m The constraint solver should try to diagnose all failures, rather than use a catch-all error message.
[33m006158f[m Always emit detailed type check diagnostics, update unit tests to reflect this.
[33ma155fc6[m minor "new" feature.
[33m3d24827[m Add prototype for KVO API overlay ("KVOContext") to NSObject, and provide test case.
[33m18d12fa[m [stdlib] One more note about Array casting
[33m5e045b4[m [stdlib] Limit array casts to Array<T>
[33m3b4a9d2[m Add a 'conditionallyUnreachable' builtin.
[33mbf858cc[m SILGen: Handle inner pointer returns through currying and dynamic lookup.
[33m1757b70[m Update comments for 'canBeClass' change.
[33mf3c390e[m Disable use of asl_log_message for now
[33m2bf9644[m Minor style tweak.
[33m7640b67[m Optimize switch_enum to unchecked_enum_data.
[33me02b607[m Revert "[devirtualization] Re-enable devirtualization of pure inherited protocol conformances with a new refactored implementation and a better test." Revert "[devirtualization] Begin refactor devirtualization code into first simple cases and then the general case."
[33m9cf3eef[m [stdlib] Array bridging doc update
[33m9d74d25[m [ClangImporter] Replace one hack to deal with va_list for another.
[33m47efdd9[m [runtime] Write fatal error messages to crash logs (where available).
[33md619d82[m [test] Add new file for crash testing.
[33m2c0a803[m [docs] Updated information on Array casts
[33ma3bc9b6[m [stdlib] Array doc update
[33m91ddbeb[m Switch on instruction kind rather than using cascading ifs.
[33m1a422e0[m Make the parser reject (with a fixit) use of the @weak/@unowned attributes, pointing people to use the context sensitive keywords instead.
[33m5710070[m Switch stdlib and testsuite from @weak/@unowned to weak/unowned.
[33mf530cf9[m Change the number of iterations to 5000
[33mc91255b[m Remove the number field
[33m9f7e584[m Port the ObjC string benchmark to use phonebook records.
[33m1f93ec5[m [devirtualization] Remove deep devirtualization code that we are not using for WWDC.
[33m7140f46[m [SILParser] teach SILParser to handle multiple results when looking up a member of an enum.
[33mc78daee[m Make the phone number field an Int.
[33m29fd688[m [devirtualization] Re-enable devirtualization of pure inherited protocol conformances with a new refactored implementation and a better test.
[33m843a592[m [devirtualization] Begin refactor devirtualization code into first simple cases and then the general case.
[33m774358c[m Handle argument label mismatches due to single-element tuples.
[33m4ca16e6[m [deserialization] Put in assert in SILWitnessTable::create to make sure we don't ever get passed in a null conformance.
[33ma7bb612[m [deserialization] Tighten up deserialization of witness tables.
[33m4229342[m Rename 'canBeObjCClass' to 'canBeClass' and have it return true for all classes.
[33m3e9d7c3[m Add accessors to AnyFunctionRef to the underlying function decl or closure expr.
[33mdd9ee77[m Trim stale comment.
[33m9626709[m Delete the python version of the test.
[33mf318c72[m Convert the string sort benchmark to a phonebook sorting benchmark.
[33m1326006[m Runtime heap/introspection: Instruments team feedback
[33m2b1a092[m [ClangImporter] Prefer typedef sugar for blocks even in bridge-able contexts.
[33m16f96f1[m [PrintAsObjC] Guard @import lines with __has_feature(modules).
[33m4996efb[m Implement support for making "with" implicit on the first argument of an initializer.
[33m379bcd3[m Only run the verifier fail test on assert builds since otherwise it will not fail since the verifier will not run.
[33m189e78c[m Teach the swift->clang ABI code not to sweat about Unmanaged<T>.
[33m39453cd[m Set up protocol conformances properly for the default protocols on imported CF types.
[33mc57dac6[m Use the first element of structs and tuples as a source for extra inhabitants.
[33m0f87338[m [deserialization] Change the return value of findFuncInWitnessTable to match the ordering of SILWitnessTable, ArrayRef<Substitution> in lookUpWitnessTable.
[33mc2f32d7[m [Inliner] revert r17101 since it causes a performance regression on MD5.
[33md83e551[m Convert the ObjC and the Swift tests to unicode.
[33m073e800[m Convert the string sort benchmark data to unicode to make sure the slow path is taken in all programs.
[33mb3b67a4[m Metatypes of types that canBeObjCClass also can.
[33m8324dc9[m Introduce and use camel_case::appendSentenceCase().
[33mf8cb1fd[m Add a Ruby string sort benchmark.
[33m8d6914b[m Tweak error message for overload resolution failures.
[33m0a81cdd[m Factor constraint diagnostic search functionality out of the salvage method.
[33m66391bd[m More improvements to constraint solver diagnostics.
[33m664c6a0[m Add FIXME to specializer to make it handle type aliases correctly by specializing all self derived types.
[33m98274bd[m [docs] Update Arrays.rst
[33m05a9a26[m Revert "Use the first element of an enum as a source for"
[33m0e6ec12[m Revert "Use the first element of a struct as a source for"
[33m4b327a7[m Revert "Set up protocol conformances properly for the default"
[33mcfc5f65[m Revert "Teach the swift->clang ABI code not to sweat about"
[33mf914aa6[m Release notes for @NSManaged.
[33m2bd55e9[m Teach the swift->clang ABI code not to sweat about Unmanaged<T>.
[33m046524d[m Set up protocol conformances properly for the default protocols on imported CF types.
[33mc0e4242[m Use the first element of a struct as a source for extra inhabitants.
[33m422df2e[m Use the first element of an enum as a source for extra inhabitants.
[33m86cc0b9[m stdlib/FloatingPoint: make Float and Double real struct names, and Float32 and Float64 typealiases
[33m5766254[m Don't hoist global initializers from a cold path into the entry block of the function. And especially don't do that for String subscript. The plan now is to just hoist global initializers out of loops.
[33md867b5a[m Grab BB args from the correct block.
[33mae7b356[m Don't create branches with arguments to blocks that do not expect them.
[33m4e70269[m More renaming 'unchecked optional' to 'implicitly unwrapped optional'.
[33mb3133da[m Parse weak/unowned/unowned(safe)/unowned(unsafe) as context sensitive keywords.
[33m050fd53[m Rename UncheckedOptional to ImplicitlyUnwrappedOptional.
[33m2442d06[m [IDE] Fix syntax annotation crash with #if blocks that are missing an #endif.
[33m029fe4f[m fix <rdar://problem/16792027> compiler infinite loops on a really really mutating function by restructuring context sensitive keywords a bit.
[33m0f6c01a[m factor a test for decl contextual keywords out into a helper function.  NFC.
[33m5dbfb3a[m [devirtualization] Return the witness table when looking up SILFunctions from a witness table.
[33m72245d8[m Add 2x negative tests that make sure that the verifier is being run properly.
[33mcf77de7[m Add -import-objc-header option, and wire up the basic infrastructure.
[33ma5b83f0[m [tests] Rename mixed-target and mixed-framework ClangModules tests.
[33m83e4629[m [ClangImporter] Constify uses of clang::Module.
[33mbeaf059[m Debug Info / foreach loops: Use the NamedPattern name instead of "$generator" when possible. rdar://problem/16786106.
[33m4ff2e7b[m Re-enable the verifier always. XFAIL remaining problem tests so we get verifier converage.
[33me1385e7[m Re-enable the verifier when processing SILGen and the gauranteed diagnostic passes.
[33m411dc3b[m Mention NSManaged when complaining about stored properties without initial values.
[33mb46e6cc[m Suppress Swift vtable entries for getters/setters of @NSManaged properties.
[33m4a0790c[m Do a crazy lookup hack to allow users to write CFString instead of CFStringRef.
[33m207fc4d[m Instead of importing CF typedefs as typedefs for Unmanaged<T>, import them as the underlying class type, then wrap that in Unmanaged<T>.
[33me1bd429[m Under -import-cf-types, import   typedef struct __foo *FooRef; as an Unmanaged<Foo>, where Foo is a class type.
[33m0bc8309[m Add a -import-cf-types frontend option to enable the CF type-import logic.
[33m035e7db[m Un-XFAIL a test after updating it to not refer to StringByteData.
[33m93bd2a8[m Don't emit Objective-C metadata for @NSManaged property getters/setters
[33ma3a5454[m SIL: Fix up ownership and bridging when emitting dynamic method calls.
[33maf1f5b7[m Don't emit @objc thunks for @NSManaged properties.
[33mf2e331f[m Don't emit @objc thunks for @NSManaged properties.
[33mb56392e[m Overlay for -[NSPredicate predicateWithFormat:] and -[NSExpression expressionWithFormat:] // rdar://16726530
[33m2099cd0[m Add -O as an alias to -O3. rdar://16782554
[33m5631834[m If a library is going to be installed, build a static variant in swift_static.
[33m1e8124d[m Add -Onone as an alias to -O0.
[33m7a975e6[m Accept directory-style swiftmodules outside of frameworks as well.
[33m79dc7a3[m Remove newline between doc comment and the constant it described.
[33m92bcd97[m [ClangImporter] Don't crash if we have a SWIFT_CLASS but the module is missing.
[33m3f77c80[m [stdlib] Hide StringCore from public API
[33m79c7af4[m Implicitly turn @NSManaged properties into computed properties.
[33m8e2e7e9[m [stdlib] Hide all BuiltinXXXConvertible's
[33mf3977e3[m Introduce @NSManaged attribute with basic semantic analysis.
[33ma30238b[m Add more missing #includes.
[33m3d3ff68[m Add a pile of missing #includes exposed by pruning includes in top-of-tree LLVM.
[33mc4ef6bd[m Comment to XML conversion: adjust to upstream XML schema change
[33m5b096cc[m [Sema] Supress "expression resolves to an unused l-value" error when debugger support is enabled.
[33m1930222[m Runtime: Instruments support plan B
[33m667d90c[m Start diagnosing scalar-to-tuple conversions that are missing a keyword argument.
[33m9418fb9[m [DiagnosticEngine] Mark module import diagnostic errors as 'fatal' errors, and supress subsequent diagnostics to avoid a cascade of errors that drown out the original failure.
[33m5c9e437[m Mangler hack feedback: Update minor version for libFunctionNameDemangle
[33m2b1cb6c[m My general "relabel tuple" fix kind isn't going to fly; use TupleToScalar for the existing case.
[33mc9fd601[m Diagnose an extraneous keyword when calling a single-parameter function with no keyword argument.
[33mf92f212[m [devirtualization] Change optimizeApplyOfWitnessMethod to use SILModule::findFuncInWitnessTable.
[33m9c6ddc0[m [driver] Add -lldb-repl and -integrated-repl modes.
[33mc9baa6d[m [devirtualization] Extract the method SILModule::lookUpSILFunctionFromVTable from optimizeClassMethodInst. NFC.
[33m4c9c52f[m <rdar://15931346> Fix KVO.
[33me907b65[m [devirtualization] Refactor optimizeClassMethodInst so that the main while loop is smaller and we handle the success case outside of the for loop.
[33m5449d6f[m [devirtualizer] Refactor findFuncInWitnessTable -> SILModule::findFuncInWitnessTable.
[33m9cfb1b5[m Keep track of the locations of the element names in a TupleExpr.
[33m51bde14[m Remove stray assertion.
[33m197fdb6[m Make the python program sort unicode strings to match the ObjC and Swift implementation.
[33m3b43187[m [ClangImporter] Strip 'k' prefix even when there is nothing else in common.
[33m8e44c2e[m Break "NSUTF16" as "NSUTF, 16", not "NSUT, F16".
[33m4d8b4a6[m [ClangImporter] Move the ASTFrontendAction::Execute logic inline in create().
[33m9311c0c[m [devirtualization] Refactor the large method optimizeApplyInst into two smaller methods, optimizeApplyOfWitnessMethod and optimizeApplyOfProtocolMethod. NFC.
[33m2d68936[m Modified the playground transform to fix two problems related to scopes:
[33maeb607a[m Fix latent SIL verification errors.
[33m1e1b32c[m [sil-combine] Refactor optimizeBuiltinCanBeObjCClass from InstSimplifer -> SILCombine since it creates instructions.
[33m1715c00[m [release-notes] Set date and add new section.
[33m164870c[m SILGen: Reenable partial application of ObjC methods.
[33mf7c3331[m Demangle objc-to-native thunks.
[33mcfa1483[m Mangler hack feedback: use swift::STDLIB_NAME
[33mfcd4667[m Runtime heap: add some missing locking
[33me406e43[m Disable the inlining of non-direct recursions (where A->B->A).
[33m47628db[m A couple more simple tweaks to improve type-check error reporting.
[33m97a2df2[m Add a new conversion and type-matching kind for argument tuples.
[33md8a71c4[m Type checker: encapsulate fix kind into a Fix class, which will grow. NFC
[33mca62675[m Rip out the parsing code for default values in patterns.
[33m9d4bd6d[m stdlib: remove Keyboard
[33mdd1d0c7[m Restore removed test
[33m853b63e[m Update LangRef with commit message of r17056
[33md003b74[m An argument with a default value has a keyword argument.
[33m23b224a[m Change the type importer to import types abstractly first, and only later adjust the type for the manner in which it is actually being used.
[33m3d4df34[m Pretty-print DeclNames with no keyword arguments by dropping the parenthsized bit.
[33m35c3799[m Handle -target-abi as a frontend option and default it to darwinpcs for arm64/Darwin.
[33m1d4731e[m Reinstate the '_' for "no keyword argument" in the name of a function/method/initializer.
[33m61ed5d0[m release note that Int[]() works finally.
[33m6fbea7f[m Form TypeExprs for parenthesized types and another form of ? type, allowing us to parse things like var e = (UnsafePointer<Int>[])[]() and var c = (Int?)()
[33maae4049[m enhance the TypeExpr folding stuff to handle specialized types as TypeExprs, so that UnsafePointer<Int>[]  works.
[33m96ccdc1[m Mangler hack feedback from Dmitri
[33m0863b2c[m Operators may never have keyword arguments.
[33md0e88b4[m Mangler hack for various subsystems feedback
[33me06fbc4[m fix <rdar://problem/16763821> Integer overflow diagnostics refer to the 'Builtin.Blah' types rather than the user-visible types this un-xfails two tests.
[33m5338ad9[m Runtime: add a crude mangler for Interface Builder
[33mbaded9a[m Modified the playground transform to treat assignments to properties of objects as mutations of the underlying object.  This means that we report the new state of the object rather than reporting the value of what was assigned to the property.
[33mefe0804[m [stdlib] Kill (Contiguous|Opaque)String
[33m57a432e[m Changed the playground transform to report the end of the final token in each source range rather than its beginning.  This means we report much better character ranges.
[33m30abee8[m [sil-inliner] Cleanup debug statements and make them more useful. NFC.
[33m4fb2175[m The default Mirror implementation used to have a special case for NSString-typed things, such that they would quicklook as their own string data However, this broke for Swift subclasses of NSString because the Swift mirror took precedence over the ObjC NSString choice Notably, it broke for NSContiguousString
[33m3f6c6ec[m Test updates for default keyword argument changes <rdar://problem/16741975>.
[33m72e32c9[m Make argument names default to keyword arguments in the cases where Objective-C has names.
[33m8699a3b[m Add -import-underlying-module option.
[33m930d94e[m Note that @IBOutlet et al only apply to /instance/ members.
[33m9c8b9f7[m Validate @IBAction method signatures.
[33mf7e6c67[m Modifying the playround  transform to support logging of statements like "x += y".  This involved two changes:
[33mddb4fef[m Well-known kernel simulator benchmark, in swift, JS and C.
[33mc5c7479[m Simple non-array binary search tree benchmark.
[33m39a45d8[m Add a custom Mirror for NSRange, and export a Range(UInt64, UInt64) as the quicklook object for it
[33meb80120[m Code completion: don't consider type in the previous line to be a code completion prefix in the next line
[33m9ab5cea[m Add a new case to the QuickLookObject enum: Logical(Bool) This is meant to represent to UI consumers the notion of a logical truth value Previously, we were using a String case to represent such values, but that loses potentially useful information to UI layers
[33m71678b4[m IRGen/Runtime: Expose the 'isBitwiseTakable' bit in the value witness flags.
[33m277e6a8[m Code completion: fix a crash on invalid code
[33m669f633[m Add "single extended grapheme cluster" literals (SEGCL) -- a subset of double-quoted string literals that contain a single extended grapheme cluster
[33mb337d35[m [test] Add KVO test. XFAIL it pending the ObjC runtime additions.
[33me4b3609[m [IRGen] Set ObjC metaclass instanceStart and instanceSize as libobjc expects.
[33mcdc3953[m [runtime] Note that libobjc knows about some of ClassMetadata's fields.
[33m489d1d6[m [IDE] ide::printDeclUSR() should not try to get the USR for ValueDecls without types, due to invalid code.
[33m54ad7a3[m [sil-combine] If we have a release_value, retain_value right next to each other in the wrong order for the ARC optimizer due to multi-bb issues, peephole delete them.
[33mdb87639[m create a helper function for creating a TypeExpr from a specialized declref, factoring some code.  NFC
[33mfee6979[m Handle the default case properly in switch_enum_inst simplification.
[33m30915de[m Form TypeExprs for non-specialized unqualified declrefs that refer to types... like "Int". Building on previous work, this allows us to properly handle things like Int?() and Int[]().
[33m64e08a2[m Reorder declaration of attributes in serialization order.  NFC.
[33m621f89d[m [specialization] Teach the specializer how to handle checked_cast_br correctly.
[33m85df2fa[m Restrict overloading of properties with nullary functions.
[33m662ac33[m [sil-opt] Teach silopt how to run predefined optimization groups diagnostics and performance.
[33mcaff7b6[m IRGen: Expose the array value witnesses as builtins.
[33m1f6af41[m IRGen: Store non-bitwise-takable types out of line in existential containers.
[33m29aca1c[m Various minor TypeExpr improvements:  - Change astdumper to print the typerepr in the more canonical syntax.  - Remove bogus logic from CSApply that was preventing us from rewriting    TypeExprs properly  - Teach CSGen to handle unbound generics correctly (thanks to Doug for the help on this)
[33m54eb58b[m Modified the playground transform to report the name of the affected variable when appropriate (i.e., for declarations, mutations, and assignments).
[33m488e67f[m [sil-mode] Add syntax highlighting for unchecked_enum_data.
[33m4aa145d[m [sil-combine] Promote unchecked_take_enum_data_addr -> load + unchecked_take_enum_data given a concrete type.
[33m8f80f43[m Add -[no-]link-objc-runtime option that controls the linking of arclite.
[33m84f4d3b[m Sink some triple predicates into swiftBasic.
[33m7a18f72[m IRGen: Emit array value witnesses.
[33m7ccde52[m IRGen: Factor 'indexArray' into a TypeInfo method.
[33m183c3a3[m Revert r16776 (Distributed Objects unavailability).
[33m153b8ac[m Allow a property to overload a function.
[33ma7012f2[m Remove swift::ArrayType.  It is dead and vestigial code for supporting fixed size arrays, which never got baked.  Remove it until we have time to do things right.
[33m519e0ec[m Tweak the heuristics for mining inactive constraints for possible reasons why a constraint system failed to converge on a solution. (For the time-being, favor conversion and overload constraints over others.)
[33m7c8605e[m Diagnose use of _ after ` in a parameter declaration; it makes no sense.
[33m2872287[m Add support for marking function arguments with the back-tick ("`").
[33mab6b22f[m When not used for an escaped identifier, back-tick is a token.
[33m1beb2db[m Begin QOI work for rdar://problem/16007230 by making it possible to get slightly more precise constraint solver errors when using the detailed-diagnostics flag.
[33m4cae5e8[m Add a "detailed-diagnostics" flag to control emission of more detailed diagnostics for expression type-check failures.
[33mf4aabad[m Use correct Unicode terms
[33mfa67a0d[m Release notes: add an explanation of what 'grapheme cluster' is
[33m7bef9c4[m Simplify the declaration naming scheme to use a blank rather than _ for unnamed arguments.
[33mfae27e3[m Runtime: provide inline friendly isa mask/shift variables for 1.0
[33m4e4173f[m Remove the "separated" declaration syntax <rdar://problem/16742067>.
[33m18c4ef0[m Revert r16960, which is causing build failures due to missing _objc_debug_isa_class_mask.
[33m0012d3a[m Release note 'Character' as the default character literal type
[33m3351b47[m Make "expected X separator" error slightly more helpful
[33m14364aa[m Make TypeDecl::getProtocols() actually force delayed members when requested
[33mc1ceaed[m [utils] line-directive: indentation fix
[33m18c7b0e[m [stdlib] Kill StringByteData
[33m7036eae[m [utils] recognize assertions in line-directive
[33m1dd3b76[m [stdlib] Add a lazy UTF8 view of String
[33me84ec00[m Default initialization for @weak <rdar://problem/16662262>.
[33md93c78c[m Ban @weak unchecked optionals <rdar://problem/16738545>.
[33me5f7cdd[m Runtime: provide inline friendly isa mask/shift variables for 1.0
[33m8c224c9[m Have the prechecker pass of the type checker fold T[] and T? expressions when T is a TypeExpr, forming a larger typeexpr.  We only form TypeExprs in narrow cases, but this handles the archetype cases in the tests.
[33mc45e6b7[m Rip out logic added to me misunderstanding ExistentialMetatypeType, and teach type checking to resolve TypeExprs that lack TypeReprs.
[33m53a8a06[m ongoing progress on TypeExpr rollout, this makes it handle existential metatypes better and cleans up some interfaces.  They aren't used enough to make much of a difference yet.
[33m78d8fbd[m SILGen: Don't emit into reference storage buffers.
[33m809655d[m IRGen: Emit nontrivial initializeWithTake operations for types that aren't bitwise-takable.
[33m11a79fa[m tighten up some logic, principly by using dyn_cast instead of dyn_cast_or_null, NFC.
[33meeaf7a6[m have the ast dumper print TypeExprs a bit nicer.
[33ma9fafbd[m Replace "by reference" with "to an inout parameter" for less misleadingness
[33mdc46a26[m Add error+fixit to steer people from '@unchecked T?' to 'T!'.
[33m3dfaddb[m Drop extraneous '()' applied to a non-function.
[33mbcf2dd9[m IRGen: Back off substituting generic class instances during layout.
[33mccc5d6a[m Remove support for vestigial commas between type attributes.
[33m1b60411[m english -pedantic
[33m7e68986[m fix <rdar://problem/16722603> invalid conformance of mutating setter
[33m6caf910[m Implement new syntactic sugar for UncheckedOptional<T>.
[33mbeb4374[m Suggest '&' when it is needed to pass an lvalue by reference.
[33m35eecfe[m Speculatively suggest '!' when treating an AnyObject as a class.
[33m31e761c[m SILGen: Don't overrelease the for-each iteration value when break-ing.
[33m4e21828[m remove the weak and unowned keywords, which are not used.  I'll bring up for discussion on tuesday whether it makes sense to use keywords instead of attributes for these.
[33m1edd7a3[m Speculatively suggest '!' when treating an AnyObject as a class.
[33meaf2bf6[m Speculatively fix optionals by unwrapping them with '!'.
[33m321911a[m Add infrastructure for applying fixes during constraint solving.
[33m739c495[m AST printer: use identifier escaping
[33mf6bc393[m this -> self.
[33m887fada[m Make the locator associated with an assignment source based on the assignment.
[33m88471c3[m update this for attribute and inout syntax change.
[33m0ece089[m Remove obsolete Xcode support
[33mdc406b3[m AST printer: don't print "let ... { get }" -- this is not valid syntax
[33mec5226b[m Un-XFAIL test/decl/func/functions.swift
[33m2c88cdf[m Fix a crash-on-invalid while parsing a function declaration
[33m61ac868[m Fix the implementation of Builtin.release from being a net +1 to being a net -1.
[33m5ad769e[m Rename the BridgedToObjectiveC protocol to _BridgedToObjectiveC or _BridgedToObjC.
[33m0865837[m Emit non-unique type metadata lazily in IRGen.
[33m420db0b[m [IDE/test] Add an initializer in mock-sdk.
[33m9638623[m [AST] Make dump functions const, NFC.
[33m49f3939[m Rename bridging "convert" functions to start with '_'.
[33mc2bdc22[m Implement <rdar://problem/16380439> Add support for "#if false" and "#if true"
[33m8cc8e86[m release note #elseif.
[33m285354f[m Remove pointless code left over from a briefly considered approach.
[33m0c39077[m Implement <rdar://problem/16204675> Need #elseif
[33m7c742b4[m Emit SILWitnessTables lazily if their linkage allows it.
[33m9cda4d5[m Small clean-up of SILInliner.
[33m0c53a35[m [devirtualization] When making sure devirt types match up if the conformance is specialized, the function we are attempting to substitute will have a generic self type. Make sure to substitute in substitutions from the origin type (if it has them) before attempting to perform the comparison inbetween the self pointer on the target function of the devirtualization from the alloc_ref of the self pointer on the CMI.
[33m2d026d7[m [devirtualization] Expose TypeBase::gatherAllSubstitutions as SILType::gatherAllSubstitutions wrapped to be SIL level friendly.
[33mc1bd356[m [devirtualization] Make ProtocolConformance::getGenericParams() more sane and ad ProtocolConformance::getSubstitutedGenericParams() for returning the generic params that were substituted into by a specialized protocol conformance.
[33m83d364d[m [sil-combine] (unchecked_ref_cast (upcast x X->Y) Y->Z) -> (unchecked_ref_cast x X->Z)
[33m1c31cec[m [inst-simplify] Update simplification of upcast, downcast roundtrip simplification.
[33m5819c90[m [inst-simplify] (upcast Y->X (unchecked-ref-cast x X->Y)) -> x
[33ma9a1e9f[m silgen support for breaking out of a switch.  rdar://16736255
[33m60044a9[m Another small cleanup to mandatory inlining.
[33mcd7a816[m Small clean-up. Use for loop rather than while.
[33me2cde3c[m [devirtualization] Properly substitute in types for upcast when handling a specialized inherited conformance.
[33m2aa3e50[m fix <rdar://problem/16660680> QoI: fatal() in init method complains about super.init being called multiple times
[33mefc8b0d[m [PrintAsObjC] Add objc_subclassing_restricted to Swift classes.
[33ma9113d7[m simplify some parsing logic now that function arguments don't have patterns.
[33m304c34e[m Update LangRef for 'nonmutating'
[33m7ab94b7[m parse mutating and nonmutating in protocol requirement specifiers for properties/subscripts too.
[33m26a3484[m release note mutating change.
[33m371a931[m - Introduce a new 'nonmutating' context sensitive keyword, and use it instead of @!mutating. - Change the parser to unconditionally reject @mutating and @!mutating with a fixit and   specific diagnostic to rewrite them into the [non]mutating keyword. - Update tests.
[33m740e102[m resolve <rdar://problem/16563853> 'break' should be able to break out of switch statements
[33mdf60e77[m Code completion for overrides: don't suggest to override members from outer nominals in inner nominals
[33m6da5c57[m Runtime: part 1 of work to enable CoreData
[33m0cb8ddd[m Code completion for overrides: use a special chunk BraceStmtWithCursor for braces
[33m2916aeb[m Code completion for overrides: complete constructors
[33m28b05c9[m Rework r16878.  Now we refuse to generate a USR for 'self' in destructors
[33m63072df[m Add class size and address point fields to class metadata.
[33mf3d4513[m Turn some 64-bit metadata fields into 32-bit fields.
[33m936bf62[m [Serialization] In ModuleFile::getCommentForDecl, we don't need to lookup comments attached to ParamDecls.
[33mcd8c2a4[m Refactor metadata layout to allow non-pointer-sized fields and reduce boilerplate.  NFC.
[33mba8a64c[m Add some more convenience methods to Size.
[33m9ee64a8[m Add an Address-aware CreateMemCpy overload to our IRBuilder.
[33me8f981a[m [devirtualization] Teach the devirtualizer how to handle specialized protocol conformances.
[33m02bdf34[m [specialization] Teach the specializer how to create specialized protocol conformances.
[33m8242060[m Fix formatting issue. NFC.
[33m888f72c[m [specializer] Teach the specializer how to specialize partial apply insts.
[33mfa69999[m Remove some debugger noise.
[33m70272b0[m IRGen: Substitute the types of partial_apply captures in the forwarder thunk.
[33m41d365e[m [sil-combine] (raw_pointer_to_ref (ref_to_raw_pointer x X->Y) Y->Z) -> (unchecked_ref_cast X->Z)
[33m7bd7524[m [sil-combine] (unchecked-ref-cast (unchecked-ref-cast x X->Y) Y->Z) -> (unchecked-ref-cast X->Z)
[33m0f1985c[m [sil-combine] (unchecked-addr-cast (unchecked-addr-cast x X->Y) Y->Z) -> (unchecked-addr-cast x X->Z)
[33m0f32b98[m [sil-combine] Teach SILCombine how to form unchecked_addr_casts.
[33m20b7736[m stdlib/AST: Make 'Hashable.hashValue' into a property.
[33m0e7bb07[m Make module loaders owned by the AST context instead of ref-counted.
[33m1dfc037[m [ClangImporter] Pass through target CPU and features properly.
[33m0390e7f[m Simplify verification of ArrayUpcastConversionExpr
[33maaed5a7[m Promote boxes that are passed to generic partial_apply.
[33m9ba7def[m [Devirtualizer] trace across unchecked_ref_cast in findOrigin.
[33m11fa610[m Variadic functions cannot be @objc.
[33mff0b697[m AST verifier: chain from FuncDecl to AbstractFunctionDecl
[33m480b41c[m [SIL Vtable emission] use the least derived method in sil_vtable.
[33m009c7a7[m Fix placement of alloc_stack/dealloc_stack
[33m00e4edb[m Test that @optional initializers are imported as required.
[33m5ac2e3d[m Make protocol conformance require equivalent keyword arguments.
[33m9a19300[m Debug info: Emit all srtruct types with Swift as runtime language so the accelerator-table mangled-name logic in LLVM works as expected. <rdar://problem/16730603> Debug info for variable of type NSError does not provide mangled name
[33mf0fd882[m Make the static library version of runtime libs have the same name as the dynamic lib.
[33ma043c9d[m Put runtime static archives in 'lib/swift_static'.
[33mff84cce[m Runtime: conditional fallback to pthreads given we don't ship with the OS
[33ma843d9e[m Don't serialize invalid ranges in diagnostics.
[33mfa12c5a[m Remove hack for -animator proxy introduced in <rdar://problem/16020273>.
[33m8aff44f[m Revert accidental commit of utils/pygments/swift.pyc from r16837
[33m86b79d6[m Some code cleanup for array upcast conversions. (Part 2 of the fix for rdar://problem/16540403)
[33m066f5e6[m Allow for simple upcast conversions between array types. (Part 1 of the fix for rdar://problem/16540403)
[33m89f9823[m Per recent discussions, allow explicit conformances to AnyObject. (rdar://problem/16139880)
[33m844ea32[m Support implicit conversions from AnyObject to String, if NSString is available as a bridging type. This addresses rdar://problem/16271835, rdar://problem/15257126 and rdar://problem/15288553.
[33m2956634[m [ClangImporter] Deal with redeclarations of properties as readwrite.
[33m7fedcbc[m Runtime: standards compliance feedback
[33m128027d[m Runtime: abort on resurrection
[33mbb54d7d[m Add regression test for <rdar://problem/16119895>.
[33mcd8ec9e[m Fix grammar in function name
[33m5a61f9b[m Ban optional initializers in protocols. <rdar://problem/16669554>
[33m5c2bd67[m Runtime: Sync QuickLookObject in the runtime with recent stdlib additions.
[33m164b582[m Code completion for overrides: don't suggest to override members of the current nominal
[33m014d42a[m Remove WIP that I accidentally committed
[33ma701104[m Code completion: add a test that produces wrong results now
[33m6bddd29[m Rename a function to accurately reflect what it does now
[33m3ee34ef[m Code completion: complete declarations that are required for declared protocol conformances
[33m35c587a[m Code completion: don't complete associated types on non-metatypes
[33mfd25c25[m Add constness to APIs
[33mf06d124[m Code completion: fix crash on invalid protocol conformance
[33m81a963f[m [build] debug symbols for stdlib in RelWithDebInfo
[33mc38c65a[m [sil-arc] Since copy_value is now retain_value, we are no longer burdened by copy_value's result causing flow issues. Move everything.
[33m8ffc0f1[m [sil-aa] AA::may{Read,Write,ReadOrWrite}FromMemory do not care about ref counts. Add a flag to ignore ref counts during such a query.
[33ma75de1c[m [sil-aa] Teach AA::getMemoryBehavior about a bunch more instructions which do not have their normal memory behavior if the value we are trying to find memory behavior relative to does not alias their arguments.
[33me604952[m Stdlib: Overflow all float to int conversions
[33mce2c44f[m Stdlib: test for r16764
[33mc0202d4[m IRGen: Push an 'isBitwiseTakable' bit through type infos.
[33mfc7438b[m [sil-arc] Casts do not use pointers in an interesting way.
[33md9e4d6f[m Add the Unmanaged library type.
[33mcbfccec[m Allow AnyObject as a generic constraint.
[33m6a9ab03[m Add Builtin.retain and Builtin.release, and make Builtin.autorelease an unbalanced operation.
[33m9728a90[m Stop trying to analyze every possible type in reemitAsUnsubstituted and just bitcast between the explosion kinds.
[33m5283a35[m [sil-arc] Fix up a few comments and teach the optimizer that fix_lifetime_inst, copy_block, and retain_value can not decrement ref counts.
[33m9401b1b[m [sil-aa] Refactor memory behavior implementation to use a visitor instead of a large switch to make things more readable.
[33mc514e8e[m [sil-combine] (unchecked_enum_data (enum payload)) -> payload.
[33mbf49679[m When overriding a method or initializer, require the full names to match.
[33m64c7c5c[m [docs] Array bridging diagram
[33mf8ad26f[m <rdar://16689104> Mark classes for Distributed Objects as unavailable.
[33mc3eda1a[m Revert "Relax reinterpretCast assert to allow a cast to a smaller type."
[33m857da9a[m Finish adding demanglings for the array value witnesses.
[33mf29a156[m IRGen/Runtime: Add value witness slots for array witnesses.
[33ma0d0eef[m Fix typo in test.
[33mc962140[m [specialization] It is incorrect to call getOpConformance on a conformance we already specialized "by hand".
[33m46d5660[m [devirtualization] Add SILType::substInterfaceGenericArgs a SIL level wrapper for SILFunctionType::substInterfaceGenericArgs.
[33m76c89fe[m [ClangImporter] Avoid Clang's isModuleVisible.
[33mb3851a7[m REPL code completion: handle PreferredCursorPosition chunk
[33m28c2514[m Remove unused member
[33me36baf4[m Code completion: add basic support for completing overriding decls
[33m95f173d[m Fix tests: fixup 16730 (fix unreachable increment warning), the "break" is no longer needed, because there is no loop here anymore, and now this break is breaking out of the switch.
[33mfe185d7[m Parser: rework dictionary literal parser not to rely on skipUntil
[33m7f6a109[m Code completion: fix crash while completing on AnyObject when Cocoa is imported
[33m00722d4[m Comment parsing: extract parameter name from the text in :param: field
[33m3013917[m [AST] Recover if trying to mangle a closure without a type.
[33m7606d37[m Add CMake goop to generate static archive versions of Swift runtime dylibs.
[33m79bbf17[m Add Builtin.unreachable().
[33m4ea0a28[m SIL.rst: Document unchecked_addr_cast.
[33m7d274e2[m SIL: Add an unchecked_addr_cast instruction.
[33m14e0f3f[m [deserialization] When deserializing init_existential_inst pull in all the relevant witness tables.
[33m0c0958b[m [devirtualization] Change devirtualization of protocol_method to use SILModule::lookUpWitnessTable instead of iterating over the witness tables itself.
[33mafa464f[m [deserialization] Do not allow SILModule to attempt to deserialize a witness table lazily while we are already deserializing.
[33mc756651[m Fix broken linker test.
[33m5450545[m [devirtualization] Clean up debug statements in devirtualizer to be more readable.
[33md512fb8[m SILGen: Emit a single unchecked_ref_cast for unchecked downcasts.
[33m68f9421[m SIL: Squash 'ref_to_native_object' and 'native_object_to_ref' into one 'unchecked_ref_cast' insn.
[33mfe47ddb[m SIL.rst: Note that unchecked_take_enum_data_addr will not actually destroy the enum when applied to the first payloaded case.
[33m5db5acc[m SIL.rst: Fix up and extend discussion of layout compatible types.
[33m7306057[m Bump module format version for added SIL instructions.
[33m852da64[m tidy code a bit more, thanks Jordan
[33m7bc9bf9[m SIL.rst: Add a note about layout compatibility.
[33m00ef2cc[m fix unreachable increment warning.
[33m285ec1e[m SIL: Add an unchecked_enum_data instruction.
[33m55f6b92[m SIL: Rename 'take_enum_data_addr' to 'unchecked_take_enum_data_addr'.
[33m08178d4[m Debug info: Mark allocating constructors artificial. <rdar://problem/16349779> line table for _allocating_init constructor is odd
[33m71ce6b2[m Relax reinterpretCast assert to allow a cast to a smaller type.
[33m5e5a369[m Runtime: Renable proxying and dynamic cast support
[33m7542b99[m [ClangImporter] Fix NSDictionary NSCopying hack for non-nullable object refs.
[33m315c279[m [ClangImporter] Fix getImportedModules for "all" and "private-only" filters.
[33m0da44e2[m [CMake] Only look for libCrashReporterClient.a in the SDK.
[33m4dc7628[m ClangImporter: Drop the variadic parameter to UIKit variadic DIs.
[33mf68f0e8[m Debug info: represent function pointers as indirect function types. <rdar://problem/14960518> Incorrect debug info for function pointer
[33m0851268[m Run clang-format on this IRGenDebugInfo.h
[33m146c559[m remove dead code.
[33mc63cb35[m Make common prefix for Info.plist bundle names 'com.apple.dt.runtime.'.
[33mdd907ce[m [sil-mode] Update sil mode with highlighting for block instructions.
[33m5ea0a07[m UIKit overlay: Add our own designated initializers for UIActionSheet and UIAlertView.
[33m23f4779[m Debug info: Retire DW_TAG_meta_type now and use a proper mangled name instead. <rdar://problem/16439075> LLDB is trying to print type metadata as an instance
[33m57b2146[m Remove the separated call syntax.
[33m37950d5[m Don't allow overloading on @unchecked vs. strict optional return type.
[33mfb8c3ce[m Signature computation: deal with @noreturn, optionals.
[33m95f3d20[m Strip default arguments from the signature of a function.
[33meb0a082[m Restore the name into the "previous declaration was here" note.
[33mcfb3d28[m Comment to XML conversion: add pretty-printed declaration
[33m98c63ba[m Code completion: propagate code completion bits at top-level better
[33mbe6ba21[m Revert r16648 because it crashes on arm64.
[33mb691055[m Fix an incorrect use of Swift metadata in an ObjC class. Add assertions to catch such uses in the future.
[33m20ef9c0[m [sil-aa] Globals are identified objects at compile time. <rdar://problem/16696826>.
[33mb38a639[m Implement @unowned(unsafe).
[33m8bd7953[m Track spare bits in @unowned types.
[33m9ccaf63[m Implement sane redeclaration checking.
[33m2b25af6[m [IDE/CodeComplete] Reduce 'MaxNumBytesToErase' in code-completion result to 127.
[33m9bd1077[m [IDE/CodeCompletion] Mark a code-completion result as 'not-recommended' if the declaration that it refers to is unavailable.
[33mbbb768f[m adjust to use LLVM style instead of lldb style.
[33mf59141d[m Runtime: far better cmake logic for CrashReporter
[33mab129df[m Add -global-opt pass.
[33mf58ebbc[m Add a global_init attribute to SILFunction.
[33m98cc752[m [ClangImporter] Rewrite enum prefix stripping to use the camel_case helpers.
[33m2db90e9[m [IDE] For the syntax node of functions, set the name range to the range of the function signature.
[33mff4da1b[m Release note NSLog being available.
[33m03a8dc1[m Remove linking CrashReportClient.a until the CMake logic is refined to be portable.
[33m65971bc[m [CMake] ObjectiveC module depends on the Darwin one.
[33m6f35771[m [Parser] Fix assertion hits when trying to print an invalid function.
[33m239df8c[m Relax the requirement on setting the containing Decl context when being used by the debugger.
[33m5c19f8f[m implement  <rdar://problem/16692437> shadowing loop labels should be an error
[33m411e5ba[m revert r16670, which included more than it should have.
[33m4fc1154[m implement <rdar://problem/16692437> shadowing loop labels should be an error
[33m02e95c2[m stdlib: Use #if to clean up platform-dependent branching in VarArgs implementation.
[33m1121b2c[m Revert r16666 because I think my test configuration was wrong.
[33m629e7f5[m Prevent direct ObjC isa dereference when using ObjCClassWrapperMetadata.
[33mb1d9d18[m [please update llvm] Debug info: Use the mangled name as unique identifier for types where possible.
[33m01c5eea[m Foundation overlay: Provide an "NSLog" replacement.
[33m8f51b0e[m Revert "wip"
[33m4a81e48[m wip
[33m988671d[m Teach DI about inherited convenience initializers, fixing: <rdar://problem/16687555> [DI] New convenience initializers cannot call inherited convenience initializers
[33m78e8d3f[m rename the MetatypeExpr AST node to DynamicTypeExpr now that it is only used by the "foo.dynamicType" syntax.
[33m021b5b4[m Comment to XML conversion: pass through block markup as HTML tags, for the lack of better markup in current XML schema
[33m9928be1[m Comment parsing: keep the column number of the first character to strip ASCII art correctly when indentation is present
[33m724ac58[m [release-notes] Add the date.
[33m509811b[m Use darwinpcs for ARM64.
[33mf82c7cd[m Comment parsing: move the virtual comment attribute to DeclAttribute infrastructure
[33me81132d[m Update comment xml schema according to an upstream Clang change
[33m3a4d5a5[m [AST] Add some static_asserts to make sure adding a ClangNode to the AST object doesn't violate its alignment.
[33m15d7225[m Runtime: more cmake fun
[33m61aec09[m Runtime: optimize dynamicCast for pure Swift scenarios
[33mca34d1f[m Runtime: More internal SDK support
[33m7de9c08[m Peel off almost all of the uses of MetaTypeExpr, replacing them with uses of TypeExpr instead.  The remaining uses of MetaTypeExpr (which will be renamed soon) are places where we are applying the ".dynamicType" virtual property to an expression.
[33m61d7421[m [sil-gen] Emit class methods for in protocol methods for classes so that inherited conformances can result in virtual calls to overriding subclass methods.
[33m83cf951[m [devirtualization] Teach devirtualization how to devirtualize inherited conformances.
[33ma65a693[m Add an 'autorelease' builtin instead of @asmname-ing objc_autorelease.
[33mf84efe1[m Runtime: more cmake internal SDK fun
[33mfaa2ff7[m Implement <rdar://problem/16664902> No warning produced for types inferred to have type 'AnyObject?'
[33mafc19b2[m Release note NS_RETURNS_INNER_POINTER support.
[33m5b7659f[m ClangImporter: Stop building thunks for @objc properties and just use the imported getter/setter decls for the computed property.
[33ma391661[m respond to mainline API changes in the Debug.h header, by defining the DEBUG_TYPE macro in all .cpp files that use the DEBUG macro.  Hopefully this will unbreak the build.
[33m4a36db7[m [serialization] Print the path to a too-new, too-old, or malformed module file.
[33mfbf0a15[m Add an interpreter test that uses an inner-pointer method.
[33md90f9d4[m SILGen: Lifetime-extend the "self" parameters of inner-pointer methods.
[33m8681963[m A couple of long-overdue renames.
[33med02db7[m Fixed a bug where the playground transform was generating typeless assignments, which the type checker hates.
[33mdcad7fb[m SIL: Add an autorelease_value instruction.
[33mc56458d[m Quiet doc warnings.
[33mb6a5152[m Revert r16606 because it crashes on arm64.
[33mc73acc6[m SIL: Add an "UnownedInnerPointer" result convention.
[33m461e715[m Parser: silence unreachable code warning
[33maccd058[m Runtime: fix a silly cmake mistake
[33mc48fd61[m Docs: Add notes about subtle runtime differences
[33m8c4b7f6[m Remove dependence on llvm::ReferenceAdder, which no longer exists.
[33m94698bc[m Fix 80 cols violation
[33m7f3d886[m Introduce a new AST node, named TypeExpr, which will be formed by sema when resolving identifiers into types.  This will eventually allow us to solve annoying issues like rdar://15295763&15588967 by better modeling what we already have.
[33mf671a17[m release note that the behavior of break is changing (rdar://16563853)
[33ma102b38[m Now that we have labeled breaks as a fallback, implement the first part of: <rdar://problem/16563853> 'break' should be able to break out of switch statements
[33m0a5b27b[m Implement labeled break/continue support, implementing rdar://11562938.
[33mb3f470a[m [ClangImporter] Make getting the ClangNode from a swift Decl more efficient by allocating extra memory and storing it directly before the swift AST object.
[33mb8051b7[m [ClangImporter] Change an assertion to make sure we have a clang node at that point, which means we don't need to set it.
[33mfc29680[m [AST] Add const goodness for ClangNode's MacroInfo; NFC.
[33ma42ad94[m [ClangImporter] Make sure that the clang node is set at the point where the swift node is created, and introduce Decl::updateClangNode() for when we want to update it.
[33m82a7f1f[m Improve de-duplication logic for imported Objective-C class initializers.
[33m7e93a50[m enhance the AST representation of break and continue statements to specify the LabeledStmt that they target: have sema fill this in, and make silgen respect it.
[33m0e7489c[m implement AST support for labels on loops & switch statements.  This also improves location information to track the label location in the AST.  We don't currently track the location of the colon, but that would be trivial to drop in if it is interesting.
[33mf87e9ba[m Runtime: optimize dynamicCast for pure Swift scenarios
[33mca63446[m Runtime: This bit has two meanings
[33mc3bc1fb[m Runtime: always inline our crash() function
[33m8a6a910[m parser support for labels on loops and switch statements.  No AST representation yet.
[33maa7dc5d[m Add the ObjC version of the linked-list demo.
[33mb204be7[m simplify Parser::isStartOfStmt: just use the current token instead of having all of the clients pass in the current token.  NFC.
[33md35a2f5[m Allow declarations to be made visible to name lookup before they are added.
[33m2812aba[m Code completion: speed up by more than 2x ... at the cost of correctness, see test changes
[33m9013b0b[m CodeCompletion: add a test that would be broken by changing ResolutionKind
[33m55a7e06[m Fix the uninitialized REPL context that causes so many tests to fail.
[33ma17c8cc[m Debug Info: Emit all types (with the exception of builtins and qualified types) in their actual context rather than the context of their first use. Fixes several FIXMEs and <rdar://problem/16654720>.
[33mdccd3e0[m [test] Add a test for rdar://16272035
[33me80f99a[m Teach SILGen to build ParamDecls, too.
[33m1f4b73b[m Tricky selector-style parameter parsing into creating ParamDecls.
[33md56394b[m Cloning AnyPattern -> NamedPattern produces a ParamDecl.
[33m88689aa[m Build ParamDecls' in the REPL.
[33m7ffc748[m Remove empty namespace
[33m732c828[m [CMake] Fix linker error in jenkins.
[33me1f4e81[m [ASTPrinter] Printing ParamDecls directly is useful.
[33m89ef0af[m Switch subscript index parsing over to a parameter-clause.
[33m997026c[m Parse closure parameters as a parameter-clause rather than as a pattern.
[33m40b2c9f[m Create ParamDecls for function parameters in more places.
[33m35cbd4f[m Start building ParamDecl's in the Clang module importer.
[33m22c4f01[m Build the implicit "self" declaration as a ParamDecl.
[33m09797f7[m Introduce a new declaration node, ParamDecl, for function parameters.
[33mef742f3[m Make the tests less memory bound. We are now 27x faster than python.
[33md647719[m Remove some unnecessary setDeclContext() calls.
[33m773692a[m Add a test program that allocates and sums the first 1M elements in a linked list. We beat python by only 2x, but we can add a few peepholes to Optional and reduce the list size to make sure we are not memory bound.
[33m292dc76[m Remove debugging dumps.
[33m84d360b[m remove two dead functions.
[33m6b3ef54[m Replace "Members" arrays with an intrusive linked list.
[33m36889a2[m Introduce DeclIterator and DeclRange for iterating over decl members.
[33mc7070b0[m Teach more users of OnDiskHashTable to define hash_value and offset types
[33m0043652[m NFC: Replace DeclFilterRange with an elaborate set of iterator and range adaptors.
[33md69a287[m [release-notes] Update the date and start a new section.
[33m001533d[m Fix the build by adding the '==' operator to Substitution.
[33m9cbb367[m SILGen: Imploding unmanaged RValues is OK.
[33m2c3e86b[m Updated the PlaygroundTransform to no longer require that the modules it uses are present. LLDB now explicitly forward-declares the builtins that transformed code requires, so we can just use them.
[33ma28a08d[m [SILSerializer] Fix issues in deserializing SILFunction with generic outer parameter.
[33m81ce0e8[m [sil-combine] Canonicalize (load (upcast-ptr %x)) -> (upcast-ref (load %x)). This helps devirtualization.
[33m33d132b[m finish off the rest of the @NSCopying attribute, checking conformance to the NSCopying protocol and diagnosing it nicely, instead of just barfing in the synthesized function.
[33m92f63e8[m SILGen: Close conditional binding scope before exiting while loop.
[33m4904dd1[m Parser: Don't crash when a dictionary literal doesn't parse in its first pair.
[33m7245e40[m The type checker collects all overloads for a given function application during the pre-type check phase, but equality conformances (and their associated '==' overloads) may be added to a type lazily during type resolution. This can lead to inconsistent behavior during type checking equality comparisons on imported enumeration types. (rdar://problem/16526249)
[33m5b1f1f5[m Runtime: Walk up superclass chains in swift_conformsToProtocol.
[33m55a5709[m SILGen support for convenience factory and factory initializers.
[33mebe5f46[m Don't include the module in protocol conformance manglings.
[33m94e5b86[m Revert r16543 due to testing failures.
[33m2380966[m [IDE] Enhance ide::isSourceInputComplete() function to also return indentation information.
[33mca3c1f7[m Don't import nullary factory methods as unary, ()-accepting initializers.
[33m0cb9bb5[m IRGen: Get 'isa' pointers via object_getClass for ObjC-heritage classes.
[33ma3bffd2[m Make sure that the implicit @unchecked optional-ness of IBOutlet's gets reflected on the pattern.
[33m098701c[m Teach users of OnDiskHashTable to define hash_value and offset types
[33m7eb2a79[m remove dead variable
[33m685ea66[m enhance @NSCopying to work with weak pointers.  Unowned pointers are completely broken right now as far as I can tell due to poor interations with option types (filed as rdar://16662290)
[33md21157f[m implement support for @NSCopying on optional and unchecked optional types.
[33m1b8c55b[m [SILSerializer] Fix issues in deserializing SILFunction with generic outer parameter.
[33me2e8db5[m Migrate IB attributes to new decl attribute representation and fix a few bugs along the way
[33mc316556[m Fix <rdar://problem/16659058> Read-write properties can be made read-only in a property override
[33m89703e1[m SILGen: Reabstract values when injecting varargs into arrays.
[33m64c572e[m Serialization: Updates to use llvm/Support/OnDiskHashTable.h
[33me6276a1[m SILGen: Emit brace stmt exprs and for stmt initializers as ignored exprs.
[33me5bb774[m #if out function that's unused without objc ivar introspection.
[33m7c6f689[m Suppress duplicated initializers that come from importing class factories as initializers.
[33mc56d50a[m Introduce a named argument for imported nullary factory methods with long names.
[33m000aeff[m Keep track of the number of nullary factory methods we skip due to a "long name".
[33m812dc09[m Introduce the notion of factory initializers.
[33md80b689[m Introduce "convenience factory" initializers.
[33m7b75da9[m Fix release notes of assert handling to address end users
[33m8bc2ea4[m Use designated/convenience initializer terminology throughout. NFC
[33m0bfcd45[m Clang importer: import noreturn attribute on free functions
[33m9d7cade[m Add release notes about assert_configuration and Ofast.
[33ma526517[m Module interface printing: print all sub-sub-modules when instructed to do so
[33m448f0aa[m Mark declarations inside the closure that failed to type check as invalid
[33m3ac95bd[m swift-ide-test: add -parse-rest mode to allow one quickly check how a given ReST document parses
[33mb365285[m ReST parsing: add two more tests
[33mcd58ef3[m [inst-simplify] (upcast X2->X (ref_to_objectPointer X->ObjectPtr (objectpointer_to-ref ObjectPtr->X2 alpha))) -> alpha
[33mc4eeeb2[m [inst-simplify] (ref-to-object-pointer-inst (object-pointer-to-ref-inst x) typeof(x)) -> x
[33m0dac54a[m PrintAsObjC: attach comments to protocols in the generated header
[33me12f637[m Info.plist generation: use the correct path to the file in order to fix the build
[33m423296e[m Start generating embedded Info.plist files for Swift dylibs.
[33m86a434a[m Use dominance to remove redundant conditional branching.
[33m924e30e[m Rewrite BB args whose only use is in struct/tuple extract.
[33maae6526[m Remove optimization that re-uses branch conditions as Int1s.
[33m739eba9[m Reformat assert so that the message isn't split.
[33mcb9e8e8[m Remove include of unused header.
[33ma0b9719[m [IDE] Provide the declaration along with the SyntaxStructureNode.
[33m2c88bb3[m [AST] Modify mangleObjCRuntimeName to allow getting the ObjC runtime name of a class or protocol without needing a fully typechecked AST.
[33mebf73fe[m Rename -OFast to -Ofast
[33m7ea84bb[m Add -target-cpu and -target-feature options to arm64 importer. Re-enable arm64.
[33mf700a11[m Handle inheritance of factory methods imported as initializers.
[33mf390f53[m When imported a factory method as an initializer, mark the factory method unavailable.
[33md775152[m Revert "Add sugar syntax for @unchecked T?: T!"
[33m65f5a7a[m Fix a missing check for null SILDebugScope.
[33m8676ae2[m Teach name lookup to shadow factory-method-imported constructors with init-method-imported ones.
[33m17e4408[m fix <rdar://problem/16608609> Assert (and incorrect error message) when defining a constant stored property with observers
[33m1a8e1b8[m Add sugar syntax for @unchecked T?: T!
[33m26114ca[m [AST] Add some const goodness, NFC.
[33ma57e955[m Reflection: Disable visiting objc ivars in the default mirror.
[33m9c0c8ac[m [overlay] Add covers for UIKit orientation macros.
[33m0478817[m Remove Driver/basic.swift test.
[33m85ab7ed[m Remove mangling and demangling for block shims.
[33meaa6088[m SIL: Remove the now-obsolete bridge_to_block instruction.
[33me65aab4[m Remove unused variable from CompilerInvocation.cpp.
[33m822aa30[m Remove BlockShims.mm.
[33mb256ccf[m Switch to native blocks codegen.
[33mdf67daf[m return -> continue
[33m532b841[m [ClangImporter] Address the "try to clear your module cache to see if things start working again" mystical workaround that hits our dogfooders.
[33m789bb44[m IRGen: Handle indirect arguments to cdecl functions.
[33m1fe0b3d[m Modified the playground transform to instrument closure bodies wherever we find them.
[33mf56c683[m Start importing factory methods as initializers.
[33m318aba8[m IRGen: Implement block header generation.
[33m9000278[m Introduce MetatypeErasureExpr for erasing metatype values into existential metatypes.  Erase thin metatypes correctly in SILGen.
[33m5698fd3[m Don't look in the standard import locations when building the core standard library.
[33m96bc99e[m Revert "Add a flag -ignore-overlays to ignore overlays, and use it when building the standard library."
[33m97892b1[m Frontend: Add OFast flag
[33m45ffb41[m Remove AssertDebug hack and fixup make files
[33m989d554[m Add support for an assert_configuration builtin function
[33m527a314[m Remove duplicate code accidently introduced by r16447.
[33m267b416[m [simplify-cfg] Refactor 2x methods to fit LLVM style. NFC.
[33m063552c[m Emit the assembly markers for objc_retainARV on ARM.
[33m0df7fb5[m Add designated initializers for Foundation.
[33m1178747[m Clang importer: clean up overriding and avoid adding implicit initializers.
[33mfb56aff[m remove the highly controversial "newline at end of file" warning.
[33mf35acb6[m Updated the playground transform to handle switch statments.
[33m1b8087c[m [SILParser] Handle overloaded members for protocol_method and dynamic_method.
[33mf02b1d6[m selector syntax still being worked out.
[33m2dd564b[m Change the diagnostics message to: "immutable value of type ‘X’ only has mutating members named ‘Y'"
[33m265fd03[m Release notes for the removal of selector-style syntax.
[33mf2053e3[m Start rejecting selector-style declarations, with Fix-Its to tuple-style declarations.
[33m6680ed3[m Comment parsing: for now, treat classes, protocols and structs as "class-like" things
[33m68e8fee[m Comment parsing: put more information into the generated XML documents
[33m3cf3f42[m When targeting arm64-apple-ios, the target CPU is cyclone, which provides the Neon feature.  Do all the necessary plumbing to get this from the driver to the backend.
[33m960a6f2[m Improve the diagnostics of access to non-mutating members.
[33mea64762[m Eliminate the notion of "selector-style" declarations in the AST.
[33m8e597cc[m Eliminate argument parameter patterns.
[33m0ccc83d[m [IDE/ModuleInterface] Print a blank line between top-level Swift declarations.
[33m6caa1d4[m Make 'NSInvocation' unavailable.
[33m487db56[m [sil_combine] Change payloaded enum promotion to be keyed off of InjectEnumAddrInst and more flexible so that the only condition is that the store and the inject_enum_addr are next to each other.
[33m367c697[m Eliminate more uses of ArgParamPatterns.
[33m5e0e6e7[m [sil-combine] Canonicalize init_enum_data_addr+store+inject_enum_addr of a loadable enum with payload to a store of a loadable enum value.
[33m129aa19[m Remove the use of ArgParamPatterns in the AST printer and dumper.
[33m24b8044[m Ban using performSelector* in Swift.
[33mdedc3fa[m Disable arm64 build until rdar://16641385 is fixed.
[33m23a3b57[m Revert r16429.
[33mfdebe70[m Disable arm64 build until rdar://16641385 is fixed.
[33m4201f67[m IRGen: Implement type info for SILBlockStorageType.
[33m7107aee[m If a semantic error occurs while resolving an associated type during archetype construction, we should propagate the error rather than crash. (rdar://problem/16427613)
[33m211afa9[m Runtime: better crash debugging/reporting
[33mf9c75ff[m Use argument API names for generic function and constructor types.
[33m0046743[m [Serialization] Try to avoid serializing the same Archetype in different modules
[33m8220212[m Apply constructor argument API names to the constructor type.
[33me09e932[m Switch another ArgParamPatterns -> BodyParamPatterns.
[33m62fd967[m Use the argument names from a function's compound name when forming its type.
[33m2d014c0[m A couple small clean-ups.
[33m942676a[m Everyone loves a good Mirror, and this commit has plenty of them! With this check-in, we get Mirrors for IntXX, UIntXX, Float32, and we don't lose the existing ones for Double, Int, String and Bool
[33m70ed107[m Code completion: extend the hack to complete function call patterns after left paren to work with method calls on AnyObject and curried function calls
[33m236c581[m Code completion: complete "?.member" on T?, and ".member" on @unchecked T?
[33m894ca69[m Initializer full names now reflect what __FUNCTION__ should be. Use them.
[33m77bf996[m Fix -Wdocumentation warnings
[33m6493231[m Switch Objective-C selector computation for initializers over to the method name.
[33m2d70fba[m Give initializers compound names.
[33m2440796[m Add logic to treat 'performSelector*' as unavailable, but disable it for now.
[33mfd86438[m Imported '_attribute__((deprecated)' as 'unavailable'.
[33md8c9a2e[m Emit message for unavailable declarations (not just types).
[33mcb252d7[m Switch Objective-C selector creation for methods from argument patterns to arguments in the name.
[33me12afa2[m Start naming functions more uniformly.
[33mdb439c1[m Start introducing declaration names for more function declarations.
[33m86ecc72[m Start building compound names for functions parsed with the new signature style.
[33m69a1f91[m AST: Fix a typo that caused all generic struct property accesses to be computed.
[33m7c961a5[m Migrate off a few more ArgParamPatterns
[33mb0149f3[m Switch a use of ArgParamPatterns -> BodyParamPatterns.
[33m2feed65[m [constant-propagation] Teach constant propagation how to fold expect of a constant.
[33mcffc3d3[m [constant-propagation] Refactor constant propagation slightly to disable diagnostics so we can use it in the performance passes to help with branch simplification.
[33m78d7d28[m [constant-propagation] Remove from the delete list if we deleted them in recursivelyDeleteTriviallyDeadInstructions.
[33me8f15df[m [constant-propagation] Delete all FoldedUsers in one call to recursivelyDeleteTriviallyDeadInstructions to ensure we don't delete one of those instructions and then attempt to delete them.
[33m071d60f[m SILGen: Emit func-to-block conversions using the native SIL instructions.
[33mf384cbf[m Add a flag -ignore-overlays to ignore overlays, and use it when building the standard library.
[33m53b872a[m Correctly handle class-bounded archetypes when initializing opaque existentials.
[33mb74c29e[m Fix linking of the crash reporter client.
[33me86fc50[m  '6AppKit' is 7 characters, not 8
[33m43ee06e[m Runtime: abort if ObjC code tries to manually allocate a pure swift class
[33m4d16346[m Split out the autorelease test and XFAIL it on i386, which does not support the autorelease optimization.
[33mb7372d3c[m r16374 won't do us any good without this
[33m4e49b17[m I'm not sure how this compiles for anyone else.
[33m920aa60[m Add a frontend option -enable-native-blocks to stage native block generation.
[33m1e75561[m SIL: Type-check block storage instructions in the verifier.
[33m2312d1f[m SIL: Parse @block_storage attribute positionally.
[33mda41b2e[m Code completion: provide results for initializers after the left paren:
[33m0aeb095[m Code completion: change the spelling of DynamicLookupMethodCallTail chunk to "!"
[33m677d352[m Remove no-op and unused code from code completion that I have no idea about
[33ma054675[m Remove unreachable code in SimplifyCFG.
[33m918c488[m Whitelist all of the documented designated initializers in UIKit.
[33ma9ea63a[m [IDE/ModuleInterface] Adjust the indentation of regular comments to match the current indentation level.
[33m22d11c5[m Whitelist all of the documented designated initializers for AppKit.
[33mf9775c3[m [ClangImporter] When providing the display decls, make sure to include extensions of the module that extend classes from other modules.
[33mb3d85b6[m Currently we check if the block is directly reachable. This patch expands the check to global reachability by checking if the block is dominated by the entry block.
[33macdc425[m SIL: Add instructions to initialize and project block storage.
[33mca7ed40[m change Sema to synthesize getters and setters for properties in classes, even if they are @final.  To get good performance for them, just always perform direct access to the underlying storage, instead of going through the accessors.
[33mf7cf592[m Add a SIL-only '@block_storage T' type to represent on-stack storage for blocks.
[33m8956b2d[m tidy some code, NFC.
[33m9306fef[m Debug info: Emit the appropriate decl_file/line for import declarations. rdar://problem/16565308
[33m79feaa8[m [update LLVM] Debug info: Emit modules as DW_TAG_module.
[33m0bc2c10[m Enable the autorelease reclaim optimization for real by not doing various dumb things that break it.
[33m40cbdc3[m [specialization] Teach the specializer how to specialize existential->archetype and super->archetype unconditional_checked_casts.
[33m54e12fb[m Clang importer: use the selector-based lookup table to avoid importing methods with conflicting selectors.
[33mb09fbf7[m Centralize our addition of @objc attributes in the Clang importer.
[33m2dfed75[m Switch the Clang importer over to using ObjCSelector more often.
[33m3b6109e[m Add a member lookup table for classes keyed off an Objective-C selector.
[33madff537[m Initial support for the @NSCopying attribute on properties.  This is enough to wire it up, do basic semantic analysis and code gen a simple case of it.  There is more type checking work to come, so it isn't complete yet.
[33m3165077[m Expand checking for implicit uses of self in closures to include method calls, and add a fallback to catch anything else that is missed.  This resolve the rest of: <rdar://problem/16193162> Require specifying self for locations in code where strong reference cycles are likely
[33mf2ddc52[m Generalize UnresolvedDeclRefExpr and ForceValueExpr to work as implicit expressions, NFC.
[33me17286b[m merge two tests.
[33m50d130c[m Reapplying: [clang update] Update uses of OnDiskChainedHashTable to the OnDiskIterableChainedHashTable interface introduced in CFE 206189.
[33mf70879c[m Fix a weirdly complicated issue with the order of type-checking and applying attributes.
[33m2ebd5c7[m Revert "[CLANG UPDATE!] Update uses of OnDiskChainedHashTable to the"
[33mada9ebb[m [CLANG UPDATE!] Update uses of OnDiskChainedHashTable to the OnDiskIterableChainedHashTable interface introduced in CFE 206189.
[33m6790773[m Revert "Assert rather than going into an infinite loop."
[33m5ba256f[m Do not try to merge a block with itself.
[33m53b84c1[m Switch ValueDecl::getObjCSelector() and friends over to ObjCSelector.
[33m204c700[m Release note that imported block parameters can now take nil.
[33m3e8b1eb[m ClangImporter: Import block parameters as ``@unchecked (T -> U)?``.
[33mf7a375e[m IRGen: Correct the declared return type of block shims to match lowering of block types.
[33mfa8a10e[m Unbreak ObjCSelector and the new ObjCAttr.
[33m5e580ab[m Sema: Coerce functions to rvalue before looking through @unchecked?.
[33mcd4ca76[m Introduce the ObjCSelector class to store an Objective-C selector.
[33m18bf604[m Distinguish betweeen simple names ("foo") and zero-argument compound names ("foo()").
[33m75e5ae9[m Sema: Type-check the conformances of imported structs.
[33m7e12163[m Expand checking for implicit uses of self in closures to include method calls, and add a fallback to catch anything else that is missed.  This resolve the rest of: <rdar://problem/16193162> Require specifying self for locations in code where strong reference cycles are likely
[33m3bad92b[m AST: Remove the stopgap BridgeToBlockExpr and handle block <-> non-block conversions freely as function conversions.
[33m2b7f6b8[m rename Builtin.move to Builtin.take.  This matches the SIL naming better, and avoids confusion with the C++'11 notion of "move".  'take' destroys source, where std::move leaves it destroyable.
[33mb902c5e[m Revert "Limit PassManager to 25 reschedule iterations as a workaround for <rdar://problem/16591598>."
[33m9520460[m Clean up the import of Objective-C init methods as Swift initializers.
[33m53cc52e[m Split the initialization test cases into their own file.
[33mc1e4158[m Parse the new function syntax for initializers.
[33m45b45b8[m [cse] Teach CSE how to handle enum insts.
[33me74f40e[m [specialization] Teach the specializer how to specialize unconditional_checked_cast concrete_to_archetype and archetype_to_concrete.
[33m35c2b6e[m PrintAsObjC: use protocol remapping in the importer to remap to the original protocol name.
[33m570a158[m Assert rather than going into an infinite loop.
[33mba56076[m Fix misspelling of 'initializer'.
[33m3fff062[m Extend print(Double) precision to 15 digits.
[33m2abc1ea[m Small simplification of handling of expect built-in.
[33m6ac1e51[m Add an assert to detect an instruction being added as an operand of itself.
[33m6e5ca8a[m Clean up a number of Cocoa selector -> method name mappings.
[33m3be5c3c[m Selector splitting: turn all prepositions into directional prepositions except "with".
[33m6e90d34[m At long last, land the implementation of <rdar://problem/16397000> Should be able to override stored properties
[33m9b09c56[m [sil-arc-optimizer] Teach the ARC optimizer that it needs to check if a ptr escapes in order to say that a callee can not affect the ptr.
[33mb04b14e[m Refactor isNonEscapingLocalObject/getUnderlying object into their own file ValueTracking.cpp.
[33mf931674[m [IDE/ModuleInterface] Pick up the vertical spacing/grouping that is used in the clang module header.
[33m31a620f[m [IDE/ModuleInterface] Fix erroneously printed newline between a regular comment and the declaration it is 'attached' to.
[33m5293ec9[m Revert "Remove 'yet's from error messages."
[33m997b30c[m Remove 'yet's from error messages.
[33m9076575[m Sema: Reject @thin, @cc, and other function representation attributes in Swift.
[33mfaf79eb[m Add a build configuration option for -sil-verify-all.
[33m3de7e8d[m [Parser] Fix crash with invalid code.
[33m59399eb[m Test case for r16284.
[33m627da69[m Move the HasCheckedBridgeFunctions flag to the type checker, to protect against multiple DeclChecker objects being created in a given compilation.  (rdar://problem/16602275)
[33md44117c[m Revert "Revert "Postpone type checking of stdlib bridge functions until we encounter a declaration that will require one. (rdar://problem/16520213)""
[33m880227f[m Revert "Postpone type checking of stdlib bridge functions until we encounter a declaration that will require one. (rdar://problem/16520213)"
[33m77e57c9[m Enable the runtime to discover protocol conformances for types wrapped from ObjC The strategy we are using is to obtain the class name from the ObjC runtime (as apparently nominal type descriptor for ObjC-wrapped types do not contain a useful name string) and then crafting the appropriate mangled name for the witness Also, make AppKit another source of conformances. We currently have custom conformances for Reflectable that we are in Foundation (NSURL) and AppKit (NSView) - if more modules need to have custom mirrors, we might end up having to expand the list
[33m862d50a[m Change the layout of opaque existentials so that the value buffer comes first.
[33m2d28d70[m Remove the language/driver/frontend options to enable/disable mangled names for the ObjC runtime.
[33mc1fd5b5[m [IDE] For the module interface, add an option to not print parameter names.
[33m8d4964b[m Turn on namespacing of Objective-C class names.
[33m293d771[m [IDE] Add an option to skip printing declarations that start with '_', for the module interface.
[33mba30e56[m [IDE] When picking regular comments from clang headers, make sure that extensions/categories are printed in the right source location otherwise the comments will be out-of-place.
[33mdefccde[m [ASTPrinter] Introduce a function for the logic of whether to print a declaration or not.
[33m7fbb22e[m Revert "[sil-opt] When dumping a module, deterministically sort globals/functions/vtables/witness tables so that it is possible to diff modules."
[33m3b1841e[m Remove the unit test for MultiWordMap
[33m02ba8db[m [sil-opt] When dumping a module, deterministically sort globals/functions/vtables/witness tables so that it is possible to diff modules.
[33m1c74053[m [sil-opt] Add in support for passing in an SDK path so we can parse modules with clangimporter dependencies.
[33m9d7f0b6[m Rework the selector-splitting heuristics.
[33mae248df[m Some verify statements were wrapped in DEBUG() in PassManager.cpp that did not need to be. The reason why is the SILModule::verify is #ifndef NDEBUG out in no-assert builds. Thus the only thing these DEBUG() wrappers do is cause the user to need to pass in -Xllvm -debug-only=sil-passmanager to trigger the verifier. This also causes confusion for people not familiar with this property since they pass in -sil-verify-all and don't hit assertions in the verifier giving the mistaken impression that their code is verified when it is not.
[33m2da311c[m [IDE] For the module interface, don't print submodule imports, unless they are submodules of the module we are printing.
[33m01c2607[m AST printer: default to new-style function declaration syntax:
[33m6f2d4d2[m Add runtime tests to test Equatable, Hashable, Comparable, for a few core types.
[33me0209fd[m [ClangImporter] Don't update the clang node of the swift decl if one already exists.
[33m49ef6ab[m [IDE] Use ClangNode::getLocation().
[33m4c91bd0[m [IDE] Print out regular comments from the clang module headers, for the module interface.
[33m42a9429[m Enable block bridging.
[33m2fea7bc[m ClangImporter: Import block types as native function types when they can be bridged.
[33mef4afbc[m Allow function-type properties to use ObjC dispatch.
[33mba48d39[m Update IRGen enum test for r16243.
[33m46d35ed[m Change the layout of class existentials to put the instance pointer first.
[33m27f6e2f[m [sil-combine] Canonicalize inject_enum_addr of a loadable enum without payload to a store of an enum value.
[33m012fee5[m SILGen: Use bridge_to_block as a stopgap to bridge functions back into blocks.
[33m23e6fcc[m Only log variable declarations that have initializations, to avoid errors about use before initialization.
[33m688fc86[m Postpone type checking of stdlib bridge functions until we encounter a declaration that will require one. (rdar://problem/16520213)
[33m1452d24[m Small cleanup: Remove unnecessary calls to getDef(), mostly in dyn_cast<>(...).
[33m5bfed07[m Add a python version of the StringSort benchmark.
[33m8a85750[m Plumb a lot of querying for different kinds of existential type.
[33mff5c3f0[m Fix an obvious typo that I found while debugging somethig else. createdFunc was set to false twice on both sides of the branch.
[33m630ce68[m Completed my changes to the playground transform to support brace entry/exit.  We now maintain a stack of brace statements we know we're inside. The elements of this stack are colored:
[33m4023762[m Benchmark: code feedback for Nadav
[33md1121a3[m Reflection: Blacklist NSURL from default mirror functionality.
[33m11ed94d[m Provide a Swift-variant of NSLocalizedString in the Foundation overlay.
[33m4eedb71[m Release notes for default initialization of optionals to nil
[33m7e5028c[m fix <rdar://problem/16574105> Type inference of _Nil very coherent but kind of useless
[33m825e5be[m Default-initialize optional variables/properties to 'nil'.
[33m8f39464[m Limit PassManager to 25 reschedule iterations as a workaround for <rdar://problem/16591598>.
[33mf9d3a8f[m Move the precedence of 'as' and 'is' above comparisons.
[33md023035[m Allow associated types to have superclasses.
[33me325118[m Move @assignment to the new decl attribute infrastructure
[33m6a24e54[m Remove a separate bit for @objc inference, and use normal implicit attributes
[33m3972e2b[m Reimplement @unchecked suppression: print '@unchecked T?' as 'T?' instead of plain 'T'
[33m547e1b5[m Code completion: print non-inout '@unchecked' optional arguments as normal optionals, because the difference is not important for the caller.
[33ma98375b[m Cleanup, NFC.
[33m810afec[m Fix coding style and formatting
[33m6f099be[m AST printer: add an option to disable printing function representation attributes (@thin, @objc_block)
[33mc5d47d5[m Add a test that we don't import plain function pointer types
[33mfbfed25[m Qualify call to make_range to avoid ambiguity between {swift,llvm}::make_range
[33m7a3f527[m Qualify call to make_range to avoid ambiguity between {swift,llvm}::make_range
[33mb94b1bc[m Un-disable XCTest build that I accidentally disabled
[33mfa6ae94[m Re-organize the checking of @IBOutlet to better handle implicit optionalification.
[33mb285190[m Don't crash when 'swift -frontend' is passed no arguments.
[33m78506ba[m Introduce infrastructure for emitting value witness tables for non-constant-sized types, and use it for the existential witness tables.  NFC.
[33m969214c[m Key off of '-Wunreachable-code-aggressive' instead of '-Wunreachable-code-break' when determining whether to use -Wunreachable-code.
[33mbf0a540[m Updated the playground transform to log brace entries and exits.
[33m7f7e256[m [SIL.rst] Begin filling out the section in SIL.rst describing the general optimization passes.
[33m407e538[m [IDE] Make sure to handle the case of virtual-only attributes for syntax coloring. Add a test for the above. This addresses <rdar://problem/16584438>.
[33mfdd36e9[m [sil-mode.el] Update sil-mode for latest changes. This includes additions, renamings, and deletions.
[33m0bc4f9c[m Call SILFunction destructor when we cleanup functions so that if the function contains a function_ref, the function referenced by the function_ref has its refcount properly decrement.
[33m60a5265[m Deal with weird tuple element expressions that result from tuple-to-scalar conversions.
[33m45c0748[m Refactor Dead Function Elimination from SILCombine.cpp into its own file DeadFunctionElimination.cpp.
[33m82ace24[m Fixed a problem in the playground instrumenter that caused direct logging of expression to fail type check sometimes.  We introduce an intermediate variable, so instead of (pseudocode)
[33mf233d28[m expand on a note.
[33m5cf3543[m Fix grammar in comment. NFC
[33m7243305[m Remove Dmitri's local hack
[33m06e7202[m [stdlib] Array docs: use normal bullets
[33m2da97e2[m [stdlib] Array docs: correctness fix
[33mecda8ab[m [stdlib] Array docs: typo fix
[33m38d73b2[m [stdlib] Initial docs for the new Array design
[33mc7a2121[m Release-note improvements to @IBOutlet.
[33m274d0ec[m [inst-simplify] Simplify expect hints with constant value.
[33mdccf84b[m Remove a dirty development hack.
[33me245f9e[m SILGen: Thunk blocks into native Swift functions when bridging into Swift.
[33m7941efc[m SILGen: Remove dead forwardArgument methods from ManagedValue.
[33m94ea3a1[m SILGen: Bridge arguments when thunking C functions to Swift ones.
[33m7e97b48[m SIL: Allow copy_block to apply to optional block types.
[33mf57de31[m Reflection: Quell some build warnings.
[33m67351cf[m Since SILVTables and SILWitnessTables are bump ptr allocated, we need to call their destructor when we remove them so that the functions they reference have a decremented ref count.
[33m492dcb0[m Reject @asmname on a function in a local scope.
[33m0fc4f39[m AST printer: add an option to hide @exported
[33m1ce86d1[m Validate @IBOutlet specifically.
[33m6e4be5a[m Add an ObjC version to the StringSort benchmark.
[33me555c15[m An @IBOutlet of non-optional type implicitly becomes an @unchecked optional.
[33m2eef974[m Add more extensive tests for @IBOutlet validation.
[33me68fd4a[m AST printer: add an option to hide 'override' keywords
[33m8158237[m Diagnostics: refer to 'override' as a keyword
[33m110f85b[m Move @exported to use new attribute infrastructure
[33mcc30070[m AST printer: add an option to suppress @unchecked in imported declarations
[33m2d4342b[m Give an error if “@obj” is used without importing ObjectiveC.
[33m1f47262[m Use PrettyStackTrace in verifier, hopefully making verifier assertions easier to diagnose.
[33m5b82d84[m [serialization] Improve comment to make it clear we are only checking the functions/globals referenced by F's instructions not transitively forever. NFC.
[33mc8ecc81[m SIL: Don't reabstract functions with C calling conventions.
[33m9d54b85[m [serialization] Always serialize sil with shared linkage.
[33mcf15f74[m [serialization] Extract shouldEmitFunctionBody into its own function. Its easier to read this way.
[33m6f077f8[m SIL: Bridge thick functions to blocks in type lowering.
[33mb45bbde[m Fixed a bug in the playground transform, which caused it not to emit log calls for mutations of Objective-C objects.
[33m27bdc30[m A.Type is a subtype of SomeProtocol.Type if A is a subtype of SomeProtocol.
[33m9c198cd[m IRGen: In heap array destructors, iterate by the stride, not by the size of the LLVM type.
[33m4bb6773[m Move @IBOutlet tests to their own test file.
[33md5452d8[m SDK Overlay: Add Darwin overlay
[33m85a6cc1[m Make it really easy to generate value witness tables from C++ types and aggregates thereof.
[33ma51636c[m IRGen: Fix broken destructors for heap arrays.
[33mc68d634[m [serialization] Split writeModule into two methods: writeSILBlock and writeIndexTables. Also integrate writeTables into writeIndexTables.
[33m8aec65c[m Release note Dictionary changes
[33m3db3eab[m Debug info: Cleanup: use a single catch-all for all internal opaque types.
[33m3a60b89[m [ClangImporter] Don't import include guard macros.
[33m069469c[m Unindent code within a namespace.  NFC.
[33mefe04e7[m [IDE] When annotating the AST print output, report the decl kind for declarations.
[33m9be26fe[m ReST parsing features: actually, we expect escaping to work when parsing of inline markup is implemented
[33md72a13b[m ReST parsing: add information about current and expected support level of various section of ReST specification
[33m5e9b0ce[m expand this a bit.
[33m7ac0db9[m Module interface printing: don't print declarations from the Swift overlay when printing a submodule
[33mf90e0c1[m Make 'override' a keyword
[33m43db423[m Missed a spot in r16113
[33m68b609d[m Remove a kludge from deserialization that does not seem to be needed anymore
[33ma8f85d7[m Allow semicolon can be used as a single no-op statement in otherwise empty cases in switch statements.
[33mf4b0476[m [stdlib] Add a lazy "Map" Collection
[33m3de27d2[m [stdlib] Array: add bridgeCache/fix refCounting
[33m98c429e[m Untabify
[33mb74a433[m Add in some comments to SIL Serialization. NFC.
[33m9bf2959[m A few small debug print out related changes to SerializeSIL.
[33me115ce8[m Delete mistakenly-committed test
[33ma3f0926[m Make sure silMem2Reg does not crash on values in blocks that are not dominated by the entry block.
[33mab154ec[m Whenever we compute linkage of something with local linkage, if we can't find an abstract func decl, make the linkage shared.
[33m2c19127[m Fix header of SILDeclRef to be 80 columns.
[33md149851[m SILGen: Copy blocks received as function arguments.
[33m8be6372[m Fix the matrix shootout test
[33mde3df28[m [stdlib] Reorganize [Native]Array/Slice code
[33m2adf067[m [stdlib] CountAndCapacity => ArrayBody
[33m7f47ea9[m Sema: Rework __inout_conversion to pass inouts instead of pre-converted RawPointers.
[33m8adaab0[m Fold ExtInfo::isThin and ::isBlock into a "Representation" enum.
[33me9d2e12[m SIL.rst: Document copy_block.
[33m8d0e1d3[m [PLEASE UPDATE LLVM/CLANG] Debug info: Rebase DWARF output for imported modules on LLVM/trunk. This should fix most open module related bugs and in a way that is compatible with upstream LLVM.
[33mf3de7e6[m Debug info: use the proper version string, now that we have one.
[33m8ff35e9[m Check for a proper XCTest.framework in the platform
[33m0e2e76a[m Start building XCTest overlay for all platforms again.
[33m7e31d0c[m SILParser: use '"' around operator name when printing SILDeclRef.
[33m8582cc1[m [ClangImporter] Fix the interface type of imported protocol initializers.
[33mccc4b05[m When cloning closures, use the same linkage as the original.
[33m8afe04a[m Silence unreachable code warning.
[33m188611d[m [test] Add test for CGPoint/CGSize/CGVector/CGRect overlays.
[33ma572531[m Selector splitting: add more multi-words.
[33m1523351[m Indent the line.
[33m5db3af6[m Improve the diagnostics of immutable field access.
[33m9592bc6[m Add an assertion that checks that we deserialize the function that we searched.
[33m450efff[m Refactor check for animator proxy into helper method.  NFC.
[33m656fd1a[m Add blacklist for imported macros, which can be extended over time.
[33mb60cb39[m fix <rdar://problem/16554876> property accessor synthesization of @weak variables doesn't work
[33m78b4efd[m [IRGen] In IRGenModule::fatal_unimplemented, pass the specific error message to report_fatal_error().
[33m27daefa[m [stdlib] Delete obsolete Array.swift
[33m3e4f388[m Runtime: allow realloc
[33m2e76e91[m Runtime: corner case heap policy tweak
[33m2189947[m Use report_fatal_error instead of exit(1) after unrecoverable problems in SILGen or IRGen.
[33mcf539df[m IRGen: Crash on impossible type metadata cases instead of claiming them unimplemented.
[33me56c2de[m Split first selector piece after "get" or "set" if there is no preposition.
[33m9e75a46[m swift-ide-test: Add a -skip-unavailable option to skip unavailable declarations
[33m5d20720[m Some more camelCase string utilities.
[33m015c274[m Use Identifier like an Identifier, rather than a string wrapper, and fix some strange formatting
[33m3d404e3[m Remove dead argument parsing code
[33m79bddbc[m Import -animator (from NSAnimatablePropertyContainer) as returning 'id' instead of 'instancetype'.
[33m90f7864[m Implement John's suggestion of using "using SILCloner<ImplClass>::asImpl" to make calling Base::asImpl everywhere unnecessary.
[33mf21ff84[m Only examine box container pointer when determining whether to promote.
[33m01b05fd[m [specialization] SILCloner should always reference its builder SILBuilder via getBuilder().
[33m3525fac[m [specialization] Refactor SILCloner/SILVisitor to use an asImpl() method instead of directly calling static_cast.
[33mdc0b541[m Optimize calls to the builtin canBeObjCClass when possible.
[33m4e789a0[m Add an -enable-block-bridging frontend option we can hide disruptive changes to block bridging behind.
[33mfd9a9b5[m SIL: Add a CopyBlockInst instruction.
[33mdef2f97[m IRGen: Generalize 'hasSwiftRefcount' into an enum of reference counting mechanisms.
[33m676c799[m [test] Split framework comments test out to a separate file.
[33m329ca68[m [ClangImporter] Add some more tests for mixing methods and properties.
[33m1e14e28[m [ClangImporter] Don't look in protocols when seeing if a method is an accessor.
[33m684e4d7[m [ClangImporter] Move implicit properties test helpers to their own header file.
[33m372d651[m Don't propagate let-binding Initializations down into conditional-executed initializers.
[33m96cf01b[m swift_release may cause side effects when the constructor is called. GVN uses the swift alias analysis so we can't declare swift_release as having no side effects.
[33m0275393[m [stdlib] Add a CoreGraphics overlay with additions to CGPoint/CGSize/CGRect.
[33m0784577[m [test] Add CoreGraphics to the mock SDK.
[33m00427c0[m Canonicalize new SIL generation error message.
[33m835bfb1[m [ClangImporter] Add an option (off by default) to infer "implicit properties".
[33m28d4b2a[m Add more tests and harden nested archetype lookup.
[33m18f3bf6[m More progress towards getting same-type constraints working correctly.
[33mb9fdfe3[m Begin softening some restrictions on self-recursive constraints on associated types.  This will prevent cases of infinite recursion while building archetypes.
[33m1b50ad2[m Protect against lookup failures on Foundation bridge types during SIL generation.  (rdar://problem/16330675)
[33m7810ede[m [ClangImporter] "NSPost" is not a prefix of "NSPostingStyle"
[33m46a6724[m Selector splitting: "matching" is a preposition for Cocoa
[33m0a8d792[m Add some more multiwords.
[33m49387be[m Selector splitting: don't split selectors in the middle of whitelisted "multi-words".
[33mf6a196f[m Clang importer: when preposition splitting fails, split at the last word.
[33m5820f0d[m Add "using" as a preposition, again.
[33m4130bb1[m Add a whitelist of designated initializers and use it in the Clang importer.
[33m7e8d5f7[m Use a different selector encoding in the .def file that allows nullary selectors. NFC.
[33me160f90[m Don't poke at Objective-C ASTs for designated initializers: the importer handles this.
[33m4315fdb[m @availability: implement serialization and AST printing
[33m9a15e6b[m Attributes: hasAttribute() / getAttribute() returns only valid attributes by default
[33m67354b2[m Update number of bits after I added the 'Invalid' bit
[33m865a96a[m @noreturn: move to the new serialization scheme and add override checking
[33m9162937[m Unbreak the build after r205685, although now we have test failures.
[33ma87d65d[m Bridge NSArray <-> AnyObject[].
[33mc2f0f26[m Make Int, Double, and String bridge to Objective-C.
[33m4e4bea6[m SimplifyCFG: Don't pass an argument when simplifying switch_enum to br if the destination branch doesn't want one.
[33mce456b6[m AST: Handle substitution of an existential for an archetype in Substitution::subst.
[33m3455688[m Reflection: Resize our stub Array type.
[33mfb2a649[m Move @class_protocol to use the new attribute infrastructure ... and fix a few other bugs:
[33m73028a6[m AST Verifier: don't query isObjC() on protocols before type checking, the result might be invalid
[33m119ddc8[m [stdlib] Replace the old Array implementation
[33m276201c[m Error message should start with a lower case letter.
[33m0d8729a[m Forbid the any kind of inheritance from @final classes. Emit the following diagnostics:
[33m0364e0b[m Assert that the # of selector pieces matches the # of method arguments.
[33m57d54ca[m Clang importer: add a hardwired table mapping selectors to method names.
[33mc78a3ec[m Clang importer: cache the result of the selector -> method mapping.
[33m4b0e773[m Add support for the @final attribute on classes.
[33m5b8dab7[m AST dumper: dump the full name of a function.
[33m548f3c0[m [stdlib] Add and test single-element modifiers
[33m6baa7eb[m PrintAsObjC: Emit objc_runtime_name attributes for Swift classes.
[33m6882603[m [stdlib] Work around <rdar://problem/16530674>...
[33mea492e7[m SILGen: Only reabstract physical lvalues with real abstraction differences.
[33m100f500[m [REPL] Put REPL directives into the REPL history.
[33m3420911[m The REPL currently tries to "warm up" by running an harmless expression, Void(), before giving the user control
[33m6da952e[m Parse the new function syntax.
[33mf83a6c0[m AST printing: don't insist on having a Clang module in Swift-only modules
[33md279961[m SILGen: Don't try to write back to rvalue decl or member refs.
[33m13e8d9d[m [ClangImporter] Import properties even if there is a similarly-named method.
[33mf661691[m Don't serialize @final twice and add tests for printing @final
[33mc01f57a[m Sema: Don't skip inout-qualification of generic bases to property accesses.
[33m00d6c54[m Updated the playground transform:
[33m6275341[m Small clean-up in box-to-stack prmomotion.
[33m62844f5[m Emit storage and (lazy) global initialization for static variables in extensions of non-generic structs and enums.
[33m66ca29f[m Update the test iteration count and add the complex unicode string
[33m3b3d107[m Prefer class methods to curried instance methods.
[33mcecd37f[m Turn off OS X's automatic crash reporting while running tests.
[33m531a3d7[m [ClangImporter] Mark mirrored members from protocols as implicit.
[33m18f6e95[m Reflection: Look through existential containers.
[33m9ce381f[m SILParser: a decl in witness table can be from other modules.
[33m33eb263[m use isa instead of dyncast in a boolean context, NFC.
[33mb6724db[m rework how implicitly "direct" property access is being computed in two ways:
[33mcb59d34[m [stdlib] Get NewArray test building and passing
[33md94d11e[m reword a diagnostic to read more nicely.
[33md204074[m release note @final.
[33ma272ac7[m Add a change I forgot to add in the previous commit
[33mf198c28[m Serialize @required as a DeclAttribute
[33m2238a0b[m Fix buildbot.
[33m7a63906[m Serialize @objc as a DeclAttribute
[33m2f635e0[m Rename test to reflect current spelling of the attribute
[33mad2afae[m Start serializing out DeclAttribute objects using generalized serialization logic.
[33m26c4620[m Introduce a "descriptive declaration kind" for use in diagnostics, etc.
[33md2f7f90[m Re-introduce the restriction I zapped in r15928. getters/setters can't separately be marked @final.
[33me6aef8e[m enhance silgen and IRGen to not emit vtable entries for non-overriding @final members
[33m604ad33[m Handle getter/setter overriding more cleanly.
[33m25b8f01[m enforce that @final may only be applied to func/var/subscripts (@final classes someday), and that it doesn't appear on accessors.
[33m03584fd[m correctly reject @final on global functions instead of crashing.
[33m3830fac[m Carve out a new TypeCheckAttr.cpp file, and sketch out a new structure for doing attribute checking on a per attribute basis.  It makes a lot more sense for a given attribute to think about all of the decl kinds it may or may not apply to rather than all decl kinds thinking about the cross products of attributes they may apply to.
[33md70136a[m IRGen: Don't eagerly emit protocol descriptors for imported protocols.
[33m4bcc4da[m Selector splitting: the first parameter name is always relevant.
[33mba67a09[m Allow one to disable building the XCTest overlay via the CMake option SWIFT_BUILD_XCTEST.
[33mf581610[m IRGen: Emit an OBJC_CLASS symbol for @objc classes.
[33m42f36fe[m Build the XCTest overlay only for OS X for now.
[33m190c5c8[m Implement an XCTest overlay with basic assertions
[33m9804a1c[m Fix Version.cpp to actually stringify the version, not the macro name.
[33m65f82d5[m Update existing block shims for UncheckedOptional.
[33m646952d[m [serialization] Write substitution conformances as references when possible.
[33maa6aa72[m Add lazy conformances to nominals and extensions.
[33m22645d7[m Add a wrapper type for the union of ArrayRef and LazyMemberLoader+context.
[33m2c62cd4[m [ClangImporter] Maintain the invariant that new members come in last.
[33ma7a4f67[m Bump the reference count of a function as long as it's sitting around in the deserializer's . 1,2d 1i Bump the reference count of a SILFunction as long as it's sitting around in the deserializer's cache.
[33m9f60803[m IRGen: Handle C*VoidPointer in GenClangType.
[33m9ca6a39[m Diagnose attempts to override a 'final' declaration.
[33md07d0b8[m More fixes for FinalAttr.
[33m6b71d48[m When overriding a declaration, complain if the @objc names don't match.
[33mbe3ec63[m Make DeclAttributes visitable via an AST visitor.
[33mfe6160f[m Include SimpleDeclAttr to provide subclasses for simple declaration attributes.
[33m3528e70[m change -ast-dump to print the final attribute, change the serialization support to serialize and deserialize it (also bump the version #), @final is still a WIP.
[33mdf03c01[m Complete the release note with an NSError** example.
[33mbef2cdf[m ClangImporter: Enable importing NSFoo** as ObjCMutablePointer<NSFoo?>.
[33m9a3b131[m Augment the C*Pointer release notes with a note about void pointers.
[33mf1ee8cf[m Add a runtime test that uses C pointer parameters.
[33mb61bfe5[m ClangImporter: Fix logic order.
[33mdc23767[m [build] Fix SpriteKit linkage.
[33mc516330[m Type checker: tighten up the conditions under which we add a "function conversion" score.
[33m40f6756[m ClangImporter: Don't bridge pointers to forward-declared types.
[33m82b8247[m [build] SpriteKit depends on AppKit or UIKit.
[33ma386faf[m Add debug output indicating why a solution's score increased.
[33m7102f1b[m Clang importer: add a statistic for trailing prepositions in the first selector piece.
[33m1a6d270[m Module interface printing: add an option to skip the Swift overlay.
[33md491f51[m Add parsing and SILGen support for @final methods and properties.
[33m845eafa[m Revert unwanted mangling change I introduced in r15850.
[33ma49fcdb[m Add a *temporary* CMake option to turn on ObjC selector splitting when using the standard library.
[33m781adc0[m Add a *temporary* build configuration option for selector splitting.
[33m2424200[m Thread -split-objc-selectors through the driver.
[33m527b978[m ClangImporter: Import void* parameters as C*VoidPointer.
[33mf9936b0[m don't indent cases under a switch, NFC.
[33m58e3bd1[m Comments-to-Doxygen translation: add more tests
[33m104cfe8[m Clang importer: add some statistics related to selector splitting.
[33m8b684f3[m Module interface printing: bring back printing of submodules.
[33mc68fe1a[m Comment parsing / PrintAsObjC: translate Swift comments to Doxygen syntax when printing a header file
[33m3ad1f77[m ReST parser: add some tests for LineListRef, and fix a bug in LineListRef::getLinePart() found by them
[33m92b2004[m ReST parsing: add ReSTASTNode::dump() for use in the debugger
[33mfea886d[m SILGen: Bridge the C*VoidPointer types to COpaquePointer.
[33m2c28b14[m ReST parser: actually remember that we computed line classification so that we don't re-compute it over and over again
[33m6be1549[m Lowercase prepositions because it feels cleaner. NFC
[33m08e7797[m [Selector splitting] Drop non-directional prepositions from the beginning of imported argument names.
[33m6f232af[m ReST: now that LineList is lightweight and does not own data, pass it by value
[33mf370da9[m ReST: make data in a LineList be owned by ReSTContext, so that users don't have to carry all LineLists along with a ReSTContext.
[33m19ad509[m When simplifying switch_enum to a branch, don't forget the payload.
[33m9b5b140[m add some more sil verification smarts to check dominance properties of SILArgument operands.  I was trying to track down the root of the problem in rdar://16509020 but this wasn't enough for me.
[33m87144a8[m Make splitFirstSelectorPiece() static, now that it has just one caller
[33m1dd7959[m Imported C functions never have API names.
[33ma4e16bd[m Simple importFunctionType, now that it doesn't handle methods.
[33m708bb64[m Migrate initializer importing over to importMethodType().
[33me418e93[m Start cleaning up method name importing.
[33m6d6d689[m Add SpriteKit overlay with a typealias for SKColor.
[33m53914c4[m Remove the prohibition on "tuple-style" @objc methods.
[33m527b147[m Revert "Allow the first name of a selector-style function declaration to be separated."
[33m5fd25eb[m Revert "AST printing for functions where the first parameter has a separate name."
[33m12d0eeb[m Move more of the Clang importer's camelCase logic to the new utilities.
[33m47bf136[m More assertion cleanups. Thanks, Joe!
[33mb941c86[m [Basic] Introduce LangOptions::getTargetConfigOptions().
[33m5385d4e[m Clean up a slightly wrong assertion. <rdar://problem/16499612> assert building Foundation with SWIFT_ASSERTS=NO
[33maf71988[m silence warnings.
[33m8102dee[m SILGen: Bridge ObjCMutablePointer.
[33m516d5b9[m Rename test.
[33m6496d69[m Simplify down to a single command-line option for preposition splitting.
[33m4368074[m Runtime: more dead code deletion
[33m37a4ce2[m Produce an error with Fix-Its for the "separated" call syntax.
[33m30e6d1d[m Runtime: remove dead _ObjCSuperClassHack
[33mfc6b203[m Only generate derived conformance bodies for decls in the primary source file.
[33m0324b9e[m Don't walk into an as-of-yet-unsynthesized function body.
[33m63c1ef7[m Use delayed bodies for derived Equatable and Hashable conformances as well.
[33m107eeef[m Allow AbstractFunctionDecls to have their bodies "synthesized" on demand.
[33mc15862b[m [specializer] Fix a bug I noticed on inspection. Converted the checked_cast_branch test to a .swift to get around parsing issues that will come up in the next bit of commits.
[33mad3a656[m [stdlib] Implement NSObject's == and hashValue() using -isEqual: and -hash.
[33m2bcc30e[m [verifier] Make sure that every BB is a successor of its predecessors and a predecessor of its successors.
[33m234b1e2[m Release notes for @objc name.
[33m4c97c67[m Runtime: remove stray debugging hook
[33m96d1f47[m Runtime heap: mixed fixes that make debugging easier
[33me1a60ea[m Runtime: Use 'auto' more. NFC.
[33m404d89c[m Release note the UncheckedOptional import change.
[33m925097a[m Add utilities for lower- and sentence-casing camelCase strings.
[33m23bd9a1[m [ClangImporter] Add ClangImporter::getClangModuleHash().
[33m41dbe53[m [AST] Add ClangNode::getLocation(), that returns the clang SourceLocation.
[33m31bab38[m When attempting to obtain the context type of a type extension, we were never taking into account the fact that the extended type could be potentially be unbound. (This could occur, for instance, via a forward reference to a member defined in an extension to a generic type.)  This problem has been popping up a lot lately, and was making some of the recent runtime work difficult.  (rdar://problem/16481483)
[33mf6e87de[m Rework SILGen's emission of release_value to have it auto-merge into retain_value instructions, just like we do for strong_retain/release.
[33m3b29fb6[m fit in 80 columns and format more nicely :)
[33md6a173f[m Add some utilities for working with camelCase names.
[33mf4c018d[m Correct filename in the comment
[33md72109e[m Module interface printing: don't print submodules (either implicit of explicit) of the module being printed
[33m9dc1d22[m Split a test to reduce runtime of individual tests
[33m78e354b[m AST printing: make PrintDefaultParameterPlaceholder the default (since we are not going to implement expression printing any time soon), and fix a bug in its implementation: when used with deserialized modules, "= default" was not printed.
[33m0fdaf47[m IDE tests: extend the mock framework so that it can be reused in SourceKit
[33m7514b8a[m IDE tests: consolidate test clang modules into an existing mock SDK
[33mdc6bf35[m This test actually passes now; I think it was just confused by the driver option before.
[33mc163b30[m Enable importing ObjC pointers as UncheckedOptional.
[33m1071ac6[m Update standard library and test suite for importing ObjC pointer types as UncheckedOptional.
[33m6634e42[m Add UncheckedOptional<T> even to special typedef types.
[33m1e5164a[m Permit (again unsafely) T parameters to override @unchecked T? parameters, even for non-class T.
[33m6d213c1[m Use LLVM's inttoptr and ptrtoint instructions to coerce those instead of going through memory.
[33m2fdee0f[m Allow a method to be overridden with (unsafe, unchecked) laxity about optional types.
[33m6ae5bfb[m Allow @objc protocols to be implemented with some (unsafe, unchecked) laxity about optional types.
[33mafea47b[m rename "destroy_value" to "release_value", part of rdar://15889208.
[33ma0a65c0[m change the sil parser/printer to use retain_value instead of copy_value.
[33m6540423[m rename CopyValueInst -> RetainValueInst.  The .sil syntax isn't changed yet.
[33mcc0dcfe[m Allow protocol methods that return Self? to be called on existentials.
[33m25464e9[m Add a convenience method for constructing an optional type from an OptionalTypeKind.
[33mba34976[m SILGen: Implement lowering for writeback conversion.
[33mdd96f5f[m [stdlib] Give ArrayBufferType its own file
[33m079821c[m [stdlib] Start generating actual (new) Array types
[33m004998e[m [stdlib] Move SliceBuffer into its own file
[33m8f1c2d1[m Sema: Implement type-checking for inout writeback conversion.
[33m9189145[m Change DeclName over to basename(arg1:arg2:...argN:).
[33m2dcc1e7[m Remove unnecessary Resolver argument from SILType::isSuperclassOf since SILTypes are only used after type checking.
[33m6252065[m Change names of tests from previous commit to match the rest of the specializer tests.
[33m1e9a609[m [specializer] Teach the specializer how to handle unconditional_checked_casts, checked_cast_branches that were originally archetype -> archetype but as a result of specialization are now a different sort of cast or a redundent cast.
[33m13d23ea[m [irgen] Implement lowering of unchecked_checked_cast downcasts of addresses.
[33m1aa676f[m Updated the playground transform:
[33ma1c111f[m [test] Add %target-swift-frontend substitution.
[33m9fbc828[m [CMake] Third try on getting line-directive to play nice.
[33md52edd8[m Add -I and -F support to lldb-moduleimport-test.
[33maff4ea1[m Remove unused TypeChecker::definePendingImplicitDecls.
[33mad36b4f[m Make helper functions static.
[33m4a09e40[m Teach IRGen how to lower upcast of addresses.
[33m8740666[m Change SILCloner to be able to remap additional non-instruction based SILValues such as SILUndef.
[33m0970880[m Create a SILType wrapper for TypeBase::isSuperclassOf.
[33m2c15c6b[m Add a helper function SILBuilder::createBuiltinTrap for creating traps.
[33me42a3e5[m AST printer: undo the damage of r15737, while retaining the whitespace handling refactoring, allowing ASTPrinter callbacks to be called exactly when a first non-whitespace character of the declaration is printed, ignoring the indentation and leading blank lines.
[33m1002ff3[m Add some doxygen comments for getStartLoc(), getEndLoc(), getLoc()...
[33m95cc4ef[m AST printer: print a blank line before a declaration with a documentation comment
[33md68ad2c[m Simplify code
[33m06eb1f0[m Revert "Adjust warning location for 'missing override' to point to the introducer.  Fixes <rdar://problem/16243425>."
[33me531e4d[m AST printer: improve handling of newlines and indentation to more precisely capture source ranges of declarations
[33mcbc69bc[m Restrict use of default arguments on protocol method signatures.
[33maf5aead[m Actually pass module name to ide::printSubmoduleInterface()
[33mc580152[m [build] Don't use CMake generator expressions
[33mefb2a60[m Module interface printing: add a libIDE API to print a Clang submodule
[33m0e533f0[m @objc inference: completely ignore @weak and @unowned on VarDecls for the purpose of inferring @objc
[33mc4faf8c[m Clone partially applied functions in an effort to eliminate more boxes.
[33md31e934[m Fix CHECK-LABEL that is missing colon.
[33m4c7ffc7[m Adjust warning location for 'missing override' to point to the introducer.  Fixes <rdar://problem/16243425>.
[33m723e0a0[m Disable examining partial_apply bodies until the cloning part is done.
[33m0964cc4[m When recovering from 'undeclared type' errors with a remapped type, use the remapped type as the actual type.
[33m61de944[m typographical changes.
[33m9a9b66d[m mention the di rules
[33mc1ee79e[m Collect the box pointer operands of partial_apply that are unneeded.
[33me0a03da[m Retain, release, and dealloc_box do not cause their operand to escape.
[33m5d2115d[m Factor out mapping an operand to a parameter index. NFC.
[33mf1180f5[m in order to work correctly for non-@objc protocols. Language features like erasing concrete metatype values are also left for the future.  Still, baby steps.
[33m83a830e[m Release note C*Pointer<T>.
[33m99e13bc[m Release notes for the revised enum prefix stripping rules.
[33m97627b1[m [ClangImporter] When matching enum prefixes, handle plural enum names.
[33me949943[m [ClangImporter] Drop the 'k' prefix of an enumerator named 'kConstant'.
[33mfdbfd24[m [ClangImporter] Revise enum splitting to not stop right before a number.
[33m9789ec1[m Oops, fix logic inversion.
[33m9d580f6[m CMake: Fix string escaping of compiler version so that it works with the Xcode generator.  Xcode did not like parsing strings with unbalanced quotes in the plist file.
[33m53d9d93[m ClangImporter: Use clang::Type::isObjCObjectPointerType instead of isa<>.
[33md8e39d1[m Runtime: finish SwiftObject
[33mb9299ed[m ClangImporter: Import pointer parameters as CMutablePointer/CConstPointer.
[33m2c804da[m Update failable initializers proposal.
[33m4e73547[m Change SerializedSILLoader::create to return a unique_ptr and use that everywhere so we don't leak SILLoaders.
[33mf1899e1[m Change hasUnboundGenericTypes to accept a CanType argument.
[33m62eb79e[m [sil-aa] Change aggregateContainsRecord to compare CanonicalTypes instead of Types. One should never compare non-canonicalized types.
[33mbba63fa[m Runtime: Add LLVM_LIBRARY_VISIBILITY to a few APIs. NFC.
[33m0e8de87[m Runtime: more SwiftObject API completeness
[33m7b771af[m Add limited build configuration support for testing against compiler submit versions.  (rdar://problem/16337966)
[33m09f2e9e[m WIP Runtime: Zone cleanup to use C++ more. NFC.
[33m2b9b1d0[m Make preposition list actually match what I'm proposing
[33m4a6edd4[m For 'undeclared type' errors for remapped types, put the fixit with the error itself.
[33mb6cc31b[m @objc inference: infer @objc on @weak types that are ObjC pointers
[33m19f22d9[m [utils] gyb/line-directive: fix up line alignment
[33m82a98a9[m For uses of 'NSUInteger', also suggest 'UInt' in the fixit for the "undeclared type" error.
[33mc2354eb[m USR generation: generate USRs for imported macros
[33m580ab38[m Cleanup trailing whitespace
[33m2c96263[m Clang importer: when importing a macro A that resolves to another macro B, put the imported macro into the module that owns A, not B
[33mc733f3e[m [build] Integrate gyb line-directive processing
[33m800cba5[m [stdlib] Bring most of ArrayType into the stdlib
[33m0727628[m [deserialization] Add in the linker pass.
[33m0d0c00c[m [deserialization] Create the SILLoader for a SILModule lazily the first time deserialization occurs instead of when the SILModule is created.
[33mfb22ec4[m Fix grammar in diagnostic I just added.
[33m39dc977[m For "unknown declared type" errors involving remapped types, suggest the remapped type as a fixit.
[33m4ed1bbb[m We know extra things about super-bounded archetypes the same way we know them about class types.
[33m1923cf5[m existential_metatype returns a thick metatype, but dynamic_method really expects an ObjC metatype.
[33m9490da8[m Inform the runtime that metatype values have extra inhabitants.
[33mc4d8f23[m When performing contextual lookup for .memberAccesses, permit the result to be *convertible* to the contextual type and not merely *exactly equal*.
[33m4f9f945[m Teach the Clang importer to add @objc(selector) attributes for imported methods and initializers.
[33m6e03b14[m Always coerce the operand of an optional force to Optional type,
[33ma52b747[m Don't forward-declare BumpPtrAllocator to be compatible with older and newer clangs
[33m516bf6f[m Peephole forces of certain optional-to-optional conversions.
[33m9153ff0[m Remove workaround for missing arm64 backend, now that it is committed upstream
[33mefabe13[m buildbot-script: build SourceKit unit tests before testing SourceKit
[33m8ddd56e[m Don't allow 'unavailable' methods to be overridden.
[33mfa91f5f[m Only allow 'unavailable' methods in protocols that are marked @objc.
[33m16ffbc6[m Extend @availability(*,unavailable) checking to protocol methods.
[33m80df698[m Teach ClangImporter to import __attribute__((unavailable)) as @availability(*,unavailable).
[33mf2578cb[m Use a named @objc to provide the name for methods, initializers, getters, and setters.
[33m584009d[m SIL: Remove copy_value's result.
[33me07f347[m Allow one to specify @objc(name) on getters and setters of abstract storage declarations.
[33mb87fb13[m Implicitly force the base object when building a dynamic lookup call.
[33m7140409[m Add Builtin.fixLifetime as a way for library code to fix object lifetimes.
[33mc98c4d5[m Move Benchmark.swift out of the stdlib now that we can deserialize from the stdlib.
[33m6946e86[m [deserialization] Enable deserialization of VTables by default.
[33m08cd417[m [deserialization] Rename addCalleeFunction() -> addFunctionToWorklist(). CalleeFunction is an inappropriate name since we are using this also for deserializing functions referenced by vtables and witness tables.
[33mb0e3789[m Add some printing utilities for ObjCAttr.
[33md51744e[m Clang importer: add @objc(name) attributes to imported classes and protocols.
[33ma0e384f[m A named 'objc' attribute on a class or attribute provides the Objective-C runtime name.
[33m9ceefe8[m @objc methods and initializers must have the right number of ':'s.
[33m09d2621[m Test the error about empty parentheses on the objc attribute
[33m927362e[m @objc subscripts cannot have a name
[33m936d26e[m @objc naming: classes, protocols, and properties must have simple names.
[33mb499786[m Parsing, representation, and printing for @objc(name)
[33ma070724[m Thick and ObjC metatypes have spare bits.
[33mad1297a[m [sooner] Save some thoughts about generators.
[33m055e0ef[m Add an "implicit" bit to DeclAttribute.
[33m323b182[m Adapt to upstream changes in LLVM and Clang.
[33m1bf3ca4[m Improve variable name in helper function.
[33m622b888[m Minor cleanup in debug statistic.
[33mdda599f1[m Refactor to separate collection of promotable boxes from promoting them.
[33m9ef1ba1[m [stdlib] Rename file ArrayBridge => ArrayCore
[33mcd0bf9a[m [stdlib] Add and test the new Array core
[33m7da624a[m Revert "Fix build failure with instrinsic remaining (Extend|Trunc)VecArgument -> (Extend|Trunc)Argument"
[33m8e698b9[m Factor out common code for getting a parameter.
[33ma18b979[m Fix another logic inversion bug.
[33m5cc6a44[m Correct inverted logic.
[33m66d7799[m Move escape helper functions back to AllocBoxToStack.cpp.
[33mcf4c038[m Typo
[33m7165553[m Sema: Use JoeP's "discard failures" feature to keep inout type failures from sucking.
[33mf6f3d6c[m SIL: StringLiteralInsts aren't identical if their encodings differ.
[33m86faf30[m SILGen: Emit bridging from C*Pointer to UnsafePointer.
[33mafd5913[m SIL: Add a FixLifetime instruction.
[33m57b6afc[m stdlib: Implement implicit conversions to C*Pointer types.
[33m953c93d[m Sema: Rework inout conversion to do simple member lookup instead of using a protocol.
[33m9f7dab7[m Make the ASTContext parameter to MetatypeType::get optional for type-checked types.
[33m5eb493f[m Sema: Don't crash if conformance testing an inout conversion type fails.
[33mb3e9a17[m SILGen: Implement inout address conversion.
[33m46f77c6[m Sema: Build the AST for inout address conversions.
[33m93f319c[m Sema: Set up constraints for inout conversions.
[33me7a468d[m stdlib: Add BuiltinInOutAddressConvertible and BuiltinInOutWritebackConvertible protocols.
[33m22ed644[m More groundwork for further improvements to box-to-stack promotion.
[33m1e33dad[m Allow @asmname on classes and protocols,
[33maee0cb1[m Add a runtime test for Objective-C class namespacing.
[33m9400e89[m Emit @objc classes using namespaced names under a new flag -enable-objc-mangling.
[33m095633f[m Runtime: Enable Instruments object lifecycle support
[33m5bc01ea[m [IDE] Allow the caller of ide::printModuleInterface() to control whether documentation comments should be printed
[33m7591420[m Start wiring up @availability checking for types.
[33m48dfa88[m Fix build failure with instrinsic remaining (Extend|Trunc)VecArgument -> (Extend|Trunc)Argument
[33m8fb7dbe[m Overload checking: add a test that I forgot to 'svn add'
[33m0e00f51[m Overload checking: implement simplistic overload checking for top-level variables and types
[33m286b309[m Return macros in visible decl lookup
[33m1d6c76c[m Module interface printing: pass through documentation comments for imported declarations
[33mf63939d[m Limit the introduction of "super.init()" calls to when it's safe.
[33mc3958ea[m Import DynamicSelf types as unchecked optionals when that import mode is enabled.
[33m71381cc[m Petty optimization that I noticed while doing significant work in this file that turned out to be unnecessary.
[33m2c0b89c[m Recognize -> Self? as an optional dynamic-self return, and correctly handle Self? downstream in a number of places.
[33mc388bb9[m Raise emitOptionalToOptional up to be more generally available in SILGen.
[33m3c8eb16[m Rename replaceResultType to replaceCovariantResultType and make it preserve optionality.
[33m6497966[m Make it easy to grab the OptionalTypeKind when checking for an optional type.
[33m6911116[m Updated the playground transform to handle loop constructs and mutations of variables.
[33m275eb64[m Rename the option for default parameter placeholder to better reflect the meaning, PrintDefaultParameterPlaceholder.
[33m7f83777[m Add an option to print a placeholder for variable initializers. This allows us to pretty print default function parameters as: func foo(arg1: Int = default)
[33m7f11e5b[m Get the parse phase to allow imports in contexts other than toplevel code when DebuggerSupport is turned on.
[33m9dd5fa3[m Add in some comments to SILVTable. NFC.
[33md36f33f[m Add option to discard constraint application failures associated with a given locator.
[33ma422886[m Clang importer: add a workaround so that we don't import literals with ud-suffix
[33m4156c93[m Fix -Wdocumentation warning about @cc not being a valid command name
[33md6698f3[m [Parser] Skip form feed and vertical tab characters as whitespace.
[33m0bb0962[m Move the validation of uses of the box pointer into a separate function.
[33md084edd[m [ClangImporter] Add ClangImporter::getClangOwningModule() for a ClangNode.
[33mc4f407b[m Fix whitespace errors. NFC.
[33m3bca84f[m [devirtualization] Refactor optimizeClassMethod to use SILModule::lookUpVTable. Also refactor the method a bit.
[33mfb8b3f3[m Remove unnecessary include of std::string. NFC.
[33ma571cd8[m [deserialization] Add ClassDecl -> VTable map to SILModule.
[33mfdaa10b[m [deserialization] Teach WitnessMethodInst how to deserialize SILFunctions referenced by a witness table.
[33m8162660[m Wire up basic driver support for App Extension restrictions.
[33m07a4449[m Remove vestigial comma-separated attribute list for declarations.
[33ma54848d[m Fix regression when parsing #if clauses without a configuration expression.  (rdar://problem/16376781)
[33m4867e37[m Restore r15378: fix the AST printer to print "let" for let variables. Update the associated tests.
[33m831b444[m If only C++ had a definite initialization pass...
[33mbcab632[m When requesting members or protocols from a type declaration, force any delayed members by default.  This allows us to pretty-print otherwise unresolved implicit members of imported enums.  (rdar://problem/16430343)
[33ma43be12[m Don't bother checking for incompatible overrides in IR-gen.
[33mf6426f2[m [PrintAsObjC] Use the selectors provided by the AST.
[33m5891313[m [FunctionNameDemangle] Don't pass "INSTALL" to add_swift_library for this target, use install() directly.
[33mf3fadde[m Don't return macros in visible decl lookup, this crashes inside Clang while doing code completion from Cocoa module
[33m92b29ef[m Revert "Module interface printing: pass through documentation comments for imported declarations"
[33mc07f328[m Separate analysis from rewriting in box-to-stack promotion.
[33mc2f2e7f[m [ClangImporter] Handle categories on partial interfaces.
[33m3057645[m [ClangImporter] Resolve @partial_interface to a Swift class, like @class.
[33m019bb04[m [Clang importer] Import initializer methods in protocols as initializers.
[33mff128d6[m Assert that a mark_uninitialized use is the only use of an alloc_stack address.
[33mf02cdba[m Minor cleanup - add accessors for a box's container result and address result.
[33m5167296[m Remove the unused @fragile, @resilient, and @born_fragile attributes.
[33m1cdd295[m Move the @objc attribute over to a DeclAttribute.
[33m059a8ba[m Update escape helpers with a few more cases.
[33mcae8562[m Reformat for 80 columns.
[33m78931ea[m Fix typo: addres -> address
[33mf60f218[m Stub out bitfield space in DeclAttribute.
[33m30c6eef[m Module interface printing: pass through documentation comments for imported declarations
[33mb9ac563[m Wire up initial diagnostics for checking 'unavailable' declarations.
[33m0617508[m LangRef: add array and dictionary literal syntax
[33m5e57104[m Unindent and fix comment
[33m7e294ee[m Module interface printing: print imported Clang declarations in header source order
[33ma15acc0[m Remove duplicated type name in comment and fix some questionable formatting
[33m962c924[m Clang importer: put macros into correct module and return them in visible decl lookup
[33m07ba44c[m Remove unneeded imports.
[33m406bc0c[m [deserialization] Change SILLinking to use SILModule for linking instead of performing the linking itself.
[33m3d0cf8b[m [build] Fix iOS bugs, again.
[33m1175338[m [build] Fix typo.
[33m2825f83[m [build] Fix some bugs in the new iOS build handling.
[33me3afea9[m [build] Add options to separately skip iOS device and simulator builds.
[33mbdf5f5b[m [build] Add options to separately skip iOS device and simulator tests.
[33m2a63364[m Revert "Add -Wextra-semi to list of warnings to build Swift with."
[33m3f0ff8f[m Remove @unavailable, and move to introducing basic (sham) parsing for @availability.
[33mce0c589[m Runtime: crude enumeration to generate statistics
[33m56e2b28[m Remove more unnecessary semicolons.
[33m722c5f8[m Reverse the boolean logic of the function to make it more readable. NFC.
[33ma6d2e03[m handle the unhandled case in the switch.
[33m6a0f2cf[m remove more extra semicolons to clean up warnings.
[33m838323c[m Remove extra semicolon
[33mda6a9fe[m TBAA: Recurse into unbound generic types when analyzing nonimal types. This allows us to inspect UnsafePointer<T> that does not store T anywhere. This commit removes the retains and releases in RC4 again.
[33m8fc23fb[m Add -Wextra-semi to list of warnings to build Swift with.
[33ma2f460f[m Remove extraneous semicolons.
[33m72ffc91[m Clean up attribute checking during serialization.
[33meebe1eb[m When importing external enum types, delay the creation of implicit members and their associated support functions until after the types are actually referenced.
[33m35f00fd[m TBAA: Fix the type relationship between aggregate types by scanning the record types recursively. Example: Float* may alias Point* because Point may contain a float.
[33mf1d14c0[m [Basic/LangOptions] Remove std::unordered_map/unordered_set from LangOptions and use SmallVector instead.
[33m97c89ac[m Convert remaining veryAttr*Serializable functions to verifyAttrSerializable overloads.
[33md798b1f[m Use overloading, per Jordan's suggestion, for checking attribute serialization.
[33m5779d43[m [ClangImporter] Resolve forward @protocol declarations like we do @class.
[33m37af527[m Check the "isObjC()" property, not the actual attr, in refined @objc protocols.
[33m9bb6eab[m [Decl Attributes] Change DECL_ATTR to specify serialization constraints for attributes.
[33mea31998[m SILParser: handle overloaded members for super_method.
[33m7528284[m Type checker performance hack
[33mdc1849c[m Add a release-note for the refined enum prefix dropping.
[33m2477afe[m Rework the section on "dropping prepositions" to be more specific
[33m2c94b6a[m Make it clearer that we're planning to drop "with" and "for".
[33md196805[m Comment-to-XML conversion: don't try to get line and column number for imported declarations
[33m60063a8[m fix <rdar://problem/16406886> Observing properties don't work with ownership types
[33m751d5bd[m Reword and clarify an awful paragraph.
[33m45eadd1[m Rename AddressOfExpr to InOutExpr.
[33meea8015[m fix a typo
[33m38c6b19[m AST printing using the proposed unified function syntax, when splitting selectors.
[33m46fbf21[m Remove trailing whitespace
[33m04b9f8c[m Code completion: correctly call type checking routines for a function nested inside a closure
[33m0168a70[m dumpContext(): correctly dump AbstractFunctionDecl context if the type is not set yet
[33mb7a85f2[m [IDE] Do syntax annotation for '#if' constructs.
[33m415a703[m [AST] In IfConfigDecl, keep track of its members per the block they belong to.
[33mc5f8821[m [Basic/LangOptions] Use unordered_map/unordered_set for the build configuration options.
[33m121bf14[m [AST] In IfConfigDecl/IfConfigStmt keep track of whether the IfBlock is active or not.
[33m3064e04[m [Parser] Add the IfConfigDecl/IfConfigStmt ahead of its active members, so we can see it before them, in source order.
[33m4f1bdd4[m [ASTDumper] Dump an IfConfigDecl.
[33m8f810a3[m [AST] Add EndLoc to the IfConfigStmt.
[33mf58b5a5[m [AST] IfConfigStmt will always be 'explicit', remove the 'implicit' parameter.
[33m86a64d8[m [AST] Add hasElse() and getEndLoc() to IfConfigDecl.
[33mf2ed6dd[m Reflection: Add additional dispositions and an 'AttributedString' QuickLookObject case.
[33m1094912[m Initialize class member with ctor argument rather than itself.
[33md98030b[m [ClangImporter] Include the enum type name in enum prefix stripping.
[33m694987d[m [ClangImporter] Don't mirror root class methods returning instancetype.
[33m4712476[m Wire up basic parsing support for @unavailable.  WIP.
[33m3afa481[m Refactor string literal processing from @asmname into helper method.
[33m5500bda[m Add a command line flag for removing cond_fails in SIL.
[33mc8c4e83[m Fix DeclAttribute::print support for @asmname.
[33m3673fde[m Change attribute 'asmname' syntax from '@asmname="..."' to '@asmname("...")'.
[33m13e0654[m Fix <rdar://problem/16411449> ownership qualifiers don't work with non-mutating struct property
[33md2bea41[m Remove reemitAsSubstituted.
[33m50c771e[m [IRGen]. Add support for extended encoding of @objc classes which are defined in swift (not imported). // rdar://16308986
[33m0e40440[m Take Jordan's suggestion to rename @selector(...) to @objc(...).
[33mc5ffbca[m Fix a few typos
[33m059a549[m Formatting fixes.
[33mee599c0[m Objective-C and Smalltalk don't have keyword arguments per se
[33m7def25b[m Fix 2x comments and remove trailing whitespace. NFC.
[33mc5d8e12[m Don't remove BB args after a conditional cast terminator.
[33ma586b6d[m Unified function syntax: switch to space-separated API name / parameter name.
[33m44c7a73[m ReST tests: add a test and remove a test from comments that was already implemented
[33m41ad295[m Alloc via ASTContext to avoid leaks. // rdar://16308986
[33mc3183ae[m Remove "by" as a dropped preposition (it's still a preposition).
[33m8d59f36[m Implement a basic ReST parser on block level, producing a ReST AST
[33me4260da[m Remove useless "dropped?" entries from the table.
[33m41ca928[m Selector splitting: kick "over", "per", and "without" off the island.
[33m29c004d[m [stdlib] NewArray slicing, finally
[33m011f2f0[m fix <rdar://problem/16382973> DI misses destroy_addr because allocbox_to_stack isn't preserving mark_uninitialized invariants
[33me85e106[m Un-fuse two lines
[33m4e0f866[m Add a section on dropping leading prepositions "by", "for", "with".
[33mb4e859b[m Fix typo "migreate"
[33m6895597[m Re-order comment about in-compiler selector->method name mappings.
[33m590aae3[m Note that we need a mapping in the compiler from selectors to method names.
[33mf78cf35[m Unified function syntax proposal: reflow to split paragraphs for diff'ability. NFC
[33mf4bb049[m [deserialization] Enable lazy deserialization of witness tables.
[33m59a44ca[m [deserialization] Add SILWitnessTable::convertToDefinition for converting SILWitnessTable declarations -> definitions.
[33m5b1e2d4[m This caching statement should not be necessary due to r15399.
[33mf807249[m [deserialization] Store the mangled name of a SILWitnessTable on the instance itself.
[33m69af546[m Add a witness table to the witness table lookup cache when we create it, not lazily as we perform a search.
[33m4fdc20f[m Allow '<pattern> as T' checked patterns with subpattern bindings.
[33mcce0b2d[m Add comments that describe the purpose of the set.
[33m0bec970[m Add a hack to the ASTPrinter, when printing PatternBindingDecls to print immutable variables with a let prefix instead of a 'var' prefix.  This allows us to AST print this as 'let' instead of 'var', which isn't totally awesome, but is better than misleading people with var.
[33m4b0808f[m revert r15378.  It turns out that PatternBindingDecls are the ones that are botching the immutability issue.
[33mffa31a1[m [stdlib] Actually test Index, revealing a bug
[33m4d9598f[m Remove store instructions that store a loaded value that is known to be unmodified. After this change swap in RC4 contains only 2 stores (of the swapped values).
[33m37abddd[m Print the total execution time.
[33m79c552b[m Zero -> Nullptr. NFC.
[33mfe1e135[m Add more alias analysis TBAA rules. These new rules remove all of the redundant retains and releases in RC4::swapByIndex.
[33m8e4ff9b[m Any instruction that invalidates loads should also invalidate stores.
[33m6359cf0[m Refactor hasUnboundGenericTypes. NFC.
[33me03f526[m Add in some documentation/comments to SILWitnessTable. Fix some whitespace issues.
[33m6051a5e[m improve the QoI of DI's diagnostics when calling a method or accessing a computed property in a base class before calling super.init.  This is a nice improvement, and also avoids regressing on QoI when a patch I'm working on finally lands.
[33m00e546a[m fix the AST printer to print "let" for let variables.
[33mc4b0a7d[m Unified function syntax: distinguish "argument name" from "parameter name".
[33mbf5bbbf[m Unified function syntax: address some of DaveA's suggestions.
[33m6d082e3[m Add ToC
[33m1d48480[m Add a section about @call_arguments(strict).
[33mb8b4f4e[m SILGen: Don't throw away the cleanup on accessor base args.
[33m1ca71f0[m Proposal: Unified Function Syntax via Selector Splitting
[33mea3edcd[m SILGen: Forward all nested archetypes to reabstraction thunks.
[33m3a07bb0[m Handle same-type constraints in GenericFunctionType::partialSubstGenericArgs.
[33m2cd5244[m SIL: Don't emit capture parameters for local generic param types.
[33mf43842e[m Change processing of @asmname to use a new internal representation.
[33m2235221[m [deserialization] Unique normal protocol conformances in ASTContext like we do for specialized/inherited protocol conformances.
[33m3ad6f33[m Teach the generic specializer how to create SILWitnessTable declarations if a specialized conformance does not have a witness table.
[33m084d468[m [deserialization] Refactor SILModule::linkFunction into a SILVisitor pattern.
[33m1bfa103[m Add a basic TBAA rule.
[33m5acb661[m Parse: Allow binary operator chains to extend past 'as' or 'is'.
[33m608fee7[m Replace ASTMutationListener with a new LazyResolver callback.
[33m8d35d75[m [ClangImporter] Resolve forward class declarations to definitions in Swift.
[33m1367e74[m Rename test/ClangModules/mixed-language.swift to mixed-framework.swift.
[33m5d13604[m TypeChecker: Remove the notion of "external decls we've already handled".
[33mfe20665[m SIL: Handle unprototyped function types in CFunctionTypeConventions.
[33m9ab2005[m SILGen: Verify protocol witnesses after they're emitted.
[33m6f1bd41[m implement <rdar://problem/16393849> Closures cannot define variable parameters: closure exprs parsing patterns as tuple-types
[33me07dc1d[m [stdlib] add line-directive post-processor
[33mb429fb5[m [utils] gyb: generate line directives
[33m5b545d4[m [utils] gyb: store token match in parse context
[33m8599a6b[m [utils] gyb: useful match object for literal text
[33mff3ec46[m [IRGen]. Extended encoding of block pointer types imported from ObjC into swift. // rdar://16308986.
[33m08a6a68[m Runtime: Don't double-free existential containers when destroying them generically.
[33m4bb6850[m Take more steps towards allowing associated types referenced within constraints to conform to concrete types.  This allows me to lift some restrictions I added a couple of weeks ago, and addresses rdar://problem/16333042 and rdar://problem/16284599.
[33mc2b486f[m Runtime: assert on trivial double-free()s
[33mc45fdc9[m When performing a folding set profile of a specialied/inherited protocol conformance use the canonical version of the conforming type as the key rather than the type itself.
[33mc9d5bd8[m Runtime: fix a leak during thread exit
[33mb6442dd[m Remove unused code in box-to-stack promotion.
[33md0c9a8e[m IRGen: Emit category protocols for the conformances of the extension, not for the original type decl.
[33m3f64d9d[m [docs] Fix an internal link and a grammar error.
[33m4aebb74[m [IRGen]. Imported ObjC classes must be represented as their clang type instead of a plain 'id' for coherent encoding of methods types with such types. // rdar://16308986.
[33m3f6b616[m Runtime: 'destroyPOD' needs to at least deallocate the box.
[33m2b412b4[m Runtime: fix a copy-and-paste error
[33mac00f1f[m improve the wording of a diagnostic, thanks to Jordan for pointing this out.
[33m088e0ee[m Handle multiple releases in allocbox-to-stack.
[33m4bb2d10[m Updated the playground transform to handle variable declarations, do a better job with assignments, and handle bare expressions.  Also adjusted to the new playground logger API.
[33md75eeb6[m Parser: Accept 'x as T!' as a synonym for '(x as T)!'.
[33m1ed9c46[m Permit ! to do the AnyObject downcast magic through one level of optional type.
[33mc07ebee[m Runtime: make generic non-assembly entry points use atomics
[33mb07c029[m Bump module format because PatternBindingDecl::HasStorage bit was dropped
[33m1f27553[m now that nothing uses the PatternBindingDecl::HasStorage bit, there is no reason to compute it, store it, serialize it, etc.  Remove the associated logic.
[33m0ea5a37[m rework PatternBindingDecl::hasStorage() to be a dynamic query of the vardecls it contains, instead of being a stored bit set up by the parser.  Observed properties have storage... unless they are overriding, and this avoids having to maintain this bit.
[33m1fec051[m [driver] Pass -Xcc options down to frontend tools.
[33m1a25251[m Selector splitting: "scaleXBy" is three words, not two.
[33m024b8d6[m When splitting before a preposition, do so even if nothing follows the preposition.
[33m5d0abd9[m Another preposition splitting option: directional prepositions.
[33m2cd0940[m Runtime: make 'vmmap' tool report better data
[33m2f4d679[m Runtime: Drop the "raw" label on normal memory. NFC.
[33m2deecc8[m Implement <rdar://problem/16375910> reject observing properties @overriding readonly properties
[33mbd9ce4d[m Runtime: remove dead code
[33mf66a237[m [stdlib] NewArray.swift => NewArray.swift.gyb
[33m8016a1c[m Refactor out code for checking operands into checkLegalTypes and enable checking (via checkLegalTypes) of generic types of SILArguments/SILInstructions.
[33mf392549[m Implement: <rdar://problem/15920616> Implement willSet/didSet that wrap a superclass property instead of storage
[33m993e72a[m Fix a bug in the code that updates predecessors that I ran into while investigating rdar://16373728. Before the fix we skipped blocks that branched into two different blocks with phi nodes for the same value.
[33m5d2a25f[m Make sure that every operand of every SILInstruction that is generic has primary archetypes which are valid in the current function's context.
[33mb3e337a[m Push the CheckedCastExpr kind into ExprBits.
[33m600f8bf[m Add Type::visit to formalize visiting a type and all of its children instead of having code outside of Type abuse findIf/transform.
[33mcecfcc3[m Fix rdar://16381392 - Super property references in non-objc classes should be direct, a blocker for other property work.
[33m0676121[m Fix what looks like a copy-pasto error in the protocol conformance code.
[33m6e27d2d[m Runtime: Cleanup constants. NFC.
[33mf0777b6[m Runtime: malloc zone huge allocation support
[33m6b5d484[m [IRGen] Extended encoding of id<protocol-list> in extended protocol meta-data. wip. Will have tests when it is complete. // rdar://16308986 (note that you need the latest clang pulled or your compile will fail).
[33m9816e2a[m Runtime: the Swift heap/zone
[33m002701f[m Reflection: Implement magic mirror destructuring for classes.
[33m11fea86[m Change 'switch' not to fall through between empty cases and always require at least one statement per case
[33mbf2568f[m Enable -Wunreachable-code if it is the revised version that also includes -Wunreachable-code-break.
[33mb71a676[m Add option to split after the last preposition.
[33m7d37543[m [IDE] Don't try to pass context sensitive keyword token for accessor function unless it has a dedicated source location. This addresses <rdar://problem/15530448>.
[33ma9c2a7d[m Reflection: Implement a magic mirror for structs.
[33m99704ce[m IRGen: Build field type vector accessor functions.
[33m4f2656c[m Runtime: Prefab metadata for Builtin.Int128 (and for similar-sized Float* types).
[33m9b6a217[m Revert "IRGen: Build field type vector accessor functions."
[33m891cdaf[m IRGen: Build field type vector accessor functions.
[33m607b326[m When type-checking downcasts, just optimistically assume that we know about all the optional types in play.
[33mfe9793d[m Allow disjunction constraints to request that their chosen alternative be recorded in the solution.  NFC.
[33m934eace[m BlockShims: fix shims with repeated use of BOOL.
[33m784630d[m Runtime: Fix assembly CFI data
[33m84d9be5[m [ClangImporter] Don't attach Clang decls to defined-in-Swift classes.
[33md0fd672[m s/[objc]/@objc/ in one last stray diagnostic.
[33m91a2eef[m SILParser: parsing generic code.
[33mc40a2e5[m Extract a method to print a CheckedCastKind and dump it on CheckedCastExprs.
[33me03cb7c[m Don't split when the preposition is the last word in the first selector piece.
[33m66633d1[m SILParser: parsing generic code.
[33m3135abc[m Make a stab at re-using ABI constant values across targets. There's still a lot of manual intervention required, but at least we don't have the constants written in two different places.
[33mb15d326[m Adds support for extended method signature for methods declared in protocols. // rdar://16308986
[33mc76cb6f[m Reflection: Have 'QuickLookObject.Int' take an Int64, and add a UInt(UInt64) case.
[33m2e580e1[m @objc inference: correctly check @objc on deserialized decls using ->isObjC(), instead of looking for an attribute, which we don't deserialize.
[33md1cffd3[m @objc inference QoI: now that we don't allow plain classes, add a specialized diagnostic for that case
[33m7d697d7[m @objc inference / PrintAsObjC: don't map non-@objc classes to id (and metatypes of those to Class)
[33mcb77899[m Use the same value for LeastValidPointerValue in the runtime headers and IRGen.  Should fix a miscompile involving nested optional types.
[33m2c71769[m LangRef: convert the section on switch and related sections to ReST, as I plan to edit these for rdar://16301313
[33mc2e217d[m Minor clean-up in getting lowered type.
[33m4ef321a[m Future proof some code by replacing hard-coded operand numbers.
[33m43ea4c7[m Remove handling of address_to_pointer and pointer_to_address from useCaptured.
[33ma6a7dd7[m In canValueEscape, add apply/partial_apply uses to Users.
[33mab2e58e[m [IDE] Fix crash with semantic annotation for an incomplete enum.
[33m0bddddf[m Fix two typos that made the compiler release build fail.
[33mc285bdd[m Release notes for initializer inheritance and stub implementations.
[33mc854d9b[m Incomplete draft discussion of Swift's object initialization.
[33m9f9241d[m release note dynamic dispatch in properties.
[33mdcd47ec[m Reflection: Add QuickLookObject tags for ints and floats.
[33m791d8ee[m a small cleanup.
[33m5689269[m Update stale comment.
[33mb8bac9b[m Save some notes about how container patterns should work for future development.
[33m809f91e[m IRGen: Always emit field offset vectors for classes.
[33md91482c[m Fix some issues with type parameter resolution.
[33m53565ef[m Teach the type-checker to bind and capture optional values when casting to or from optional types.
[33m486463a[m Track the depth of a BindOptionalExpr.
[33ma598087[m ide::getDocumentationCommentAsXML(): pass through comments from Clang
[33md04b9d4[m C Argument Interop: Fill in some examples.
[33m9dc5441[m Change the prims cpp benchmark to match the prims swift benchmark.
[33mb0ff333[m Revert "Revert "Add prims to Benchmark.swift.""
[33m7ec9833[m Make checkOverrides() trivially idempotent.
[33m76d1053[m Revert "Add prims to Benchmark.swift."
[33mf1ca6c0[m [test] Fix stdlib/Reflection.swift on iOS.
[33mf557ca8[m Update ABI.rst to move down fields in nominal type descriptor after r15194.
[33mcdb1db8[m Strip in-out qualifiers when inspecting closure arguments.
[33mc431509[m IRGen: Reserve a spot in the nominal type descriptor for the field type vector accessor.
[33meec73c0[m IRGen: Don't try to collect witness table refs for conformances that don't need them.
[33m52c69d0[m Selector splitting: use ASCII-only APIs to process strings, and align detection of 'init' method family with Clang (it looks like 'init123' would count as init method in Clang, but not in the initial implementation of selector splitting in Swift).
[33mbca2205[m Try harder at reverting the commit that disallowed importing "new"
[33mf7699f5[m Comment parsing: generate a basic XML document from the brief comment
[33m41fc39d[m Correctly index into the parameters for partial_apply.
[33m286927e[m [Parser] Fix source range for an incomplete function that has no open paren.
[33m589fe7f[m Reflection: Move the less magic parts into Swift.
[33m7302111[m Use escaped identifiers rather than restricting the importer.
[33m93ae2c8[m Clear out the "escaped identifier" bit when we form a token.
[33m1f5fce9[m Preposition splitting: don't name a method "new" due to splitting.
[33m493eab8[m Debug info: don't crash on implicit clang decls. rdar://problem/16307518.
[33m9f8adfa[m silence warning
[33m365c2ea[m Revert "IRGen: Emit an OBJC_CLASS symbol for @objc classes."
[33m195fb46[m Typo correction in a variable name.
[33mf465e34[m [stdlib] Generate NSDictionaryBase
[33md016db3[m [stdlib] Factor common non-ObjC instance members
[33mf831a060[m Stock sphinx isn't happy about :math: or the lack of a favicon in docs/.
[33m997356f[m Add prims to Benchmark.swift.
[33m6071ef9[m Teach __FUNCTION__ to separate the first parameter from the function name.
[33m04cb606[m Uppercase prepositions.
[33m5888345[m Update "C Pointer Interop" proposal.
[33mbd9a451[m [test] Add a timeout because the Reflection test runs for hours under ASan.
[33m0629b9d[m Add in small data case for prims and a driver.
[33me5fff12[m Add option to split Objective-C selectors based on the last preposition.
[33m444efcb[m Update the non-driver part of the swift implementation of prim to match the cpp implementation. The driver still needs to be implemented.
[33m97048e3[m SILParser: parsing generic code.
[33m986bbd5[m mark trivial setter thunks as transparent, mostly for consistency with getters.
[33m0c7ded4[m Merge the code for synthesizing trivial getters together into a single helper function, reducing duplication and allowing us to get rid of some fiddly "self decl" handling stuff.
[33mf504357[m fix a *critical* bug where -ast-dump of destructor_decls printed an extra blank line.
[33mce7bc53[m implement <rdar://problem/16310561> Property vtables not set up correctly
[33m39da974[m AST printing for functions where the first parameter has a separate name.
[33m5e8e727[m Allow the first name of a selector-style function declaration to be separated.
[33m1173c4e[m [IDE] Annotate 'inout' in parameters as keyword.
[33m4782017[m revert r15135, the missing IRGen piece breaks swiftFoundation, I can't stage it.
[33me997743[m switch properties and subscripts to be virtually dispatched when on any class, not just @objc classes.  This is continued progress towards resolving rdar://16310561
[33m40be839[m Factor BlockShims.mm to make it easier to change the mangling of imported ObjC pointer types.
[33m03daa6c[m Document the function. NFC.
[33m79dbbd6[m Bridge optional types when the value type is trivially bridgeable.
[33m580bf7f[m getLoweredBridgedType doesn't seem to promise to return a canonical type.
[33mab809e8[m Use hasRetainablePointerRepresentation instead of hasReferenceSemantics when deciding whether an ObjC result can be autoreleased.
[33mc5f0a44[m Parser: don't use EOF as source location for an error expr, AST verifier rightfully complains about improper source range nesting
[33mef33f15[m Code completion: implement completion for inherited initializers
[33m3cc8347[m SILGen for initialization using an existential metatype value.
[33m8e0edce[m When opening an existential metatype, the result is an archetype metatype.
[33m51087ea[m CSE cond_fail.
[33m6b6761f[m CSE ApplyInst of BuiltIns with no side effects.
[33m7e74899[m Ignore stub definitions when checking whether a class overrides parent designated initializers.
[33mc1d96e5[m Comment parsing: allow parsing comments with invalid source locations -- these come from serialized modules
[33m9583261[m CSE two more instructions.
[33me39ad97[m [stdlib] Use NSSwiftArray in NewArray buffer
[33md67ad6e[m Reword diagnostics when non-literal values and types are used as enum raw values.
[33m79cf827[m IRGen: Fix heap object alignment computation in SwiftTargetInfo.
[33mab083e0[m Allow @objc inside protocols
[33m0c02a45[m Implement dispatch to @objc initializers through non-statically-derived metatypes.
[33m4250676[m Add implicit destructor even if we're only performing a first pass over a class.
[33mfbfd977[m [deserialization] Teach generic specializer how to link functions.
[33m1927c4f[m [deserialization] If we fail to load the body of a SILFunction, never mark it as being completely deserialized.
[33m701ff46[m Align declarations permissible within protocol bodies with the language reference.
[33m7ff7c73[m Add missing null check when parsing subscript expressions.
[33m2b634f7[m Force Git to create the empty directories needed by the mixed-language test.
[33m8e64b2a[m SILParser: parsing generic code.
[33mdf649b7[m [serialization] Do not serialize the bodies of sil functions with external linkage.
[33mf474faf[m Don't allow a designated initializer to be written in an extension.
[33m03a7b98[m SILGen/IRGen: Don't emit redundant witness thunks for @objc protocol witnesses that are already @objc.
[33mb8d736f[m stdlib: NSSwiftArrayBase magic
[33mfd1f276[m Clean up logic from previous commit.
[33mc7804dc[m When loading a Swift framework module, see if it's also a Clang module.
[33ma356bd0[m [ClangImporter] Add a test for ObjC categories on Swift classes.
[33m00b0222[m Warn about our inability to inherit variadic designated initializers.
[33mbfc6cfa[m [stdlib] Give Array bridging a home of its own
[33m1e92279[m Make some internal functions static.
[33m8a6dd6e[m Give CanType a getAnyOptionalObjectType accessor.
[33me0c34d9[m SILGen: 'cast' -> 'dyn_cast' in SILGenExtension::emitObjCConformanceThunks.
[33m9645e66[m SILGen: Properly handle generic substitution when calling [super dealloc] from a generic @objc grandchild class.
[33mc8d9e94[m [serialization] Disable swiftdoc loading for the standard library modules.
[33m27d31c3[m [serialization] Framework modules live in Foo.framework/Modules/Foo.swiftmodule.
[33m8b82082[m SILGen: Properly carry through generic arguments when producing ObjC thunks.
[33m27310e2[m SIL: Properly account for generic parameters of foreign destructors.
[33m6e5c776[m SIL: Preserve GenericFunctionType signatures through bridging.
[33m11c03b0[m [deserialization] When linking functions, return failure if we get back a declaration.
[33m641e4d8[m Fix a CHECK line type.
[33m61f6376[m Check that the store destination is the same as the switch addr.
[33me3081a2[m [deserialization] Add debug logging to SerializedSILLoader so one can easily tell the order that deserializers are being visited.
[33m8cabdb8[m Fix two crashers involving inheritance of invalid designated initializers.
[33m37fb7bf[m Lower switch_enum_addr to switch_enum
[33m339a726[m Allow inheritance of designated initializers with unnamed parameters.
[33m6522228[m [serialization] Properly cross-reference accessors, which don't have names.
[33md32f668[m Introduce "inherited" default arguments and use them for inherited initializers.
[33m8cf018a[m Give Pattern::clone() an OptionSet rather than a bool; it's going to get more interesting.
[33m455e96e[m @objc should be enough to make a protocol a class protocol.
[33mefa2f3b[m Code completion: add brief comments to code completion results
[33mfc64a18[m rename two variables: distinguishing between "overridden" and "overriding" was too difficult/subtle.  rename them to "base" and "override" to make it easier to read this code. NFC.
[33m54522aa[m when emitting an "overriding declaration requires an 'override' attribute" diagnostic, don't emit a fixit if the decl we're complaining about is a vardecl. We don't have enough location information to point to the 'var' token specifically, and it is not safe/correct to insert @override after the var token but before the name.
[33m63b7d10[m Relax restriction on indirectly-self-recursive protocol conformances.  (rdar://problem/16306715)
[33m52379ce[m Properly compute the override set for accessors in subscripts and properties, allowing us to set up vtables properly.  Before this patch, we'd get new entries in the derived class vtable for overridden property accessors, which didn't help things.
[33m53f36cc[m Simplify code. NFC.
[33mf94a5e5[m Call a standard library entry point from initializer stubs.
[33m35aee17[m Comment parsing: extract brief comments
[33m422d786[m Make __FUNCTION__ more descriptive for initializers.
[33md51769b[m Implement some elements of a ReST parser
[33m0ac3f6f[m Allow const Decls to be used with PrettyStackTraceDecl
[33m794360d[m Permit optional class types to be returned autoreleased.
[33m0a835c3[m Don't abort when asking if a C function type has polymorphic parameters.
[33mb063713[m move some logic around, NFC.
[33mbc19a38[m move recordDecl lower in the file, and turn a check for !->hasName() into ->isAccessor(), fixing a FIXME.  NFC.
[33me3e0405[m Add another missing include for SWIFT_FALLTHROUGH.
[33m446a9bd[m Introduce CanType versions of the various "getXOrBoundGenericX" accessors.
[33m3dab4a7[m Add missing include for SWIFT_FALLTHROUGH.
[33m4efcd93[m silence a fallthrough warning I missed.
[33m757877b[m silence a fallthrough warning:  If this was intended, the code above it should be eliminated.  If this isn't intended, it should be switched to InlineCost::Expensive.
[33mbca9000[m silence some fallthrough warnings.
[33m7d98976[m merge checkPropertyOverrides into checkOverrides.  Properties are more like subscripts than like methods, but checkOverrides already handled subscripts.  NFC.
[33mfb836aa[m [CMake] Condense logic for enabling -Wdocumentation.
[33m9a327e4[m [CMake] Add -Woverloaded-virtual to warnings enabled by CMake.
[33m76691b0[m [CMake] Further comment *why* there are Xcode-specific warning options.
[33mc87ac81[m Use SWIFT_FALLTHROUGH instead of [[clang::fallthrough]].
[33m3e3040a[m simplify the code for computing overload properties.  instead of keeping track of the exact match while we scan potential matches, just filter out the non-exact matches afterward if we saw any.  This simplifies the code, but NFC.
[33m5531ffd[m Add a conversion from T? to @unchecked T?.  This is not a subtype conversion.
[33m13b74af[m [specializer] Do not use the old instructions location when cloning. Instead use getOpLocation.
[33md19f465[m [deserialization] Remove SWIFT_STDLIB_SERIALIZE_ALL and always pass in -Xfrontend -sil-serialize-all when building the stdlib.
[33m539a0b4[m Diagnose non-constructible classes.
[33m082f840[m Stdlib: Ensure that the "hack" class is linkable
[33m18886e9[m use the TupleExpr empty-tuple convenience ctor in a few obvious places.
[33m7adbe98[m implement <rdar://problem/14524409> Support empty collection literals when context provides type information
[33m88f5d92[m add a long-overdue TupleExpr convenience ctor that produces "()".
[33m39a368f[m Add [[clang::fallthrough]] in obvious cases to satisfy -Wimplicit-fallthrough.
[33md05205b[m move trailing closure tests into the expr/closures directory instead of being in its own test dir.  NFC.
[33m4baea1e[m Add -Wimplicit-fallthrough to list of warnings used by CMake build.
[33m3add29c[m Remove CMake Xcode warning options from builbot-script, and where appropriate at toe CMake file.
[33m7afc067[m SILParser: parsing generic code.
[33m0b44a71[m Accept @asmname property accessors without bodies.
[33m49bee35[m Runtime: magic numbers are bad
[33m794da89[m A value used by pointer_to_address or address_to_pointer doesn't escape.
[33me957721[m Release-note nil as Selector value.
[33m3827f6b[m Reflection: Set the metadata of default ObjC quicklook object Anys correctly.
[33m1ef22d5[m Runtime: make the thread-specific logic work with the public SDK
[33m5f35d44[m Remove unused arguments from the block argument list.
[33mdbd1c1a[m Runtime: zap dead code
[33m8ef7f64[m Runtime: disable the assembly entry points for now
[33mf30d1ba[m fix rdar://16280138 - synthesized getter is defined in terms of archetypes, not interface types
[33m6c593f7[m Remove init_existential of alloc_stack with no other usage by creating a new allocation with the concrete type.
[33mb6f46a4[m Remove cruft from witness table test and add in test to make sure that by default witness table declarations have public_external linkage, that public_external linkage is not printed (since it is the default), and that public linkage is printed since it is not the default linkage.
[33mdbad04b[m Fix test by changing "import swift" => "import Swift".
[33m5b88963[m [SIL] Implement external SIL Witness Table declarations.
[33m58b0d61[m SILParser: use a Scope for generic parameters.
[33mea7e70b[m Automatically inherit subobject initializers when none are explicitly defined.
[33me716023[m SILParser: handle overloaded members in SILDeclRef.
[33m4543a34[m remove some fixme's.
[33m7cc1ce5[m IRGen: Allow generic @objc classes to be lowered to Clang 'id'.
[33m038b494[m SILGen: Emit generic subclasses of @objc classes using ObjC allocation.
[33m47b0e14[m fix some crazy spacing, we don't force putting spaces around binary operators :-)
[33m6b5f1a2[m Enable a bunch of useful warnings (e.g., -Wuninitialized) when building using Xcode.
[33m5509605[m Add a void(^)(NSError*, NSString*) block shim.
[33m12964f2[m [ClangImporter] Resolve generated header protocols to native decls as well.
[33m64debb6[m [ClangImporter] Match up classes in generated headers with native classes.
[33m0aa818f[m [stdlib] Delete obsolete verification functions
[33m6eee8e3[m Move HeapObject into the stdlib shim module
[33md9e17b5[m Add a targeted test for non-generic classes inheriting from generic super classes.
[33m69be7f7[m These changes disallow non-generic classes from having a generic super class. (rdar://problem/16028169) It was decided to enact this restriction in the near-term because we're not currently able to IRGen such child classes correctly, but we'll definitely want to lift this restriction once we can do so.
[33m4542a52[m Don't assert when trying to serialize a @required initializer.
[33m75da504[m Reflection: Add more cases to QuickLookObject.
[33m6c576f1[m Hide the implementation details of String from MagicMirror.
[33m4ac6beb[m [stdlib] Rename StreamOf => GeneratorOf
[33mdb31ad6[m [CMake] Add the shims headers as sources for the copy_shim_headers target.
[33m27d1746[m [CMake] Move the install command for the Clang headers to the shims target too.
[33m1c4d9b7[m [CMake] Symlink Clang's headers into lib/swift as part of copy_shim_headers.
[33m205d286[m Knock off some bogus Substitution::Archetype uses.
[33mfbd2d94[m Add a big comment about the caveats of using Substitution::Archetype for anything.
[33m0704b79[m Try #include <stdint.h> in shims.h again.
[33ma404b0c[m Rework Substitution::subst not to depend on the meaningless 'Archetype' field of Substitutions.
[33mb4bf444[m Simplify PolymorphicFunctionType::substGenericArgs.
[33mc7251df[m Clang importer: set the AllArchetypes of imported protocol decl generic param lists.
[33m3a95cfc[m SILPrinter & SILParser: update both and testing cases to match SIL.rst.
[33m6f03508[m Fix a few issues with parsing bulid configuration directive
[33m19fc9b3[m CMake: use the correct path to .swiftdoc files
[33m01f4b6d[m [stdlib] Un-revert r14943: "Use the shims module to bridge NewArray"
[33mb584eaa[m Update LangRef and simplify code completion test for value -> newValue change
[33m93ac98d[m Revert r14943: "[stdlib] Use the shims module to bridge NewArray"
[33ma3c337b[m print the canonical version of an interface type, otherwise it isn't greek!
[33m5865288[m Two changes to the ASTDumper: 1. Do not call getInterfaceType() on a decl if it isn't already set, since    this will cause it to be lazily computed, and it would be nice for the    ASTDumper to not side-effect our AST.
[33m4d28ecd[m rename the default argument for "set" and "willSet" to "newValue" instead of being "oldValue".
[33mee6607d[m remove some debugging spew
[33m142e14b[m Simplify the implementation of GenericSignature::getSubstitutionMap.
[33mcdd2ec3[m SILGen: Add missing WitnessMarker to the synthesized generic signature of trait builtins.
[33m5f76473[m Sema: Don't produce requirements for dependent members that have been constrained to concrete types.
[33m34400bd[m Add 'print' and 'dump' methods to GenericSignature.
[33m6e409e2[m [stdlib] Use the shims module to bridge NewArray
[33ma73102e[m [stdlib] Flesh out SwiftShims' build dependencies
[33m8892a36[m Emit -resource-dir in the DW_AT_APPLE_FLAGS so LLDB can find Swift Shims. <rdar://problem/16291929> Unable to evaluate trivial expressions in Cocoa apps
[33m49ec7c1[m Use SWIFT_MODULE_CACHE_PATH for all tools.
[33ma440870[m Drop the swift_driver alias for 'swift'.
[33m995a41b[m Add back the check for a valid locator before raising a recursive requirement error; clean up some formatting.
[33m53c69a9[m Fix validation of implicit 'self' variable declarations on methods with recursive associated types as constraints.  In these cases, the compiler should not crash while type checking member accesses on 'self'.  (rdar://problem/16281468)
[33m2f294aa[m Following up on r14651, begin flagging and raising an error on indirectly self-recursive protocol requirements.  (This addresses rdar://problem/16081342.)
[33mb8d48dd[m Change 'x.type' to 'x.dynamicType'.
[33mb08f06f[m Revert "Accept (and prefer) "import type" as a scoped import for any non-protocol type."
[33me9976fb[m Remove dead 'return'.
[33ma31041f[m Placate -Wunreachable-code by using #else for alternative code.
[33mcde57af[m stdlib: do not forward malloc_size()
[33mac64ab7[m IRGen: Emit an OBJC_CLASS symbol for @objc classes.
[33m949064b[m [ClangImporter] For now, treat the runtime resources as user headers.
[33m5752bff[m Refactor the code that checks if a box is captured and move it to Local.{h,cpp}. NFC.
[33m866511e[m Add mangling for SubscriptDecls to allow us to produce USRs for them
[33mb96ddf4[m SILParser: parsing GenericParamList.
[33md1fed3b[m silence warnings
[33mf9d2685[m Correct a range check. Fix some build warnings.
[33m0c55845[m Replace Greg's r14771 with a slightly less outrageous hack.
[33m0c44aa4[m Add a failure ordering to cmpxchg builtin (following llvm r203559).
[33m1bf6a1e[m Diagnose @objc-incompatible requirements in @objc protocols
[33me50b52f[m Serializer/Driver: serialize comments to separate .swiftdoc files
[33m6471fc9[m Parse type attributes in generic argument lists in expressions.
[33ma9443d7[m Parse attributes as part of <type> and simplify the grammar.
[33m156e867[m [SIL] Fix a broken string literal
[33ma398607[m [build] Evil hack to make Make make
[33mc5feea4[m SILGen: Emit conformances for external definitions.
[33m38f68fc[m [build] stdlib core depends on SwiftShims
[33md5ef5cb[m Sema: Don't try to form substitutions for type parameters that were constrained away to concrete types.
[33m24e9fed[m Sema: Don't create locators with null archetypes.
[33med80c68[m [serialization] Don't assert when a module file's length is not 32-bit-aligned.
[33m631297d[m Reimplement the partial_apply+apply -> apply optimization.
[33m9c54d55[m Switch another iterator over to the right one, adapting to LLVM mainline changes.
[33m37ea7f9[m SILPrinter & SILParser: update both and testing cases to match SIL.rst.
[33ma83ec97[m fix test/Optimizer/basic.ll, adjusting to mainline LLVM API change.
[33mfae5d7b[m Remove XFAIL from this test.
[33m1b5d338[m Fix this to use the correct APIs, so we don't miscompile the world in the arc optimizer. I haven't verified that all the tests are updated now (I will next), but this fixes the basic test.
[33mfff3390[m Remove NullClangImporter now that everything needs a proper importer.
[33mcdcaa4b[m [PrintAsObjC] Remove "Swift" prologue module for generated headers.
[33m480c1ba[m [PrintAsObjC] Push the prologue back into the generated headers.
[33m8eb64b7[m Modified the playground transform to
[33m6f5e78c[m [deserialization] Add in verifier check that makes sure an applies replacement is equal to one of its parent functions archetypes.
[33m3181ecc[m Remove trailing whitespace. NFC.
[33m9a642f5[m If we have no nested parameters, do not attempt to call stack.back() in NestedGenericParamList. Just return early to simulate end().
[33mca04be1[m <rdar://16281854> XFAIL Optimizer/basic.ll and Optimizer/allocation-deletion.ll
[33m945fbaf[m SIL: Add a linkage specifier to SILWitnessTables.
[33m3f61dad[m Fix a bug in the code that deletes partial_apply instructions. The destroy_value needs to happen at the end of the partial_apply lifetime. This is easy to do when there is only one user, strong_release, and less easy to do when there are multiple retain/release users.
[33m3a6cd3d[m [Emacs support] 80 column highlighting for .swift
[33m9a37973[m Revert -r14838. It is incorrect to remove partial_apply instructions because the partial_apply also guards the lifetime of the consumed arguments.
[33m2f4b982[m Remove TrivialTypeCache and AddrOnlyTypeCache from SILModule.
[33md67dce0[m Improve hashing in type lowering.
[33mea1d62e[m [deserialization] Verify functions when we deserialize them. This should help to catch deserialization issues.
[33m8e2521e[m SILGen: Emit derived '==' operators from Clang modules with shared linkage.
[33m78f8db1[m Adjust to upstream LLVM changes
[33mdbf3c64[m Revert "[CMake] Clear the Clang module cache before building the ObjectiveC overlay."
[33m48e22cd[m IRGen: Don't emit polymorphic parameters for concrete-constrained associated types.
[33mc330a18[m Remove stale comment
[33mab9dcd3[m Source annotation: fix a crash on var decls with propagated types
[33m5659f8a[m Code completion: don't assert if module loading failed
[33mef78e28[m Code completion: make sure to always emit a diagnostic so that ASTContext is marked as erroneous
[33m91bed93[m stdlib: add a stub ObjC root class to force correct bookkeeping in the compiler
[33mf1c9127[m [serializer] Add some debug messages to the deserializer.
[33m3cc621b[m Remove trailing whitespace. NFC.
[33m7a91b9f[m [stdlib] Remove *, /, and % from RandomAccessIndex
[33m469f862[m [stdlib] OpaqueString is still an essential source
[33m6732cc1[m [stdlib] Bugfix for essential sources check
[33m020e911[m Sema: Don't allow NominalTypePatterns to match out static properties.
[33m86cd626[m SourceManager: use 'unsigned' as buffer ID type
[33ma3dd6db[m LangRef: update for new syntax: didSet(oldValue)
[33m847dd34[m Revert -r14842 which broke test/stdlib/NSStringAPI.swift.
[33m39f50b4[m Encourage the inliner to inline functions that take closures as arguments.
[33mcc21624[m Combine apply(partial_apply()) into a single apply call.
[33m163d2fa[m [Clang importer] Go back to mirroring superclass initializers in subclasses.
[33m70d0825[m Use TypeBase::replaceResultType() rather than a hand-rolled version.
[33m00162dc[m Start emitting stubs for unimplemented designated initializers of the superclass.
[33mc92f159[m Allow the removal of partial_apply that is used by multiple retain/release instructions.
[33mc52da10[m Fix typo where nullptr should be false.
[33mea1f77f[m When running with -sil-verify-all only verify the function processed by a function pass after every iteration instead of the whole module.
[33m9f12e2e[m Enable same-type concrete constraints, e.g. <T: P where T.Assoc == Int>
[33m536b6e3[m Reapply r14811 and r14813 with fixes to not warn on anonymous closure arguments and to not warn about switch case matching.  Other fixes to the stdlib were already committed.
[33mf91ab5f[m Revert r14811 and r14813; they break building the Foundation overlay.
[33maecbd44[m AST: Accept dependent member base type substitutions that produce archetypes.
[33m2f720ae[m Reflection: Add a 'disposition' property to Mirror.
[33mc2dc870[m [deserialization] Enable deserialization of SILFunctions from the stdlib by default.
[33med0cfca[m [deserialization] Do not serialize function_refs or sil_global_addrs that reference functions or globals which are not always serializable.
[33m90c6c95[m [performance-inliner] Do not inline a callee into a caller if the callee's body references a global/function with less visible linkage than caller.
[33mb443001[m [deserialization] Change isPublic(SILLinkage) -> hasPublicVisibility(SILLinkage) which is makes it 100% clear what the function is attempting to do.
[33m7a3c451[m Retroactively release-note string macro importing (r14664-5).
[33m7b0d479[m Add the real ClangImporter as a dependency for sil-extract and sil-opt.
[33m4005246[m release note didChange.
[33m2593a52[m implement <rdar://problem/16191398> add an 'oldValue' to didSet so you can implement "didChange" properties
[33ma36a81d[m [ClangImporter] For now, don't import block pointers as optional.
[33m15d2b94[m [serialization] Force derived top-level decls to be serialized.
[33m9c86376[m [serialization] Set a FuncDecl's associated operator a little more eagerly.
[33m44134c4[m [serialization] Provide an XREF member path trace sooner.
[33ma65efec[m AnyClass too
[33m691ac54[m don't allow inferring to AnyObject.Type either, this was part of 15263687 that I overlooked.
[33m1fe8025[m add warning to the release notes.
[33m7c48081[m Diagnose cases where we infer a variable to () or AnyObject type.  This is likely to be a bug (e.g. calling a function when you're looking to get a closure in the first case, missing a type case in the second case).  We emit a note saying that the warning can be silenced by adding an explicit type, e.g.:
[33mb9d1e14[m [serialization] Break a cyclic dependency involving associated types.
[33mdece639[m [serialization] Beef up PrettyStackTraces with more info.
[33me05e04a[m Address more feedback for r14800
[33m66c2111[m Sema: Allow checked conversions from non-@objc classes to @objc protocols.
[33m6fe2917[m John gave me some style advice on r14800 - this change folds in his feedback.
[33mbd8b2d3[m Fix typos in diagnostics.
[33m3b95376[m Added a new AST transformation pass called the "Playground Transform."  This is an instrumentation pass that adds calls to a function called playground_log at locations of interest.  Roughly speaking, these locations are
[33mdce0673[m We should avoid fixing type variables to optional types that wrap the type variable itself.  When solving for the type variable, this will lead to the creation of a constraint where the variable is adjacent to itself.  Such constraints are not permitted and will cause the compiler to crash.  (rdar://problem/15727642)
[33m86d7d81[m Release note 'foo.bar:bas:'.
[33m5bb6c6a[m ClangImporter: Import ObjCMethod selector names as Swift DeclNames.
[33me3f6be8[m Permit @unchecked T? to be coerced to T as a conversion.
[33m3c1b765[m Comment the restricted conversions with their formal reduction rules.
[33m8d9666f[m Unify the places where we simplify a conversion according to a conversion restriction.
[33m2c1cb39[m Add some documentation to SIL.rst for sil_global_addr and sil_global so that they at least have something documented. rdar://15509316.
[33m0ec3ead[m [stdlib] Link an essential core library subset
[33m1585b62[m Sema: Wire up compound name lookup to UnresolvedSelectorExpr.
[33madabc56[m [deserialization] Clean up shouldEmitFunctionBody + fix an incorrect comment + add comments.
[33m921f93d[m [ClangImporter] Allow importing modules even without an SDK.
[33m85436b0[m Update a comment and make arguments more explicit. rdar://problem/15493512.
[33m541c6be[m Disable the cleaning up of dead functions by SILCombine if -sil-debug-serialization is passed in.
[33mba6ac19[m Revert "[deserialization] Deserialize WitnessTables/VTables in SILModule, not in SILLinking."
[33m01c963d[m Move clangIndex dependency from libIDE to libAST
[33md54afe4[m CMake: address a FIXME: use swift driver to direct output to the final directory
[33mee1a771[m CMake: rename variables not to mention "module_source_file"
[33mf11c348[m Clarify how Lexer::isIdentifier() operates, in context of adding escaped identifiers
[33mb30edae[m Remove 'swift::' qualifications that are not needed
[33mba33352[m Move comment to the correct place
[33mb62e7e5[m Simplify code, NFC
[33mef0942c[m Add a convenience API SourceManager::addMemBufferCopy() to simplify adding a buffer in case the client does not need a pointer to the buffer.
[33mb9c8718[m Add an ABI-stable libfunctionNameDemangle library, which enables external clients to use the Swift demangler without depending on compiler internals.
[33mb623972[m [test] Enable 32-bit iOS simulator tests on the buildbot.
[33m338cb2b[m Add an outrageous hack to swift_allocBox() to fix arm (rdar://16257592).
[33mf042995[m Don't use architecture "arm". The linker and other tools don't accept it.
[33mda7880b[m Drop unnecessary 'swift_compareObjects' and 'swift_hashObject' stubs.
[33m96c09d7[m Renovate name lookup to prepare for compound name lookup.
[33me60c598[m [IDE] Pass a brace structure node for switch body. This addresses <rdar://problem/16256501>.
[33m6158003[m [IDE] Don't pass brace structure node for implicit brace in CaseStmt. This addresses <rdar://problem/16253769>.
[33m58c4039[m Brute force fix for NSStringEncoding: redeclare everything in the overlay.
[33m205e236[m [ClangImporter] Synthesize the Protocol class if needed.
[33m7405f4b[m Runtime: Fix layout of Optional<QuickLookObject> to match Swift's.
[33m2c13b2e[m Remove SwiftASTStreamerPass and the LegacyDebugInfo option.
[33m86a4f999[m [ClangImporter] Add ../lib/swift as an implicit import path.
[33meeea72b[m Fix a comment.
[33m98a69b2[m Simplify tuple(tuple_extract(x)) -> x Fix rdar://15818284.
[33m80d8e76[m Fix a bug in the struct simplification logic.
[33mc2339cd[m AST: Unique compound names in the ASTContext.
[33m9b07eb7[m Optimize struct(struct_extract(x), struct_extrct(x)) -> x
[33ma50e4d5[m Revert "[deserialization] Disable deserialization of vtables/witness tables for now."
[33m0b142c1[m [deserialization] Disable deserialization of vtables/witness tables for now.
[33mcdf5866[m Remove assertion to match how we do substitutions everywhere else according to Joe Groff.
[33m436e560[m Remove redundent assertion. We check the same assertion in SILValue::replaceAllUsesWith.
[33m3684658[m When resolving generic type aliases within protocols, the type aliases themselves may be modeled as substitutions, and not strictly as type variables.  Not accounting for this lead to rdar://problem/16228026 and rdar://problem/16228058, wherein the compiler could crash if the open type alias was referenced from within a generic type instantiation.
[33ma72cd1a[m ARCOpt: fix an object ownership bug. When checking for users of an object we need to consider all values because any use of the object may increase its lifetime.
[33md12fb5a[m IRGen: Accept the existence of init requirements in protocols.
[33me620ed3[m Additional negative logic changes. NFC.
[33m15ec637[m Reverse the negative logic. NFC.
[33m70f4f1d[m SILGen: Allow @objc_block properties to be @objc-dispatched.
[33mdb1a304[m @objc protocol compositions are valid object types for @objc subscripts.
[33m3a680d6[m SILGen: Add some tests for Clang-imported properties.
[33m54f9cf4[m SIL: Don't crash when dumping a SILModule without an origin Swift module.
[33m255b8e8[m Fix a leak that I introduced in r14729: FrontendOptions does not own input buffers, so undo 'unique_ptr'fication here
[33md0fd7e4[m Remove stale comment
[33mbba48ac[m Fix a comment
[33mf232267[m Replace llvm::OwningPtr with std::unique_ptr
[33m07cb1c9[m Update for header move llvm/Linker.h -> llvm/Linker/Linker.h
[33m870df7f[m import noreturn objc methods as swift noreturn function type.  I don't know how to test this presently, but it should theoretically work.
[33m7ce9ce8[m Actually import inherited initializers for Objective-C classes.
[33m3d93acb[m stdlib: Remove the 'Object' class.
[33m958aa46[m <rdar://16074941> Fix some NSStringEncoding ugliness by importing it specially.
[33m6015c5a[m [deserialization] It looks like readSILInstruction uses its return value to signal I have a declaration and I have an error. Disambiguate the cases by checking before calling it if we have no BB and returning the assumed function declaration.
[33mccc11fe[m [build] Move the "tests failed" message in order to clean up `sh -x` output.
[33m2448f33[m Parser: Record the compound name of selector-style func decls.
[33ma11eff2[m Adapt to header file changes in llvm r203038 and r203046.
[33mfafe762[m [external-witnesstables] Store the entries of a witness table in bump-ptr allocated memory referenced via an ArrayRef instead of a tail allocated array.
[33m001c189[m put all the SIL*Transform classes in anonymous namespaces, there is no need for their symbols to be exported out of their implementation file.
[33m5ebfb13[m Lexer: Don't contextualize escaped identifiers as keywords.
[33m8869767[m Implement the rest of rdar://16242700
[33m9e5bc63[m Add __FUNCTION__ as a magic literal identifier.
[33m4a827b7[m enhance the clang importer to import noreturn functions like abort/exit as noreturn swift functions.  Unfortunately, this can't be satisfactorily tested at the moment, but that will be fixed soon.
[33m143689e[m Escape \x7F as a non-ASCII character.
[33me38a2b9[m Discourage constraint systems that use more unchecked forces.
[33m2aa197f[m [deserialization] Expose ModuleFile::error and use the method in SILDeserializer to mark a module as being malformed when invalid SIL is encountered.
[33m84c9eb0[m Use getEnumElementType instead of getTypeOfMember directly.
[33me6dc29e[m Fixed a missing dependency that made LLDB's build fail.
[33ma8ed3da[m Deserialize generic contexts by mapping their archetypes to the archetypes of their generic parameter declarations.
[33m69855ba[m Extract a method to generate the all-archetypes list of a set of generic parameters, and use it to verify that the stored list matches what we expect.
[33mcd48638[m Fix a use-after-free caused by creating DerivedFileUnit on the fly
[33mf8a2985[m Prevent incorrect flagging of distinct, otherwise structurally identical protocol members as being incomparable during overload resolution.  This was resulting in incorrect 'ambiguous overload' errors.
[33m155e862[m [stdlib] Range: allow range to be offset by DistanceType
[33m25b2635[m IRGen: Use stable backreferences when profiling circular archetype references.
[33md28653d[m Map -> MapVector. We were iterating over the map which affected the order in which we were generating instructions. This change makes the output of the optimization stable.
[33mdae75e0[m Update LangRef for 'type' and quoted identifier changes.
[33m328c4b6[m Use the C++11 spelling of alignof()
[33m4975461[m Move USR generation to AST library, so that Serialization library can use it
[33m015e28f[m [test] Add PTRSIZE= test feature and %target-ptrsize test substitution.
[33m3348c46[m implement: <rdar://problem/16193162> Require specifying self for locations in code where strong reference cycles are likely
[33mf3f9c3e[m SILGen: Relax assertion that there are no active cleanups between the current scope and the return scope.
[33m76870a7[m Reflection: Try an ObjC object as its own debugQuickLookObject.
[33m424187e[m Lexer: Lex escaped identifier tokens.
[33m9c5dfd6[m change PreCheckExpression to keep track of the current DeclContext when it is recursing down through ClosureExprs.  This makes sure that it performs name lookups with the right context.  Add some assertions to make sure that it is getting the right thing.
[33m1cce7b5[m Add an overlay for AppKit in the clang-importer-sdk.
[33m62c6517[m remove "RequiresAnotherPass" from PreCheckExpression, it is always false.
[33m4258705[m Allow overriding '@unchecked T?' properties with normal 'T?' properties.
[33mc4ef5d3[m Coerce the self argument of @objc methods to the appropriate type.
[33m3d313fb[m [ClangImporter] Import macros containing a single NSString literal as String.
[33ma84f939[m [ClangImporter] Import string macros as CStrings.
[33m8fee3fd[m IRGen: Don't expect AssociatedTypeProtocol references for @objc protocols.
[33m2a2b0a0[m Support (non-byval) indirect parameters.
[33m487876a[m Silence warning about interface not having a base.
[33m7bbd9b0[m Rename DynamicLookup -> AnyObject in a few more comments.  This leaves the DynamicLookupExpr expression and the DeclVisibilityKind::DynamicLookup enum.  These seem right to me, more descriptive than renaming them AnyObject. With this, I consider 13327098 to be done.
[33md758e0d[m Eliminate more "DynamicLookup" in favor of "AnyObject", this is the bulk of finishing rdar://13327098.
[33mb0b0888[m [stdlib] Remove unused BridgeObjectiveC.mm
[33m484459b[m For 1.0, we're restricting the use of directly recursive protocol requirements.  (They currently cause an infinite loop in the type checker.)  We can look into opening this up post-1.0.
[33mc0cb085[m Comment parsing: add APIs to get brief comments
[33mc572cc2[m Revert "stdlib: Push '===' for AnyObject into stdlib/core."
[33m565f889[m Revert "stdlib: Remove the 'Object' class."
[33m5942690[m stdlib: Remove the 'Object' class.
[33m5634ff5[m stdlib: Push '===' for AnyObject into stdlib/core.
[33mf6d4485[m stdlib/runtime: Create an _ObjCBridgeable protocol and 'bridgeAny' runtime function.
[33m5a2d367[m Correct an assertion: sizeof() is in bytes
[33m8038a03[m Remove unused code
[33ma39d5b4[m Track LLVM ToT header file name changes
[33m3430229[m Simplify code
[33m15fd90c[m Revert r14589, a proper fix will be committed soon
[33me4dad5c[m Type checker: don't create constraints with null types
[33md6335ef[m Make nil convert to both T? and @unchecked T?.
[33m692850f[m Release notes for designated initializers, convenience initializers, required initializers.
[33m9a3a9ad[m Mirror Objective-C initializers	in subclasses that don't have designated inits.
[33m024b5c0[m runtime: Use -debugQuickLookObject to get text or image quick look objects.
[33mc752d4e[m runtime: Include the superclass as a child when reflecting ObjC classes.
[33m954936f[m Dump BindOverload constaints more verbosely.
[33m6cb7ccd[m Various enhancements to constraint solution dumping.
[33m5af4e72[m Runtime: Start implementing a default Mirror for ObjC classes.
[33m34cfadd[m [serialization] Be more careful about deserializing the same Decl twice.
[33m5e96e10[m If we have duplicate witness table conformances, assert in the verifier like other duplicate checks instead of just printing an error.
[33m7f62836[m [deserialization] Deserialize WitnessTables/VTables in SILModule, not in SILLinking.
[33m4f79534[m [CMake] Hack around LLVM's inability to check the flags of cross-compilers.
[33m40c84d1[m Actually check stored-property-ness when we say we are <rdar://problem/16199862>.
[33m15be215[m Rename "abstract initializers" to "required initializers".
[33md495eb8[m All SILWitnessTables have public conformances now. Teach the verifier to ensure that we do not create private witness table SILFunction references until we are ready.
[33m37c1d8c[m Don't assert when using a type variable as a specialized conformance witness.
[33m8ceb345[m Speculatively rename complete object and subobject initializers.
[33m38d176d[m Add a block shim for 'void(^)(NSObject*)'.
[33m6685f72[m Use Clang's stable enum values for serialized diagnostics.
[33m918abab[m Update for llvm API change in r202736.
[33m3a0363b[m When parsing build configuration blocks, pass the actual BraceItemListKind through, rather than signify whether something is "top level" or not.  This allows proper codegen for overloaded operators at the module top-level.
[33m25c5692[m PrintAsObjC: Swift subobject initializers are ObjC designated initializers.
[33m6ef8e07[m When an Objective-C class that has designated initializers, mark the other initializers as complete object initializers.
[33meafc9ef[m Runtime: Have MagicMirror produce object identifiers for class values.
[33m7d3f477[m Allow 'T?' to override '@unchecked T?' in both parameter and return position.
[33maef2f62[m inline actOnIdentifierExpr into its (now) only callsite.  This is better (among other reasons) because it isn't an action method, it does parsing.
[33m3086372[m remove parser support for DynamicSelf.  The world should have switched by now and it is in my way.  The internal compiler nomenclature still needs to be updated, Doug can handle that best.
[33mdfc39ab[m teach silcombine to merge upcast instructions that feed each other, now that sema is emitting each step of a conversion independently.  Also, as a driveby, fix an optimizer crash in the "(ref_to_raw_pointer (ref_to_object_pointer x)) to (ref_to_raw_pointer x)" peephole when the ref_to_object_pointer had other uses (noticed by inspection).
[33mb3cbbb6[m Bump module format version for peer_method removal.
[33m2c26523[m Require chaining to the superclass initializer to refer to a subobject initializer.
[33m56368f8[m Put the SwiftARCPasses dylib in the right place.
[33m82c1ba2[m Remove peer_method instruction; we're no longer using it.
[33m54a16c1[m Don't allow a subobject initializer to delegate to another initializer.
[33md4a0568[m Add an IRGen test for the vtable entries of a constructor.
[33ma5c5daf[m Fix a use-after-free: type checker can add 'DerivedFileUnit's now, so we need to be careful when iterating over the vector of all files and type checknig them.
[33m7e3338c[m IRGen can't handle curried Objective-C methods.  Instead of crashing on them, emit a nice error message saying you can't do this.  This resolves: <rdar://problem/15643576> Shouldn't crash on partial application of objc method
[33me7fc6db[m When getting the metatype of an archetype or existential, we don't need to materialize a +1 value.  Instead, just take the +0 value that is often sitting around, ready to be accessed directly.
[33mb90979b[m [deserialization] Only deserialize witness table functions as declarations.
[33mbcbd431[m reapply Doug's r14562, with a testcase update to go with it, now that DI is more cooperative about pointless redundant upcasts ;-)
[33m1823f04[m Generalize DIMemoryUseCollector to handle multiple upcast instructions in the formation of a super.init sequence.  This will be tested by the next patch.
[33m044b85b[m [deserialization] When deserializing vtables, do not deserialize the functions they reference.
[33m4c3ae24[m Disable debug info for "*_external" linkage functions and an assertion on certain SILLocations to avoid the fact we don't serialize DebugScopes.
[33m87bfe1f[m Fix performance inliner to actually deserialize functions. Add a test to make sure it always works.
[33m0055986[m Improve type resolver to understand the difference between an "immediate" function argument and one that has been through one level of tuple type/pattern.  This allows us to reject invalid uses of inout, instead of crashing on them later (now that we're not doing decl-based argument processing in 1.0).
[33ma79aeb6[m [IDE] Don't pass brace structure node for implicit brace in top level code.
[33m4eb7f99[m [IDE] Consolidate code checking whether to pass brace structure node into a new function. NFC.
[33m5889e17[m Rewrite the long assertion so that it does not trigger -Wlogical-op-parentheses
[33m197a682[m Don't compare 'const char *' with ==, use StringRef
[33mba6548b[m Track uptstream LLVM API change: llvm::tie() was removed, use std::tie() instead
[33mbe7759b[m Track uptstream LLVM API change: llvm::next() was removed, use std::next() instead
[33mb1dfcd7[m Dynamically dispatch when delegating from a complete object initializer.
[33m11bedff[m the swift.Slice type got removed a long time ago, being replaced with what is now Swift.Array.  Update various internal stuff to refer to Array instead of Slice.  NFC.
[33maa337d4[m Start emitting vtable entries for
[33ma77d08f[m Use inherited initializers rather than cloning for Objective-C classes.
[33mb9c1785[m Revert r14559; we still need to cannibalize SuperRefExprs for DI.
[33m1d733d5[m IR generation for alloc_ref_dynamic.
[33m5d8bd84[m Introduce the SIL instruction alloc_ref_dynamic.
[33m054e844[m Stop cannibalizing SuperRefExprs in the type checker.
[33m8f64658[m Misc. cleanups related to SuperRefExpr queries.
[33m3293184[m Don't link llvm statically into libswiftOptimizeARC.a. Actually link libswiftOptimizeARC.a into SwiftARCPasses.dylib.
[33m179b101[m Serialization: Serialize compound names of FuncDecls.
[33m3226bae[m Add missing early return, and simplify initialization loop using uninitialized_copy.
[33m9fe6d31[m Re-bump module version number for complete object initializer changes.
[33m2b5b6d0[m A complete object initializer can satisfy an @abstract initializer requirement for a subclass.
[33m2b31656[m Constructor lookup is no longer special from the client perspective.
[33md92f1a3[m Inherit complete object initializers when a class supports it.
[33me4444e3[m Complete object initializers cannot be defined in a non-class.
[33m571ae69[m Parsing and AST support for complete object initializers.
[33m8948375[m Debug Info: Cleanup: Remove debug scope from DebugTypeInfo.
[33md0df0cf[m [CMake] Revert SwiftARCPasses back to add_llvm_loadable_module.
[33mbf1e8a4[m [CMake] Remove unnecessary link_system_libs().
[33m3826099[m Keep serialized diagnostic levels in sync with Clang.
[33me77c9e8[m When looking through optional types in clang-type IRGen, allow DynamicSelfType there, too.
[33mc437dcb[m remove 'val' compatibility support.
[33mf12f7d3[m AST: "ValueName" -> "DeclName", and pack it in a single word.
[33mca1b524[m AST: Relax the signature of FuncDecl factories to allow them to be constructed with compound names.
[33m65cf5f2[m Lexer: compute ArtificialEOF correctly in a sublexer of a sublexer
[33m5463c20[m Demangle partial-apply forwarding thunks.
[33m227e2d0[m Refactor the demangling of <global> so that it can be used in recursive positions.
[33mdad30f1[m Restore buildbot performance tests.
[33m990ad90[m Debug info: Emit the object type for variables that reside in an alloca. rdar://problem/16076982.
[33m649ce05[m silence warnings.
[33m0985124[m Read the name of the function before deleting it. I found this problem while fixing another bug.
[33ma4693bf[m Fix an analysis invalidation problem. rdar://16192731. We need to run the entire pass manager pipe to expose this bug. I did not want to include a big SIL file because it would be more code that we will need to update if we change SIL.
[33m8169059[m When type checking a closure expression, don't bail if a semantic error is encountered when validating the closure's parameter list.  At best, this means we won't be able to point out any potential errors in the return-type annotation.  At worst, it could leave us with a malformed closure type.
[33ma30e1b4[m AST: Create a 'ValueName' concept.
[33m3b913f1[m Minor cleanup in addTrivialAccessorsToStoredVar - remove unnecessary else if / else clauses.
[33m5761510[m When resolving a nested type name, we were assuming that if "isDependentType" is true, the parent type in question was either a DependentMemberType or a GenericTypeParamType. This would prove problematic if the parent type was either a dependent class or structure type.
[33mf4f42e5[m Updates to Prims so that the c++ code actually works. Now it has a test harness/test cases/test data generator/etc. Still need to make the relevant swift modifications.
[33m0f6c14c[m fix typo
[33m61c9d1a[m Bump module format because we removed SIL instructions.
[33m67ca7ce[m SIL: Rename 'protocol_metatype' to 'existential_metatype'.
[33md681b81[m Revert my r14516, it breaks the buildbot
[33m158acaf[m Documentation comment proposal: add summary from the meeting
[33m3bb9166[m Lexer: don't advance current pointer past end of the source buffer in case there is a string literal with embedded NUL just before EOF
[33m2841271[m ModelASTWalker: don't attempt to walk implict declarations, they don't have source information
[33mb71d4c5[m SourceManager: emphasize that some APIs accept only valid SourceLocations
[33m88b6efc[m Rename ArchetypeMethodInst -> WitnessMethodInst more thoroughly.
[33m9424de6[m SIL: Rename 'archetype_metatype' to 'value_metatype'.
[33m545f173[m SIL: Fold 'archetype_metatype' and 'class_metatype'.
[33m59d2a16[m SIL: Rename 'archetype_method' to 'witness_method'.
[33m855ea99[m SIL: Combine 'archetype_ref_to_super' and 'upcast'.
[33meb24a7b[m IRGen: Fix an infinite recursion profiling <T: Fooable where T.Foo == T>.
[33m8ed996f[m Add the SuccessorMap test generator to source control.
[33mc25d6f8[m [mandatory-inlining] Use getOptions() instead of passing around options.
[33m363a324[m Parse: Start parsing selector member references.
[33m6e7b77c[m [deserialization] Change performance inliner to use lazily deserialized functions.
[33m29e1a53[m [deserialization] Deserialize transparent functions lazily iff they will be used in mandatory inlining.
[33ma861f9c[m Initializer inheritance proposal.
[33m1fe8630[m Accept (and prefer) "import type" as a scoped import for any non-protocol type.
[33m7ac2c1d[m Add missing access path filters for DerivedFileUnit.
[33me02c02b[m [ClangImporter] Import libkern's UInt and SInt as CUnsignedInt and CInt.
[33m4e72db0[m [PrintAsObjC] Only @import frameworks that are used by the header.
[33m930ba7b[m [build] Always self-test gyb when we run it
[33m03d2ce7[m [utils] gyb: use % instead of @
[33mc9bd295[m When contextualizing closure expressions wrapped in auto closures, ensure that the inner closure's parent context is properly adjusted to reflect the auto closure's newly adjusted parent context.
[33m46d7fc8[m Runtime: hardcode less about the OS implementation
[33m904739c[m Revert "Runtime: hardcode less about the OS implementation"
[33ma073096[m [deserialization] Begin move to lazy linking by putting a SerializedModuleLoader on SILModule.
[33mffa9b06[m Remove trailing whitespace. NFC.
[33m2cd3756[m Rather than encode whether or not an enum element is currently "in validation", instead encode whether or not the element is itself recursive with regard to its enclosing type.
[33m806ba74[m Add test for error recovery improvements in r14369.
[33m535cb46[m Minor code cleanup for the build configuration implementation.
[33m65f7379[m Account for type extensions when creating property accessors for stored properties.
[33mc81656e[m Fix type checking of self-recursive enum element members.  We can now type check them without crashing, but we still can't IRGen.  (Though, in that case we'll print a decent error message.  Implementing IRGen for recursive enums is covered by rdar://problem/16178426)
[33m137ca5f[m Remove trailing whitespace. NFC.
[33m8e6b353[m Derive conformances of Equatable and Hashable for simple enums.
[33m1753c0c[m Add a release note about Objective-C protocol properties.
[33m6298c15[m [ClangImporter] Don't verify imported Decls in Release builds, or in the REPL.
[33m230443a[m [REPL] Don't recursively IRGen imported modules if source imports are off.
[33m2974c92[m Reject 'inout' when not in parameter lists.  This fixes some silgen crashes on invalid code (the types.swift example), and a improves diagnostics in others (the other testcase).
[33m25f9ebf[m fix a typo
[33mcf82449[m Rename @IBLiveView to IBDesignable per request in rdar://16135911
[33m54a39df[m Allow type checking qualified references to generic nominals with free type variables
[33mf802651[m Parser: don't set 'Invalid' bit on SubscriptDecls too eagerly.
[33m0c4c291[m Fix code completion in variable initializers that are not at the top level
[33m56395e1[m Fix a type checker crash on:
[33m3ac5018[m Revert "Revert r14430: Create two SILLinking steps, one before Diagnostics for transparent functions and the other after Diagnostics for non transparent functions if -sil-link-all is passed in."
[33m76503dc[m remove a .o file mistakenly checked in.  The .swift file should come back?
[33m5946a56[m Runtime: hardcode less about the OS implementation
[33m5b0b709[m Buildbot: Temporarily disable performance tests, they used 'make' (now gone)
[33m9e7d522[m [IDE] Add BraceStatement to SyntaxStructure. Add a test for the above.
[33md7caa10[m [IDE] Add BodyRange to SyntaxStructureNode, and vend the inner body range for appropriate structure nodes.
[33m6f6495b[m runtime: ALLOC_CACHE_COUNT should never have been less than 56/64
[33mce2635d[m Revert r14430: Create two SILLinking steps, one before Diagnostics for transparent functions and the other after Diagnostics for non transparent functions if -sil-link-all is passed in.
[33mc33a59c[m [build] Complete gyb support
[33m69c1a85[m [build] Basic support for gyb
[33m3f5255f[m update gyb files for val -> let.
[33me31d9ea[m [test] Remove SDK dependency for SIL serialization test.
[33m0d4b039[m Support properties in Objective-C protocols.
[33mf02f431[m Update original .gyb file for FixedPoint*.swift.
[33mc16db63[m switch "val" to "let" in in the ASTPrinter, unbreaking tests.
[33m4e87971[m Disallow bare type references.
[33m0560914[m runtime: fix a build failure with the simulator
[33m0c755a5[m Create two SILLinking steps, one before Diagnostics for transparent functions and the other after Diagnostics for non transparent functions if -sil-link-all is passed in.
[33mf8be3a9[m runtime: always provide swift_retainAndReturnThree()
[33m1e8f02a[m Start diagnosing "deinit () { }".
[33m4b2ca8b[m Silence warning.
[33m33f6978[m runtime: make the "FastEntryPoints" header and implementation agree
[33m97e1cb5[m switch diagnostics to refer to 'let'
[33mdd14326[m Accept the "deinit { }" syntax, but don't require it.
[33m028f9d0[m Remove rest of Makefile build except for 'docs' and 'www'.
[33mb6fa8a0[m [serialization] Rename SILGenericOuterParamDeclID to SILGenericOuterParams.
[33mb9cd3c1[m [Sema] Allow Optional and UncheckedOptional in @objc methods and properties.
[33mcadd6ed[m Move EnableObjCOptional to LangOptions (from ClangImporterOptions).
[33m2ec583f[m Print @thick and @unchecked when printing a TypeRepr.
[33mffd104e[m [PrintAsObjC] Add objc_complete_definition attribute to generated @interfaces.
[33m709c06f[m Zap the now-unused class override checking pass.
[33m765cf2a[m Improve override checking for subscript declarations.
[33m1344319[m Rename the internal compiler lexicon from val -> let.
[33m3d890ae[m Formatting fix in demangler. NFC.
[33mab1efa6[m runtime: DI means we don't need heap APIs that take/return zero-initialized memory
[33ma1bef5a[m Improve property overriding semantics.
[33m22e3066[m Fix a build failure
[33mb3cce94[m Refactor SILDeclRef into its own file from SIL.cpp. It is large enough to warrant such a treatment.
[33m9070847[m switch some dox back to 'let'
[33m339c0ea[m rotate out some history to the wiki page.
[33m6e1fcda[m runtime: Make gmalloc work again
[33m52ef19f[m runtime: route more of the heap through the formal zone
[33m8fd6b3a[m runtime: disable the malloc cache entirely for the simulator
[33ma44da77[m Clang importer: don't import structs with bitfields
[33mae535f3[m AST Printer: fix printing of willSet/didSet
[33m3d0e7ec[m Track upstream LLVM API change.  DataLayout is not a Pass anymore
[33m230c8a4[m Introduce the 'override' attribute and start requiring it on all overrides.
[33md63772a[m [test] Move arch-specific string appending test to NewStringAppending.swift.
[33m8e1bc98[m [test] Correct expected 32-bit output of IRGen/struct_layout.sil.
[33mb20a360[m Add release note for the improvements in @objc metatype handling.
[33mc71644c[m Eliminate some newly-introduced nondeterminism in the constraint graph.
[33mc0d8ae7[m Parse 'x.self' as an identity expression.
[33m981f8f6[m Rename "destructor" -> "deinit" (as a keyword) and -> "deinitializer" (in diagnostics).
[33m5096abc[m Expose MetatypeExpr again as 'expr.type'.
[33m0bde325[m Collapse 'DynamicSelf' into 'Self'.
[33maa5a42c[m accept 'let' as an alias for 'val' this week, and release note it.
[33m98d6fec[m '.metatype' -> '.Type'
[33m5c76ec2[m various typographical edits.  NFC :-)
[33m9dbc59e[m Add buildbot note detailing support target configurations.
[33m0be3362[m Update target configuration values to conform with current conventions (use i386, x86_64, arm and arm64 instead of I386, X64, ARM and ARM64).
[33m5c243ad[m When attempting to open a generic type parameter in the face of a semantic error (say, an invalid constraint specification on the type parameter's declaration), we likely won't have a replacement for that type.  In these cases, pass on the type parameter so we can any semantic errors without crashing.
[33ma0c57f4[m Improve error recover for parsing build configuration blocks.  Specifically, improve diagnostics for when users try to use #if/#else/#endif blocks in ways that would break brace statement or member list parsing.  (Like if they were trying to emulate the C preprocessor.)
[33mcc91b28[m If a target configuration invocation is followed by an indented identifier on a new line, the target invocation expression may be parsed as having a trailing closure.  Add a new StructureMarkerKind so we can prevent this from happening.
[33m7091395[m [sil-deserialization] Increment format minor version and move sil record info to SILFormat.h from ModuleFormat.h/DeclTypeRecordNodes.def.
[33m17628ee[m Disable swift allocation cache pending rdar://16168244.
[33m0aebf1f[m [sil-deserialization] Teach SIL how to deserialize generic outer parameters.
[33m90f90c7[m [CMake] Clear the Clang module cache before building the ObjectiveC overlay.
[33m9a45a56[m Load Swift modules from framework bundles.
[33mf40abf2[m [test] Split out interpreter part of autolinking test.
[33mf16aa98[m AST: Recursively build DependentMemberType substitutions when there are multiple levels of indirection in a substitution vector.
[33mea16062[m Basic SILGen support for initializer requirements.
[33mf383eb9[m Remove root Makefile of Makefile build.
[33m89807a9[m Mangle the protocol constraints on associated types in GenericParamLists.
[33m4af2081[m Make the interface type for an initializer in a protocol return 'Self'.
[33m1fde5e7[m Add cmake option SWIFT_STDLIB_SERIALIZE_ALL to trigger passing in -Xfrontend -sil-serialize-all to the stdlib.
[33m79df4dd[m Remove trailing whitespace and unneeded -*- c++ -*- from .cpp files.
[33m443f284[m 80 col
[33mbd83adc[m Cache the isAddressOnly property since it is a major compile time win.
[33mbc6fcc4[m Cache the isTrivial property. The check for isTrivial takes ~20% of the optimizer compile time (in debug mode) and using a cache accelerates the compile time.
[33m70f6372[m Revert "Add buildbot note detailing support for build and target configurations."
[33m7693b6d[m Add buildbot note detailing support for build and target configurations.
[33medfce35[m When testing the iteration expression of a foreach loop, if a given type is said to conform to the sequence protocol, but the conformance is invalid (as a result of error recovery, for example), don't bother looking for "Sequence" as a witness type.
[33mdc42cba[m When attempting to convert an expression type to a built-in protocol, it is incorrect to assume that the expression will always conform to that protocol.  (Or if it doesn't that the protocol is "broken".)  In these cases, produce an error type.
[33m15e3dd2[m Code completion: don't crash on didSet/willSet
[33m1b65bbd[m Amend FIXME to have sensible text
[33m5fe7a51[m DWARF: Got beaten by Rust today.
[33m5af5711[m Code completion: implement delayed parsing for accessor bodies, allowing code completion inside computed properties.
[33m65dc48a[m [stdlib] Inclusive/closed ranges, e.g. 0..9
[33mb2b15d2[m Fix <rdar://problem/16151899> init method shouldn't directly access superclasses ivars
[33m74d2f7a[m Don't consider enum elements to be initializers.
[33m7ee55ae[m remove caveat
[33m5eb0a81[m Implement support for <rdar://problem/15912000> Stored property doesn't properly fulfil a protocol property requirement
[33m0f71586[m [ClangImporter] Start importing Objective-C references using UncheckedOptional.
[33m8ff9aa6[m remove a dead function
[33m737c036[m IRGen: No pointer bits are reserved by ObjC on 32-bit platforms.
[33m7f4c0b9[m rename the StoredObjC storage class to StoredWithTrivialAccessors since we'll be using it for more general things soon.  NFC.
[33mbb0a654[m Remove swift_old.
[33m80f04c4[m Re-apply "[test] Remove substitutions for binaries that will never move."
[33m61c240c[m Allow construction of existential values based on an existential metatype value.
[33m6a532e0[m Allow construction of archetype values via archetype metatypes.
[33mc4cc906[m Turn a sentinel value for diagnostics into an enum.
[33m9c860f1[m A conformance is non-inheritable if it has a non-abstract initializer witness.
[33m7baac64[m fix rdar://16119509 - <unknown>:0: error: super.init called multiple times in initializer
[33m11cc0fc[m [stdlib] Fix formatting of new property decls
[33m96be672[m Allow initializer requirements on protocols and check conformance to them.
[33m048c673[m Move the diagnostic about a missing initializer body into Sema.
[33m42e82df[m [stdlib] startIndex/endIndex are now properties
[33maa97136[m [stdlib] Replace all uses of ~> with boilerplate
[33m32c5122[m Fix diagnostic: s/container/Sequence/
[33m73aa816[m Track upstream change in raw_fd_ostream API
[33mdb6f077[m Allow Swift to be compiled with open-source LLVM
[33m28e67eb[m [stdlib] Backport edit to FixedPoint.gyb
[33m3f31a31[m [utils] buildbot-script: remove unused option
[33m183ff12[m The old visiitVarDecl method in SILGenDecl.cpp was carried forward from my working branch - remove it.
[33mb46d202[m Update build configuration tests to be independent of their runtime platform. Also, add more tests for the "os" and "arch" target configurations, to exercise likely build configurations for iOS and the iOS simulator.
[33m988a587[m Some updates: - Respond to Doug's code review feedback    - Stop hacking around with scopes and use "emplace" to work around RAII in the inactive config case    - Limit use of StringRef on the front-end, in favor of std::string    - Use ArrayRef rather than SmallVector within IfConfigDecl    - Reorder new property declarations on BraceStmt to prevent unnecessary alignment issues - Update ParseBraceItems to better capture top-level declarations, rather than using token lookahead
[33mf83f94d[m Support build and target configurations
[33mfef36ed[m Try to fix the build following the LLVM raw_fd_ostream API change
[33m38ca644[m Fix prining of 'inout' in types
[33m71f818b[m Fix prining of 'inout' in declarations
[33m06be778[m Fix code completion for 'inout' by completing '&' in the function argument
[33m04a5bcf[m Add a test case that I missed in r14271.
[33mf42a354[m Add a proposal about documentation comments
[33m62c44d2[m After talking with Joe turns out I can't use typealiases in this manner in SIL. We should really have a more discoverable assertion for that.
[33mb2abd40[m [sil-parse][sil-deserialize] Teach the SIL Parser/Deserializer to use the lowered field type of a ref_element_addr's parent projection, rather than using the unlowered siltype generated via creating a SILType from the field's vardecl.
[33m3d7f5f8[m [sil-deserialization] Deserialization counterpart to r14257.
[33mc52da63[m make the example more interesting, for no particular reason other than that I suspect most people don't know you can have multiple subscript indices.
[33mf3d7a6d[m fix a typo
[33mb478d53[m implement semantic analysis of subscript and property requirements, to reject invalid code.
[33m6871e96[m Lexer: don't use locale-dependent ctype.h functions
[33m94eb4f9[m Module interface printing: don't print { get set } when it is the default
[33m494067e[m release note properties and subscripts.
[33m3392c4e[m remove ArchetypeSubscriptExpr, since it is dead now.
[33md69f91d[m switch Sema to produce SubscriptExpr for archetype subscripts, instead of producing ArchetypeSubscriptExpr.  This implements support for subscripting archetypes.
[33ma121e97[m implement support for property references on archetypes, implementing rdar://14195801
[33mabe6c14[m remove a pointless #include
[33mbb4b57c[m [IDE] Introduce ide::printDeclUSR() which uses the mangler to provide a USR for a swift symbol.
[33md3e2870[m remove some dead code.
[33m8cb03b5[m [CMake] Use add_swift_library() for SwiftARCPasses targets.
[33m30f4b1b[m remove the unused ArchetypeMemberRefExpr and ExistentialMemberRefExpr nodes.
[33me6dcae5[m Change sema to form MemberRefExpr instead of ArchetypeMemberRefExpr.  The most significant impact of this is that it eliminates a bunch of near duplicate logic in SILGen and makes ArchetypeMemberRefExpr dead.
[33m1bb9d28[m switch all existential member refs to be done with MemberRefExpr, making ExistentialMemberRefExpr dead.
[33m3da05e3[m Change property accessor syntax to include braces
[33m728a865[m change Sema to form vardecl member references in protocols as MemberRefExpr instead of ExistentialMemberRefExpr, and enhance silgen to avoid unnecessary copies of protocol and archetype bases.   With this, uses of properties in protocols start to work.
[33mb34d91d[m Remove obsolete document that is going to be superseded by DevPubs' recommendations
[33m380e44c[m remove ExistentialSubscriptExpr.  We don't need specialized forms of subscriptexpr for various base types, for the same reason we don't need multiple different kinds of MemberRefExpr.
[33m0134eb2[m rework sema and silgen to build subscripts on protocols as SubscriptExpr instead of ExistentialSubscriptExpr.  The later is just a special case of the former.
[33m936cf62[m implement support for getting and setting subscripts on lvalues.
[33ma16aecc[m enhance getBaseAccessorFunctionRef to handle accessors in protocols, and implement RValueEmitter::visitExistentialSubscriptExpr to call it.  This allows rvalue subscript calls on protocols to work.
[33me00b354[m add some SGFContext arguments to a couple of RValueSource methods, mostly for consistency with the underlying RValue logic they replicate.
[33m9873694[m [Serialization] A module that shadows a system module, should be considered a system one as well.
[33m058ab5a[m Runtime: Add assert.h
[33mea0c3e3[m Move sil-parser test projection_lowered_type_parse.sil to the correct location in tree.
[33m3987733[m When parsing struct_element_addr, struct_extract use the lowered type from the parent type, not the lowered type from the vardecl.
[33m6d2d3e0[m Revert "[test] Remove substitutions for binaries that will never move."
[33mba7dfd0[m [sil-extract] Teach SILExtract how to deserialize SIL from swift modules like SILOpt.
[33m866f020[m Use 10.10 Internal SDK for OS X builds in buildbot-script.
[33m79fad0c[m Remove FunctionRef and CodeRef from IRGen in favor of SILDeclRef.
[33m9f6820f[m SILGenModule::getConstantLinkage -> SILDeclRef::getLinkage
[33m4c09946[m [test] Remove substitutions for binaries that will never move.
[33m8e60748[m Fix up two pass names.
[33m29cb91a[m Add names to two passes with missing names. Mark the getName method as abstract. Thanks Michael!
[33m3d5d8fd[m Resilience expansion is really an aspect of a SILDeclRef.
[33m2d08827[m Fix trivial build issues
[33m6d2c2a0[m Rename test file.
[33m456cd2b[m [sil-dis] Remove sil-dis now that its functionality is integrated into sil-opt.
[33mb5af687[m Emit and use vtable entries for abstract initializers.
[33m56ada49[m Allow the removal of stack allocation of trivial types that are used by destroy_addr.
[33m3a78458[m [sil-opt] Teach SILOpt how to process module files.
[33m8ddba95[m [sil-opt] Dump decls as well as SIL.
[33mc1919d3[m AST: Know the Hashable and Comparable protocols.
[33mc3a7458[m Delete unused stack allocations of trivial types.
[33mc4d774f[m unbreak the makefile build.
[33md519f57[m Mark all Cocoa code completion tests as 'long'
[33maebc28f[m Runtime: silence a harmless warning
[33ma85b2a3[m Runtime: Rename Alloc.* to HeapObject.* (NFC)
[33md0696c6[m Runtime: Move heap logic to Heap.cpp (NFC)
[33mb32a02a[m Runtime: wire up wrapper zone around the default zone
[33mc21a293[m Lazily emit SILFunctions with non-external linkage.
[33m0da11a8[m Implement semantic analysis for abstract initializers.
[33maf33bfd[m Refactor the code for finding the destructor.
[33m0d6bbf7[m Move the code in processFunction into the class. NFC.
[33m20c8272[m Promote partial-loads after stores.
[33m0a5f7b5[m Change the debug string to match the ail-opt flag.
[33m2bc8e3e[m Remove trailing whitespace. NFC.
[33mc876b55[m SILGen: Upcast 'self' of a witness if the requirement is satisfied by a base method.
[33m1300677[m [sil-opt] Remove cruft code that was supposed to call the verifier after every pass and instead was calling the verifier after adding every pass to the pass manager (i.e. just wasting cpu time). Instead enable sil-verify-all by default to get the same effect.
[33me35f93a[m [sil-opt] Declare PassKind in an anonymous namespace instead of the global scope.
[33m903d4e8[m [sil-opt] Change banner description to something actually descriptive.
[33m52da675[m Update SIL.rst with information about Typed Access TBAA.
[33m56d4f3e[m runtime: Feed strings back into Swift through a DaveA-certified interface.
[33m30ab76d[m Remove unused private member
[33meeb9589[m [AST] Introduce "hasName()" convenience methods and replace "getName().empty()" callers.
[33m926e371[m Only permit inheritance of protocol conformance when it is semantically valid.
[33me77e43f[m [utils/buildbot-script.sh] Another fix for running of SourceKit tests; SwiftUnitTests target does not exist.
[33m44d35e0[m [utils/buildbot-script.sh] Fix running of SourceKit tests.
[33m32cf8b3[m Preserve SIL function order in the parser and IRGen.
[33m272a81c[m Add the SuccessorMap data structure.
[33m0e17e5e[m [Verifier] Check that we can get the mangled strings for ValueDecls during AST verification.
[33m6f0ada0[m [stdlib] Add conversion of nil to COpaquePointer. Test some nil uses.
[33m6825302[m Fix typo = /. NFC.
[33m9c3b1fe[m Somehow this header got messed up = /. Fix it quick.
[33mf5e828b[m Rename functions and variables. NFC.
[33m0f45dbb[m A few small cleanups from onlist review by Jordan and my own review of the code.
[33m3e84613[m [ClangImporter] Don't mirror a protocol's methods if they're in the superclass.
[33mfa69cb6[m Identifier's are only needed for AST types not for SIL Types. Simplify DeserializeSIL.cpp to use StringRefs instead of Identifiers whenever possible.
[33mc775782[m [sil-dis] Initial commit of sil deserialization utility "sil-dis".
[33m3c15aff[m Expose unsafeReflect to the stdlib.
[33mb276e3b[m [test] Make IRGen/struct_layout.sil's tests consistent across architectures.
[33m50a7d66[m SILBuilder: peephole 'metatype' instruction used only by a thick/ObjC conversion instruction.
[33md52cbc8[m Rename AllocRefElim -> DeadObjectElim. NFC.
[33m0b42fcd[m Type-check construction using DynamicSelf metatype values.
[33mec52d16[m Teach SerializedSILLoader how to load all SILFunctions. Also add SerializedSILLoader::getAll().
[33m8024563[m Don't allow construction of classes based on non-statically-derived metatypes.
[33mbb25f9f[m Teach abitypes.swift to use the clang-importer-sdk instead of the real SDK.
[33m9311672[m Move ModuleFile.h, ModuleFormat.h, and DeclTypeRecordNodes.def to include/swift/Serialization.
[33mc630ef3[m Don't allow one to utter DynamicSelf except as a class/protocol method's result type.
[33m1a2ac51[m Expose the ModuleFile in SerializedASTFile so that the underlying Module (and thus SILModule) can be retrieved when deserializing.
[33m7f4f25d[m Enable the passing of multiple extra flags via SWIFT_EXTRA_FLAGS.
[33m20349ed[m Change SILDeserializer to use StringRef instead of Identifier as its internal key.
[33m6720566[m runtime: Implement tuple destructuring in the default mirror.
[33m8772af9[m Fixup release notes now that we have more @properties in the SDKs.
[33md3a41b6[m Add some more tests for inferred associated types.
[33m1aab6d4[m Derive protocol conformances for types declared in other files in the target.
[33mfb6806a[m Bridge 'self' for class methods.
[33m55d9998[m BuiltBot: Let's try the default toolchain but use the 10.10 SDK
[33m53ecc9e[m RelNote: better use case for Optional "cache" method
[33mc2db9a5[m Convert the section about subscript decls to ReST, since grammar here will require updates as well
[33m44de02f[m Rename a function not to mention 'let', since it was renamed to 'val'
[33m7fcbd1b[m LangRef: convert a section on var decls to ReST, since I am going to edit it to change the getter/setter syntax (rdar://15966905)
[33m13b1d98[m Don't mention BCPL in CommentKind enumerators
[33m0fe2b68[m Fix spaces in AST printer results for { get set }
[33m1bdf9d9[m [stdlib] Make unique reference checking work
[33m73e5644[m stdlib/runtime: Stub out a mechanism for introspecting value structure.
[33mfc42659[m Generalize witness table generation logic in silgen and irgen to handle properties. We can now form witness tables for both properties and subscripts, but still can't call them.  Also, only computed properties can fulfill a protocol requirement (which is tracked by rdar://15912000).
[33m68a6891[m Implement: <rdar://problem/16118658> properties in protocols should require {get / set} specifier
[33m23a6e57[m RelNote Optional's new "to cache" method
[33m6ffa275[m force the 10.10 sdk in a slightly less grotty way.
[33mf9b6b02[m stdlib: remove SNaN generation completely
[33m45e3233[m add a terrible hack to the makefile to force it to the 10.10 sdk.
[33m092d420[m stdlib: disable ability to generate SNaN
[33mf7e815d[m stdlib: remove CountingSink
[33mb30beea[m rework some error handling in the parser to make sure to mark invalid getters and setters as isInvalid().  This fixes: <rdar://problem/16109996> Assert on incorrect val computed properties in protocols
[33m618b052[m Followup to r14097
[33m5c5cc61[m Build Swift libraries into the right directory again.
[33m97d66cc[m Bridge thick class metatypes as Objective-C class metatypes.
[33m726c6c7[m Fix docs build after r14116.
[33m75632d4[m [prim] Remove some cruft that snuck in.
[33m0044c1d[m [arc-opts] Teach cannotDecrementRefCount how to use alias information to prove that an apply which may decrement ref counts can not decrement a value with reference semantics if we can prove the value does not alias any of the applies arguments.
[33m8ac2e79[m [prims] Update prims given recent language changes.
[33mf07c26c[m [sil-arc-opts] Teach sil-arc-opts that an owned argument + retain is an iterated increment implying that the BB should be reprocessed.
[33m38cad0c[m Lower metatype and class_metatype to IR based on the requested representation.
[33m46040d1[m Remove StyleGuide.rst.  This isn't the one DevPubs is working on.
[33m57aa9e9[m [utils/install-test-script.sh] Move to 10.10 SDK.
[33m11e9ec5[m [driver] Pass -module-cache-path and -F to both compilation and module merging.
[33m1e55318[m IRGen: A few more TypeMetadataPtrTy -> ObjCClassPtrTy cleanups.
[33m0bafd1f[m Bump module format version.
[33m7fd26d2[m Serialization: Fix a couple of issues with serializing context params of generic SILFunctions.
[33m033867b[m InOutDeshadowing: Only deshadow inouts that are both loaded from and stored to.
[33m26d93eb[m [ClangImporter] Use MAP_STDLIB_TYPE for CFIndex (instead of MAP_TYPE).
[33m6696fcb[m [PrintAsObjC] Rename stdlib/swift2objc/ to stdlib/PrintAsObjC/.
[33m5c9aea7[m [ClangImporter] Restore typealiases for NSInteger, size_t, etc.
[33mb8940a9[m Improve thick/ObjC metatype IRGen test case to cover ObjC-defined class metatype.
[33m020949d[m [styleguide] Add "work in progress" warning
[33m27f1b09[m [styleguide] Commit last draft seen outside DevPubs
[33mb9cc632[m [julia] Update due to recent language changes.
[33m27ae27b[m Start using objc_class* to describe Objective-C class metatypes in IRGen.
[33mff8eeef[m Release notes: remove controversial discussion about NSUInteger.
[33m435a481[m Runtime performance: avoid llvm::RoundUpToAlignment(size, mask + 1)
[33m4264719[m [julia] Add reference images for Julia benchmark.
[33mf1c9f5f[m [julia] Change julia output png path based off of the problem size.
[33m6eaa67e[m [julia] Change benchmark size choice from being a cpp arg to an actual program arg.
[33m3f567c8[m Runtime+Performance: always use our fast malloc cache
[33m518c777[m [ClangImporter] Treat NSUInteger as UInt when it's an enum underlying type.
[33m065d770[m [ClangImporter] Import anonymous enums as Int rather than CInt.
[33m02892a0[m [PrintAsObjC] Handle UInt by printing it as NSUInteger.
[33m3182cd3[m Introduce thick/Objective-C metatype conversion instructions.
[33ma546568[m remove a bogus assert, allowing removal of some duplicated code.
[33mb4bf794[m ASTContext: make RawComment APIs private.  One should use Decl's APIs instead.
[33m34df7b4[m Comment parsing: recognize documentation and non-documentation comments, merge consecutive documentation comments and form 'RawComment's.
[33ma61e320[m stub out missing lvalue handling for subscripts on protocols and archetypes
[33m46913ba[m Move some code around, this lets us form ExistentialSubscriptExpr when subscripting on a protocol value.  Too much else is broken to test this yet.
[33mfae2209[m don't drop a temporary file into the SILPasses directory.
[33m9873348[m Have the sil printer print demangled versions of symbols in witness tables (commented out) like we do for vtables.
[33m9a1cf1a[m Work around linker confusion by the Swift marker in ObjC metadata (rdar://16107696).
[33m236ec9a[m <rdar://16027812> Fix install location of Swift stdlib files.
[33ma1673d7[m Add an Objective-C metatype representation spelled with @objc_metatype.
[33mc54f98f[m Convert thick/thin metatype bool to an enumeration. NFC
[33m203c8e2[m [test] If SWIFT_MODULE_CACHE_PATH is set, pass it to the swift driver for the tests.
[33m9565f1b[m Provide release notes for NSInteger -> Int, uint16_t -> UInt16, etc.
[33m3e95a9c[m [ClangImporter] Preserve the CFIndex typealias.
[33m11e4afa[m [ClangImporter] Import "CFIndex" as "Int", just like "NSInteger".
[33md71cff5[m [ClangImporter] Don't create typealiases for NSInteger, uint16_t, etc.
[33m8bc87bb[m fromRaw() witnesses can only be synthesized when the raw type is Equatable.
[33ma341300[m Switch ClassDecl::getSuperclass() and EnumDecl::getRawType() to interface types.
[33mb28440d[m Remove debugging output I did not intend to commit.
[33m614bd7f[m Runtime: We never use the small allocation cache yet, so always call down to 'free' in swift_slowDealloc and swift_slowRawDealloc.
[33ma37d1f4[m Generalize 'MissingReturn' analysis to closures.
[33ma7b75fc[m Remove inaccurate comment.
[33mc0a0a8b[m Add a -sil-opt-pass-count frontend flag.
[33m3e0c1ce[m Runtime: Update the 'inline storage' flag properly for single-payload enums.
[33mbf6606b[m SIL verifier: #ifndef DEBUG -> #ifndef NDEBUG
[33mc5818d0[m When emitting a swift class v-table, use the natural uncurry level of the method instead of assuming 1.
[33mcc44895[m Zap dead line.
[33mea80d04[m Fix unreachable code warning by tightening code.  No functionality change.
[33m57cae45[m Remove some pointless "if (false &&"'s.
[33mdce0931[m Remove an over-aggressive assert.  Curried methods work in protocols; we treat the method's natural uncurrying level as the specified level.
[33m934ebf8[m Fix the nested archetype sorting predicate to sort on the actual key.
[33mb0221e7[m This should not fall through into the unreachable.
[33mc7da197[m Allow the mangler to mangle accessor kinds and make protocol conformance thunk generation handle accessors correctly.
[33mecbbb4a[m rework our representations of subscripts to not curry the indexes separately from the get/set value.  There is no exposed way in the source language to use this, and this causes shorter term annoyance.
[33mccad57f[m Don't try to extract a type witness from an invalid conformance.
[33m09d8927[m Update a comment to use a style consistent with surrounding comments.
[33mada5a4a[m Update SIL.rst for mark_uninitialized.
[33mdaf717a[m Update documentation for checkAllocBoxUses. NFC.
[33m9dbb7c1[m Remove duplicate code for handling mark_uninitialized.
[33m190de1c[m Add support for option -time-transforms which causes the pass manager to emit time information for each transform run.
[33m685d7fd[m Temporarily disable arcopts on globalinit_func to unblock Andy. Its taking too much compile time due to the size of globalinit_func.
[33m8305814[m [sil-aa] Make sure we do not use too much compile time in valueMayBeCaptured by limiting the size of the use lists we will process to 32.
[33m675952c[m Revert r14030 which appears to segfault performance test hash2.swift.
[33md1157c9[m [test] Add i386 checks to test IRGen/struct_layout.sil.
[33mecd798b[m Comment parsing: attaching comments to declarations
[33m61f7a7c[m Serialization: Fix a couple of issues with serializing context params of generic SILFunctions.
[33mef4fb36[m Only permit checked downcasts of an existential to a subtype, not to an arbitrary type that's convertible to the existential. Arbitrary conversions aren't necessarily reversible.
[33m99ae104[m Protocol conformance is a subtyping relationship, no matter whether the target type is a class existential.
[33meeda180[m [PrintAsObjC] Emit the ObjC header after SILGen...
[33m09e49dc[m strength reduce SILGen's representation of indexes from being RValueSource's to RValues.  SILGen doesn't need the generality of RValueSource.  NFC.
[33m6924925[m [sil-aa] Small cleanups. NFC.
[33m48759e2[m strength reduce SILGen's handling of the "value" argument when calling a setter to use an RValue instead of RValueSource.  NFC.
[33m6570c16[m Teach SILArgument how to determine if it is a function argument or not.
[33m26c0768[m Update for stdlib name change.
[33m21429cb[m Revert "Serialization: Fix a couple of issues with serializing context params of generic SILFunctions."
[33m67fd13e[m Serialization: Fix a couple of issues with serializing context params of generic SILFunctions.
[33m0b2541b[m Rename the standard library to "Swift" (instead of "swift")
[33m69d8497[m Always honor -dump-parse, -dump-ast, or -print-ast even if there were errors.
[33m99cfcdc[m [stdlib] Restore NewArray.swift
[33m66f0ad6[m fix a few let's I missed.
[33m061b301[m release note s/let//g.
[33m3404f27[m remove 'let' from the parser.
[33m5da2976[m update this for @inout -> mutating, @inout -> inout, and let -> val.
[33m2890388[m Rename the internal compiler lexicon from let -> val.
[33m36856f7[m revert this file, it depended on r13984
[33m602da91[m switch diagnostics from let -> val.
[33m50e0cc9[m switch testcases to use val instead of let, also switch SILPrinter.
[33m016aee8[m Update grammar in comments after type -> static/class change
[33md5752c4[m Update comment to reflect reality (presence of source location no longer indicates that an attribute is present).
[33ma0874ad[m Add a Builtin.canBeObjCClass "type trait" builtin.
[33mcd76c95[m Generic dispatching prototype
[33m0a52efd[m SIL: Lower DynamicSelf.metatype down to the metatype of the self type.
[33m67734b1[m [stdlib] CollectionOfOne<T>
[33mea242f2[m [stdlib] Add Bit type
[33m18923a8[m Allow name lookup into DynamicSelf and update AST verification to match.
[33m0b97b32[m Start converting LangRef to ReST
[33m46240b4[m [stdlib] add SingleGenerator
[33mdf356b4[m SIL: Set the context generic params of reabstraction thunks less greedily.
[33m1322c08[m [stdlib] NumericOperations.toIntMax()
[33m353b573[m [stdlib] FloatingPoint.gyb: 1-line regeneration command
[33mfe7e782[m [stdlib] FixedPoint.gyb: one-line regeneration command
[33m415bd58[m [stdlib] Add IntMax and UIntMax
[33m8000560[m [stdlib] FixedPoint.gyb: tiny simplification
[33m0a7c28b[m [stdlib] Factor out Index.swift
[33m4a86056[m Progress towards putting subscript accessors into protocol witness tables. This isn't testable yet, as it is blocked by at least two things:  1. we can't put curried functions into witness tables (rdar://16079147),     which is a problem given that subscript accessors are curried on their     index argument.  2. accessors cannot silgen is curried form, we currently die in mangling.
[33m153cfb1[m move accessor mangling into Mangler::mangleEntity, where it can eventually be used by witness thunk generation.
[33m9a3126b[m Make Char 32 bits again.
[33m9c6c270[m Teach SILCloner to clone the opened existential archetype as well.
[33md00be80[m Add interpreter test for block calls.
[33m001ca7a[m Add missing RUN: line to IRGen/objc_block.sil test.
[33mbca0664[m IRGen: Emit calls into blocks.
[33m9d41af1[m Make SIL output for open_existential actually parseable.
[33meab41e7[m [stdlib] WIP new array prototype
[33m366d570[m fix lookahead disambiguation for closures vs didSet/willSet blocks to handle attributes on the didSet/willSet declaration.  This fixes: <rdar://problem/16076758> Attributes on didSet/willSet + property initializer completely confuse the parser
[33mf501633[m Added first graph benchmark prims, an implementation of prim's minimum spanning tree computation.
[33mbd8323d[m Add an irgen hack fix the rest of rdar://16006333 - observing properties don't work in @objc classes
[33m380b03c[m reject attempts to mark observing accessors @objc, and don't infer them as @objc.
[33m32aa714[m Fix the buildbot-script
[33m86f1cfd[m [buildbot-script] distcc support
[33m655833e[m [buildbot-script] Support user-supplied CMake options
[33m99ad50b[m SIL: Lower @objc_blocks with the correct calling and ownership conventions.
[33m465643b[m Catch stray use of the standard library name; change to STDLIB_NAME.
[33m0388d07[m fix <rdar://problem/16006333> observing properties don't work in @objc classes
[33md014c27[m Adjust bridged type lookup to be tolerant when a stdlib type (e.g. String) is missing in the current compilation.  This can happen when in -parse-stdlib testcases that don't define (e.g.) String.
[33ma4815a8[m Fix a crash on invalid I ran into while working on other stuff.  Previously we would type check the argument patterns... and if there was an error, skip type checking the body patterns.  This caused problems later with unset types.
[33m5298cba[m inline Pattern::setType(), and add a new method for recursively traversing pattern nodes.
[33mdb23091[m fix a couple of simple things off argument patterns.
[33m108910c[m remove a now-dead function.
[33m7d29d25[m Fix include order
[33mf73dd27[m StringRef'ize escapeAndPrintString
[33mf8fa982[m Add a .clang-format file
[33m571c9b3[m Split 'type' keyword into 'static' and 'class'
[33mefe54a1[m Fix a slightly different type checker crash when DictionaryLiteralConvertible is broken
[33m90fc4aa[m Fix type checker crash when DictionaryLiteralConvertible is broken
[33m09d7d5e[m runtime: Handle tuples in printAny.
[33m3fded63[m stdlib: Proof-of-concept 'print' implementation for an arbitrary Array.
[33m802df0b[m Runtime: Do awful things to implement "swift_conformsToProtocol" for Swift protocols.
[33m36cc5ab[m IRGen: Set up definitions for block structures.
[33m2bb67f2[m Preserve some notes about inout COW optimization for later elaboration.
[33m1fa4612[m Implement (de-)serialization for open_existential[_ref].
[33mcf5aaa2[m Properly extract the archetype type from open_existential[_ref] in IRGen.
[33m10ac15e[m Lex $notAllDigits as an identifier and diagnose it in the lexer outside of debugger-support mode.  Rip out the existing special-case code when parsing expr-identifier.
[33m244677e[m [stdlib] Give Array's buffer its own file
[33m5063c33[m Rename "Stream" protocol back to "Generator"
[33mb5bbca8[m switch one more thing from arg -> body patterns.
[33m9ee7d99[m switch a few things off of argument patterns, onto body patterns.
[33m0f54c34[m Use -resource-dir for iOS builds and tests instead of -I.
[33m93b87ed[m Add -resource-dir option to find lib/swift directory.
[33m327439f[m New frontend: use the target triple to find runtime modules and libraries.
[33m118c4c8[m [cmake] Get CMake 2.8.12 to stop complaining about @rpath for iOS builds.
[33md88852e[m remove SILDeclRef::Getter/Setter and supporting code.  NFC, but I think the previous patches have defined away a few obscure bugs handling subscript accessors (from inspection).
[33ma6640a1[m Rework has .sil files handle computed vardecls and subscripts. Previously, we would just parse vars and subscripts with no definitions, then let getters and setters be referenced arbitrarily later.  This was problematic for a number of reasons, not least of which, the .sil file might be invalid.
[33m51609c1[m unbreak ClangModules/ctypes_ir.swift & ClangModules/macros_ir.swift, imported accessors from clang modules need to be hacked to have shared linkage, even in the new form.
[33m23c7c2b[m Document open_existential[_ref]
[33m0fbad9c[m Fix Makefile build of standard library.
[33m81df78e[m In the debugger, permit $x0 where we would parse an expr-identifier.
[33m2134072[m Split open_existential[_ref] out as their own instructions.
[33ma2ecd15[m Added new benchmark Julia.
[33m3cd1172[m Move each of the benchmarks in utils/benchmark into their own directories.
[33m12196c1[m Now that we always have funcdecls for getters and setters, we don't need SILDeclRef::Getter/Setter and the complexity therein.  Switch the world to make SILDeclRef::Func's instead of them.  NFC.
[33m3360c58[m SwiftARCPasses.so -> SwiftARCPasses.dylib
[33mee01278[m Revert "Diagnostics: 'let' is spelled 'val' now"
[33mc1eda9c[m Debug info: do not emit linetable info for ObjC thunks and other auto_gen code. <rdar://problem/15975329> Don't emit line numbers for Thunks
[33m89ca27a[m fix 80-column violations.
[33m2d1de37[m Diagnostics: 'let' is spelled 'val' now
[33m01beec2[m [inferior-swift-mode.el] Initial commit of an inferior-swift-mode based off of the swift repl.
[33m76bbadb[m Update comment to use triple-slash syntax
[33mb8817ae[m Move two operators to KnownIdentifiers.def
[33m112e5c1[m Remove obsolete comments.
[33mdf97518[m Handle padding arguments in C/ObjC entrypoints and calls.
[33m5340cec[m Add 'swift' back to the installation package.
[33mf22fc15[m Emit extension attributes when lowering C/ObjC entrypoints.
[33m9ba8eba[m stdlib+runtime: skeleton of "NSSwiftString" heap storage
[33m2e1715e[m Add release notes for new message send syntax.
[33m3ba6b7c[m [sil-combine] Make output of (extract (load)) -> (load (element_addr)) deterministic by not using pointer address as a sorting criteria for vardecls.
[33m71f9438[m Introduce very basic support for selector-style initializations.
[33m1bbbcaa[m Consider @auto_closure when mangling types.
[33m873396f[m Check for recursive @property imports in the Clang importer.
[33me8ea34e[m Re-add ~= for NSObjects now that that doesn't conflict with swift.~=.
[33m70f8c19[m Add the standard library as a private import for pure Clang modules.
[33m7995dde[m Module::getImportedModules can now get public, private, or all imports.
[33m268316f[m [tests] Add more missing -enable-source-import, for IRGen's miniature SDK.
[33m8fd86aa[m Only coerce when necessary when lowering C/ObjC entrypoints.
[33m45ca5fe[m Use whitespace indentation to detect selector-style call continuations.
[33m3f7d387[m Re-commit r13836 with more correctness this time:
[33mf7977e6[m [serialization] Reject modules with a different version number.
[33mdd4db41[m Serialization: Don't throw away the conformances of ApplyInst substitutions.
[33m525c932[m Revert "since the getObjCGetterSelector/Setter methods from VarDecl/SubscriptDecl down"
[33m5fa3e49[m AST printer: don't print module qualification on declarations from 'ObjectiveC' module
[33m5c9470b[m AST: Shun empty GenericSignatures, and remove the ASTContext argument from GenericSignature factories.
[33mc23185d[m since the getObjCGetterSelector/Setter methods from VarDecl/SubscriptDecl down to AbstractStorageDecl, NFC.
[33mb676245[m [tests] Using %clang-importer-sdk implies -enable-source-modules.
[33md16c137[m [tests] (Partially) Revive ASan build by updating XFAILs.
[33m1709802[m Add comments for r13795, as suggested by Chris.
[33mf880250[m [Makefiles] Add missing dependency: swift_driver needs the PrintAsObjC library.
[33mf7e9dca[m fix typo Mark pointed out.
[33m9a6a81c[m [stdlib] Avoid dynamic dispatch in HeapBuffer
[33m05aa440[m Revert r13815, it breaks tests
[33m01ce5af[m Swap comments that are on the wrong lines.
[33m521cafd[m Parse expr-call-suffix after self.init and super.init.
[33m8a92d5e[m SILGen: Handle capture of 'self' in a derived class 'init' method.
[33me8b29ae[m Allow a closure after the first selector piece.
[33mb48cec9[m release note 'let' -> 'val' with some rationale.
[33m6072e1d[m parse the 'val' keyword.  For now it is a synonym for let.  I will rip 'let' out (and continue migrating terminology in the compiler) as an ongoing project.
[33m6f4280f[m Rename a bunch of variables named 'let' and react to the stdlib moving off of 'val'.
[33mb2b621a[m Parse the expr-call-suffix after identifier generic-args?, not generally.
[33m0b70cdd[m rename various 'val' parameters to 'value' in the stdlib.
[33me163255[m add a missing case, that broke the stdlib build.
[33mc0b39cb[m Serialization: Don't throw away the conformances of ApplyInst substitutions.
[33mbe8ed18[m Add release note for instancetype -> DynamicSelf import.
[33m0695fce[m improve diagnostic about missing ) in parameter list to use the phrase "parameter list" instead of "tuple argument".  Fix a potential crash I introduced by making an assumption about default initialized implied name parameters being the only thing in parens.
[33mb2a4952[m Fix <rdar://problem/16034148> swift incorrectly rejects destructuring argument
[33m41bff7d[m fix <rdar://problem/16030644> Implicit parameter names in selector-style functions don't support default values
[33m96e4713[m SIL: Simplify TypeLowering generic context APIs to work only with GenericSignature.
[33m8a99029[m Remove unused isConstructor parameter from Parser::parseExprCallSuffix().
[33m560e758[m Allow a closure after each selector piece name.
[33m68db63b[m AST: Have GenericFunctionType use GenericSignature.
[33m32ca12e[m Revert r4994 "Remove the least liked of the message-send syntaxes".
[33m85ee56b[m Debug info: Improve the line table for SwitchStmt variable bindings by associating the store to it with the first CaseStmt. The goal is to make the linetable entries as monotone as possible.
[33m657565d[m [CMake] Eliminate SWIFT_NEW_DRIVER; everyone should be using the new driver.
[33m513e6b5[m Don't use a default argument in a lambda.
[33m16f8ece[m Drop -print-as-objc from swift-ide-test.
[33mc054bea[m [PrintAsObjC] Actually call printAsObjC when we pass -emit-objc-header.
[33m798e13d[m Wire up -emit-objc-header[-path] options that don't do anything yet.
[33m8b9dfb0[m Move test/Swift2ObjC to test/PrintAsObjC to match the library name.
[33m9546179[m Move -print-as-objc feature into a library.
[33m35dfd6e[m Clean up @objc checking for subscripts.
[33mc393d07[m TypeChecker: when validating a var or subscript, validate its accessors too.
[33me880da0[m AST: Add canonical generic signatures.
[33m060a6b5[m [sil-aa] Make the comment descriptor of transitive escape inst clearer and use a refactored method to determine if a builtin is read none instead of doing it manually.
[33mf70a1d8[m [sil-aa] InitExistentialInst is a transitive escape inst.
[33mfbe2ccf[m [sil-aa] Add in convenience methods for querying AliasAnalysis::getMemoryBehavior.
[33m016d62d[m Disallow @objc on methods, properties, subscripts, etc. in generic contexts.
[33m8cff098[m Split SILCodeMotion into two passes, LoadStoreOpts and SILCodeMotion.
[33m9453993[m [sil-aa] Create convenience methods isMustAlias, isNoAlias, isMayAlias and update AA uses to use these instead.
[33m8f0a7c5[m Only use Objective-C dispatch to a constructor if it is actuallly @objc.
[33m6480809[m Runtime: drop calloc for malloc
[33mb44599f[m nonmember observing properties are done.
[33mba0f502[m Implement <rdar://problem/16034296> observing properties should not be mutable in their willset method
[33mb56d46b[m Teach sema that uses of local observing properties are direct when in the accessors.  This completes: <rdar://problem/15922884> support non-member observing properties
[33m70fa0de[m Select ABI types for all arguments of a C/ObjC function together.
[33meaf410f[m Import Objective-C instancetype methods as DynamicSelf methods.
[33m6d1f80f[m Bubble the covariant conversions to the outermost relevant call.
[33mbc00521[m Implement most of support for properties in function scope, part of rdar://15922884.
[33m1bcf0ce[m SIL: Fix up the parsing of generic apply insts.
[33mb19cfb2[m Drop the context generic params from SILFunctionType.
[33mfb2ebf5[m SIL: Parse and print SILFunction's context generic params.
[33m6b0f90b[m [test] Fix tests for arm64.
[33m05c1594[m SILGen: Derive protocol witness context generic params independent of type.
[33m2c387a4[m Avoid rerunning BB ARCOpts analysis in some cases.
[33m4a37141[m [sil-aa] Added in a quick fixme to notate for posterity that when in the way future variadic address projections land, getUnderlyinObject and findAddressProjectionPath should never disagree due to the former handling casts in contrast with the later.
[33mde48699[m [sil-aa] Teach SILAA how to prove that two GEPs from the same base pointer with the same projections must alias.
[33md354c89[m [driver] Continue treating a single input file as indicating a module "main".
[33m3a1d46d[m [sil-code-motion] Refactor out the address projection path computation from findExtractPathBetweenValues to a new function findAddressProjectionPathBetweenValues and wire up the old method to use the results of the refactored method.
[33mbb42bf6[m Demangle dependent types.
[33m30a3a9a[m SILGen: Hand down context generic params for reabstraction thunks independent from their type.
[33m648d3fe[m Pass in Args.size() - 1, not Args.size() so the nullptr arg is not included in "argc".
[33mf88bc1e[m Teach the frontend how to pass through -Xllvm commands.
[33mc24a6a7[m [driver] Disallow "swift" as a module name unless -parse-stdlib is passed.
[33m0de8d19[m Define globals for the names of the stdlib, ObjectiveC, and Foundation modules.
[33m778c6cb[m [Driver] When printing out the version also print out the submission version.
[33m12c064d[m IR generation for DynamicSelf method invocations on existentials.
[33mb095a5e[m Add -debugger-support to permit the inevitable series of exceptions and special-cases that we want to permit when parsing for the debugger.
[33m5757f73[m We don't handle these LLVM intrinsic kinds yet either.
[33m04a5785[m fix the release notes now that implicit argument naming works with the first chunk as well.
[33mc57b0d2[m Implement <rdar://problem/16021869> the first portion of a function selector should allow implicit arg names
[33m2e898da[m remove the ban on selectors that have selector chunks with the same name.  As long as the inner argument names are unique, the different chunks can be referred to in the definition.  There is still some problem with calling these, but that will be resolved by declaration based invocation rules when they are available.
[33md6729ba[m refactor some argument parsing logic out to a new parseArgument function, and generalize it to work with nameless selector chunks.  foo:: is allowed to ignore the second argument name if it wants to :-)
[33m62244c4[m peel the first iteration of the parsing loop, it is special.
[33mfb3ae2a[m rework argument parsing to pull curried argument parsing into the main loop.
[33ma8c7092[m Mark the synthesized 'get' accessor for observing accessors as transparent, since they are just a pointless abstraction to make AST invariants simpler.
[33me6c09b3[m ArrayBridge.rst: minor tweaks and ReST cleanups
[33m9a2a359[m InoutCOWOptimization.rst: restore a dropped bullet
[33m5e1d7d6[m SIL: Lower the context generic params for a SILDeclRef independent of its type.
[33md5ef2bc[m Use SILConstantInfo::ContextGenericParams to push context params through local contexts.
[33mb24f36c[m Mark off some inert uses of getGenericParams.
[33m4740163[m Model references to DynamicSelf methods on existentials by opening the existential.
[33mdbfa9cf[m rename builtin for clarity.
[33m55e8182[m expand on the Optimization section, at DaveA's request.
[33mf9a83fd[m Implement the first half of <rdar://problem/15922884> support non-member didset/willset properties
[33m5b34233[m Refactor out the class Projection class into its own header swift/SIL/Projection.h.
[33me54a454[m Handle the remaining types in Clang type generation.
[33m296691f[m Disallow Swift functions as parameters to @objc functions.
[33mc11047c[m various tweaks, no substantitive change.
[33m7e16637[m fit in 80 columns and convert awesome quotes to ascii quotes.
[33me32adda[m [proposals] Array Bridging: first draft
[33m10e5297[m [sil-aa] Add support for distinguishing non escaping local objects and escape sources.
[33m4a4cbcc[m Parser: forgive amp_prefix in func decls
[33mb9f667b[m Implement <rdar://problem/15920332> didSet/willSet variables need to allow initializers
[33me38b125[m change Parser::parseDeclVarGetSet to return the bound variable, instead of returning it by reference.  NFC.
[33m481fbb7[m Drop the non-interface types from SILFunctionType.
[33m201e1d9[m refactor parseExpr a bit: rename parseExpr to parseExprImpl and change clients to either go through the new parseExpr (which is never "basic") or the existing parseExprBasic entrypoint if they don't want trailing closures.
[33md01ddfd[m Change the indentation in SILNodes.def of LiteralInst, AllocationInst, and DeallocationInst to match the rest of the ABSTRACT_VALUEs in SILNodes.def.
[33m42677b2[m IRGenDebugInfo: Stub out debug info for dependent types.
[33m7275b2f[m IRGen: Pass in the debug DeclContext when building debug info for boxes.
[33m188b53c[m AST: Fix up mangling of dependent types.
[33m54dc5ff[m [release notes] fix output formatting
[33m4f22799[m [utils] Clarify release note clarification
[33m965af3c[m [proposals] How now inout COW?
[33m6db7c16[m remove some crazy slashes also.
[33mb932a0a[m clarify that 'next release' is next week.
[33m7b28da3[m SIL: Always substitute SILFunctionTypes using their interface types.
[33m404f555[m Devirtualizer: Zap all Self-derived substitutions when devirtualizing an ArchetypeMethodInst.
[33ma3972d9[m rename AddVarsToScope to CollectVarsAndAddToScope and move it down next to case statement parsing logic since it is specific to it.  It looks like we can't fully eliminate this right now, because patterns in case statements are parsed generally as expr patterns and sema'd into something more useful later, too late for setting variables in scopes.  The parsing logic could be improved here, but I'm not going to work on this.
[33m4c786bd[m fix a problem where collecting vars from an enum pattern would enter an infinite loop.
[33m554f5e8[m Now that "addFunctionParametersToScope" just adds the variables from the pattern to the scope (it doesn't do other argument specific stuff like mucking with decl contexts) rename it to addPatternVariablesToScope, and use it in two more places in the parser.
[33mffbd199[m [ClangImporter] When passing imported declarations to ASTContext, mimic the order that they would be passed recursively (LIFO).
[33m78a6f96[m rework SubscriptDecls to work the same as VarDecls: first the SubscriptDecl is created, then the accessors are installed on it. This allows us to create the subscript decl before the accessors have been parsed, allowing us to build the subscript even in invalid cases (better for later error recovery).
[33mb581fc9[m stop serializing the self decl for ctors and dtors, it is redundant with the argument pattern that already includes it.
[33m338ec06[m [ClangImporter] Add a statistic about the number of clang entities we imported.
[33m625320e[m Unbreak build on OS X 10.10
[33m08fb77b[m Revert "IRGenDebugInfo: Contextualize interface types to get archetype parameter types."
[33m70d547c[m remove a bunch of code that is manually monkeying around with DeclContexts, now that they are implicitly updated.  This exposes two things: 1) we're unncessarily serializing selfdecls in ctors and dtors. 2) The index pattern of a SubscriptDecl has no sensible DeclContext that    owns variables in it.
[33mce9d97c[m similar to the previous patch, have all NominalTypeDecls auto-reparent all of their generic parameters.  This simplifies logic creating them, allowing us to eliminate all setDeclContext() calls from the parser.
[33m40316dc[m Change FuncDecl/CtorDecl/DTorDecl/ClosureExpr constructors to automatically reparent VarDecls in their arg/body patterns and GenericParameters to themselves.  These all have to be created before the actual context decl is created and then reparented, so we might as well have the reparenting be done by the decl itself.  This lets us take out some setDeclContext reparenting loops from around the parser.
[33mb46f752[m SIL: Make SILFunctionTypeSubstituter use interface types.
[33m34e51a1[m SILGen: Clean up some straggling non-interface types.
[33m6fbb356[m Serialization: Deserialize apply and partial_apply using substFnType's interface type.
[33m43a18e1[m Switch vardecls off of Parser::addVarsToScope, onto a simple for loop that walks the pattern variables and sets them up. Move addVarsToScope to ParseStmt.cpp which is what is left using it.
[33m143d503[m Simplify how accessors are added to "Decls" and have their decl context set by the parser.  Instead of having addVarsToScope grovel through and find them to do this, just do it directly when parsing the accessors. Subscripts do this, so vardecls can too.
[33m55fee7a[m simplify some code by creating a ParenPattern directly instead of using TuplePattern::createSimple.  Also, mark the namedpattern implicit, since it is.  Add an example of rdar://15993514 using non-trivial types.
[33m89cfcbf[m Misc LangRef updates
[33m3899d1b[m IRGenDebugInfo: Contextualize interface types to get archetype parameter types.
[33m3dc956e[m Implement <rdar://problem/15993514> Enhance method declaration syntax to be less redundant and add it to the release notes.  Now you can elide the name on the second (or later) selector chunk in a func declaration, and it gets implicitly named the same as the selector chunk.
[33m655f0be[m [sil-code-motion] Change debug assert into a proper assert.
[33m7cd725c[m implement <rdar://problem/16008564> inout variadic parameters should be not be allowed
[33m8ae0306[m [ClangImporter] Pass the imported declaration to ASTContext after we have finished importing it.
[33m7578316[m Test  for type encoding of imported ObjectiveC enum type which is not modernized.
[33m3b785e8[m Render canonical GenericTypeParamTypes as something actually parsable but still obviously artificial.
[33m05daca8[m IRGen: Use interface types to implement the PolymorphicConvention.
[33m4ddcd15[m [Driver/Frontend] Remove the '-module-cache-path=' alias.
[33m5cef0f7[m [Driver] Pass '-module-cache-path' to the frontend.
[33m543e7a7[m Add release note for import of Objective-C properties with custom getter/setter.
[33ma479172[m Import Objective-C properties with custom getter/setter methods.
[33md447e49[m When dumping an overload choice in a solution, note the declaration we chose.
[33m90bdf1f[m Run a sequence of SILFunctionTransforms on the same function.
[33m0825258[m SIL transforms should only invalidate when things change.
[33mb7af7a9[m In ARCOpts be clear about when the IR changes.
[33m4da216c[m Add a PassManager analysis that tracks changed/complete functions.
[33m6f03d83[m [stdlib] Half-open ranges are now spelled x...y
[33m5556d24[m Parser: Remove "too many '.'s" error
[33mcbcf17f[m Stop leaking memory from Module and FileUnit.
[33m1e3fd1a[m Parser: allow '...' to be an operator for ranges
[33mbc8b8a5[m Ensure that all uses of DisableAliasAnalysis are also conditionally compiled out when not compiling with Debug.
[33m0aed18c[m [driver] Add -### as an alias for -driver-print-jobs.
[33m9163bc3[m [test] Put a single empty.swift in test/Inputs.
[33mcb83bb0[m Provide the correct primary file name to IRGenOpts.
[33md75da69[m [sil-aa] Compile out DisableAliasAnalysis flag when not building Debug. Put in a comment making it clear that it should be removed once AA bringup is complete.
[33m06b7ca2[m AST: Include "Self" and associated archetypes in AllArchetypes of a GenericParamList.
[33m731000b[m Added -sil-print-all and -sil-verify-all options.
[33m2576075[m [sil-aa] Change disable-aa to be a hidden argument.
[33md8f9e18[m [sil-aa] Add command line option to turn off alias analysis. This is useful for measuring the effect of AA.
[33m99f5e98[m Fix test which was missing a full check-label.
[33m8cb9693[m [sil-arc-opts] Teach SILARCOpts how to use alias analysis to determine if a store/load could use a value.
[33mb6217c2[m SILSerializer: preserve correct type of generic StructExtract/StructElementAddrInsts.
[33m9df53c5[m [frontend] Switch -debug-assert-* from llvm_unreachable() to assert(0).
[33med5b21c[m Debug info: emit a cleanup location for branches leading out of switch cases. rdar://problem/15888936.
[33mb7d4e98[m [driver] Added support for detecting and reporting crashed subprocesses.
[33m9747d87[m [frontend] Added a handful of options to force the frontend to assert or crash.
[33mc9f7bba[m [sil-code-motion] Refactor out load invalidation into its own method so that we can use it both for stores and generic instructions that write to memory.
[33m1905d85[m [sil-code-motion] Teach SIL code motion how to forward a load of an aggregate type + struct_extracts for a load of a gep + load of field of aggregate type.
[33mfb512b4[m [sil-code-motion] Teach SIL Code Motion that dealloc_stack does not disrupt reads/writes.
[33m63df4a5[m [swift2objc] Handle subscripts.
[33m3227f25[m Reindent the block.
[33mddc5484[m [swift2objc] References to non-@objc classes should come through as 'id'.
[33m532a6e0[m [swift2objc] Handle properties.
[33m32d3112[m Generic specialize recursive calls.
[33m04b2b52[m First implementation of <rdar://15922760> Deep devirtualization - specialize on polymorphic arguments.
[33m3dbaf8f[m Expose getFunctionCost() so it can be used by other SIL passes.
[33m611173a[m Factor out a findOrigin helper to peek past casts and returned args.
[33m99b74fb[m [IRGen] finishes off encoding of method and prperty types and removes special case encoding of property setter and getters since we now can encode anything. // rdar://15541020
[33m660bb20[m Select correct IR types for direct arguments to C/@objc functions.
[33m4fde574[m Update a comment -- this code deals with initializers, not any methods
[33m828bc90[m [docs] Miscellaneous ReST fixups
[33m6886655[m [proposals] EfficientSliceMutation.rst: ReST fixup
[33m70a77e3[m [Emacs support] Fix for first file opened
[33m568c0f8[m Update test given the new stable ordering of BB predecessor IDs used in the SIL Printer.
[33m7b66dcd[m Ensure that when we print SILBB predecessors, they are sorted by ID. This enables diffing of large pieces of SIL code easier.
[33m1aff390[m Given SILPrinted IDs a stable ordering when we print them. This makes diffing SIL easier.
[33m1f1cb6d[m [build] Enable 64-bit iOS simulator tests in buildbot-script.
[33m3e2d63f[m [driver] Pass the correct linker deployment target for iOS simulator.
[33m47b936f[m Let passes get their options (current configuration) from the PassManager.
[33m25445d2[m [test] iOS-ify most remaining tests.
[33m22037cf[m Handle va_list in Clang type generation.
[33mbacd2d3[m Debug info: Fix the locations for branches in case statements. <rdar://problem/15899195> Step from a case the middle of a switch goes to the beginning of the containing function
[33mf75e971[m [lit] Move non-configuration-specific configuration out of lit.site.cfg.in.
[33ma190033[m [swift2objc] Check the generated headers with -fsyntax-only.
[33ma195661[m [swift2objc] Stop generating inline prefix info for every generated header.
[33mc9a83d7[m [swift2objc] Add a Clang module as a kind of prefix for generated headers.
[33mf009d0a[m [sil-aa] Test the AA functionality that arguments can not alias with function locals.
[33m396f548[m [sil-aa] Add test to show that two different alloc_stack and anything for which they are the "underlying object" can not alias.
[33m5327c3b[m Print out the result number of the SILValue when you print it out.
[33m79a56b0[m [test] iOS-ify the rest of test/stdlib as far as possible.
[33maf1d6d0[m Disallow @objc on constructors that Objective-C cannot represent.
[33m94fb218[m [sil-aa] Two SILValues that are the same without any stripping trivially alias each other.
[33m69d738e[m [sil-aa] A SILArgument is only a no-alias SILArgument if it is an argument to the first BB of a function.
[33mc990098[m [sil-aa] Add test that two different arguments do no alias with basic aa.
[33mb99eb12[m [sil-aa] Change output of SILDumper to make FileCheck matching easier.
[33mdec5d76[m Bring back the verify-after-all feature.
[33m312cab7[m Change invoking id for AADumper in sil-opt from aa-evaluator => aa-dump.
[33mcd0e0b8[m Rename AAEvaluator => AADumper as per request.
[33md690a63[m progress towards non-member observing properties:  - Add a "isDirectPropertyAccess" bit to DeclRefExpr, serving the    same purpose as MemberRefExprs for non-member properties.  - Teach sema to synthesize correct non-member get/set implementations    for observing properties.  - Teach silgen to handle the isDirectPropertyAccess bit.
[33m27a1a63[m Remove unneeded empty virtual destructors.
[33m1ef0d15[m PassManager: Inject the function/module into the Transformation.
[33ma257952[m rearrange how the get/set decls are synthesized for observing properties.  Now the parser creates the get/set decls, and sema fills them in, instead of having sema do all the work.  This makes it easier to update DeclContexts in all cases.
[33m919f891[m have -dump-ast print "implicit" decls too.  They are interesting to know about.
[33maf31d67[m Add a test for plain enums.
[33m2339567[m reapply "replace magic numbers with an (already extant) enum.", now with less typo and no terrible comment with enum name in it.
[33m063fa84[m revert r13591, it broke something.
[33m7d48b7a[m replace magic numbers with an (already extant) enum.
[33mfda4a88[m Teach the codemotion pass not to invalidate the analysis if no change was made.
[33m31cb4c4[m Teach LowerAggregate to invalidate analysis only if a change was made.
[33m591a42a[m Rename a few more pass factory methods.
[33m595817b[m Rename data structures relating to WillSetDidSet properties to call them "Observing" properties internally to the compiler.  NFC.
[33m7cfb834[m Rename the pass to AllocBoxToStack
[33me4cc6fc[m Rename Specializer.cpp to GenericSpecializer.cpp ; We are about to start specializing calls in the devirtualizer so GenericSpecialzier is a more accurate name.
[33mcd7f72f[m Teach SILCombine not to invalidate all the analysis if no change was made.
[33mb25db41[m Teach the generic specializer not to invalidate all the analysis if no change was made.
[33m7902982[m Teach Mem2Reg not to invalidate all the analysis if no change was made.
[33m4529a42[m Teach the inliner not to invalidate all the analysis if no change was made.
[33mabed15c[m Add the runOneIteration method to the Pass Manager.
[33m4c92002[m [sil-aa] Create utility pass AAEvaluator which just evaluates AA on all values in a function. This is so that tests can be written to test out the AA implementation.
[33m9a29733[m Enable printing of AliasAnalysis::AliasResult and SILValues.
[33m3b43e09[m Change getAnalysis<T> to be asserting and provide a new entry point getAnalysisOrNull<T>. Remove all of the unneeded asserts in the various passes.
[33m07d3fc3[m Coding style fix
[33m4cf4ab7[m Comments and random cleanups.
[33m0651b9b[m Add a new Dominance Analysis that wraps DomInfo and PDomInfo, and migrate the passes that use them.
[33mb3e874f[m [ASTWalker] Walk the TypeRepr of an ExplicitCastExpr.
[33md6b01c1[m release note the inout syntax change.
[33m49f7290[m Add specific diagnostics for sil-only attributes.
[33m44b9321[m Update the last few uses of @inout in the testsuite, and change the parser to reject @inout in non-SIL modes.
[33m8ace0eb[m teach the lookahead parser for types to handle the inout keyword, allowing us to switch closure arguments to the new syntax.
[33m827acad[m Various inout improvements:  - purge @inout from comments in the compiler except for places talking about    the SIL argument convention.  - change diagnostics to not refer to @inout  - Change the astprinter to print InoutType without the @, so it doesn't show    up in diagnostics or in closure argument types in code completion.  - Implement type parsing support for the new inout syntax (before we just    handled patterns).  - Switch the last couple of uses in the stdlib (in types) to inout.  - Various testcase updates (more to come).
[33m79cbda7[m convert a heck of a lot of tests to use the new inout syntax (yay for regex's), and implement code completion and ast-printer support for the new syntax.
[33mb149c74[m convert the stdlib to use the new inout syntax.
[33m5155177[m Fix a spelling mistake.
[33mee0986f[m introduce a new TypeRepr to represent "inout" in the argument list to a function.  Parse inout as a contextual keyword there, shoving it into the TypedPattern (instead of introducing a new kind of Pattern).  This enables us to parse, sema, and irgen the new '@-less' syntax for inout.
[33ma4a0e09[m Remove alias analysis invalidation.
[33mabc9a8d[m [sil-aa] Teach SILAA that a SILArgument and something that is identifiable as a local object can not alias.
[33md37ba66[m [sil-aa] Change isAllocationInst => isa<AllocationInst>. Remove isAllocationInst since it is dead code.
[33m6d929c4[m 80 col lines.
[33md680234[m Change the CallGraph Analysis API and add cacheing and invalidation methods.
[33m0faf18e[m [build] In Makefiles, don't build iOS test tool if CoreAutomation is absent.
[33mcda19f0[m Fix testing on Makefile build.
[33m80f1451[m [sil-code-motion] Put in assert to make sure we always get a non-null alias analysis. The only way this can happen is if someone is careless and does not add the alias analysis to the pass manager.
[33m098fda6[m [sil-aa] Change SIL AliasAnalysis into an Analysis.
[33m65e386b[m [swift2objc] Print initializers (as init methods).
[33mf131920[m AST: Walk the interface types of SILFunctionType.
[33md335817[m Revert "Generate arguments with the correct ABI types for C/Obj-C functions."
[33m4fda672[m Use the call-graph analysis result and not the local utility.
[33m63dc900[m Pattern processing cleanups, NFC:
[33m93b5cac[m Remove the top-down call graph ABI and use the reverse bottom-up.
[33mcf602d3[m [swift2objc] Handle arguments with ignored names (_).
[33me1d349d[m [swift2objc] Don't print accessor methods.
[33m6b9de74[m [swift2objc] Forward-declare protocols and classes referenced in methods.
[33m1cdb9a0[m [swift2objc] Minor cleanup; no functionality change.
[33m08093c7[m [swift2objc] Handle @optional methods in protocols.
[33mf455e6d[m SILSerializer: serialize 3 more witness entry types.
[33mab82fa1[m Mangle SILFunctionTypes from their interface types.
[33m99b075c[m Rename SILFunctionTrans -> SILFunctionTransform
[33madef88c[m Add a testcase for <rdar://problem/15931767>
[33m270bac6[m Unbreak the Makefile build - LLDB still needs it
[33mcfc20d5[m Revert r13526 which broke the iOS build.
[33mfd8e10f[m Generate arguments with the correct ABI types for C/Obj-C functions.
[33mf8c7b54[m Delete the unused performXXX() functions.
[33mdcc4c17[m simplify code: there is no reason to build a TypeRepr for the implicit 'self' argument of methods.  It is wrong in some cases, and at best it is lying about source information, since it is implicit anyway.
[33m8b2da37[m Assert that all struct types are handled in Clang type generation.
[33m03d16cf[m Fix header guards to match reset of headers. NFC.
[33m20f2f45[m In light of the new swiftAnalysisLibrary, move lib/SILPasses/Analysis.cpp => lib/SILAnalysis/Analysis.cpp and perform the analogous change for Analysis.h.
[33mbe878f2[m [build] Remove redundant dependency.
[33mb6324ed[m [build] Fix SWIFT_RUNTIME_CHECKS=NO for new driver.
[33mdb70ec7[m Minor refactoring of return type handling for C/Obj-C functions.
[33mc09e5d0[m Generate appropriate Clang types for NSZone and String.
[33mccdb0eb[m Change AllocationInsts, DeallocationInsts, LiteralInsts to have the correct parent class.
[33mcdeb7f7[m Remove trailing whitespace. NFC.
[33m8281c98[m Create abstract SILInstruction DeallocationInst as a parent class of Dealloc{Stack,Box,Ref} so that one can check if an instruction is a deallocation instruction by calling isa<DeallocationInst>(I).
[33m2bf56c0[m Add in abstract SILInstruction AllocationInst so we can query if we have an Alloc{Stack,Box,Ref,Array} by just doing isa<AllocationInst>.
[33m5fa9b88[m Change createPerfInliner to take in an unsigned threshold value.
[33md57c18c[m [sil-opt] Move PM.run() outside of the loop that sets up the pass manager so we don't run it every time we add a new pass.
[33m7461dbd[m Now that we have a PM, separate passes from analyses by creating a separate library swiftSILAnalysis and a separate folder/etc.
[33md369b6d[m Add simple inst count pass for counting the various instructions in a module.
[33m18fac94[m Migrate sil-opt and some passes to the new Pass Mananger.
[33m310fa94[m Fix typo. createDeadFunctionEmim => createDeadFunctionElimination.
[33m631f932[m [PM] Change enum => enum class everywhere in the PM code. Additionally fix some typos.
[33me06f98c[m Protect against upstream errors when resolving the 'self' type of an initializer method.
[33mcf556b3[m Migrate the diagnostics passes to the Pass Manager.
[33m2de81bb[m white space.
[33m1df8e93[m Convert the diagnostic methods into passes.
[33m484468f[m Push deprecations of SILConstantInfo non-interface types out a bit. NFC.
[33ma7ae2a9[m Transform the interface result type of SILFunctionTypes.
[33m7bb6849[m Text files end with newlines.
[33m20570eb[m Add comments.
[33m9e7e9dc[m Change the class name. NFC.
[33m7a50a4c[m Pass the Module in the pass manager constructor.
[33ma3bf2fe[m Small cleanups and comments. NFC.
[33m9a5aae4[m Migrate the SIL optimization passes to using the new Pass Manager.
[33mbaa1d16[m Teach some of the passes about the new PM.
[33m587545b[m PM implementation
[33m72169c3[m Initial swift pass manager.
[33m59796c6[m Add topDownCallGraphOrder to utils/local.
[33m0d62463[m Revert "Refactor argument emission for apply. NFC."
[33me86e17c[m SILGen: Use interface types in RValueEmitter's implementation.
[33me746184[m Release notes: escape call to xcrun so that we don't actually run it.
[33m430fa4d[m Rename SILGenApply method that unfortunately contained "DynamicSelf". NFC
[33mf278f34[m roll my release note into next week, since it got dropped from this week and isn't fully baked anyway.
[33m0c0d30d[m SIL: Make ContextGenericParams a constructor parameter of SILFunction.
[33m04475c6[m Use @unchecked optionals for member references into AnyObject/AnyClass.
[33m29af221[m stdlib: we have sizeof() now. Drop *Int*.bitSize()
[33m617dce8[m release note the @mutating -> mutating change.
[33mfa58183[m Teach the parser to accept "mutating func f()" as an alias for "@mutating func f()".   I'm keeping the @mutating version around so we can determine what to do with @!mutating.
[33m7f3f5bc[m Reverted r13476 "Use @unchecked optionals for member references into AnyObject/AnyClass."
[33mb37a50e[m Use @unchecked optionals for member references into AnyObject/AnyClass.
[33m7a3b17a[m Look through @unchecked_option for function application.
[33m46e6acc[m remove the method prototypes.
[33m4b142e8[m move Parser::isStartOfDecl into ParseDecl.cpp (where it makes more sense) allowing us to turn two Parser methods into static functions.  NFC.
[33me242ed9[m Update the "Getting Started" instructions for the new driver.
[33m0d14782[m [Release Notes] Document some of the new-driver changes.
[33m3747aa1[m [driver] Handle .o files and .swiftmodule files passed on the command line.
[33m6c9b222[m [driver] Treat file with a ".sil" extension as SIL input.
[33m6435b64[m [driver] Write textual output to stdout if no -o option is given.
[33mc085719[m [driver] Refactor output filename generation into a helper function.
[33m7358f8c[m [driver] Fix -S mode to not crash.
[33m7361d11[m [test] Add %target-cpu and %target-os substitutions. Adopt them in a few tests.
[33mc9e31c0[m [sil-aa] Some more debug statements and small cleanups. NFC.
[33m6dfc0e2[m [sil-aa] Change getUnderlyingObject to also strip indexing insts.
[33mc262b0f[m [sil-aa] Add in debug statements to AliasAnalysis::alias.
[33m006455e[m [sil-aa] Only cache a result if it is not a may alias result.
[33m473927a[m [sil-codemotion] Added debug statements to promoteMemoryOperationsInBlock().
[33m20c2a79[m [sil-aa] Begin filling out AliasAnalysis::getMemoryBehavior(...).
[33me066574[m [sil-codemotion] After seeing a store only invalidate loads that we can not prove it does not write to.
[33mf1e247e[m [sil-aa] Convert AliasAnalysis::alias(SILInstruction *, SILValue) -> AliasAnalysis::getMemoryBehavior(SILInstruction *, SILValue).
[33m335ceb2[m Re-enable the new Swift driver.
[33m07db002[m [serialization] Force a stable order for dependencies.
[33m0f7a1e2[m Re-apply "[serialization] Preserve dependencies when merging modules."
[33mdf1bb7d[m Re-apply "[driver] Pass -Xfrontend options to the module-merge tool."
[33m2d63a4d[m Add RefElementAddrInst::getClassDecl to return the class decl associated with the GEP operatiion.
[33m502ce2d[m Add in the lit feature "swift_stdlib_asserts" to distinguish the flags SWIFT_ASSERTS from LLVM_ENABLE_ASSERTIONS. Updated two tests to use that flag.
[33m34f264f[m [sil-combine] Fix assertion failure in partial apply closure cleanup where we were attempting to create destroy values for arguments that were not apart of the partial apply itself in the case where the partial apply had more than 1 argument left uncurried.
[33mfe80d33[m [test] Temporarily disable some tests for which REQUIRES: ARM is insufficient.
[33m80df313[m [test] SwiftARCPasses.dylib is now SwiftARCPasses.so.
[33m0f28756[m There are more than a few methods in SIL.cpp for SILValue. Refactor SILValue's implementations into its own file SILValue.cpp.
[33m2afa507[m Add SILValue::stripIndexingInsts() which strips of index_addr, index_raw_pointer from SILValues.
[33mc7fd242[m [sil-aa] Small cleanups. NFC.
[33m35f7bdf[m Rename local variable startLoc to StartLoc. NFC.
[33me38950c[m [Parser] Fix verifier crash with incomplete switch case statement.
[33m3715f63[m Update the source range for FuncDecl to include the proper start location for type functions, using getStartLoc(). This addresses <rdar://problem/15969165>.
[33m33bb1fb[m Fix code completion for function declaration with 'var' and 'let' parameters
[33me4a9ada[m Unbreak code completion of types in selector-style function declarations (broken since r12321)
[33mcf1a1b9[m Clang importer: add tests for importing some standard C types as word-sized types
[33mb2938db[m Code completion: simplify code using the new getInnermostMethodContext() function
[33meea5144[m [test] Add REQUIRES/XFAIL features for test's target OS and CPU.
[33m62b9946[m Fix another issue with getting TypeDecl types.
[33m7c259ea[m Add ABI tests for enum and fix issue with getting TypeDecl types.
[33m1a97f18[m Switch ABI tests to using the real SDK.
[33maadcf6b[m [utils] buildbot-script.sh: LLDB compatibility
[33m1892c00[m [test] Add test machinery for iOS, but don't use or enable anything yet.
[33m01e9139[m Revert "Enable the new Swift driver!"
[33mc7e9c65[m Revert "[driver] Pass -Xfrontend options to the module-merge tool."
[33ma602f13[m Revert "[serialization] Preserve dependencies when merging modules."
[33mf2ae570[m reject things like "var x : Int {}" in the parser, instead of parsing it as a stored decl. Before my changes from a few days ago, we parsed it as having an empty getter (which was rejected by sil diagnostics), but my restructuring broke that.  Make sure to reject it, now with a more specific error.
[33m63adafc[m Move my parser-time check for variable initializer requirements to Sema.
[33mfcdf8a4[m [serialization] Preserve dependencies when merging modules.
[33m099d378[m [driver] Pass -Xfrontend options to the module-merge tool.
[33ma98ad89[m SILParser: parse 3 more witness entry types.
[33ma91ee5e[m Make sure 'switch' source ranges encapsulate their 'case's, even when incomplete.
[33m455835a[m [sil-aa] Always strip off casts before looking into the alias cache.
[33md93beb8[m [sil-aa] Add in some comments. NFC.
[33m4f1957b[m [sil-aa] Actually all address arguments in SIL are no alias.
[33m1d1de86[m [sil-code-motion] If we find an Inst that can not be proven to not alias a load, only invalidate that load instead of all of the loads.
[33m4d54420[m [sil-aa] In general, only "pointer" SILArguments that are address only arguments can not alias.
[33m16b5a57[m Enable the new Swift driver!
[33me9e4db4[m Use the correct type when determining whether we need to coerce.
[33m6c41361[m Demangle: Demangle specializations.
[33m9b732bd[m [CMake] Even in SWIFT_NEW_DRIVER mode, keep swift_driver around for now.
[33mf782eea[m Revert "Demangle: Demangle specializations" until I figure out an assertion failure.
[33m6506fe2[m [CMake] With the new driver, always use -force-single-frontend-invocation.
[33m8fd89a4[m Change SILType::isAddressOnly to perform its query analogously to isTrivial by calling TypeLowering::isAddressOnly().
[33m91e29d1[m use an enum to make serialized modules more stable against changes to the AST. This isn't really how we'd like to serialize vardecls in the 2.0 timeframe anyway, but it helps maintain the existing pattern.
[33m445973e[m Proposal for bridging NSArray to the Collection protocol.
[33m654ce61[m Reapply r13275 in hope it won't break the build again.
[33m0837a32[m Demangle: Demangle specializations.
[33m74833d0[m properly serialize stored_objc and willset/didset properties in module files.
[33m7a891f5[m Enhance the AST Dumper to print a vardecl's storagekind.
[33mdc3c6e8[m silence warning
[33m62263c9[m Remove redundent recursive call check.
[33m7532213[m simplify the SIL string_literal instruction to only produce a single value, which is the address of the string data.  Have SILGen compute and produce the isASCII bit as an integer literal, and remove the logic from IRGen.
[33mf257537[m Disable the inlining of recursive calls. We already perform this check in the cost function, but we can also abort early when we collect the applyinst.
[33m96947b2[m Change silgen to lower string literal lengths to an explicit value, instead of using the result of the string_literal instruction.
[33m7207301[m fix <rdar://problem/15626843> Stored global and static properties should require an initializer
[33me3fcd53[m rename this test to work around rdar://15969147.
[33mb000ce2[m 'data' got renamed to 'enum' a long long time ago, update test to match.
[33m8a0512d[m Fix rdar://15962740, lets are sometimes mutable (in init methods) and we need to take this into consideration when adjusting self.
[33mf508925[m rearrange the vardecl parsing logic so we handle initializer before get/set expressions. No change to what we accept.
[33m4efcbfe[m QuotedString: 'G' is not a hexadecimal digit
[33mb22321d[m Allow invocation of a DynamicSelf-returning method on an existential.
[33m9f32d52[m now that ctors and dtors have self patterns, we can unify and simplify the implementation of AbstractFuncDecl::getImplicitSelfDecl() and eliminate the ImplicitSelfDeclAndIsCached ivar.
[33m5d1d373[m [performance-inliner] Simple fix to ensure that we don't get in infinite loops when we inline a recursive function.
[33m863015e[m [sil-aa] Wire up the cache.
[33m99a9608[m [sil-aa] Teach SIL-AA that two "identified objects" can not alias if they do not equal each other.
[33m70ae7cf[m Remove trailing whitespace.
[33m11d93d0[m unindent switch body.
[33mcc6783c[m Control whether or not benchmarks are run via CMake/Make argument SWIFT_ENABLE_BENCHMARKS.
[33mf92a1a2[m Dump output of sil-combine test to disk and then file check that so I can see the output that is causing intermittent failures on the buildbots.
[33m0be898c[m Add getUnhandledType() in Clang type generation.
[33mfef42a8[m Only newline argument if we will actually be going over 80+.
[33mdeb1e2a[m [sil-aa] Add in isIdentifiableObject.
[33ma4d24ea[m [sil-aa] Add in getUnderlyingObject.
[33mc0fd0c7[m SILValue::stripAddressProjections should just strip address projections, not additionally casts.
[33mcb405ea[m Generate Clang types for enums and UnsafePointer<T>.
[33mbb6c340[m Fix indentation.
[33m8789bd3[m Small cleanup. NFC.
[33mbbdfb8b[m [sil-code-motion] Teach SILCodeMotion how to use the AliasAnalysis infrastructure.
[33m49614d4[m [sil-aa] Initial commit just to set the AA API with alias stubs.
[33me775a1b[m [sil-mode] Add the LLVM header.
[33m34b64eb[m [sil-combine] Remove old struct_extract/tuple_extract of load canonicalizations since they are inferior to the new load processing version.
[33m1350988[m [sil-combine] (projection (load)) -> (load (gep)), done right this time.
[33m33a8cc3[m [codemotion] CondFail does not cause us to read/write memory in a manner that we care about.
[33m32f76c2[m [utils] Emacs: automatically insert LLVM headers
[33md073e30[m [IDE] Add a convenient overload for ide::isSourceInputComplete that accepts a StringRef.
[33m83c09b3[m Objective-C type encoding: map DynamicSelf to id for encoding purposes.
[33mcaaaaf8[m [REPL] Utilize the more accurate ide::isSourceInputComplete in the REPL in order to figure out if we should continue reading lines or not.
[33m0e12f52[m [Parser] Fix verifier crash with case statements in incomplete source.
[33mfa240a9[m [Parser] Fix verifier crash when a switch statement has unmatched brace.
[33m8758451[m [Parser/IDE] Introduce ide::isSourceInputComplete() which returns true if the input source is fully formed, or false if, for example, a closing brace is missing.
[33m742cffb[m [AST] Add an out-of-line destructor for SourceFile.
[33m995d873[m The self type behind a DynamicSelf for a protocol is 'Self', not the protocol.
[33m7fada45[m stdlib: add ++/-- operators to floating point
[33m9740ccc[m Adopt Clang's new ABITypes.arrangeFreeFunctionCall API
[33ma9b2c22[m stdlib: Make shift operator asserts cheaper in debug builds
[33m24ddd82[m Fix a typo in a comment. NFC
[33mb959059[m Sink the DynamicSelf -> owning type replacement lower in SIL type mapping.
[33mebf12a9[m Recommit r13291 with proper tests, etc.
[33m934e075[m Revert "[sil-code-motion] Read none builtins can not cause reads or writes. Don't let them disrupt load/store forwarding."
[33m0d6d693[m [Sema] Mark the synthesized getter/setter of a willset/didset property as 'implicit'.
[33me129196[m [ASTDumper] Print out if a Decl is implicit or not.
[33m4802349[m [AST] Move AccessorKind enum to top-level so it can be forward declared.
[33m15c9359[m Swift2ObjC: Print DynamicSelf as "instancetype".
[33mcd02337[m Update Demangler to support DynamicSelf
[33m2faaf1f[m Test uses of DynamicSelf from archetypes, existentials, and through dynamic lookup.
[33m55c02e0[m [IDE] Handle observing accessors for syntax and semantic annotations.
[33m692d024[m Protocol conformance checking for DynamicSelf protocols.
[33m5fbb110[m When ever we deserialize SIL, verify it.
[33m3fa7c64[m [sil-code-motion] Read none builtins can not cause reads or writes. Don't let them disrupt load/store forwarding.
[33mfe2ef0e[m Fix interface types and type lowering of DynamicSelf so archetypes don't creep in.
[33m4269715[m SIL: Tweak Manman's r13162 to apply to shared definitions.
[33m1655298[m SILGen: Emit protocol witnesses as public.
[33m9f72215[m Basic SIL- and IR-generation support for trivial uses of DynamicSelf.
[33m53a4f87[m SIL: Verify that transparent functions don't reference private symbols.
[33mc9a049f[m Specializer: Give specializations unique symbols and shared linkage.
[33m1562e01[m PerformanceInliner: Don't inline private references into transparent functions.
[33m03d5cb2[m Refactor argument emission for apply. NFC.
[33m74165ee[m Revert "Basic SIL- and IR-generation support for trivial uses of DynamicSelf."
[33m6fa09aa[m Revert "Reapply the cfg trampoline optimization and add another cond_br optimization:"
[33m71f33ee[m Convert the recent commits with DEBUG() => #ifndef NDEBUG. That is what they should really be using. I just had a thinko there.
[33m226a6f8[m Only verify functions when building in DEBUG mode.
[33mca27474[m Reapply the cfg trampoline optimization and add another cond_br optimization:
[33md5bc89c[m Remove the API for setting destination blocks directly. It is incorrect to change the branch instructions without the blocks.
[33m42c3b8b[m Add a builder API for creating cond_br from OperandValueArrayRefs
[33mc0f101b[m Realized I had undone one change too many - this should build just fine
[33m0f7d446[m Add a -dump-module option to lldb-moduleimport-test that will dump the module's top level decls after successfully importing
[33mc25b14b[m Basic SIL- and IR-generation support for trivial uses of DynamicSelf.
[33maf82df1[m Simplify the AST for expressions referencing DynamicSelf methods.
[33m5fd7325[m [driver] Don't crash when given an unknown argument!
[33m2e75543[m Switch over tests to run with the new driver.
[33m5797983[m Replace "-sdk=", "-triple=", etc. with separated options in the build systems.
[33mdeca153[m Improve parsing and error recovery for malformed size expressions in array type specifications
[33m5c696fd[m Make IR generation take an explicit LLVMContext.
[33m63c2dd1[m Add support for SIL "paranoid verification" mode. Again this is disabled by default and will only run on a buildbot.
[33md20a525[m 15866696 Files in the stdlib should use the llvm header
[33mb03cfc1[m Remove the code that empties the body of the function. This code never triggered in stdlib and we can’t just empty the body of the function like that.
[33m10efd0b[m Add SILOptions as an argument to runSILDiagnosticPasses.
[33m6f36515[m [driver] Added support for specifying output levels.
[33md7e1397[m [driver] Made Command::printCommandLine() escape its strings.
[33m49d8d07[m [driver] Moved Command printing into Command::printCommandLine().
[33m51001a5[m SILGen: Local definitions in @transparent contexts can't be private.
[33m5ca3df0[m 15876164 shifting by negative/"too big" amounts should trap
[33m1d0d9ed[m Include the xcrun incantation to print the SDK path in the "no SDK" error.
[33m7d01643[m Don't automatically put the current directory in the include path.
[33m302f9cb[m Disallow importing other Swift source files as modules.
[33m71379f5[m SILGen: Explicitly mark uninitialized locals with mark_uninitialized, and have DI  only consider mark_uninitialized storage.
[33ma610743[m Revert "Remove simple trampoline blocks."
[33m366f431[m Replace ASTStreamer tests with tests of the new driver's __SWIFT,__ast section.
[33m0d5734c[m Remove test for -emit-dependencies.
[33m4dfecb2[m Remove simple trampoline blocks.
[33mbcb1373[m Add block setters to the branch instructions.
[33ma0a2c10[m Runtime: Preserve the linked list of metadata cache entries.
[33m26a9b43[m Start collecting some DTrace types and macros to help trace runtime stuff.
[33m52ae907[m Remove unused SILValue.
[33m418dee2[m runtime: Use hashtables for metadata caches (again).
[33m2472390[m Add a testcase for r13202
[33mbec948c[m Disable specialization of recursive generic functions. rdar://15954661
[33m286f8e8[m fix a bug that -Wparentheses caught, thanks to jordan for pointing this out.
[33m5f89722[m [build] Build stdlibs for 32-bit iOS device and simulator.
[33m0370c59[m [build] Retire fat-script.sh.
[33m0820d82[m Rename '-enable-arc-opts=false' to '-disable-arc-opts'.
[33m6af4dbf[m Move SILLinkMode to SILOptions.
[33m3e08673[m Introduce patterns for self arguments to ctors and dtors, making them uniform with FuncDecls.  This allows us to eliminate special case code for handling self in various parts of the compiler.
[33m9b932ae[m [CMake] Attempt to fix dependencies for libswiftOptimizeARC.
[33mc7f1064[m Extract '-sil-inline-threshold' from the performance inliner.
[33mbac31d9[m Add '-sil-serialize-all' testing option to the new frontend.
[33me37d239[m Modules containing SIL may not be emitted before SIL diagnostics.
[33m188d17c[m Make diagnostic text consistent between the old and new compiler.
[33m1f5fd13[m DefiniteInit: Assert that DI doesn't mess with copy_addrs that are already [initialization].
[33mba76567[m [frontend] In ParseIRGenArgs(), set IRGenOptions::ModuleName using the value in FrontendOptions.
[33m101fd40[m Rip out -emit-module-for-lldb option.
[33mf165afe[m Replace "-enable-sil-linking=false" with "-disable-sil-linking".
[33m8f7a2e4[m Eliminate LLVM pass entry points from swift and swift_driver.
[33mfb21a2d[m Move LLVM passes into a library, and use opt to test them instead of swift.
[33m0e833a3[m 15936764 swift.sin is ambiguous with Darwin.sin
[33m088d7b5[m IRGenModule users shouldn't need to know about clang::CodeGenerator.
[33m81f7426[m Clean up the ASTs for DynamicSelf on non-generic methods.
[33m70b47ef[m [driver] Forward-declare DiagnosticEngine in Driver.h instead of including swift/ADT/DiagnosticEngine.h.
[33m2472281[m [driver] Updated main() to return 1 if there were any errors building the Compilation.
[33m0d483cd[m [driver] Emit real diagnostics in the driver and integrated frontend instead of just printing to stderr.
[33m05edbb3[m Further cleanups to the clang importer.  Factor more mechanics of setting up self arguments into helpers.
[33ma8604e5[m [utils] build-script.sh: Don't build/test SourceKit by default
[33m422a06c[m Create a new createTypedNamedPattern function and refactor a bunch of code to use it, NFC.
[33me3aeac8[m Cleanup comment.
[33meef626e[m Fix doc typos. Thanks Mark!
[33m6787d4d[m Serialization: Deserialize the interface result type of SILFunctionTypes properly.
[33mf8b686a[m SILSerializer: handle body of closure.
[33mc38c95c[m Fixed indentation issue.
[33m862bc54[m add a comment
[33ma1da309[m Rename the function that checks for cycles in SESE regions and document it.
[33m4096605[m vim-format the file. Convert 4-space indents into 2.
[33m5a85c16[m Refactor AbstractFunctionDecls to hoist the "NumParamPatterns" count up from FuncDecl to AbstractFunctionDecl.  NFC.
[33mbbf6f57[m Properly handle type checking of references to DynamicSelf methods in generic classes.
[33m091cdb4[m [sil-code-motion] Rename statistics so they dont have CSE in the name since CodeMotion is a separate pass now.
[33m9c119ba[m clang-format the file.
[33m3124487[m whitespace.
[33m2308422[m Move the code motion optimizations into a new pass. NFC.
[33m38607f2[m Simplify some code computing implicit self types, and remove some fixme's.
[33mb90f6c7[m Add a missing return.
[33m391d964[m Release note 'if let'.
[33m9fe1ab4[m Implement 'if let' and 'while let' statements.
[33m95c2fc4[m Clena up some 32/64 mismatches. Remove some dead posix stubs.
[33m2c9857b[m Refactor the capture check code and add support for ptr2addr and addr2ptr casts.
[33m75b0cff[m When sinking instructions from predecessors look in a small window of instructions.
[33m030770a[m Make DynamicSelf into its own special type node.
[33m68290c7[m [frontend] If there is a primary input, only call performTypeChecking() on the primary input.
[33m37d5f8d[m [driver] Do not issue an error if one of the multiple top-level outputs is a swiftmodule.
[33md0d4286[m Put modules for 32-bit iOS builds in lib/swift/iphone{os,simulator}/32.
[33md69b305[m Generate IR for inline functions from Clang modules.
[33m9fde7f1[m Add DisableFPElim to IRGenOptions.
[33m0eb31b8[m Have the install-test-script pass -sdk to Swift, since it's required now.
[33m31b50d5[m Note that NS_OPTIONS is also nil-convertible in release notes.
[33m72984b4[m add an assertion
[33m18b4ec2[m simplify code
[33me4c7b48[m [build] Fix FixedPoint[32|64].swift in Makefile build, again.
[33m46333b7[m Release note NS_OPTIONS being default constructible.
[33mabdb2a7[m Add block shim for void(^)(BOOL).
[33m1a87098[m Replace Word[32|64].swift with FixedPoint[32|64].swift in makefile build.
[33m9b0e57f[m [sil-combine] Small cleanups. NFC.
[33m9ebfd9f[m [sil-arc-opts] Ensure @owned parameters are initialized to +1 in the sequence state.
[33mb79d986[m [build] Run SourceKit correctness tests before Swift performance tests.
[33mb34e2cf[m [build] Don't fail buildbot-script builds if performance results could not be submitted.
[33m96d4364[m ClangImporter: Give NS_OPTIONS imports a default constructor.
[33m3d81181[m Simplify the check and fix a bug.
[33mb2846b5[m Make Int a word-size type.
[33m9ccaf82[m Start making the method overriding rules a bit more sane.
[33m152c736[m [build] Describe 32-bit iOS builds in buildbot-script (but do not build them).
[33mf3f7cbe[m Zap the upcast before forming a super_method for a property/subscript getter/setter.
[33m6b8f6a2[m Use an ugly series of builtins to eliminate swift_makeUnsafeNil().
[33mf1be1ed[m Implement super mesage sends for @objc property and subscript getters/setters.
[33ma2b88a7[m Do not sink values with local users.
[33m38c7dec[m fix <rdar://problem/15933538> let decl rejected in @objc class
[33meaf3e5c[m Move nil/_Nil into the core library and add UnsafePointer<T> support.
[33m6e280a8[m Sink duplicated code from predecessors.
[33mcbd1eac[m Add a helper function.
[33m56fea71[m Add more cases to the InstructionComperator. Also, return ‘false’ on unknown instructions instead of asserting.
[33m6932687[m [sil-arc-opts] Combine RefCountState::hasInstruction() and RefCountState::isInitialized() into RefCountState::isTrackingInstruction().
[33m89b3acc[m [sil-arc-opts] Rename ReferenceCountState::State => ReferenceCountState::SeqState.
[33m53ed008[m IRGen: Add an "unimplemented" error when trying to call ObjC blocks.
[33me7a870f[m SILGen: Local functions in a generic context always need to capture their enclosing generic context.
[33m80ea14a[m [driver] Pass the SDK to the merge-module tool.
[33m5ec9528[m [driver] Misc. API cleanup for Tool and its subclasses.
[33m9c6a67d[m Replace '--serialize-diagnostics' with '-serialize-diagnostics-path'.
[33mdf76387[m [driver] Remove any preexisting diagnostics files before compilation.
[33m2604154[m Make the implications of @owned and @gauranteed explicit in the SIL guide by stating that @owned means passing at +1 and @gauranteed means that any retains/release pairs on the argument can be eliminated without worry.
[33m5e9eb99[m Remove staging option "-enable-sil-serialization".
[33m8058ee7[m Make it clear in the SIL guide that a function's argument with respect to reference counts is not defined by the calling convention, but rather by the argument's 'convention attribute'.
[33m12fb34d[m Eliminate "Immediate" flag from CompilerInvocation.
[33maf032e9[m Demangle the new protocol witness thunk mangling. Remove the documentation and demangling for the old one.
[33m9f698b6[m Revert "SILGen: Use interface types in RValueEmitter's implementation."
[33m800ea37[m Revert r13036 as per Joe's request.
[33m1d6fdcb[m [IDE] Code-completion: References to types should not mention ".metatype"
[33m6e1d1c0[m [IDE] Adding ".metatype" is not a valid completion in an expression context but it is valid in a type context.
[33m3b0159f[m SILGen: Process reabstraction thunks using interface types.
[33m660fd6c[m tweak wording
[33m46ce583[m release note observable properties.
[33m9f437f7[m we don't support non-member didset/willset properties yet.  Produce an error instead of crashing.
[33m290a584[m Implement debug info for willset/didset, and teach dispatch to be non-virtual to didset/will set since we don't drop these in the class vtable.
[33m7bcf701[m Teach sema to synthesize the getter/setter for willSet/didSet properties, we have basic functionality now.
[33m357a242[m SILGen: Use interface types in RValueEmitter's implementation.
[33m7f5091a[m SILGen: Build forwarding substitutions from context generic params.
[33md407bc8[m Teach the parser to add the didSet/willSet functions to the enclosing type, so we emit them.  Add mangler (and demangler) support for these. Enhance our testcase to check to make sure that stores within these specifiers are direct, they don't cause recursive infinite loops.
[33mca439b1[m it doesn't make any sense for stores within didSet/willSet to trigger the accessor functions.  Just say that they are disabled instead (already implemented).
[33m64f45b4[m abstractstoragedecls with objc accessor thunks always have associated accessor functions now, so simplify code.
[33md13ac2c[m unhork the makefile build.
[33mcb35882[m [driver] Set the Immediate flag in -i or -repl modes.
[33m4d69beb[m [driver] -emit-module is not compatible with -i, -parse, or -repl.
[33m8dc6098[m [driver] LLVM bitcode is a binary format; don't write it to stdout.
[33mb6108c0[m SILGen: Consume CallEmission parameters based on the interface type.
[33m39b6015[m Reapply "[sil-arc-opts] Enable single basic block code motion of retain instructions."
[33m5d58f10[m SIL: Make ContextGenericParams a constructor parameter of SILFunction.
[33md918550[m Revert "[sil-arc-opts] Enable single basic block code motion of retain instructions."
[33m376cdef[m [stdlib] Segregate the String bridging API
[33m774d75d[m Release notes: -emit-llvm and -triple have been deprecated.
[33m9341219[m Use -emit-ir instead of -emit-llvm, for better parity with -emit-bc.
[33m0c92cc0[m Use '-target' instead of '-triple', for consistency with Clang and GCC.
[33m2132bff[m Replace "-sdk=<path>" with "-sdk <path>" in tests.
[33mc636c6a[m [utils] buildbot-script: suppress warnings
[33meaa060b[m Update enum test to be less fragile.
[33macefe4f[m remove a special case for SelfApplyExpr that isn't needed anymore. With that change, all calls to adjustSelfTypeForMember are in the argument list of coerceObjectArgumentToType. Instead of doing this, just call adjustSelfTypeForMember from coerceObjectArgumentToType instead.
[33m5d28be5[m start teaching sema about didset/willset.  First up, accesses to the variable are direct in init/destructor and in the didSet/willSet specifiers themselves (to avoid infinite loops in reassignments).
[33m6a6e025[m teach the ast dumper to dump didset/willset stuff.
[33meb66701[m simplify code now that AbstractStorageDecl unifies VarDecl and SubscriptDecl.
[33m827e168[m refactor all the get/set parsing logic to merge the cases together into one function.  Add to it logic to parse didset/willset.
[33ma571d58[m Change the storage of a property to WillSetDidSet before touching its willset/didset pieces, to avoid tripping assertions.
[33m08e8001[m [sil-arc-opts] Enable single basic block code motion of retain instructions.
[33m5e40837[m Always pass an llvm::Module* to performIRGeneration().
[33m3acba25[m [sil-arc-opts] Strip off casts when determining the state associated with an instruction's operand.
[33mb651a9a[m Remove double semicolon that snuck in.
[33me668e86[m With many prerequisites out of the way, lets start actually working on didset/willset properties.  This step provides AST support to model them.
[33m8735a76[m Simplify emitRValueForPropertyLoad and make it work when we can have rvalues that are both computed and have storage.
[33md6f38b2[m Now that the AST rep of properties in protocols are squared away, we can simplify this code.
[33m6165b71[m [build] clobber freed objects by default in non-optimized builds
[33m5310265[m Devirtualize archetype_method of polymorphic functions. Patch by Joe.
[33m7f4f94c[m add missing breaks.
[33m38e1fd4[m [frontend] Added support for -disable-llvm-arc-opts.
[33m9946080[m [sil-mode] Add highlighting for sil_witness_table.
[33m5faec6e[m Don't crash when forward-referencing a local variable.
[33me944732[m [IDE] Make sure code-completion still works inside a function even if there is an error, like unresolved type-name, in the function signature.
[33meaad8df[m SILSerializer: handle SILWitnessTable.
[33m1bfa020[m Revert "runtime: Use hashtables for metadata caches."
[33mc93e44a[m runtime: Use hashtables for metadata caches.
[33m630cec9[m Got the release-note schema wrong, sorry.
[33m217f111[m Add a release note for computed type properties of classes and generic types.
[33m5b0ecda[m This went with r12994
[33m929ad99[m Clean up and generalize the code pertaining to how a FuncDecl accessor knows about the AbstractStorageDecl it works on.  NFC.
[33m49b0668[m Remove alloc_ref with simple destructors and only store users.
[33me7d5afa[m Commit updated 'Failable Initializers' proposal.
[33m8cecd9f[m AST: ProtocolConformance::getInheritedConformance() should preserve specialization.
[33m00e7fd8[m SIL: Lowering an already-lowered metatype shouldn't mess with thinness.
[33m170cf3f[m Change computeInterfaceSelfType to abort if called on a function in a non-type context, fix the two places that this broke.
[33m9369d51[m merge all the common code between AFD::computeSelfType/computeInterfaceSelfType into their implementation function.
[33m0a88809[m now that there is only one caller of getSelfTypeInContext and getInterfaceSelfType, inline them into their caller.  This has the nice effect of moving getSelfTypeForContainer into Decl.cpp instead of being in DeclContext.cpp (which never made sense to me).
[33ma945271[m Now that properties in protocols are always computed, and that StoredObjC properties have accessors, we have an amazing property: everything that we want to form a getter or setter for ... really has one! I suspect many things can be simplified now, but the first on the chopping block is StorageDecl::getGetterType (and its three friends) which is now always exactly just getGetter()->getType().
[33mcd8e2ec[m Update and improve the discussion of the type checker.
[33mbea19a3[m Push the AST representation of properties in protocols forward, mostly to get the brokenness inherent in their current representation out of my way.
[33m5a4ae66[m Handle unhandled enum case IITDescriptor::HalfVecArgument as unsupported in DecodeIntrinsicType to get rid of a -Wswitch warning.
[33m333bd8e[m Fixes to sync up with Apple master.
[33m64aa85c[m fix an error on invalid case that would cause the parser to spin forever.
[33m9925958[m another simplification, NFC.
[33m2792e55[m remove the -enable-new-objc-properties staging option, and simplify some code.
[33md163f38[m Fix sema to not mess with stored properties in protocols (which really should NOT be modeled as stored properties!) and turn -enable-new-objc-properties on by default.
[33mb6210f7[m Start substituting type variables through protocol conformances.
[33m630085f[m Move BoundGenericSubstitutions into the arena.
[33ma28a172[m Allow type substitutions to look up a member type of a type variable.
[33mbe9c6f2[m Track the member types of type variables explicitly within the constraint graph.
[33m63ede14[m Fix deserialization of partial_apply insns with out parameters.
[33maf504be[m In -enable-new-objc-properties mode, compute the "StoredObjC" classification during the analysis of the VarDecl (which happens in the PBD walk) so that it happens earlier.  I was previously worried about invalidating the CD->getMembers() walk in DeclChecker::visitClassDecl, but adding to Members doesn't invalidate that walk: the memory isn't deallocated since it is in the bumppointer for the astcontext.
[33mddc5ca8[m Fix <rdar://problem/15858869> *all* objc accessors disabled in init methods, not just for self
[33m0dfb1ec[m introduce a new "IsDirectIVarAccess" bit to MemberRefExpr.  Properties that have both storage AND accessors are accessed by-default through their accessors.  This bit indicates that a specific MRE should access the storage instead.
[33m72cb7e8[m Progress on -enable-new-objc-properties: move the code that handles computation of them to a place that can mutate the members list of the ClassDecl in question, have the analysis happen in "phase 1" of the type checker, add the getter/setter to the ClassDecl declcontext, and make sure they get type checked.
[33mbe24956[m don't crash when a fixit has a null sourceloc, just silently drop it.
[33mdc258df[m [IDE] Make sure the constructor reference in a [super/self].init is reported by the SourceEntityWalker.
[33mc865982[m Add another StringSort CPP reference.
[33m7cfe28b[m Fix build failures due to API change in clang r200082.
[33m5df9849[m [build] Use XcodeDefault.toolchain to build iOS stdlibs.
[33m5e9b6ea[m [build] Use xcode-select to find Xcode instead of using /Applications/Xcode.app
[33md79d666[m [build] Remove errant debug log.
[33m0224e93[m Only look through UncheckedOptional<T> on explicit accesses. Add .Some and .None members.
[33m45495f6[m [utils] buildbot-script.sh: don't hard-code toolchain/SDK
[33m130ebe4[m Revert "Special-case the standard library to always live relative to the compiler."
[33mfcf1c14[m When deciding whether we can support a type property, ignore whether it's in an extension vs. the primary declaration, and permit non-stored properties in any context except a protocol.
[33mf416dd8[m Track whether a PatternBindingDecl theoretically declares storage or not.
[33m82e192d[m Optimize some generics-related queries on DeclContexts.
[33m2c32066[m Add an accessor to get the generic parameters of an extension.
[33mcf1bb36[m Allow Selector and ObjCBool in @objc methods.
[33m3951e6d[m IRGen: Reenable retain/release optimization of enums with all-refcounted payloads.
[33m729d30f[m SILParser: first step towards parsing sil_witness_table.
[33m10ab8e9[m [frontend] Adjusted the algorithm for determining a fallback module name.
[33mf7bf3bb[m IRGen/Runtime: Tweak the hack to force generic class instantiations to be realized by ObjC.
[33m4844f22[m Special-case the standard library to always live relative to the compiler.
[33m35d1f4a[m Rename SILValue::stripObjectProjections() => SILValue::stripAggregateProjections.
[33mb77dcce[m [driver] Add the -emit-library option.
[33m9610525[m [driver] Added support for passing a few additional arguments through to the frontend.
[33m6e77523[m [frontend] Add support for -enable-new-objc-properties to the integrated frontend.
[33mcc7d62e[m [driver] Implemented a new "swift_driver -transform-ir" integrated tool.
[33mbe735e5[m [driver] Only build a swiftmodule for debug purposes if we are linking.
[33m76c0413[m [driver] In -g mode, create the __SWIFT,__ast section used by the debugger.
[33mbe0a303[m [DebugInfo] Only write an AST into the object file with the current compiler.
[33mcc3119b[m Teach the Mach-O-based AST importer to accept bare serialized ASTs.
[33maf700a1[m [serialization] Include the module name in the serialized AST data.
[33me54deeb[m [serialization] Add missing headers to .cpp file.
[33mf214e2f[m [serialization] Include the module name in the serialized AST data.
[33mbbc1093[m Add SILValue::stripObjectProjections().
[33m8db21be[m Fix typo from last night.
[33mc06facb[m Small simplification of IRGenFunction::coerceValue().
[33mf587cfb[m Remove cruft.
[33m6fd616c[m Add SILValue::stripPointerProjections().
[33m53e2d5f[m Fix thinko. NFC.
[33m38698af[m This is a WIP implementation of a major change to how ObjC properties are represented: they should have an explicit getter and setter synthesized by Sema, instead of by silgen and tenuously tied in by IRGen.
[33m15e087b[m Added SILValue::stripCasts().
[33m82a912c[m Added SILInstruction::mayReadOrWriteMemory().
[33mfc4ecc9[m SILGen: Don't box 'let' bindings inside 'switch' patterns.
[33m91fb511[m Introduce a new kind of StorageDecl called StoredObjC.  These are properties that are (usually) accessed through getters and setters, but which have storage.  Nothing generates these yet.
[33m1f1e29d[m Specializer: Bravely specialize all ApplyInsts.
[33m92f7b55[m AST: Add a "Substitution::subst" API.
[33me9fdec9[m Put specialized and inherited conformances into an appropriate arena.
[33m159dd08[m Move the "type conforms to protocol" cache into the ASTContext arena.
[33mbb7e07c[m Remove outdated FIXME.
[33mcd26f3e[m Use a constant null pointer instead of &objc_empty_vtable when compiling for the simulator.
[33ma3bf261[m Remove some boilerplate from SwiftTargetInfo construction, at the cost of not necessarily catching bugs on targets that don't completely initialize the structure.
[33m1ffcba4[m [frontend] Fixed an issue with the default output filename algorithm.
[33m6fa7087[m Correctly select when C/ObjC arguments are passed as byvals.
[33m3b132bd[m SIL: SILModule::lookUpWitnessTable should always return a substitution list for generic conformances.
[33m081514b[m [Driver] Accept '-triple' as a frontend options.
[33m399257e[m [frontend] Added a comment to indicate that the branch for choosing a default output filename should never be used when invoking the frontend via the driver.
[33m6325d2e[m [frontend] Made EmitObject the default requested action.
[33m6348426[m [frontend] Added support for selecting a default OutputFilename.
[33m690e8a3[m switch places the ignore the result of an rvalue to allow it to be +0.  No impact on stdlib or testsuite.
[33m17d784a[m simplify code further.  This avoids retain/releasing the base of a classbound protocol/existential. No change in the stdlib.
[33m69a2576[m Teach the solver to consider the scalar field of a tuple for a subtype binding.
[33mea5f954[m Switch override checking over to interface types.
[33mc866b72[m Remove the old "getExistentialOrArchetypeRValueAddress" hack for producing some bases at +0, and use the new SGFContext::AllowPlusZero mechanism instead.  It is more rigorous and general.  This cuts 34 lines out of the stdlib, deleting temporary materializations from: Zip2.generate, and several methods from Reverse and ReverseIndex.
[33m246c301[m enhance emission of tupleelementexprs to know about +0 values to avoid temporaries.  This exposed a bug in the RValue tuple scalarization logic handling +0 values.  This has no impact on the stdlib.
[33m3c96693[m Deserializing the type of an extension might deserialize the extension.
[33m0b40f0b[m Debug info: Use a small dense map to keep track of argument numbers.
[33mc6a334a[m teach SILGenFunction::emitLoad that clients allowing +0 results don't need the load (and temporary, and cleanup) to actually be emitted for address-only operands.  They can just use the physical lvalue as the +0 base.
[33m0202def[m Optional conversions on class types are trivial and therefore permitted in overrides.
[33m552558d[m [frontend] Removed the separate TargetOptions class.
[33mb35b845[m [frontend] Fixed an issue with auto-detecting SIL input.
[33m3966650[m [frontend] Added support for -enable-experimental-patterns to the integrated frontend.
[33m6dd1532[m [frontend] Added support for -disable-all-runtime-checks to the integrated frontend.
[33mef96f78[m Another random benchmark
[33m746654e[m benchmark: crude slicing benchmark that must be cleaned up
[33mabf2a50[m benchmarking: switch the C++ version to wstring
[33md3a6c43[m Sema: The implicit variable for an ExprPattern is a 'let'.
[33m6eba6ce[m Zap accumlated unused variable warnings in non-assert builds
[33mbf1a2c2[m Add stubs for more Clang types we'll need to generate.
[33m61c9ade[m Tweak unreachable message for GenClangType::visitType().
[33m87fbce6[m Progress on <rdar://problem/15867140> [string perf] member_ref_expr on an rvalue producing unnecessary retains/releases
[33md58caea[m Revert "Zap accumlated warnings in non-assert builds"
[33mbd85cf7[m [stdlib] Implement a sane assert/fatal error check system
[33m2b6bee7[m Add an importer mapping for C va_list.
[33m44c1021[m IRGen: Use the 'Self' argument to value witnesses as metadata for the type.
[33m17eb84d[m Zap accumlated warnings in non-assert builds
[33ma17654a[m Serialization: Serialize the conformances of InitExistential*Inst.
[33me088646[m The value-to-optional and optional-to-optional conversions are subtype conversions.
[33m09a73e8[m fix rdar://15887292 - PredictableMemoryOptimizations crashes on load from init_existential
[33md24b212[m [driver] Use the input file name as the output executable name.
[33m9cb81b0[m [driver] Add support for invoking ld.
[33m59ffc88[m When ranking constraint solutions, consider anything that causes a function conversion to be bad.
[33mfe0c17c[m Add Clang type generation support for BuiltinRawPointer.
[33mf09ce21[m [sil-combine] (ref_to_raw_pointer (raw_pointer_to_ref x)) -> x.
[33m945d094[m [sil-combine] Move ref_to_raw_pointer consumption of other pointers to SILCombine from SILInstruction.
[33m52adbeb[m ArchetypeBuilder: Use AllArchetypes to contextualize types in mapTypeIntoContext.
[33m6478d75[m AST: Contextualize the generic parameter decls of builtins.
[33mfc16e21[m Remove DestroyAddr/CleanupRValue/CleanupMaterializedValue.
[33m2cf6d81[m more tidying:  - Strength reduce the interface to LogicalPathComponent::getMaterialized    to now just return a SILValue for the address.  The full "Materialize"    structure hasn't been needed since MaterializeExpr got removed.  - Move 'struct Materialize' out of SILGen.h into SILGenLValues.cpp now    that it is only used for logical property materialization.  - Drop the dead 'loc' argument on DeallocStackCleanup.  The location is    already specified when the cleanup is emitted.
[33m8fa6113[m Remove the old archetype_method devirtualization procedure and implement a new one. The old devirtualization procedure did not take into account the substitution list in the apply inst. The new optimization works on the apply instruction that uses the archetype_method instruction. We do not handle polymorphic types because we don't modify the protocol conformance yet.
[33m1e78cc2[m Verify the module on every round of optimizations.
[33m5a55753[m fix a missing SGFContext passdown which would cause an extra copy for address-only collections (if we ever had such a thing).
[33m7aa81e9[m [sil-combine] Simplify object_pointer_to_ref, ref_pointer_to_object round trip.
[33m6e609bc[m tidy up various code formatting things and adopt emitRValueAsSingleValue in more places to simplify code. NFC.
[33m2cc1834[m Teach the AST walker to walk the caller-side default arguments of TupleShuffleExpr.
[33m0af906e[m Stub out more types we need to handle in Clang type generation.
[33mff68b13[m [allocbox-to-stack] Improve comments. NFC.
[33m51720fa[m type encoding for ObjectiveC interface types in swift.
[33m3c60715[m fix two cases where SGFContext's were incorrectly passed down when of the wrong type.  this was noticed by inspection, I don't have a testcase.
[33m6384482[m [driver] Added support to honor the SDKROOT environment variable.
[33me57f8e4[m simplify tuple processing code.  We only want to do tuple element operations in memory of the available type is address only, so simplify a check and remove the predicate (which happens to be out of date anyway).
[33m5c6b022[m Track whether a constraint locator is part of a function conversion, and use the same process to optimize isSimple() as an afterthought.
[33mf4e6c85[m Make sure to specialize a non-capturing closure in a generic context.
[33m609ba1c[m When constructing a SILDeclRef for a bare DestructorDecl, prefer the Deallocator.
[33m87acb26[m Benchmarking: move String comparisons to utils/benchmark/
[33mfeb101d[m Invalidate and recheck constraints on type parameters as part of the signature.
[33m84f9919[m introduce a SGF::emitRValueAsSingleValue helper function to wrap a common and repetitive pattern.
[33m471f2a5[m Replace dependent types in constraints with their type variables.
[33m4eb96f7[m Don't perform lookup relative to 'self' outside of a method body.
[33me1387cf[m reorder functions in the file
[33m7468054[m Debug info: Emit O0 shadow copies more consistently for (most) debuggable values.
[33meef4a53[m Cleanup: Move code to a more appropriate location.
[33m4ccb6be[m [swift-c++-bench] Update Ackermann test so that the computation is not optimized away as not used.
[33m947f3be[m [driver] Removed the limited support for -module-source-list.
[33mb782bd4[m 'ignored' SGFContext's are also dead, remove them too.
[33m7ee9d70[m The 'ChildOfLoad' and 'Ungeneralized' forms of SGFContext are not used, remove them.
[33mc755b13[m update comments for the [attributes] -> @attributes syntax change.
[33m8dbe3bf[m [swift-c++-bench] Change RC4 to time itself internally using mach_absolute_time outputing the elapsed time in the same format as the swift benchmarks. Also add a CPP flag to disable other logging.
[33m4ff3563[m [swift-c++-bench] Modify ObjInst so that like the swift benchmark we use mach_absolute_time inside the program to do the timing of the routine.
[33mc3a2e84[m [swift-c++-bench] Modify the Ackermann benchmark so that we only test the Ackermann calculation and so that we output in the same manner as the swift benchmark.
[33mc101e36[m [driver] Use "const std::string &" instead of StringRef.
[33m378f18c[m IRGen/Runtime: Provide getGenericMetadata[1-4] entry points.
[33md6403d7[m PerformanceInliner: StringLiterals are also free.
[33m6e8e226[m [c++-swift-bench] Add a script for compiling cpp/swift benchmarks. Add in swift version of benchmarks.
[33m7cd0f17[m A big part of handling address-only types is making sure that various emission routines use the SGFContext passed in.  To help with this and to help the handshake, add a new "isInContext()" representation to ManagedValue.  This makes the code producing and consuming these more explicit.  NFC.
[33md0dcb49[m [test] Added a couple of tests for -output-file-map.
[33mec0372f[m [driver] Added support for using the OutputFileMap for determining output paths.
[33m78dbfde[m [driver] Implemented support for -driver-print-output-file-map.
[33m77890aa[m [driver] Added initial support for loading an OutputFileMap.
[33m168909b[m [driver] Added swift::driver::OutputFileMap.
[33m4aa5906[m Remove cruft that snuck into LiteralInst from my using ConversionInst as a template.
[33mfe0e7c5[m [performance-inliner] Move SILArgument, SILUndef to end of InlineCost list with the rest of the unreachable cases. Also remove incorrect comment.
[33m6fef7ee[m PerformanceInliner: Returns and unreachables are free.
[33m1a2d089[m PerformanceInliner: Calculate the full cost of functions when DEBUG-ing.
[33m38871ae[m Add in abstract base class LiteralInst for literal instructions and modify all the literal SIL classes to inherit from it appropriately.
[33m26f23c1[m Revert "Create is<INSERT_VALUE_RANGE_HERE> VALUE_RANGE predicates to SILValue.h"
[33ma339407[m Swap FunctionRefInst and BuiltinFunctionRefInst so that they match the order of instructions in SILNodes.def.
[33m3cd14d6[m Don't permit DynamicSelf outside the body or return type of a method.
[33m3bc2460[m Updated the signature for emitReferenceToDecl to take only the arguments LLDB uses, and also to have a more accurate name.
[33mf44ae51[m [performance-inliner] SILArgument, SILUndef should never be passed in for cost since the function only takes SILInstruction.
[33m88355dd[m Base the implicit 'self' parameter type on DynamicSelf when appropriate.
[33m63c2bff[m [performance-inliner] Change instructionInlineCost to return an InlineCost enum to enable easier tweakings of the cost associated with various categories of instructions.
[33md6281b7[m [ClangImporter] For now, don't import properties with custom accessor names.
[33m8fed381[m the 'self' argument of SuperRefExpr and RebindSelfInConstructorExpr are always VarDecls, use it instead of ValueDecl since it is more specific.
[33mb457be6[m SGF::emitLValueForDecl only works on VarDecls, make its prototype more specific to reflect that.
[33m287f507[m PerformanceInliner: Unchecked casts and thin metatypes are free.
[33m3377819[m Add in a LiteralInst VALUE_RANGE.
[33md509fb9[m Create is<INSERT_VALUE_RANGE_HERE> VALUE_RANGE predicates to SILValue.h
[33mb13719b[m reapply r12727 (passing an SGFContext down to emitGetAccessor from emitRValueForDecl when we have it), now with a testcase.  We formerly compiled this:
[33m3b0a8c8[m PerformanceInliner: struct, tuple, struct_extract, and tuple_extract are free.
[33mba6bc88[m revert r12727, I didn't include a testcase.
[33m8ad44c1[m fix rdar://15877337 - let properties in structs are always accessed through rvalue bases.
[33m56b60d9[m Factor "self" type computation into one place within libAST.
[33mc91c665[m [build] Enable iOS stdlib by default in buildbot-script.
[33md9fbea1[m [stdlib] Commit file deletions that were left out of r12732.
[33m3e61df3[m Generate the same Clang type for all protocol types.
[33m71c3beb[m [stdlib] Fix ObjCBool definition selection: 32-bit iOS uses BOOL=char.
[33m5d12af1[m [stdlib] Speculatively fix Makefile build of ObjectiveC.swiftmodule.
[33m57b4e9a[m pass down an SGFContext in a simple case where a getter is evaluated as an rvalue.
[33mc521cda[m inline emitReferenceToDecl into its only caller: emitRValueForDecl.  Clients now always know whether they are looking for an rvalue or lvalue.
[33m361cb5a[m Fix 80-column violation.
[33mc49e73c[m simplify emitReferenceToDecl: its only caller always passes in an (explicit) uncurry level of zero.
[33m6390862[m [AST] Have the ASTWalker visiting the members of NominalTypeDecls and ExtensionDecls even when they haven't been deserialized yet.
[33m6a6fcd6[m [AST] When verifying the Decls loaded from modules, avoid the members of NominalTypes and Extensions that haven't been deserialized.
[33m79be625[m For ClangImporter::verifyAllModules() be defensive and avoid verifying while iterating the map of imported decls.
[33m8960a7f[m Fix a pontential buffer overflow when allocating a SILWitnessTable object.
[33m980b941[m Remove dead code for Bool in Clang type generation.
[33mb1cc254[m Test calling an imported func that uses BOOL.
[33ma7b39c2[m emitReferenceToDecl is serving two purposes: for VarDecls it can often produce an lvalue, for everything else it produces an RValue.
[33m0797070[m tidy some comments, add an assertion that lvalues always have isAddress() type.
[33m63784ca[m remove the ManagedValue::Unmanaged marker, lets just use ManagedValue::forUnmanaged() instead, which is shorter.  It is better to have one way to do things than two.
[33mf7597fb[m improve comments on ManagedValue, eliminate the LValue_t enum marker in favor of ManagedValue::forLValue.  NFC.
[33m6f42f69[m Parse DynamicSelf as a type, restricted to contexts in which it is allowed.
[33m81279c6[m QoI: Provide a Fix-It that replaces 'Self' with the enclosing nominal type.
[33m79c8fe6[m Eliminate a redundant check. NFC
[33mbe1a9ec[m Centralize the "unknown type" diagnostic emission.
[33maa1592c[m Push TypeResolutionOptions into identifier type resolution.
[33meea5037[m [stdlib] Make definition of ObjCBool platform-specific. NFC on OS X.
[33m90e1b57[m split the ManagedValue class out to its own .h/.cpp files.
[33mf51fc32[m [stdlib] Add StringCore
[33mf02b257[m Revert "[sil-arc-opts] {Class, Super, Peer, Protocol}MethodInsts can't use reference counted values if their operand is of metatype type."
[33m709c9e9[m [sil-arc-opts] {Class, Super, Peer, Protocol}MethodInsts can't use reference counted values if their operand is of metatype type.
[33m76157c3[m [sil-arc-opts] ArchetypeMethodInsts do not use any other values.
[33m39074e8[m [sil-arc-opts] Refactor out switch that determines if an Inst can use any reference counted value at all into its own function.
[33ma7e4fbd[m IRGen: Use interface types to assert function abstraction changes didn't leak to IRGen.
[33mb3e0b65[m [driver] Enhanced the output of -driver-print-bindings to print additional outputs.
[33md1a68b5[m [ClangImporter] When importing members, don't use a forward declaration.
[33md52cec4[m Eliminate a pile of literal identifiers for self, init, destructor, etc.
[33mfcc9843[m Always track external decls, not just during name binding and type checking.
[33m5299a50[m [ClangImporter] Import class, protocol, and category members lazily.
[33m3513184[m Pass the decl in question to LazyMemberLoader's callback.
[33m3c62229[m [sil-arc-opts] DeallocStackInst does not use reference counted values, only local storage handles.
[33mbe5ba91[m Fix banner formatting. NFC.
[33ma0ee708[m [sil-arc-opts] A MetatypeInst does not use other values and thus can not use reference counted values.
[33mfed8305[m [sil-arc-opts] Debug instructions do not use reference counted values in a manner we care about.
[33m9c415a3[m Remove the TrivialSubtype conversion kind and implement its basic logic in libAST, which both makes it easier to implement and makes it possible to use in the places that should care about it, i.e. in IR-gen and SIL-gen.
[33mae02df2[m [sil-arc-opts] Allocation instructions do not use other values.
[33m69c5842[m Debug info: emit alloca shadow copies for DebugValues at -O0. <rdar://problem/15849532> iteration variables in "for X in Y" statements don't have debug information
[33m81759cd[m SILGen: Strip non-semantic pattern nodes before dispatching.
[33m107dfed[m [build] Fix iOS buildbot build when BUILD_DIR is not set. Add iOS simulator.
[33m02e2018[m Fix many extra trailing underscores in block shim symbols.
[33me71e3bb[m Fix typo in block shim comment.
[33m38c5989[m [allocbox-to-stack] In checkForEntryCycles, perform the necessary changes so we can just add the initial AllocBoxBB to the worklist and eliminate the initial loop that added the AllocBoxBB's successors to the worklist.
[33mb1f0819[m [driver] Added types::lookupTypeForName(), which maps from type names to types::ID values.
[33mb483097[m [runtime] Add a block shim for (NSAnimationContext) -> Void
[33mc312e51[m Add the ability to serialize modules with LLDB's wrapper info around them.
[33m16db07a[m revert r12277 now that subscriptdecls in protocol have getter/setters. NFC.
[33mf05068b[m Fixes a comment, minor refactoring.
[33m47bba08[m Remove empty performance hack file.
[33m7a9187f[m Add allocbox to stack after ARC opts in the pass order.
[33m0aaf736[m [allocbox-to-stack] Make sure that if we have a cycle into the allocbox BB, do not optimize.
[33m3e5e965[m Keep optimizing the module if some functions were devirtualzied.
[33md9515a5[m Rename NSObjectProto -> NSObjectProtocol <rdar://problem/15775859>
[33m0e1f77d[m Change the perf-inliner heuristics to a simple threshold check. This does not change the performance of our tiny test suite, probably because we run the optimizations multiple times.
[33maf7821e[m Implement a narrow but effective hack to dramatically reduce retains and releases produced by SILGen for non-@mutating struct methods.  Before, we would retain the entire struct (which, if it contained class pointers would emit an actual retain operations) even when accessing only some part of it.  Handle a special case where we just retain the accessed field.  For example, this testcase:
[33m3caa3b7[m Make CBool a typealias of Bool.
[33m10e00d0[m [utils/buildbot-script] Enable ARM64 if building the iOS stdlib.
[33mefaf21b[m [sil-combine] Add in a small peephole to handle a strong_release right before a strong_retain on the same pointer.
[33me6b0401[m Provide type encoding for swift's protocol composition which turns out (luckily) having clang ignoring its protocol list.
[33mc220cf7[m [sil-arc-opts] Teach the arc optimizer that builtins without side effects can not decrement ref counts.
[33md472fe0[m partial_apply does not take ownership of @in arguments, but it does take ownership of @owned values.
[33m7056b67[m Fix rst warning.
[33m7ee945f[m Update SIL docs so that the objc_method calling convention is called @cc(objc_method) instead of just @cc(objc).
[33mba16174[m [performance-inliner] The inliner can in principle inline function_refs which point at functions with the objc_method calling convention.
[33macd151f[m [performance-inliner] A gep of a hasOneUse gep will get folded by LLVM into one gep. In that case the second should be free.
[33m8c4728f[m [sil-arc-opts] Move the analysis stubs out into their own file ARCAnalysis.{h,cpp} in preparation for working on making them not stubs. NFC.
[33ma3eb838[m [sil-arc-opts] Teach the optimizer that certain instructions whose memory behavior is MayHaveSideEffects do not decrement ref counts.
[33ma1d8664[m [performance-inliner] We can inline function_ref with c and witness_method calling conventions.
[33m7564cff[m Fix SWIFT_MODULE_CACHE_PATH typo introduced in r12633.
[33m913f6e2[m Remove arm64 from LLVM targets in buildbot script.
[33m59e35ee[m add a file to hold performance hacks.  First up, make preincrement of integers actually be trivial.  This works around: <rdar://problem/15866569> [string perf] ++ is not getting deabstracted and inlined fully
[33m9d799a6[m Add iOS stdlib to buildbot script, but disabled by default.
[33m548a4b5[m [sil-arc-opts] Teach the optimizer that function_ref, builtin_function_ref, integer_literal, float_literal, and string_literal do not use values.
[33me4854c3[m Update use of Clang APIs for Clang r199686.
[33me829d4e[m AST: Unique GenericSignatures in the ASTContext.
[33m576605d[m [sil-arc-opts] Dataflow based ARC Optimizer.
[33m5b7e9ee[m Hide NominalTypePatterns behind a compiler switch.
[33m3551b6f[m Decouple product names from source directory names.
[33m2af8cf2[m IRGen: Use interface types to lower ApplyInst args and returns, and SILFunction parameters and returns.
[33mdd5dec3[m IRGen: Use SILFunctionType interface types in easy places.
[33m9b34a94[m CapturePromotion: Use SILFunctionType interface type APIs.
[33m1acb38b[m SIL Parser: Derive apply/partial_apply argument types from interface types.
[33mba49837[m One more release note tweak: s/vars/properties/.
[33m744b43e[m [serialization] @optional requirements may not have an implementing witness.
[33mb9fb8b4[m Wordsmith the release note about ObjC ivars no longer being imported.
[33mc16b7e7[m Stub out Clang type generation support for protocol compositions.
[33md4594b7[m Switch the nominal type pattern matching destructuring logic to use the new RValue emission infrastructure instead of duplicating some of it.  This enables the use of computed properties, fixing <rdar://problem/15859432> SILGen abort when pattern matching on computed property
[33m81e13fb[m When autolinking in immediate mode, make sure we're checking private imports...
[33mfd48fb3[m Add a mode to Module::forAllVisibleModules that includes private imports.
[33m0f1cf52[m Add a release note for the non-importing of ObjC ivars.
[33m0a3202a[m [driver] Standardized the names of output-specifying options for secondary outputs.
[33m66d4c81[m [driver] Added serialized diagnostics as an additional output for compile commands.
[33ma982000[m [driver] Added a hidden -force-single-frontend-invocation option.
[33md652374[m Fix typo in comment. NFC
[33m5fc6209[m IRGen: Fix handling of u_to_s_checked_trunc with runtime checks disabled.
[33m36c9dc5[m Add a test that we don't crash when someone imports "Swift" instead of "swift".
[33m4a79769[m [driver] Make CommandOutput::BaseInput into a bare StringRef, treating an empty reference as no value.
[33mcec27ab[m Adjust ExecuteInPlace() so that it calls exit() on success on platforms where native re-execution is not implemented.
[33m6998b86[m Minor cleanup in Clang type generation.
[33mb49b91e[m Don't import Objective-C ivars at all.
[33m2ab1f29[m Use emitRValueForDecl in various places that expect an RValue, and use emitReferenceToDecl when we expect an lvalue or rvalue.  This makes the code more explicit and avoids duplicating the "emit a load if emitReferenceToDecl returned an lvalue" logic.
[33m0ad29a8[m IRGen: Emit unconditional casts as bitcasts when runtime checks are disabled.
[33m91eff36[m Refactor the duplicated code for finding a static function in the witness table. NFC.
[33m41b56a5[m Disallow use of associated types on existentials.
[33me6bd9c9[m Add a new TypeWalker, similar to ASTWalker but for types.
[33m7cd7162[m Import non-prototyped functions as if they have no parameters <rdar://problem/15084122>.
[33m5a502cf[m hoist emitDeclRefRValue out to SGF level so other clients can use it, and rebrand it as emitRValueForDecl.  NFC.
[33m784b14c[m don't duplicate enum names in comment.
[33m9db2d73[m fix the first-line comment.
[33m9f75013[m Eliminate OptionSet's not-technically-correct operator~.
[33mf5b8534[m Expand out the "isComputed" property in AbstractStorageDecl to be an enum with two kinds, and some more specific predicates that clients can use.
[33mc7a8b4f[m IRGen: Emit unchecked operations for checked builtins with -disable-all-runtime-checks.
[33m319c927[m Couple more swift to their respective clang type conversions and a test of swift type to "id" in a method type encoding.
[33m31dafad[m refactor addSwiftmoduleInputs out to be a static function to avoid a clang false positive warning.
[33m11656c9[m Introduce the ParseDeclOptions option set in the Parser. NFC.
[33mae4ab22[m Only allow @inout on function parameters <rdar://problem/11532065>.
[33m28c1d34[m Remove SIL 'StripRuntimeChecks' pass.
[33m9179fa2[m TypeCheckFlags -> TypeResolutionFlags and s/TC_/TR_/g, NFC.
[33m4a5dcf6[m tighten up StructInst::getOperandForField: it should abort if the VarDecl passed in is null or computed, not just return null.
[33m810bb07[m Switch some "unsigned options" over to TypeResolutionOptions.
[33mbae2897[m Push TypeResolutionOptions through TypeChecker::validateType()
[33mda879ba[m Introduce a typed option set template, OptionSet.
[33m8563ebc[m rework and tidy SILGenLValue::visitMemberRefExpr to make the logic flow better: the getter/setter case is the simple case, so switch it to be the early out.
[33m22bced4[m retype emitGetAccessor/emitSetAccessor to take an AbstractStorageDecl instead of a ValueDecl (which is more specific).  This allows them to use the more specific ASD::usesObjCGetterAndSetter() method instead of SGM::requiresObjCDispatch.
[33mbfaf0e1[m simplify a bit more.  We can inline two former templates now that their two call sites can be trivially merged into one.
[33m5522627[m Push options through resolveType().
[33m6b93fc2[m simplify code now that getGetter/SetterType have been hoisted to AbstractStorageDecl, NFC.
[33ma02c399[m merge get[GS]etter[Interface]Type() for VarDecl and SubscriptDecl into AbstractStorageDecl
[33m737a2da[m Unbreak CMake build
[33ma07aed9[m Change errs() -> dbgs() in a few files.
[33m42c966f[m Devirtualize archetype_method instructions on non-generic lookup types.
[33mfcfed13[m Allow specialization of non-generic partial apply.
[33m98bc45d[m Fix a comment.
[33m270cba0[m Enable the specialization of the archetype_method instruction.
[33md2aa0cd[m Fix typo so that the release build works. The actual definitions of these two functions are behind NDEBUG so it seems reasonable to assume that these should be as well. If I am incorrect, please feel free to change this = ).
[33m4c6ef04[m IRGen: Expand function signatures from SILFunctionType's interface types.
[33m2cff46f[m now that subscripts always have a getter/setter decl, the getGetterType()/getSetterType() (and their 'interface' variants) all become trivial.  Lets let sema worry about this stuff instead of duplicating the logic in libast. NFC
[33mcac8028[m This patch went with r12555
[33ma0f0c28[m Two related but (theoretically at least) seperable changes: 1. Implement parser and sema support for our subscript syntax proposal in    protocols.  Now you have to use subscript(..) { get } or  {get set} to    indicate what you want.  I suspect that the syntax will evolve, but at    least we can express what we need now. 2. Change the representation of SubscriptDecls in protocols to make    (empty) funcdecls for the getter and setter.  This guarantees that    every subscript has at least a getter.
[33m99204f9[m push scopes for getter/setter bodies later.  NFC, just unblocking other refactorings.
[33m984708e[m A few more MutableArrayRef -> ArrayRef changes.
[33m102abb6[m [AST] Add the locations of the angle brackets for GenericIdentTypeRepr.
[33mabbef6b[m [driver] A handful of fixes to make -v only display version info if no inputs are provided.
[33mbb43976[m [driver] Implemented driver-level support for immediate mode and the REPL.
[33m5f00a5b[m [driver] Adjusted CommandOutput so that BaseInput is an Optional<StringRef>.
[33m62d1fec[m [driver] Added support for suppressing the "no input files" error.
[33mab2172c[m [driver] Added support for executing a single Command without a TaskQueue.
[33m591ec0c[m [AST] Switch to ArrayRefs instead of MutableArrayRefs for TypeRepr objects.
[33m0292a5f[m merge objc thunk generation for subscripts into the thunk generation logic for vardecls.  They are the same, subscripts are always just computed.
[33m84e20a0[m [AST] Break down IdentTypeRepr to different subtypes.
[33m20af73f[m hoist getter/setter information up to AbstractStorageDecl. Subscripts are always computed, but otherwise fit the model fine.
[33m7e67fdb[m decls always can get to an ASTContext, remove the unneeded ASTContext argument from VarDecl::setComputedAccessors.
[33m8eabc75[m fix test/ClangModules/objc_ir.swift: subscriptdecls always have function type.
[33m0776c4b[m SIL: Reorient function type lowering toward interface types.
[33ma8d8e14[m introduce AbstractStorageDecl.  Right now, just move OverriddenDecl and usesObjCGetterAndSetter() up to it. This allows usesObjCGetterAndSetter to subsume the logic for subscript decls as well.
[33me85a6d6[m move SubscriptDecl code up to be next to VarDecl code.  Other than rearranging, this doesn't change anything.
[33m97f06b4[m fix some 80 column violations.
[33m0564fae[m Assert if we attempt to coerce types of different sizes.
[33me5e55fe[m Generate correct Clang type for Metatype.
[33me08157a[m [sil-arc-opts] Rename SILARCOpts.cpp -> ARCOpts.cpp.
[33m85edc07[m Coerce scalar types in function returns.
[33mbb3c0d5[m Unfortunately, two conflated NFC patches: 1) Revert my change to give DeclContext a dump method, it confuses the debugger. 2) Refactor SILGen::requiresObjCPropertyEntryPoints out to    VarDecl::usesObjCGetterAndSetter.
[33m23dee1e[m Recursively clone the generic parameters of IdentTypeReprs.
[33mde753a6[m [frontend] Added a check to disallow the combination of -i and -primary-file.
[33ma23b640[m [frontend] Added a check to ensure REPL mode is not requested with input files.
[33mf5d1f5c[m [frontend] Added support for -i in the integrated frontend.
[33m7043cab[m [frontend] Updated assertion message.
[33m1a3fe6a[m [frontend] Added support for -repl in the integrated frontend.
[33m8fc6a6d[m [immediate] Moved the support for immediate and REPL modes into a new swiftImmediate library.
[33m0203d5d[m Fix comment.
[33ma823ad8[m AbstractClosureExpr now inherits ambiguous dump()s. Pick one.
[33m381aec8[m ivar -> property
[33mdc3cfcb[m release note 'let' ivars.
[33m510223b[m improve the diagnostic produced when assigning to self.
[33mb15f83d[m tweak diagnostic at Jordan's request.
[33m3b20645[m Factor out a DependentMemberType::substBaseType method and use it in ArchetypeBuilder::mapTypeInContext.
[33md582055[m improve QoI for some simple cases of invalid assignments.
[33ma7d2f83[m improve a comment.
[33mf50d1f5[m with the plumbing complete, it is now simple to implement: <rdar://problem/15785677> allow 'let' declarations in structs/classes be initialized in init()
[33mf31cb31[m Don't throw away a DependentMemberType's resolved associated type when subst()ing it.
[33mb473538[m Plumb the DeclContext of the use site down to the "doesVarDeclMemberProduceLValue" function.  Pretty soon, whether something is an lvalue or not will depend on who is asking.
[33m17d9bf2[m Make DeclContext dump()’able from the debugger.  Unmark Decl’s dump method as “Deprecated and only used by the debugger”.  This isn’t doing anything useful since the implementation is used by live code anyway.
[33ma68a5f7[m Add the CPP reference files for our benchmarkes.
[33m1c02dc8[m Stub out visitor callbacks for Clang type generation.
[33m622b83b[m [driver] Updated OutputInfo with a ShouldTreatModuleAsTopLevelOutput field.
[33m6a33e53[m [driver] Renamed OutputMode to OutputInfo.
[33m5dae76e[m [driver] Added support for determining a better output for a merge module Command.
[33mf99d609[m [driver] Use the OutputMode to determine the value to pass with -module-name.
[33m64a1814[m [driver] Properly implemented MergeModule::constructJob().
[33mdb3888b[m [driver] Replaced Tool::constructJob()’s LinkingOutput parameter with an OutputMode parameter.
[33m11a6121[m [driver] Updated OutputMode to include the module name.
[33mf892b1a[m [driver] Implemented support for adding an additional output for a swiftmodule to the CommandOutput of frontend Commands.
[33mb94e9e3[m [driver] Slightly refactored Driver’s handling of OutputMode.
[33m1081097[m [driver] Added support for passing -emit-module to the frontend.
[33me9599f2[m [driver] Added support for adding a MergeModuleJobAction to the Action graph.
[33mc4a4ab3[m [driver] Added initial infrastructure for generating a Command which merges swiftmodule files.
[33m2063e9b[m Enhance DCE to know that "condfail(false)" is dead. Enhance constant propagation (a diagnostic pass) to invoke the DCE utility when producing a condfail(false).
[33m408cff5[m [IDE] Make CodeCompletionResult::getCodeCompletionDeclKind() public.
[33m90fa27f[m [AST] Introduce Module::isSystemModule() which is rather self-explanatory.
[33mbf1fdcd[m IRGen: Class existentials are single-unknown-retainable if they need no witness tables.
[33m70d7257[m IRGen: Disable the mask-and-retain optimization for mixed Swift/ObjC enums.
[33md9c88e9[m Small clean-up in Clang type generation.
[33m1bd15b7[m Clean up handling of getter/setter thunks. <rdar://problem/14109713>
[33mae2868b[m Clean up comments in MiscDiagnostics.cpp.
[33ma6b616a[m Accessing a property on another instance within the property's getter is okay.
[33m77d5385[m Warn on recursive mutation within a property setter.
[33m890df62[m Warn on recursive computed variable access within its own getter.
[33m21186b5[m [stdlib] Break String source into manageable pieces
[33m11de345[m Introduce TypeRepr cloning and use it to fix interface types for getters/setters.
[33m824c0cb[m [driver] Reworked the CommandOutput class to add support for specifying additional outputs.
[33m2e7b5b7[m [driver] Added an implementation of struct DenseMapInfo<swift::driver::types::ID> so that a type ID can be used as a key in an llvm::DenseMap.
[33m5bbdb23[m Fix up "invalid UTF-8" error, and add a test case.
[33m923a539[m Fix r12422; change the text of the diagnostic about UTF-16, not bad UTF-8.
[33m097f0e6[m [driver] Updated Compilation::performJobsInList() to properly handle Commands which depend on peers.
[33m40b38c4[m [driver] Reworked Driver::buildJobsForAction() so that it doesn’t create the same Job multiple times.
[33m31df3cb[m [driver] Updated Driver::printJobs() to only print each Job once, even though it may be in the graph multiple times (as input to multiple Jobs).
[33m4d6fc89[m Propagate nil returned from a self.init or super.init call.
[33m8cf19bf[m Don't set a default SDK in the new driver, either.
[33m11008f0[m Split diagnostics out into separate files.
[33m69a8860[m Move diagnostics enum out-of-line.
[33m3df87a6[m Revert "[driver] Added an assertion to Driver::buildJobsForAction() to ensure that it only builds Jobs for JobActions."
[33m5d6a6f6[m IRGen: Favor high bits when scavenging tag bits for enums.
[33me3ea686[m [driver] Added Action::addInput() for adding inputs after creation.
[33m3bcad8f[m [driver] Added an assertion to Driver::buildJobsForAction() to ensure that it only builds Jobs for JobActions.
[33mb2d5363[m First test for ObjC metadata type encoding.
[33m11bd9bb[m Prune unnecessary #includes.
[33m93d7bc4[m Remove unnecessary Expr uses from IR-gen.
[33m32d4ef7[m Remove IR-gen's specialized ASTVisitor.
[33m9cc98c6[m Move the assorted routines out of GenExpr.cpp.
[33m66f54f7[m Performance Inliner: Change the cost calculation method.
[33m8d6ef24[m Update release notes for -sdk changes.
[33m22d8862[m Better error message for the last commit
[33mc36818d[m Remove CUnicodeScalar from Clang type mapping.
[33madf26cc[m 15836688 Fail gracefully on UTF-16 input files
[33mddaad84[m Add support to Clang type mapping for more struct types.
[33mfa3e485[m Revert "In mapping swift types to clang types special case"
[33m7f68962[m In mapping swift types to clang types special case few types which don't have type aliases. Will start provind test cases.
[33m5f9c652[m Don't blow up when an adapter's underlying module is missing.
[33ma5c2fed[m When a module is not found and there is no SDK set, remind the user.
[33md53863b[m Don't provide an SDK by default.
[33m133bb13[m Always assume that the result of calling self.init or super.init is of the appropriate subclass type.
[33meb7dfb3[m Remove more dead code.
[33m6da9ad3[m More dead code.
[33m0c20833[m IRGen: Optimize copy/destroy of ObjC tagged or nullable enums too.
[33mdf35a12[m Adding debug prints.
[33m5f18a43[m More cleanups.
[33m4f2ad36[m Small cleanups.
[33m1b5a6d1[m Support mapping to Clang types from imported Clang builtin types.
[33m5c52579[m IRGen: When an enum has all refcounted payloads, emit mask-and-retain/release.
[33m79cbdc5[m Teach the performance inliner that debug_value[_addr] are free.
[33m30a34e5[m Lower the rebinding of 'self' in a super.init call to a cast when it can't fail.
[33m3a6db82[m Revert "Introduce the self_downcast SIL instruction to downcast the result of super.init."
[33md59cf64[m Revert "self_downcast never deals in address-only types."
[33m8647c3c[m Revert "For Swift-rooted class hierarchies, emit self_downcast as a bitcast."
[33ma614845[m Revert "Simplify the emission of self_downcast. NFC"
[33m9dfa517[m Simplify the emission of self_downcast. NFC
[33mbf474ac[m IRGen: transform doesn't always natively form a canonical type.
[33m11be254[m Add a SWIFT_RUNTIME_CHECKS option to the CMake build.
[33m3988374[m [sil-strip-debug-info] Added new pass that strips out debug info. Only runs via sil-opt.
[33mfc55eef[m [sil-mode] Add highlighting for "private".
[33m4e23d23[m Fix RST formatting for debug_value, debug_value_addr.
[33m0c554b7[m For Swift-rooted class hierarchies, emit self_downcast as a bitcast.
[33m4abc10f[m self_downcast never deals in address-only types.
[33md190650[m Introduce the self_downcast SIL instruction to downcast the result of super.init.
[33mf3cb097[m SIL StripRuntimeChecks: Strip 'trunc' and 'conversion' checks too.
[33m197a165[m SIL: Start on a StripRuntimeChecks pass.
[33me5adce5[m Clarify SILGen lowering of the self-rebinding expression. NFC
[33md72d4f8[m Fix comment.
[33m3f4d533[m release note immutability model.
[33mcc31c6e[m remove the '-enable-let-arguments' staging option.
[33m0692adc[m More simplifications and dead-code removal.
[33m65454c4[m Teach the mandatory inliner to tolerate debug_value instructions hanging off partial_apply's when it is cleaning them up.  These occur when autoclosure arguments are marked let, because that is how debug info for lets is recorded.
[33mc264d33[m teach SILGenApply about 'let' declarations, so that @autoclosure lets get marked transparent the same way @autoclosure var's do.
[33m3c0d18d[m Pass a ResilienceExpansion when mangling a SILDeclRef.
[33m1b6c2e3[m change a few "createCopyValue"'s to "emitCopyValue" so that trivial types don't get copyvalues.  This is mostly to make sure that only Typelowering and silcloner are calling createCopyValue.
[33ma1b469e[m ExplosionKind -> ResilienceExpansion.  NFC.
[33mb8ecceb[m typo fix
[33m03bb47e[m Debug info: Emit "global" variables in the top level module as static variables of SWIFT_ENTRY_POINT_FUNCTION. <rdar://problem/15805751> Emit top-level variables as DWARF
[33m10a6278[m misc cleanups
[33m5c4a43d[m Good riddance to dead code.
[33m5aababd[m Update release notes from... last week.
[33me180f9b[m Properly handle the case when a member_ref_expr on an rvalue struct causes an abstraction change.
[33m787b1d3[m remove dead code.
[33m1001745[m IRGen: Forward indirectly-returned SIL return value in partial application forwarder.
[33md5f95cd[m [driver] Add a new -driver-skip-execution flag.
[33mb7aec0e[m [driver] Added a DummyTaskQueue class, which calls TaskBeganCallback/TaskFinishedCallback but does not actually execute subtasks.
[33mdd9614e[m [driver] Add TaskQueue::getNumberOfParallelTasks().
[33m4121191[m Remove Failure.cpp from the Makefile build.
[33m7be7c20[m Implicitly look through UncheckedOptional<T> when it's the base of a member access or subscript.
[33m1ccf234[m Remove unnecessary ASTContext& argument from getOptionalObjectType().
[33m25d705f[m Rename the pattern coerceToType to coercePatternToType, switch to options.
[33m9ec6e63[m Use a flag set for TypeChecker::typeCheckPattern. NFC
[33m677576c[m IRGen: Use a shared bb for condfail instructions and kill the runtime call.
[33m57ae532[m Debug info: Don't remap locations when cloning SIL debug instructions. Fixes 50% of <rdar://problem/15825786>.
[33m0b1ed48[m [sil-arc-opts] Split up LocalRetainMotionVisitor into 3 classes.
[33mae3feb8[m [ClangImporter] Fix the visible decls cache to handle new modules being loaded.
[33m261b21a[m various random cleanups to pattern processing stuff, NFC.
[33m0bc54ba[m IRGen: Don't assume the ABI return type of a function is a struct.
[33m7f28907[m Reapply r12201 and r12289 with a workaround that does not crash when the location of a DebugValueInst is not a Decl. FIXME: This should probably not happen <rdar://problem/15825786>.
[33m56128ac[m IRGen: Don't emit a trap for SIL 'unreachable'.
[33m586ccab[m [stdlib] Rework String bridging
[33m1b1b7b6[m Fix rdar://15822103 - bad ptr_to_addr simplification pattern.
[33m927613b[m [IRGen] Set iOS simulator bit in Objective-C metadata.
[33m1c9fbf5[m Teach CSE about ref_element_addr.
[33ma9697b3[m Revert r12201 and r12289 because they crash in the stdlib -O0 build.
[33me15de8a[m Rework getFirstSelectorPattern to use the new rebuildImplicitPatternAround function, which is fully general w.r.t. different pattern structures that can happen in the first argument of a selector-style function.  Notably, this handles VarPatterns, so we can now use var/let in selector-style functions, resolving rdar://15814933.
[33m642afeb[m Reimplement selector parsing logic to use parsePatternTuple instead of substantially reimplementing it.  AFAICT, this was duplicated out because we need to build two parallel patterns: one for the argument pattern and one for the body pattern.  Instead of building these in parallel, just parse the body pattern as normal, then use a simple ASTWalker to rerewrite a clone of the body pattern for the argument context.
[33mea308e3[m note 'let' progress.  We need several other updates in this.
[33meacb823[m fix rdar://15821990 - Don't emit default value for type var in instance init() body.
[33m1b57806[m Enable assertion that we don't build @inout types of @inout or @lvalue types.
[33ma688bca[m Infer @requires_stored_property_inits for CoreData's NSManagedObject.
[33m535d036[m Infer the requires_stored_property_inits attribute for NSManagedObject.
[33m2520848[m Move attributes tests into test/basic/attr.
[33m03011aa[m IRGen: Improve EnumImplStrategy's layout querying functionality with feedback from Enrico.
[33m70de080[m AST: Make the @inout-ness of interface types for protocol members consistent with their old types.
[33mdfd6bac[m [build] Disable compiler version checks for the stdlib build.
[33m035a117[m Debug info: Ensure that the SDK is emitted if it is implicit. Also do a slightly better job at quoting. <rdar://problem/15808224> Point ClangImporter at the right SDK for the target
[33mf03e4a6[m [ClangImporter] Make lookupVisibleDecls deterministic.
[33mfb1293c[m Add a basic intra-basic block promotion of stores and elimination of duplicated loads.
[33m990212b[m SILGen: When applying the result function of a function, do not reabstract to the original callee's abstraction pattern.
[33m816c2a1[m [sil-combine] Do not transform (struct_extract (load)) -> (load (struct_element_addr)) when the load has multiple uses.
[33m13d291e[m Fix up include order dependencies in IRGen's GenEnum.h.
[33mbc89a04[m Disallow non-delegating initializers outside of the class's defining module.
[33m3a18103[m [frontend] Implement support for emitting modules with the integrated frontend.
[33me137dbf[m Remove an overactive assert regarding the presence of top-level code.
[33m100fd92[m Erasing an instruction does not remove it from the worklist. We crash when we try to debug print the module.
[33mf4efc85[m A small cleanup.
[33mcc00fd1[m [driver] Rework the Unix implementation of TaskQueue::execute() to support reading from pipes as they fill, instead of all at once at the end.
[33mb2f60a3[m sil-mode: add debug_value_addr
[33mbc084d7[m Debug info: Implement IRGen support for debug_value_addr. rdar://problem/15785053.s
[33m3495603[m Clean up the formation of lvalue constraints in the type checker, and assert that we don't get an lvalue-of-lvalue type.
[33m7fdfe68[m Be defensive when doing a metatype conversion.
[33m62010f3[m When retrieving constraints that mention a type variable, also look through fixed bindings.
[33me87dd7e[m [sil-arc-opts] Changes from Chris's on list review.
[33m8799898[m [sil-arc-opts] Switch to using llvm::PointerUnion.
[33mfe41a8a[m Closures over address-only let decls: these will often be captured by box (which is not "Constant" closure kind) because partial_apply can't handle copy-in semantics.
[33m5c23e35[m Fix a crash on subscript decls in protocols.
[33mb0b5a8f[m Switch constructor arguments, curried arguments and selector arguments to be 'let' values (so they are immutable and don't get a box, etc).  Add a flag to the swift compiler that turns the bulk of function arguments into lets, but don't set it yet.
[33me1773d8[m [sil-combine] Eliminate (cond_fail 0)
[33mae3b999[m Recommit "Very initial ARC optimizer implementation."
[33me149bd8[m Revert "Diagnose metatype conversions we can't handle yet."
[33m9f99f02[m Revert "Very initial ARC optimizer implementation."
[33m5b99962[m IRGen: Expose APIs for asking about enum layout.
[33mc8f5529[m Updated Access Control Proposal
[33md0c4ab1[m Diagnose metatype conversions we can't handle yet.
[33m3650a75[m Very initial ARC optimizer implementation.
[33m53392e0[m Fix up the tests which were failing after my patch and bring back the patch.
[33md68721f[m [ClangImporter] Put enums in their canonical module as well.
[33m68e416b[m SIL: Zap the unused "coerce" instruction.
[33m817e80b[m Implicit conversions for UncheckedOptional.
[33m6b653da[m Remove effect of my last patch until I fix the tests which failed because of it.
[33m02f52c6[m [IRGen] Add a PrettyStackTraceEntry in IRGenModule::emitSourceFile() indicating which file is being emitted.
[33m57d278a9[m Given -.cxx_construct the proper return type; it returns self.
[33m3f4a6ef[m [driver] Pass -serialize-diagnostics to the frontend, if requested.
[33m00f076d[m [frontend] Implemented support for emitting serialized diagnostics.
[33m8b2ca31[m More initial encoding of ObjectiveC methods; trying hard to match clang's encoding in this area.
[33m2302e32[m Set Objective-C class metadata bits to indicate presence of .cxx_construct/.cxx_destruct.
[33m5664bee[m Mark 'self' as uninitialized in the ivar initializer (-.cxx_construct).
[33mcaf474f[m We already serialize the requires_stored_property_inits attribute.
[33m273e746[m Generate Clang VoidTy from empty tuples.
[33mc3a1f09[m Move the string benchmark into Benchmark.swift
[33mc6b880a[m Definite initialization for initializers relying on a separate ivar initializer.
[33m357986b[m [Parser] When parsing a constructor with a missing '{', at least return the declaration.
[33m7db7d4a[m Three changes:  - constify the Initialization::getAddressOrNull/hasAddress functions.  - Teach the initialization logic that 'let' initializations can be    split into tuple subelements by address (i.e. i    getSubInitializationsForTuple works on them) when the let decl has    a backing memory allocation.  - Teach LetValueInitialization to produce a backing memory object    for address-only tuple arguments, since they are passed as multiple    SILArguments and need some place in memory to reassemble them.
[33m36b765e[m Switch the rest of the ArgumentInitVisitor cases over to using RValue::forwardInto.  While this isn't directly related to my current problem, it is obvious goodness.  This avoids materializing "as a single value" the argument values, which means that we don't create a temporary holding the value when we have tuple elements, allowing us to generate more efficient code (particularly for address-only tuple).
[33mc058f51[m LetValueInitialization::bindValue and bindArgument do the same thing, so merge them.  ArgumentInitVisitor is very very similar to InitializeTupleValues, so start using RValue::forwardInto in ArgumentInitVisitor for some cases instead of duplciating logic.  This gives ArgumentInitVisitor some extra magic for lets which I'll be using in a bit.
[33m8f46705[m Remove the return value of ArgumentInitVisitor, nothing consumes it. Doing so makes it plain that the empty tuple case doesn't need to synthesize a tupleinst to return.  Eliminating this gets rid of the weird dead empty tuple you may have seen get dropped in the prolog of functions taking no arguments.
[33mea209da[m When needed, emit a Objective-C .cxx_construct method to initialize stored properties.
[33ma534f69[m Add a new class attribute requires_stored_property_inits.
[33m1d9a826[m more mainline API drift.
[33m94d4de4[m adjust to llvm mainline changes.
[33ma1d3bcd[m Add temporary String benchmark
[33m3d1d558[m Add debug prints.
[33m0271c34[m Devirtualize: teach the class_method devirtualization type-search procedure to look into apply instructions. In many cases these calls are constructors that were too big to be inlined.
[33m32f4790[m Refactor findClassTypeForOperand. NFC.
[33m970c387[m Refactor devirt related optimizations from sil-combine into a new pass. The reason is that I would like to add more sophisticated analysis and a chache, which does not fit into sil-combine very well.
[33m914591b[m adjust for mainline llvm changes.
[33m34adba8[m Introduce @IBInspectable attribute.
[33m15c0d75[m EfficientSliceMutation: Fill out with implementation details.
[33m68da9ff[m Replace the partial apply of "@in" captured arguments with strong_release. The partial apply takes ownership of @in arguments so we need to deal with the +1 refcounts coming in.
[33mcab4e1c[m emit debug_value for class constructors that don't need a box (i.e. root classes). We don't need it for value constructors or derived classes, since those have an allocation for self that carries debug info.
[33m76bea38[m emit debug_value for 'self' in class destructors of all sorts, and rename emitDestructorProlog -> emitSelfDecl, since that is what it does.
[33m6957209[m Add a note indicating that we shouldn't emit ivar initialization in ObjC initializers.
[33mfc7dfb2[m Start emitting .cxx_construct methods for Objective-C-derived classes.
[33m804a23e[m Only emit the Objective-C -dealloc method if it does something.
[33m19f0aaf[m Only emit the Objective-C -.cxx_destruct when it has something to do.
[33m7950fc2[m Only emit the Objective-C entry point for the ivar destroyer (-.cxx_destruct).
[33m3524a79[m Emit .cxx_destruct for destruction of ivars in Objective-C-derived classes.
[33m3339cad[m REPL: Yank the line continuation character
[33m68003c6[m REPL: fix unrelated bug found during last commit
[33mb3fa123[m REPL: Quick hack to enable better multi-line input history
[33m313c28f[m Remove unused closures.
[33m739754b[m Debug info: Initial IRGen support for SIL-level debug.value.
[33mde5e938[m sil-mode.el: add debug_value
[33m34113ff[m Emit both Swift and Objective-C entry points for -dealloc.
[33m99f31a9[m Mangle destructor context more directly.
[33mdd273aa[m Update fat-script.sh for recent build system changes.
[33mb49950f[m [IDE] Enhance attribute annotation by splitting the related syntax nodes to:
[33mf857007[m Teach SILGen to generate debug_value and debug_value_addr for 'let' decls.
[33m4488d26[m IRGen: Forward spare bits through nested enums.
[33md82df1e[m make the SIL Printer print the var decl associated with a debug_value[_addr], like this:   debug_value %0 : $Int64  // let a               // id: %2
[33m11d2e92[m [swift2objc] Print arbitrary class metatypes as "SWIFT_METATYPE(MyClass)"
[33me4684dd[m [swift2objc] Handle block types.
[33m9a4a560[m [swift2objc] Re-order types to be closer to TypeNodes.def.
[33m6310c07[m Debug info: re-enable mangling of type alias types. <rdar://problem/15797764> Debug info for $swift.type is confusing
[33m8b14a27[m document new instructions in SIL.rst.
[33m952ac3c[m [IDE] ModelASTWalker already has a SourceManager object to use.
[33ma17b8a2[m [IDE] SyntaxModelContext is intended to be used on a SourceFile not a module.
[33me244f51[m [Lexer] Add some const goodness to the SourceManager that the Lexer uses.
[33ma0717b6[m rearrange testcase.
[33m4bf7a5b[m Debug info: Add a reference to the stdlib swiftmodule in the line table so LLDB can find it even if nothing in the CU references it.
[33m1c7803a[m Introduce new debug_value and debug_value_addr instructions to give 'let' declarations debug info.  This is part of rdar://15785053.
[33mfbe5118[m Add new implementation file for Clang type generation.
[33me148a5f[m [sil-arc-opts] Expose isSideEffectFree in Local.h.
[33m0b7569f[m [frontend] Add proper support for determining the InputKind.
[33mf0555a7[m [driver] Add support for the -parse-sil option, including passing it through to the frontend.
[33mb0f27de[m [frontend] Move InputKind from CompilerInvocation to FrontendOptions, and move handling of -parse-as-library to ParseFrontendArgs().
[33m044be74[m [frontend] Move ParseStdlib from CompilerInvocation to FrontendOptions, and move handling of -parse-stdlib to ParseFrontendArgs().
[33m86fe23d[m [driver] Add support for passing -parse-as-library and -parse-stdlib to the frontend.
[33ma746094[m [frontend] Made -primary-file accept a value (instead of relying on relative position of arguments).
[33m1a024c1[m [swift2objc] Handle UnsafePointer.
[33m9f56b54[m [swift2objc] Handle imported enums.
[33m710e43d[m [swift2objc] Fix bug with protocol composition metatypes: Class, not id!
[33m31e6108[m [swift2objc] Look through ParenTypes (and substituted and syntax-sugar types)
[33m4e2aa5e[m Fixed build warning in StructLayout.h.
[33m9b38c4b[m IRGen: Forward spare bits through aggregates.
[33mee85fb3[m SILGen: Strip non-semantic pattern nodes before dispatching.
[33m1213b52[m [swift2objc] Add COpaquePointer -> void * mapping.
[33mddada62[m [swift2objc] Handle protocol and protocol composition types.
[33m0ed1e6d[m Switch mangleDestructorEntity() tover to accepting a DestructorDecl. NFC
[33mf05263d[m Objective-C's -dealloc is a deallocating destructor, not a destroying destructor.
[33me395bea[m Start on type encoding of ObjectiveC types into swift version of ObjectiveC metadata. Currently, GenClangType is missing all interesting types so, this patch doesn't do much (and therefor no tests).
[33mc5af8e0[m [frontend] Implement support for primary file mode for post-PrintAST actions.
[33m5d9e246[m [frontend] Updated -dump-parse, -dump-ast, and -print-ast to operate on the primary input, if one is specified.
[33ma35540b[m [frontend] Added CompilerInstance::getPrimarySourceFile().
[33m9f89b43[m [frontend] Added CompilerInstance::PrimaryBufferID.
[33m6eb9a82[m [frontend] Switch CompilerInstance::MainBufferIndex to CompilerInstance::MainBufferID.
[33mc193138[m [frontend] Added convenience accessors to determine if a SelectedInput is a filename or a buffer.
[33m18795f8[m [frontend] Switch from llvm::Optional to swift::Optional for FrontendOptions::PrimaryInput.
[33mee7c662[m [driver] Add support for passing all inputs to the Swift frontend, selecting one per invocation with -primary-file.
[33m8c04586[m [frontend] Add support for specifying the primary input with the -primary-file flag.
[33m8475eea[m [frontend] Make InputKind::Filename the default InputKind for a SelectedInput.
[33me9cc548[m [frontend] Added support in FrontendOptions for denoting the primary input.
[33md360c2d[m [frontend] Moved InputBuffers from CompilerInvocation to FrontendOptions.
[33m946dc56[m Debug info: Provide an in interface for LLDB to mangle types and refactor some code in IRGenDebugInfo along the way. This is WIP for rdar://problem/15498877.
[33m1b746bc[m Move the creation of deallocating destructors from IRGen to SILGen.
[33m993754c[m IR generation for the dealloc_ref SIL instruction.
[33m356c03e[m Document the deallocating destructor SIL declaration reference
[33m7b0783f[m Move the "gather all substitutions" operation into the AST. SILGen also needs it.
[33m183a22b[m Add a deallocating destructor kind to SILDeclRef.
[33m2bf20cc[m Add the ClassDecl::getDestructor() convenience method.
[33md1f0d9f[m [IDE] Give @attributes their own dedicated SyntaxNodeKind::Attribute.
[33m673a65c[m Move Clang type generation into its own file.
[33maec43d8[m [driver] Disable the Unix implementation of TaskQueue.
[33mda3ed8d[m Add the RC4 benchmark to stdlib. We will remove this benchmark as soon as we fix rdar://14747929, that will allow us to optimize basic stdlib routines.
[33mc081e7d[m random comment cleanups.
[33m079c6fc[m Add case for UncheckedOptional in debug info generation.
[33m373d0de[m Now that SILGen is in charge of temporary materialization (or not) we can implement fun optimizations.  Here, we avoid materializing a temporary copy for 'let' bases of protocol and archetype methods. Consider: protocol SimpleProtocol {   func doSomethingGreat() }
[33m28c74c5[m [proposals] Efficient Slice Mutation, Introduction
[33m2a36ab3[m [proposals] Basic Access Control (first draft)
[33m1bc1c66[m Add the '@unchecked T?' syntactic sugar for UncheckedOptional<T>.
[33me933d42[m Add UncheckedOptional<T> to the standard library.
[33mf5466ab[m ding, dong, MaterializeExpr is dead.
[33m1ca9f79[m simplify coerceObjectArgumentToType - we now no longer coerce rvalues to lvalues, so this can be dramatically simplified.
[33mf6a0829[m switch archetype bases over to the new world order where ArchetypeMemberRef takes the archetype as an rvalue, not an lvalue.  This defines away the need for MaterializeExpr at sema time, reusing the existing temporary mechanics in SILGen.  This also opens future optimizations.
[33m5f1b861[m Make the SILDeclRef for a destroying destructor store a DestructorDecl.
[33m7f6eeba[m Fix a bug in the substitution remapping code for ApplyInst. When we specialize apply inst we need to create a new conformance list that depends on the archetype conformance list. The new conformance is made of the concrete type that is used to specialize the function.
[33m0013cee[m Rework how existential member references (i.e., calls to protocol methods) to non-@mutating methods work in the AST: now the base expression is always computed as an rvalue, instead of computing them as an lvalue.  The optimization that we were accidentally getting before is now explicitly modeled, and the non-optimized case is now handled by standard temporary emission in SILGen instead of with MaterializeExpr.  The upshot of this carefully choreographed step is that there is no change in generated code (!).
[33m7c7787f[m IRGen: Class existentials have spare bits.
[33m132aca7[m finish a thought.
[33m96856f2[m For a complicated set of reasons, protocol methods will be modeled as taking the "self" receiver as @inout in the requirement funcdecls, whether they are @mutating or not.  This will allow us to generate better code, eliminate MaterializeExpr, and have immutable arguments someday.
[33m5e5f31d[m IRGen: Share TypeInfo among equivalent generic instantiations, take 2.
[33m03edef1[m Emit a -dealloc method for Swift classes whose root class is defined in Objective-C.
[33m973e6fc[m Revert "[sil-combine] Eliminate copy_value, destroy_value that are applied to the same value and are next to each other."
[33m97ff9e4[m Revert "IRGen: Share TypeInfo among equivalent generic instantiations."
[33m57cacbf[m IRGen: Share TypeInfo among equivalent generic instantiations.
[33mfb70778[m [stdlib] Remove Obsolete CodePoints type
[33me553421[m [IDE] Teach the syntax model about known @attributes, and treat them as keyword token nodes for syntax coloring. This addresses <rdar://problem/15599911>.
[33m15a26af[m Replace getClangABIType() with a CanTypeVisitor<>.
[33m10d6e65[m print demangled names in comments next to sil vtable entries.  Before:
[33m8d2142d[m Tweak the "uses Objective-C allocation" predicate.
[33mb87dd57[m implement SILGen and parser support for 'type' let's, implementing rdar://15767586. General compiler support is missing for 'type' properties on classes, and lets don't work either, but at least we have a nice diagnostic now. also, rename static -> type in a few internal diagnostic names.
[33m3f52274[m Default the destructor of SerializerSILLoader::Callback to let it stay trivial, per feedback.  Doesn't really affect much.
[33mb8b8a16[m Make the SUGARED_TYPE nodes provide a single-step desugar instead of specializing getDesugaredType(), and change getDesugaredType() to directly recurse in these cases.
[33m3f09a98[m Add an [objc] bit to the alloc_ref instruction to indicate when to use Objective-C's +allocWithZone:.
[33m6b7b752[m Two minor tweaks:  - improve error recovery when rejecting lets with getters/setters.  - mark the 'self' parameter of an implicitly generator init() method    as 'let' when it is for a class.
[33me3f816a[m A type function does not override an instance function and vice versa.
[33m6e6eb57[m Don't delay the emission of the destructor in SILGen.
[33mfbb5681[m SILGen doesn't need to cope with missing DestructorDecls.
[33mcc8804d[m Ubreak build, accomodate LLVM API changes.
[33mcb6a006[m [IDE] Fix crash during code-completion with invalid code.
[33ma301413[m Allow the specialization of AppleInst with a conformance list.
[33m4bcc033[m Fix an obvious bug in the Subst comperator. Testcase in the next commit.
[33m5da6def[m Clean up the linkage model and the computation of linkage.
[33m622c2f6[m Destroy instance variables after chaining to the superclass destructor.
[33mf0a088f[m change these back to static, since they are historical reference.
[33m17dfc59[m [swift2objc] Print class types for arguments and return values as "Foo *".
[33m11311d7[m [swift2objc] Add tests for structs and typealiases that come from Clang.
[33md58d483[m [swift2objc] Handle structs and typealiases that represent ObjC primitives.
[33m06d1d6a[m [swift2objc] Start printing members (only methods for now).
[33m37a578a[m [swift2objc] Sort output for determinism reasons.
[33mf83df8c[m [swift2objc] Pull printing code into an ASTVisitor, like the Swift ASTPrinter.
[33me894b0c[m Enable the specialization of ClassMethodInst
[33m6ee06ff[m Fix typo.
[33m981c4ea[m [sil-combine] Fix up a FileCheck line that uses SSA variables to use FileCheck variables.
[33md9561b2[m [sil-combine] (tuple_extract (load %x) 0) -> (load (tuple_extract_addr %x 0))
[33m72c037a[m Debug info: Emit the correct context for archetypes with a depth > 0 in the Qq mangling.
[33m6729628[m [sil-combine] Eliminate copy_value, destroy_value that are applied to the same value and are next to each other.
[33mce642b8[m Move printing of DeclAttributes from PrintAST::printAttributes to DeclAttributes::print.
[33m25fba49[m [inst-simplify] (unconditional_checked_cast downcast (upcast x #type1 to #type2) #type2 to #type1) -> x
[33mc80fba7[m [inst-simplify] Remove unnecessary specification of type 0 from a unary instruction. NFC.
[33m88f6077[m s/can not/cannot/g
[33m6cc4a21[m "denoted" -> "marked"
[33mddd7f21[m expand a bit on static -> type.
[33m68bcb0d[m Move emission of instance variable initial values from Sema to SILGen.
[33mf3e81ec[m Values produced by the debugger client are lvalues.  (They're all addresses.)  We need to mark the resulting ManagedValues as lvalues as well, so that SILGen emits loads for them correctly.
[33mf76a65a[m [simplify-insts] (ref_to_raw_pointer (ref_to_object_pointer x)) is just (ref_to_raw_pointer x).
[33m82584c7[m [stdlib] Remove obsolete prototype
[33mbf3ca81[m [stdlib] File renames associated with protocol name changes
[33m24fad26[m [driver] Removed Job::run() and Job::needsToRun().
[33m163c065[m [driver] Added support for parallel execution.
[33med061a5[m [driver] Introduced a new TaskQueue class for parallel execution and output buffering.
[33m22e112f[m Don't run member initializers in a delegating initializer.
[33mf41c143[m Fix a crash-on-invalid during typechecking.
[33m4b94053[m IRGen: Don't align the tag bits of multi-payload enums.
[33mc018689[m IRGen: Give TypeConverter push/popGenericContext operations.
[33mec9bc6b[m Replace "static" with "type" in the AST dumper.
[33m6881e29[m Add missing underline.
[33m97f7f67[m Add release note for the "static" -> "type" rename.
[33m920b68a[m Combine String-related release notes.
[33m2bb0b57[m Add an error on "static" with a Fix-It to "type".
[33m23aeafc[m Finish switching "static" over to "type" in examples, proposals, etc.
[33m1f72926[m Introduce a short section describing Swift's contextual keywords.
[33m1318c61[m Update grammar in the parser for "static" -> "type".
[33m14bf9ff[m Update LangRef for the "static" -> "type" change.
[33mb2f0b90[m SIL: Switch to SILFunctionType interface types in easy-to-reach places.
[33me68e165[m Excise the term "static" from diagnostics.
[33md6d9bc8[m Some constructor -> initializer renaming
[33m2a32939[m [CMake] Remove references to swift_stdlib_posix.
[33m88f3233[m [sil-inliner] We want to always inline transparent functions if they reach the performance inliner. Make the cost of a transparent function 0.
[33md6388c6[m [sil-inliner] Expose SILCloner's SILBuilder Tracking List.
[33m395bd1e[m Debug info: record the module name in DWARF. For the time being this is done via an DW_TAG_imported_module. rdar://problem/15711613.
[33m37e2e1d[m Merge swift2objc (the tool) into swift-ide-test, as -print-as-objc.
[33m14254e8[m Factor logic for structurally substituting dependent types into ArchetypeBuilder.
[33m6ca8873[m Rename ArchetypeBuilder::resolveType to resolveArchetype.
[33mf09cd93[m [autolinking] Hack: autolink any module containing external definitions.
[33m9412c07[m Switch 'static' to 'type' in tests.
[33m2c3e2d4[m [IDE] Add TypeRange to SyntaxStructureNode, and vend the type name for instance variables.
[33m0d37bd3[m Switch the standard library from "static" to "type".
[33m7cf6881[m Allow "type var" and "type func" as synonyms for "static var" and "static func".
[33m9e3ebf2[m Release note the new UTF16 String representation
[33mbd3b2bd[m reject @mutating on init methods.
[33mcb754ed[m Release notes for UTF-16 string literals.
[33md97a8c1[m SIL.rst: Fill in examples I made room for but didn't write out.
[33m526988d[m Run the optimizer in a loop until we can't specialize any more.  For stdlib we run the optimizations 3 times.
[33m6ae381a[m Address Jordan's much-appreciated feedback
[33m8f6a58b[m SIL: Split address-only enum dispatch from destructive projection.
[33m23fff50[m Use UTF-16 string literals when the (builtin) string literal type supports it.
[33m10e1d45[m [sil-inliner] Remove string_literal from the list of instructions which do not add any inline cost.
[33m9b10ae3[m Let the specializer return a boolean that indicates if any code changed. NFC.
[33m6e7bb68[m 15763917 stdlib/POSIX should probably be removed
[33mc48b2de[m 80 column fixes.
[33m530e948[m SIL: Rename 'enum_data_addr' to 'init_enum_data_addr'.
[33mc391e81[m Refactor the code that erases sil functions into a new method, eraseFunction, and remember to clean the function table.
[33m301b9a6[m adjust pseudo-attributes to new attr syntax.
[33m03d2dd7[m Add an addGenericSignature method to ArchetypeBuilder.
[33mc47820f[m Add a convenience method for reparenting a GenericParamList.
[33me672eef[m IRGen: Remove long comment about uncurrying.
[33me7c41c9[m Add release note for initializer delegation.
[33m1cf3bdb[m Use objc_msgSendSuper[Stret] for foreign initializer delegation.
[33m4c9bda8[m llvm/Assembly/PrintModulePass.h moved to llvm/IR/PrintModulePass.h
[33m9b19675[m SimplifyCFG: Don't drop the branch arguments when simplifying conditional branch into a non conditional branch.
[33m44fb729[m SIL: Use only interface types in the verifier.
[33m81d5c22[m Add iterators for recursively walking GenericParamLists.
[33m4a8edec[m SIL: Positionally build archetypes in dependent member types when lowering.
[33m821747f[m Nongeneric SILFunctionTypes can be dependent.
[33m22545ff[m Stop treating escape points as definitions for liveness purposes.  While it is a cute microoptimization (given that escape points *must* be live at their point in the CFG), it leads to worse diagnostic QoI.
[33m95d05b6[m emit a custom diagnostics from DI when some path forgets to call self.init in a delegating initializer.
[33m408011a[m Implement silgen and DI support for delegating initializers in value types.
[33m7e69153[m merge the MUI flags for delegating self: there is no need to differentiate the 'derived' and 'base' cases for delegating initializers.  One is better than two.
[33m3a97067[m implement definite initialization enforcement for delegating class initializers.
[33ma299747[m get the makefile build unbroken.
[33me507341[m SILModule lookup: now with that magic O(1) flavor.
[33m5e7dc85[m [swift2objc] Print protocol adoptions.
[33ma83aa35[m [swift2objc] Add some basic tests for empty classes and extensions.
[33m84ce8bb[m Add a skeleton for swift2objc, a tool to generate headers from Swift modules.
[33mb044064[m Diagnose attempts to both delegate to a peer and chain to a superclass initializer.
[33mab6b6f7[m Remove dependency of SILGlobalVariable.h on SILFunction.h.
[33mbb63d23[m Hide the constructors of SILFunction/SILGlobalVariable behind factory methods.
[33m90f3b55[m Initializer delegation to a foreign initializer must go through class_method.
[33m6406e54[m teach silgen to produce the right mark_unintialized tags for delegating inits.
[33mcca5fb3[m Remove name mutators for SILFunction and SILGlobalVariable.
[33m708d797[m Upgrade ConstructorDecl::hasDelegatingOrChainedInit() to provide the kind of initialization.
[33m3f6ce3f[m introduce new flavors of MarkUninitializedInst to model delegating ctors to DI.
[33m434324e[m Move the "is there a call to super.init?" check into a ConstructorDecl predicate.
[33m212f39e[m [stdlib] Rename Indexable.swift => Container.swift
[33ma387a5b[m [stdlib] Rename "Indexable" => "Container"
[33m942d3b0[m Fix the mangling of initializer contexts.
[33mf9461ac[m Fix whitespace.
[33m51a25d9[m Add code to CopyAddr for replacing its Src/Dest arguments.
[33me99add7[m Add a helper method for setting an arbitrary operand to SILInstruction.h
[33m6570a42[m Add reverse iterators to SILBasicBlock.
[33m46fb1e8[m More clang importer feedback from Doug and John
[33m12fbe24[m fix the ast dumper to dump patterns from statements (e.g. foreach) not printing them lexically.
[33mc498a9f[m SIL generation for initializer delegation for structs and enums.
[33mf4d12a2[m teach SILGenFunction::manageBufferForExprResult about address-only let buffers, so that we don't emit a shadow copy in some cases where we didn't realize we successfully emitted into our buffer.
[33mbaf7645[m Use SmallVector's constructor to initialize it to an array of null pointers.
[33mddab785[m Replace stray "Enumerable"s with "Sequence"
[33m0f994b6[m Rename "Container" => "Sequence" in core compiler
[33maa26b55[m Variable initializer manglings don't have types. Fixes rdar://15753317
[33mb30ab40[m Prettify crashes in the demangler. Revert "add a hackaround for rdar://15753317.  I don't unerstand the code enough to tell if this is the right fix."
[33md196abc[m When binding address-only let declarations to let arguments, use the buffer being passed in, instead of creating a temporary one and copying into it.
[33m59c45c4[m Serialization: for archetypes, use an array of null pointers for conformances.
[33m5c5c782[m Rework SILGen of address-only let declarations.  Previously, we would just drop them into heap boxes like var decls.  Now we drop them into stack temporaries like rvalues.
[33m93243ca[m SIL serialization: do not use attribute field for cast kind.
[33mec4279e[m SIL: Dependent types have non-trivial metatypes.
[33m2140daf[m SIL: Install a generic context scope in SILFunctionType::substInterfaceGenericArgs.
[33mfbde591[m SIL: Simplify dependent-ness of TypeLowering's type keys.
[33m8a7c19d[m Have Type::subst resolve dependent member types when the base is substituted to a non-dependent type.
[33m720052c[m Clang Importer: Remove gross '6432' constant
[33m5f1e886[m Wrap delegating initialization ('self.init' calls) in RebindSelfInConstructorExpr.
[33mb689013[m fix comment header.
[33m1523798[m simplify emitDestructorProlog, NFC.
[33m0d3e661[m add a new ManagedValue::copyUnmanaged.  It is exactly the same as ::copy, but doesn't have the assertion that the copied-from value has a cleanup associated with it.  Various bits of silgen are trafficing in SILValue's when they are known to be live, and this allows us to use the centralized "copy" instead of rolling it ourselves inline.
[33med7a3fd[m tweak comment.
[33m31c328b[m add a hackaround for rdar://15753317.  I don't unerstand the code enough to tell if this is the right fix.
[33m6ec92b2[m [proposals] Delete OperatorMethods.rst
[33meb02c9a[m [stdlib] "Sequence.enumerate" => "Sequence.generate"
[33mff076dc[m [stdlib] "Generator" => "Stream"
[33mc760177[m Return an error if we couldn't handle the deserialized literal encoding in SIL.
[33mbb83377[m Add some newlines at the end of files
[33mfc00bf6[m Parsing and semantic analysis for delegating initializers.
[33mf51347b[m Add a proposal for C pointer argument interop.
[33m0100b2a[m [sil-sroa] SIL Scalar Replacement of Aggregates.
[33m3abeb33[m Teach the importer about word-sized types
[33m513e7b4[m A naming change that was missed earlier
[33m8cf8a21[m Some code I am working on leaked into the previous commit due to my failure at git shenanigans.
[33m8f8ed76[m [SIL.rst] Fix mark_uninitialize formatting so that a code block is created.
[33m57d824b[m Fix whitespace.
[33m9783da4[m Added utility create-filecheck-tests that takes in a sil fragment and converts SSA variables to FileCheck variables.
[33mac8958a[m remove overly conservative code: destructors always have self decls. Value types don't have dtors.
[33mdcd8581[m Fix RValueEmitter::visitDeclRefExpr to do the right thing when SGFContext specifies a destination to plop the loaded decl into.  This isn't actually being used, just something I noticed in flight.
[33m54ea11d[m fix 'unapplied rvalue member' detection to work in the face of rvalue archetype bases.
[33m6da8a55[m Update SIL.rst with the notion of string encoding for literals.
[33mbc943fd[m use John's spiffy new O(1) predicate to avoid doing a bunch of subexpression scanning for things that must be materializable (I still hate that term!) :-)
[33m8606022[m Give SILFunctionType an interface for substituting its dependent generic signature.
[33md130bb1[m random indentation fixes.
[33m12b1c9d[m Add support for multiple encodings to the string_literal SIL instruction.  Implement IR-gen support for same.  Fix the parsing of SIL string literals to properly unescape them.
[33mdeeb98c[m Fix trivial bug.
[33m1d2697f[m More random demangling stylings.  Probably done here for now. :)
[33m2b99a66[m Rename toString* to print*.
[33m552c3ef[m Unnest NodePointer::toString.
[33mc5d2d97[m Add an x-macro system for demangling nodes and use it to generate getNodeKindString automatically.
[33m18b826e[m When we devirtualize apply instructions that access protocols we look for the init_existential instruction. However, in some cases the protocol is initialized using copy_addr. This patch adds support for analyzing the copy_addr in search for the init_existential instruction. The same rules must apply: both instructions must not be captured, etc.
[33me9e928d[m Remove the last vestiges of the 'L' local-linkage mangling prefix.
[33m17a8acf[m Remove the vestiges of the SILGen mangler.
[33m8d68478[m Move the SILDeclRef mangler to the SIL library. NFC.
[33mf73b4ad[m Devirtual ApplyInst + project_existential.
[33m445e616[m Add 3 arguments SILBuilder::createTupleExtract which infers the 4th type argument from its operand.
[33mf257340[m Refactor most of the definitions of SILType methods into SILType.cpp.
[33mfb640df[m start removing Materialization logic from the type checker: - MaterializeExpr can never be formed in an argument list (but   still can as the base object) so remove that case from CSApply. - LValues never exist *inside* of tuples, so remove code related   to that.
[33m847cc6b[m add some more testcases, have sema reject (with a poor QoI error) invalid code where a mutating getter is used on an rvalue.  This previously crashed silgen because the rvalue has no address to pass @inout.
[33m4355a21[m Mangle closures using their context and discriminator.
[33mb61a6fd[m Rework AST and SILGen of properties and subscripts to take advantage of the new mutability model.
[33me238192[m Enforce absolute paths for buildbot-script's --workspace and --build_dir.
[33m8a843f3[m [ClangImporter] Protocol instance methods are also class methods on roots.
[33m43e7b0e[m Fix comment ("@objc subscript" over "subscript @objc").
[33m566dd0f[m Disallow @objc on nested classes.
[33m1ca2722[m introduce ManagedValue::forLValue(x) as a helper function for making LValue ManagedValues, and switch SILGenLValue to use this form of managed value consistently for lvalues, instead of using unmanaged values in some cases.  NFC.
[33m1b86610[m switch LValueWriteback to use ManagedValue now that it has access to it.
[33mfdc3e70[m move SILGenFunction::Writeback out of line and rename it to LValueWriteback in preparation for more work on it.  NFC.
[33m285007a[m Don't introduce a conditional cast from AnyObject to AnyObject.
[33mfae3a61[m Pull construction of locators out to their own source lines, to follow the dominant style. NFC.
[33m806e126[m [utils] buildbot-script.sh: fix usage string
[33m8cb2f1e[m Make sure we have a local context when parsing top-level code.
[33m62e9afa[m Provide "interface" versions of SILFunctionType's convenience APIs.
[33mad1e198[m Recognize unmangled suffixes at the end of a mangling.
[33m5df03ce[m Abstract out a utility for printing strings in quotes.
[33m31d3c37[m Revert r11855: "simplify some code, managed value does the right thing for us here."
[33m1ee513e[m Use Builtin.Word for array lengths, string literal lengths, etc.
[33m9631362[m SILGen: Reparent the inner context generic params of witness functions.
[33mab4ad10[m GenericParamList cannot be copyable; it has tail allocations.
[33m411d19e[m Release-note the elimination of the "Proto" suffix on imported Objective-C protocols.
[33m632264c[m stdlib: checkpoint 15612767: Int should become a separate, platform-sized type
[33m5b394f6[m sink SILDeclRef's down into emitGetAccessor/emitSetAccessor, which are the things that apparently care about it.  The LValue/RValue machinery is happy to pass around the VarDecl/SubscriptDecl for the entity being referenced, and this simplifies things.
[33m41b6a42[m Clang importer: whitelist certain Objective-C protocols for renaming.
[33md40295f[m simplify some code, managed value does the right thing for us here.
[33m7d9ae2f[m Use the power of ManagedValue to pass along +1 ownership of the base receiver until something consumes it.  This means that something with writeback (which invokes both the getter and setter) needs to copy the managed value (since two things consume the +1), but that's what ManagedValue is for.
[33mbbc4b2d[m Use Objective-C protocol name directly, without looking at the "Proto" suffix.
[33m25ef450[m SIL: Print SILFunctionTypes using their interface types.
[33m10ab56c[m mechanical transition of lvalue emission logic from trafficing in SILValue's to trafficing in ManagedValues.  No functionality change (yet), we just needed more management in the mix.
[33m8fca360[m CMake: Set SWIFT_RUNTIME_OUTPUT_INTDIR/SWIFT_LIBRARY_OUTPUT_INTDIR properly for non-separated builds.
[33m103e5e7[m remove some unneeded global namespace qualifiers.
[33m53d2844[m SIL: Give TypeLowering support for dependent generic contexts.
[33mef5ee1c[m Remove AddressComponent, merging its functionality into ValueComponent
[33mb86ebcc[m [stdlib] Rename Char.swift => UnicodeScalar.swift
[33m0ca0b46[m [stdlib] Rename NewString.swift -> String.swift
[33mb1b50a1[m Autolinking: include all imported modules.
[33m1b53a1b[m remove the concept of “settable” from SILGenLValue - all lvalues are now settable.  Things that aren’t settable are rvalues now.
[33m55948dc[m Devirtualize even more.
[33ma66e89e[m Precompute TypeBase::isMaterializable().
[33m45b78bd[m rework SILGenFunction::prepareAccessorBaseArg to work with any base type: it either passes the base as inout or as a +1 rvalue (e.g. references), metatype bases as a degenerate case.
[33m9d3edbd[m Cache the dependence of types in RecursiveTypeProperties.  NFC.
[33me562000[m SIL.rst: Sketch out some (still inadequate) documentation for sil_witness_tables.
[33mce77d4a[m RefComponent and MetatypeComponent are both doing pretty much the same thing in LValueEmitter.  Merge them in preparation for them getting further generalized.
[33mdc26363[m [stdlib] Remove String.swift
[33m224c8a5[m Abstract out the ability to propagate bits down through the structural type system.
[33m8eb7129[m [stdlib] Replace String with NewString
[33m5e1c0fa[m Remove test/Interpreter/SDK/objc_blocks.swift.
[33m10bd80b[m [utils] buildbot-script.sh: use the right llvm-config
[33m8230ee1[m Revert "Cache the result of TypeBase::isDependentType."
[33ma73d17a[m Tweak the sil printer to print “let” in alloc_stack/box comments instead of var, when the allocation comes from a let.
[33m925626b[m Cache the result of TypeBase::isDependentType.
[33m7331edd[m SIL: Handle dependent types in AbstractionPattern::isOpaque.
[33me6d5545[m CMake: Set SWIFT_PATH_TO_LLVM_BUILD and PATH_TO_LLVM_BUILD to be the same.
[33m86cb79c[m remove two more tests that are assuming internal implementation details of String that are about to change.  This is the rest of  rdar://15736798.
[33m9576b10[m Fix output location for executables.
[33m40d8536[m fix a nasty iterator invalidation problem exposed by a patch Joe is working on.
[33mc18d10f[m CMake: Make built Xcode projects put binaries in a more Makefile-like structure.
[33m09a5fca[m Turn down an overly aggressive assertion: address only enums may exist within other address-only enums, and their initialization can be chained.  This was exposed by some of Joe's work.
[33m7cb8841[m This test is assuming internal implementation details of String that DaveA is actively changing, just remove the offending part.  This fixes rdar://15736798.
[33m2b521ff[m mark a couple more 'self' decls in functions synthesized by the importer as 'lets'.  This should produce slightly better code, but is more useful in that it improves consistency.
[33mcdb6541[m move handling of addressofexpr back into SILGenLValue::visitAddressOfExpr, it is simpler there than in visitRec.
[33m8bebb08[m Rename 'RequirementKind::ValueWitnessMarker' to 'WitnessMarker'.
[33me1d3cbd[m [Clang importer] Synthesize protocol conformances for imported declarations.
[33m631b0c3[m Don't import the same Objective-C method twice (recursively).
[33mcdc2b34[m SIL: Give SILFunction context generic params and a mapTypeInContext method.
[33me8a6014[m SIL: Map archetypes out of the interface parameter and result types of SILFunctionTypes.
[33mba2f1c6[m Give the compiler special knowledge of Optional's enum layout.
[33m917d2a1[m remove the dead 'TypeConverter::getMethodSelfType' method, which is also incorrect.
[33m8f06ca3[m remove the dead 'resultType' argument from emitGetAccessor.
[33m7e8a382[m Rework @inout handling in SILGen.  Now @inout is emitted as an rvalue, not as part of the lvalue path.  This means that the arguments to a function (for example) are always rvalues - @inout arguments are not a special case all over the place.
[33mbcc46ae[m now that super is playing nicely with the type system, all the old code I originally wrote to turn "loadexpr(declrefexpr(letdecl))" is dead, remove it.  Let decls are now always rvalues, so they never are loaded.
[33mc73bfe2[m rework sema and silgen of SuperRefExpr.  The most notable change is that it is no longer an lvalue, since it doesn't make sense to assign to super.
[33m5e39e8f[m remove "adjustInOutForReference", the change from @inout(T) to @lvalue(T) on reference to an @inout argument is now handled by getUnopenedTypeOfReference, just like all the other translations.
[33mbe58684[m further detangle @inout and @lvalue types, making the code more specific and simpler.
[33m859883d[m further detangle @lvalue and @inout. types, this time in libsil.
[33m8d854f3[m straighten out IRGen's @lvalue vs @inout handling.  Since SILGen lowers all @lvalue types, IRGen only needs to handle @inout.
[33me808c36[m simplify some code, NFC.
[33m1cda63d[m sil abstraction patterns never see @lvalue types, only @inout types.
[33md2a3336[m Fix getRValueType() to not strip off @inout types, only @lvalue types. - Introduce a new TypeBase::getInOutObjectType() that strips off @inout types - Switch stuff that is calling getRValueType() to call getInOutObjectType()   when they are stripping @inout, not @lvalue (this is primarily around   stuff working with self) - Update testcases, some diagnostics improve around & handling.
[33m366d3c1[m rework base object computation and application to apply data members to to @lvalue bases instead of @inout bases, and make the verifier check that the right type is being used consistently.
[33m988270a[m eliminate the code copied and pasted from shouldTryUserConversion: just call it instead.
[33mf30dd51[m fix rdar://15735537: __conversion function not found in protocol if marked @mutating - shouldTryUserConversion was not looking through @lvalue to determine if   the underlying type had a __conversion member, so we were only trying user   conversions on lvalues through an lvalue-to-rvalue conversion. - Similarly, fix the similar-but-different filter in tryUserConversion to look through   lvalues as well.
[33m34e6e24[m mention protocol conformance checking is done.
[33m397a79d[m Enforce semantic requirements for protocols and @mutating.
[33md24e245[m stdlib: add overflow checking to div and rem
[33mb35858f[m Simplify more cases to use getSemanticsProvidingPattern. Change Pattern::getBoundName to look through VarPatterns, which means that the presence of var/let in an argument list no longer change the mangling of the function.
[33mb7159b5[m Unify some cases by using getSemanticsProvidingPattern.
[33m12cff89[m put a type on a VarPattern when we deserialize them.
[33m9427c4b[m silence "not covered" warnings that I missed.
[33m0228f01[m stdlib: make unary + generic over SignedNumbers
[33m7f3ece3[m Fix serialization of var patterns.
[33m6d25464[m simplify some code that is reimplementing emitManagedRetain to just call emitManagedRetain.
[33m9a74e8a[m Add some PrettyStackTrace entries to identify the top level generator of a silfunction when we get a crash.
[33m3feaac4[m stdlib: drop IEEE from type/protocol names
[33m493ebd7[m [lower-aggregate-instrs] Change copy_addr lowering so that it emits lowered {copy,destroy}_values.
[33ma38ce8d[m stdlib: move related NumericOperations out of Policy.swift
[33m44269cc[m stdlib: Move IEEE754 support into its own file
[33mf4e60d1[m stdlib: Move the LogicValue implementation into its own file
[33mc550e75[m stdlib: consolidate compiler protocols into a dedicated file
[33m669ca06[m stdlib: mark SignedNumber methods as @transparent
[33m95cef24[m [lower-aggregate-instrs] Change destroy_addr so that it emits lowered destroy values.
[33mccf2c2a[m Remove dead code that snuck in.
[33mef9d8d8[m [lower-aggregate-instrs] Teach lower-aggregate-instrs how to use TypeLowering to produce "lowered" copy_values.
[33m962df13[m [lower-aggregate-instrs] Teach TypeLowering how to produce "lowered" copy values without bugs this time = ).
[33mf84ca4c[m [lower-aggregate-instrs] Change one usage of !isAddressOnly => isLoadable.
[33m4db62e3[m [lower-aggregate-instrs] Fixed thinko by changing a conditional check to an assert.
[33m61b7382[m [lower-aggregate-instrs] Use TypeLowering to lower destroy_value recursively (avoiding enums).
[33me960091[m [lower-aggregate-instrs] Add an additional type lowering style "DeepNoEnum" for use in lowering aggregate memory operations.
[33m468ead2[m allow 'var' and 'let' to appear in patterns (not just matching patterns). This allows them to appear in argument lists of functions, enabling behavior like this:
[33m9bfa643[m stdlib: abs() should use Builtin.*fabs* on floats
[33m6a8b1a4[m rename Parser::parseMatchingPatternIsa -> parseMatchingPatternIs and Parser::parseMatchingPatternVar -> parseMatchingPatternVarOrLet
[33md455565[m top_level_code is intrinsically alive so don't remove it.
[33m542b782[m Remove period.
[33m612d622[m Rename current SILSROA => SILLowerAggregateInstrs.
[33m75803a4[m Change the pass order. The main difference is that the specializer is moved to the beginning of the pipe. This makes sense because it does not depends on other optimizations.
[33mc15f16e[m cleanup
[33mfc6d887[m no need for period.
[33mfafab67[m fix a crash in SILGen when calling through a 'let' vardecl, which was because let vardecls can't be turned into SILDeclRef constant references.
[33m2aab668[m Change two places that can only see @inout types, not @lvalue types.
[33m6fc4d29[m don't verify each function twice in DI anymore now that DI is stabilized. If someone passes -debug to the compiler, we still do the check.
[33m2fc941d[m [sil-sroa] Remove the verifier call from SILSROA to save some compile time.
[33m04f82a7[m Fix typo.
[33md6bf276[m [sil-sroa] Very initial simple initial commit of SILSROA. Currently only lowers copy_addr, destroy_addr into their constituant parts without performing any chopping to unblock Nadav.
[33m9ae289d[m Drive the semantic wedge harder into lvalues.  Now, instead of having one LValueType with qualifiers on it, we have two distinct types:  - LValueType(T) aka @lvalue T, which is used for mutable values on the LHS of an    assignment in the typechecker.  - InOutType(T) aka @inout T, which is used for @inout arguments, and the implicit    @inout self argument of mutable methods on value types.  This type is also used    at the SIL level for address types.
[33m8383a25[m Remove the __less__ hack; use < instead.
[33md1054b9[m Eliminate the __equal__ protocol requirement; use == directly.
[33m1482256[m Make operator methods to module-scope name lookup.
[33mb373f7e[m Cope with functions that are type-checked twice.
[33mf23a213[m Give SILFunctionTypes parallel generic signature and interface types.
[33mfaab3ca[m Reduce the inliner threshold and enable the early inliner. The compile times of stdlib drops by a few seconds and the code quality of a few small testcases that I have been playing with improves.
[33m4ae0c72[m rework coerceObjectArgumentToType to make its assumptions more explicit and to only build MaterializeExpr with an implicit lvalue type.  In the case when materialization is still needed, we now produce addressof(materializeexpr(rvalue)) instead of producing materializeexpr(rvalue) with @inout type.
[33meb576ba[m Now that lvalue types are more squared away, RequalifyExpr is completely dead.  Remove it.
[33m78f765f[m simplify adjustLValueForReference: now it *only* changes @inout arguments to be implicit lvalues when referenced, so it can be simplified.
[33m18a9193[m Redesign how @inout propagation works in the typechecker:  - Switch all the 'self' mutable arguments to take self as @inout, since    binding methods to uncurried functions expose them as such.  - Eliminate the subtype relationship between @inout and @inout(implicit),    which means that we eliminate all sorts of weird cases where they get    dropped (see the updated testcases).  - Eliminate the logic in adjustLValueForReference that walks through functions    converting @inout to @inout(implicit) in strange cases.  - Introduce a new set of type checker constraints and conversion kinds to properly    handle assignment operators: when rebound or curried, their input/result argument    is exposed as @inout and requires an explicit &.  When applied directly (e.g.    as ++i), they get an implicit AddressOfExpr to bind the mutated lvalue as an    @inout argument.
[33m60cfcf7[m - delete a dead function from the AST verifier, - fix some logic in the type checker that only works on   implicit lvalues to be explicit about that. - update some comments
[33mf000a98[m fix a fixme, importing NSOPTIONS methods as non-mutable methods.
[33m6f7d15d[m the 'self' argument of a mutable value type method should be @inout(implicit), not @inout.
[33md3c9138[m Substantially simplify the API to LValueType now that nonsettable is gone.
[33md3c0532[m SILGen: Reabstract enum payloads matched out by a 'switch' pattern.
[33mcb2010f[m remove the -enable-mutable-methods langopt, it isn't doing anything anymore.
[33mea43a05[m now that non-modifiable isn't an lvalue qualifier, the basic invariants of RequalifyExpr are being maintained properly.  Enable an assertion in the ctor and take out a "terrible hack" in the verifier.
[33m6fabe7e[m Devirtualize very simple class_method and alloc_ref pairs.
[33m9cd580b[m We can’t print the debug message before we insert the instruction into the function.
[33m3355cf7[m VTables should be accessed by reference.
[33mcac1195[m Delete the instruction as well as its dead operands.
[33m37de1eb[m Add SILCombine again because r11688 fixed a bug that made NewString fail.
[33m529673d[m Don't optimize away enums with operands.
[33md2f06e4[m Verify the protocol list of extension declarations.
[33m26640c7[m Delay type checking of the members of a nominal type.
[33mea0a6be[m Don't repeatedly check invalid PatternBindingDecls.
[33mfc5606f[m Now that enough bugs are fixed :), mark more things as immutable values: - foreach enumerators - closure arguments with explicit patterns - 'value' in a setter - subscript arguments
[33mb1a882c[m Fix a problem where let decls of tuple type would die in SILGen when being closed over.  If we allowed arguments to have tuple type in the SILFunctionType type system, this would just work.  As it is, we have to do a bit of [re|de]structuring on the partial_apply and the closure body side to work things out.
[33m5faf530[m implement restructuring assignment of let decls, repurposing the existing implosion logic.  This resolves rdar://15716277
[33mbe071a4[m Revert r11670: "Add SILCombine after specialization and inlining to remove unused functions."
[33mdf4d42e[m Scaffolding for lazy witness resolution.
[33m5a053ac[m - fix the ASTDumper to propertly dump closure_expr's. - mark closure arguments (both explicit and $0's) as immutable - Adjust the stdlib (one place) and some tests to cope with this. - Remove some special case logic in sema for lvalue qualifying   anonymous closure exprs, which is now the wrong thing to do.
[33mdc71faa[m Add a local cleanup to fix a problem in foreach expansion when the 'next()' call would produce temporary stack allocations.  Before the dealloc_stack would get generated at the end of the foreach sequence, a violation the stack nesting verifier caught.
[33m5c16091[m Sink another expensive optimization.
[33m2f1e2a2[m The call to 'isTrivial' is expensive. Make this optimization last.
[33m6e74bb1[m Add SILCombine after specialization and inlining to remove unused functions. This removes 1000 functions from the standard library.
[33m821ef81[m Remove internal functions that are not called by any functions in the module.
[33m4360ca0[m Rename function
[33mc765489[m SIL: Have VTables and WitnessTables bump the reference counts of SILFunctions.
[33ma9f9440[m Move the call-graph utility to Utils/Local
[33m471c496[m [sil-combine] Teach silcombine to simplify {copy,destroy_value} of an enum with no-payload or a payload of trivial type since such an operation is a no-op.
[33m4f4c698[m Change 'self' to be an rvalue instead of an lvalue in non-@mutating struct methods.  This does not including properties and subscripts, but covers the bulk of the change.  The implication of this is that the compiler now rejects mutations of self in a non-@mutating method, and rejects attempts to call a @mutating method from a non-@mutating method.
[33mf8b0b4e[m [stdlib] Teach Array to be a Functor by adding map
[33m0002920[m fix closures over address only values to properly capture like boxes, instead of exploding in silgen.
[33m9462fca[m Several NFC changes:  - In AST/Decl.cpp, simplify by always setting isMutating to true for    ctors/dtors, since mutability only means something to struct/enum    methods anyway.  - in DeclContext.cpp, continue to lvalue qualify the 'self' of protocol    methods, this is currently dead.  - in CSApply, fix logic for some value-type member processing stuff    to properly handle methods that have a self which is not lvalue    qualified. Not exercised yet.
[33m3e30cbc[m SILGen/IRGen: Don't emit top_level_code for libraries.
[33ma49dfe2[m Start setting 'self' as a rvalue instead of an rvalue.  First up are property and subscript getters which have no explicit FuncDecl for the getter.  I'm not exactly sure where these come from, but they look like something the clang importer is producing in some cases.
[33md7621b5[m Remove the concept of a "nonsettable lvalue": Now everything that is nonsettable is represented as an rvalue.  Yay for one less concept in the AST.
[33mbbe346d[m IRGen: Strip out dead and obstructive function abstraction checks.
[33m1964cf9[m When the base of a computed property is an rvalue, the result should be an rvalue as well.  This is NFC other than changing one terrible diagnostic into a different one.
[33maf0e016[m lvaluetype::isMaterializable() wasn't dead afterall.  Fix an infinite recursion.
[33mace51d1[m remove a dead method.
[33ma792065[m continue rvalue world domination.  Switch get-only subscript expressions to produce rvalues instead of non-modifiable lvalues.
[33m84ea29a[m Rename GetterSetterComponent::subscriptExpr to subscriptIndexExpr, since it is the expression for the index, not the *entire* SubscriptExpr itself.  NFC.
[33mf994922[m Make some fairly major internal changes to our value system: now, get-only properties are represented as rvalues, not non-mutable lvalues.  As part of this, isReferencedAsLValue() only returns true for mutable VarDecls.
[33mb8c2bc4[m disable the performance inliner for now.  It dramatically slows down the build time of the stdlib (primarily in the llvm IR and later passes) by generating a ton more code that needs to be compiled.
[33m381068d[m Update library paths for release build test for /usr/lib/swift/macosx change.
[33m1870710[m a minor cleanup
[33m55fec18[m Add the inliner before reg2mem to allow more opportunity of the scalar optimizers to kick-in.
[33m7c12ad1[m Improve the compile time of the specializer. The specializer creates new functions with a new name. Our method for finding if this name is available was to use Module::Lookup, which performed an O(n) search over the module. Since O(N/c) of the functions were specialized we had an O(N^2) search. This patch saves the names of the function in the module prior to specialization and uses this list whever we need to generate a new name.
[33m57ae77d[m Fix subscripts on rvalues: for now, just materialize the base of the subscript to an lvalue.
[33ma91b8b8[m Add statistics
[33m8d75365[m Add an assertion
[33mfecffda[m IRGen: Handle abstraction changes in partial_apply thunks.
[33mc0e972e[m IRGen: Pass through SILFunctionTypes in differsByAbstraction.
[33mef14e80[m ParseSIL: Fix parsing of apply substitutions to match SIL printer output.
[33me06ee37[m Enable SIL protocol witnesses.
[33m3116a38[m SIL: Consider original abstraction pattern when lowering result of function type.
[33mba7c1ab[m SILGen: Substitution conformances don't actually always match protocol declaration order for associated types.
[33m542d7dd[m Fix a problem when loading an address-only rvalue element from an address-only rvalue container.  Previously we destroyed just the accessed element, not the entire container. Thanks to Joe for the consult on the best (and simpler!) way to fix this.
[33m69a5165[m [ClangImporter] Instance methods on NSObject are also class methods.
[33m2208ae3[m Invert "REQUIRES: not_asan_build" to "XFAIL: asan".
[33m96d52d3[m IRGen: Make 'ConformanceInfo' a class hierarchy.
[33m3381ae8[m IRGen: Ignore 'var' requirements for now in the WitnessBuilder.
[33m7eb5b62[m [IDE] Skip out of order non-token nodes. This fixes <rdar://problem/15535058> and a crash in Xcode <rdar://problem/15642501>.
[33m1690f52[m IRGen: Emit witness tables as exported symbols in -emit-sil-protocol-witness-tables mode.
[33m3f192f0[m When using simplifyInstruction, RAUW SimplifedInst[0] with the returned SILValue instead of attempting to replace all operands.
[33mc17e860[m when producing a +1 value, make sure to manage it so that it gets balanced. NFC since this isn't an active codepath (yet)
[33m3a80eca[m Remove some testing code that snuck in in r11595.
[33m451da95[m Fix destruction of address-only let decls, which do have boxes despite being immutable.  This addresses rdar://15717123.
[33m3396bdf[m [sil-inliner] Teach the inliner that literals are free since they just become LLVM values.
[33m3c83c17[m fix MemberRefExpr on an address-only base that produces a non-address-only value.
[33m2eb34c3[m [sil-inliner] Ensure that all special flags are propagated when we create a CleanupLocation, MandatoryInlinedLocation, or InlinedLocation from a SILLocation.
[33mb92c57f[m Extend MemberRefExpr in a fairly substantial way: now it is ok, when applied to a struct rvalue, to produce a struct element directly, without converting the rvalue to an lvalue.
[33m4196ce0[m Remove the ugly hack of adding dummy-values. After r11597 we can add arguments to a block before modifying the branch instructions that target it.
[33m20410a3[m CondBranchInst: Save the number of true and false arguments. The current implementation depends on the target basic block to record the number of argumens, but this is a bad idea because it makes it difficult to modify the argument list.
[33mb6f8bd9[m Initial simple cost based performance inliner.
[33m90cbfb2[m [sil-inliner] Removed invalid assert.
[33mee71669[m IRGen: Handle @objc protocols in the -emit-sil-protocol-witness-tables regime.
[33m07a6fd7[m IRGen: Don't produce polymorphic witness table arguments for @objc protocols.
[33m1c9e924[m IRGen: Disable debug info for witnesses.
[33m6683209[m [sil-inliner] Teach silcloner how to remap undefs.
[33mdd55e97[m IRGen: Lower a 'void' result value for ApplyInsts with out parameters.
[33m3120965[m SILGen: Assign protocol witnesses a debug scope.
[33mf6205d2[m SILGen: Fix the protocol witness label mismatch problem a third way.
[33mbfb1c20[m Now we promote all non-captured allocas, so we can remove NumAllocStackRemoved because we can calculate it using the other statistics.
[33m9888b43[m Fix r11580 in a more targeted fashion.
[33m8bd6546[m SILGen: Ignore property requirements when emitting witness tables.
[33m75962b4[m Remove dead code
[33m631e7e2[m Update the statistics
[33m8f6bb40[m Drop an unused variable
[33md241f19[m SILGen: Handle abstraction differences involving single-element labeled tuples.
[33m65f45d6[m SILGen: Only apply the primary archetype substitutions to an archetype_method.
[33mf44cb1e[m Implement a linear time algorithm for placing phi-nodes. This commit implements the DJ-graph data-structure and linear time algorithm for calculating the iterative dominance frontier and placing PHI nodes. This is the same algorithm that is used by recent versions of LLVM.
[33m8c76594[m IRGen: Populate witness tables using SILWitnessTables.
[33m8f47dc7[m SIL: Add a SILModule::lookUpWitnessTable method.
[33mfd7b61a[m SIL: Add a lookup cache StringMap to SILModule.
[33m41276a6[m AST: Make ProtocolConformance::getGenericParams handle generic params from a generic parent of a nongeneric local nominal type.
[33mf7247fb[m Fix SILGenFunction::emitReferenceToDecl to property return references to 'let' declarations +1.  This isn't used yet, as the peephole around LoadExprs is still doing all the work here (and it is already +1 correct).
[33mbc2fa50[m Start driving a stronger wedge between lvalue and rvalues, by making RValueEmitter only handle rvalues.  Clients that can either have an lvalue or an rvalue (which are few, and will be diminishing as other planned changes happen like the tuple vs argument split) use a specific api to indicate such.
[33m518cd21[m Introduce entry points to resolve a single witness within a conformance.
[33mda36461[m [Sema] Don't give up typechecking on the whole function body if there is any error on the function declaration.
[33m2f66cfe[m IRGen: Lower protocol_method in -emit-sil-protocol-witness-tables mode.
[33m548ea3a[m IRGen: Lower archetype_method calls in -emit-sil-protocol-witness-methods mode.
[33mafbbbd1[m [stdlib] Add a facility for calling "C" functions that take va_list arguments
[33mbd0690b[m IRGen: Unwrap metatype of static method when considering the Self type for a polymorphic convention.
[33m92004cc[m Simplify the construction of ConformanceChecker.
[33m2cf9092[m Shift more logic into the ConformanceChecker
[33m15a61f4[m Assertions and trivial tweaks to the check for protocol conformance.
[33m55ab7ee[m SIL: Fix a verifier false negative when invoking static methods on archetypes with -emit-sil-protocol-witness-tables.
[33m1ba3cbd[m Work around a closure-in-REPL regression in ContextualizeClosures.
[33madd5ba7[m Eliminate the unnecessary UnresolvedAssocTypes small vector.
[33mcee0e54[m [Sema] Fix crash when applying @IBAction to an invalid declaration.
[33ma4ed3e1[m [ClangImporter] When creating the member declarations for NS_ENUM/NS_OPTIONS, also associate the clang declaration that they came from.
[33m3882ab6[m [ClangImporter] When checking for NS_ENUM/NS_OPTIONS enums, use clang::Preprocessor::getImmediateMacroName() and check for CF_ENUM/CF_OPTIONS, which NS_ENUM/NS_OPTIONS expand to.
[33ma2f86c4[m IRGen: Fix bad fallthrough in lowering witness polymorphic source.
[33mb30c9ce[m Give closures the right to exist in REPL contexts again.
[33m307d1cd[m '0' -> 'nullptr'
[33m537e125[m Code completion: annotate associated types with concrete style while completing expressions
[33m8c76b4c[m Code completion: when reporting associated type aliases, try to annotate them with concrete types
[33m14362cd[m IRGen: Lower metatypes respecting SIL's 'thin' bit.
[33mf9eaced[m Lookup visible decls: eliminate duplicate associated types that come from different implemented protocols
[33m94fac9f[m Lookup visible decls: collect associated types recursively
[33mf106ad4[m Lookup visible decls: return associated types from protocols that the type conforms to
[33m10b4c5f[m Add infrastructure necessary to test with ASan.
[33m9b81800[m Choose correct IR types for @objc return values.
[33md5b65b2[m Improve and test the demangling of local declarations.
[33m63d08c7[m SIL: Handle metatype abstraction differences.
[33m3c19226[m Runtime: Remove debug noise from swift_getExistentialMetadata.
[33mbe3463f[m Store a file-level DeclContext* in protocol conformances rather than a module.
[33m186c024[m Mangle the discriminator into local declaration names.
[33mac2a9c0[m When looking for conformances, make sure to check inherited conformances too.
[33mec50aee[m CMake: OSX deployment versions are X.Y, not X.Y.Z
[33m90284ec[m reimplement cleanup processing for 'let' VarDecls.  Previously, we would emit the cleanup for the initializing expression when the expression was complete, instead of at the end of the let decl scope (releasing things too early).
[33mc254103[m MEM2REG: It is possible to limit the insertion of phi values by analyzing the liveness of values in the function. This patch prevents the propagation of PHI-values by using the lifetime markers of the allocation: 1. If the phi value is not dominated by the Allocation then it can't be alive. 2. If the phi value is properly dominated by the deallocation then it must be dead.
[33mea4a00d[m Add a missing static
[33m577450e[m Don't bother recording the "deduced associated types" during conformance checking.
[33m596cd5e[m Record type witnesses directly in the conformance as we determine them.
[33m0752c26[m Don't record opened associated types from the wrong protocol.
[33mbf2f3d1[m Record witnesses directly in the protocol conformance.
[33m159ddf5[m Protocol conformance: record inherited conformances directly.
[33m256b946[m Record protocol conformance when we start checking, rather than at the end.
[33m31ca888[m eliminate TypeChecker::transformType, replacing it with Type::transform.
[33mada3ea6[m change Type::findIf and Type::transform templates to be standard functions and move them out to Type.cpp.  Along the way, eliminate the dependentIdentity template, which is never specialized.
[33m2243239[m [frontend] Set DiagnosticOptions::VerifyDiagnostics and DiagnosticOptions::SkipDiagnosticPasses to false by default.
[33m706e7ba[m SILGen: Handle abstraction differences in stored property access.
[33mb29748a[m remove the ASTContext argument from Type::transform, (various) FunctionType::get's, ArrayType::get, ArraySliceType::get, OptionalType::get, and a few other places.
[33m1472e4d[m Remove the ASTContext argument from LValueType::get().  It is already only two loads away from the type argument passed in.
[33m0e360cb[m Install stdlib into /usr/lib/swift/<OS name>/.
[33m4b48c89[m Demangle reabstraction thunks (and impl-function-type generally).
[33mb9696e1[m Create protocol conformances and then, separately, fill in the witnesses.
[33maf9d91f[m SIL: Use 'SILType::fieldType' consistently instead of 'Type::getTypeOfMember'.
[33mf1ff340[m Move the "conformances" array from TypeDecl to NominalTypeDecl.
[33m308c613[m Change ASTContext::allocate(unsigned) to return a MutableArrayRef.
[33m21518ab[m [Frontend] When setting the MainInputFilename in the compiler invocation, check first that the input filenames vector is not empty.
[33m28d579f[m [frontend] Add support for running SIL optimization passes in the integrated frontend if the optimization level is not zero.
[33m23564a2[m special case a diagnostic to produce a more sensible message when using Builtin.addressof on an uninitialized variable.   Before:
[33m7a30de2[m Disallow inheritance clauses for concrete typealiases.
[33mbaa048e[m Remove functions from the debug info generator's internal data structures prior to erasing them from the module. This should fix <rdar://problem/15700509> ASan reports a use-after-free in IRGen
[33med8521f[m Rename ObjCSel -> Selector
[33m0174401[m Fix the weird capitalization of MetaTypeType.
[33m73875c7[m Clang importer: don't import BOOL and SEL
[33m2af06d7[m Allow a '@thin' modifier on metatypes in SIL mode.
[33me34282e[m [sil-mode] Add sil_global_addr highlighting.
[33m5115060[m [simplify-inst] Add peepholes for (address_to_pointer (pointer_to_address x)) -> x and vis-a-versa.
[33m8505c4a[m Further refactoring/simplification of the demangler. Not NFC: changes some of the demangling tree schemata (in interest of regularity and expressivity) and, incidentally, improves support for initializer manglings.
[33mc9aad99[m Further reduce the API surface area and complexity of demangling nodes.
[33m1d8d2d1[m Remove the need for Node::setKind.
[33mf9a5b2c[m IRGen: Lower the witness polymorphic convention.
[33m0950901[m Don't import 'id' and 'Class'
[33m89cb832[m Release note implicit insertion of super.init()
[33m676428c[m fixup the comment
[33mbe46520[m Refactor fixPhiPredBlock into a helper function that modifies branches. No functionality change.
[33m7b93a80[m Zap a useless diagnostic.
[33mb390ad4[m Fixed typo from 11456.
[33mdffa7fe[m [sil-inliner] Add support for Stmt, Pattern ASTNodes to Inlined/MandatoryInlined Location as per my discussion with Anna.
[33m53a0aca[m [frontend] Added temporary support for setting MainInputFilename, Triple, and OutputFilename in IRGenOptions.
[33m0f6c51d[m [frontend] Add support for -enable-dynamic-value-type-layout.
[33m19c9107[m [frontend] Add support for -disable-llvm-optzns.
[33m8b80831[m [frontend] Added support for parsing -O.
[33m5303544[m [driver] Add support for passing -O to the integrated frontend.
[33m39bb2bf[m [frontend] Added proper support for parsing -l and -framework.
[33m90480e9[m [frontend] Add support for the -g option.
[33m9f113b5[m [frontend] In frontend_main(), switch from using a local IRGenOptions to using the CompilerInvocation's.
[33m41b0a59[m [frontend] Add an IRGenOptions to CompilerInvocation.
[33m9929f25[m IRGen: Build correct TypeInfos for thin and thick function types.
[33m23d740b[m The type checker is building RequalifyExpr's to strip off the @settable bit in various unfortunate cases, which is really wrong and causing unpleasantness for the new mutability model.  However, we can't fix this until the new mutability model lands.
[33me64247b[m Insert implicit calls to super.init
[33m1751c6d[m Bring the demangler closer to Swift code style.  NFC.
[33m8520603[m Setters default to mutating.
[33m42d0fda[m - Introduce the ability for attributes to be inverted with !. - Switch @mutable to be a tri-state attribute that is invertable with @!mutable. - Move the semantic form of 'mutable' to being a bit on FuncDecl instead of   something in DeclAttrs.  The former is a binary bit, the later is a tristate   which differentiates between "not present", "present and set" "present and inverted". - Diagnose some invalid uses of @mutable, e.g. on class methods. - Make setters default to mutable, and allow them to be switched with @!mutable.
[33mbc4a98b[m add a testcase I had sitting in my tree but forgot to commit a long time ago.
[33mb0c7527[m Implement DF-based mem2reg
[33ma7f18cf[m Update enum_value_semantics test for fix in r11431.
[33m0a49571[m [sil-inliner] Add a check to inlineFunction to prevent circular inlining.
[33mdf583fa[m IRGen: Fix logic inversion in extra inhabitant calculation for heap references.
[33m9de0af9[m Change SILInliner to let the user specify the type of location (i.e. mandatory or not) that will be used by all the inlined instructions.
[33m8e2175d[m Factor the handling of @optional requirements into its own function.
[33m71c7846[m Factor more of the conformance checking code into a helper class.
[33mc87b1c0[m Factor the resolution of witnesses via derivation into its own routine.
[33mab7fcae[m [driver] Make Command::getExecutable() return a const char *, since a Command’s executable must always be a null-terminated C string.
[33m82e18e8[m Minor code organization tweaks for protocol conformance checking
[33md14b9a1[m Factor witness checking into its own function.
[33mc5aa41f[m Change around some manglings to make them carry more information and be easier to demangle.
[33mec4913b[m Implement default definitions for associated types.
[33mfdd1614[m expand on the mutability model stuff that is in place.
[33m5e46fcd[m Factor out the derivation of type witnesses for compiler-assisted protocols.
[33mac3c558[m Small cleanup. SILInliner is a C++ file so it does not need -*- C++ -*- in its header.
[33m51862b9[m rename the inout decl attribute (not the type attribute) to @mutating.
[33ma0c6d05[m build sil-extract
[33m073974d[m revert r11411, which completely broke the makefile build.
[33mb1ba2ac[m Release note NS_OPTIONS support.
[33ma9570e2[m ClangImporter: Make NS_OPTIONS conform to LogicValue.
[33m9032632[m Install stdlib into /usr/lib/swift/<OS name>/.
[33m93975af[m Disable cross-compilation tests because they are incompatible with separately-built stdlib.
[33m78e2ba6[m Temporarily disable the retainAndReturnThree optimization outside x86_64.
[33mca9912f[m rework validation of the use list of a box in the allocboxtostack pass to avoid confusing uses of the box with uses of the allocation in partial apply instructions.  This resolves rdar://15595118.
[33m402be77[m IRGen: Kludge instantiated generic classes into getting initialized as ObjC classes.
[33m8492d43[m Factor the resolution of type witnesses via member lookup into its own routine.
[33m59f18f9[m Renamed irgen::Options and irgen::OutputKind to IRGenOptions and IRGenOutputKind, and move both out of the irgen namespace now that they're in swiftAST.
[33m3e81830[m Move "include/swift/IRGen/Options.h" to "include/swift/AST/IRGenOptions.h".
[33me8ec3aa[m Conformances on a typealias check conformances rather than establishing them.
[33m7fae046[m [frontend] Fix indentation issue.
[33m8ec19ce[m [frontend] Fix formatting issue.
[33m9bbb4fc[m [frontend] Use "main" as a fallback module name if there's only one input file and it's kind is SourceFileKind::Main.
[33m531b240[m [serialization] Rework cross-references to be more general / more robust.
[33m51fa0e4[m [serialization] Fix use of "Nothing" to ignore a field when deserializing.
[33m61512e8[m Adjust fixit location for [attribute] @syntax change
[33ma633ea8[m [sil-extract] Add a simple test for sil-extract.
[33m259f657[m [sil-extract] Fix header.
[33m129d307[m [frontend] Adjusted the handling of -module-name in the integrated frontend to provide fallbacks and diagnostics.
[33m9861019[m [frontend] Add a member function to FrontendOptions which returns whether or not the RequestedAction has output.
[33mb11903a[m Reject calls to inout methods on rvalues and 'let' values.
[33m2eeafd1[m Disallow @IBOutlet on class properties
[33mca366c4[m Fixup for recent CMake changes: mirror exactly what Clang does since r197459
[33mb0092c4[m [frontend] Initial support for performing non-EmitObject actions in the integrated frontend.
[33m01be26c[m Add a new command line option that turns on by-value self arguments for structs when a method is not declared @inout.
[33m3825df4[m Allow delayed-identifier expressions (.Foo) to meaningfully produce lvalues.
[33m4d12bc5[m Handle default arguments in super.init expressions.
[33m425807c[m Move runSILDiagnosticPasses and runSILOptimizationPasses into swiftSILPasses.
[33mb0a569a[m fit in 80 columns (and reduce my local patch)
[33m5c08116[m Verify that closures are uniquely discriminated in their contexts.
[33m7173cec[m Thread contextual information about parsing the top-level through various bits and use that to globally discriminate.
[33m5ae30af[m Don't crash when dumping an AbstractFunctionDecl as a context.
[33mb102f38[m @IBOutlet implies @objc
[33m04e5bb8[m Extinguish DynamicLookup from user-facing diagnostics
[33m5a603a3[m [driver] Add support for -emit-ir and -emit-bc.
[33m3705f01[m [frontend] Make -dump-parse explicitly set ParseOnly to true.
[33m2216a31[m [frontend] Moved ParseOnly from CompilerInvocation to FrontendOptions.
[33m20e0d1c[m [frontend] Add support for parsing the action which the integrated frontend should perform.
[33m5005ec0[m @IBAction checks: use an existing isInClassContext() predicate
[33ma62a85b[m [utils/buildbot-script.sh] Correct the script for running the SourceKit tests.
[33mece603b[m [ASTPrinter] Add an option in swift-ide-test to print a module interface with annotations and test it.
[33m2c4c7ff[m AST printer: ensure a stable printing order for ImportDecls
[33mc54c979[m Clang importer: don't add @objc *attribute* to imported decls, just set the objc bit
[33mc92e117[m Add a test for importing bitfields
[33m2b990be[m remove the rest of the hacky code that special cased "self" in various places in SILGen to lower it without a box.  The 'let' bit subsumes this now.
[33m1788421[m Change SILGen to lower and bind non-address-only 'let' variables as values, without a box at all.  This generalizes some of the previous hacks I had for silgen'ing 'self' as a value instead of a box, and capturing them with CaptureKind::Constant.
[33m71af72a[m Change a few more kinds of arguments to be 'var' arguments instead of 'let' arguments.  Until we have @inout methods on structs, we can't mark anything that can be address-exposed.  This temporarily regresses a few testcases, but they will come back later.
[33m204ebd8[m Assert that closure expressions only appear in local contexts.
[33m1686045[m Consistently contextualize top-level code.
[33m7800f4a[m Restructure REPL type-checking to use builder and context classes; NFC.
[33mba3dda3[m Parse and analyze initializers of non-local var decls in a PatternBindingInitializer context.
[33mb35cd1e[m remove emitLoweredCopyValue, it is dead and happens to have bugs. This resolves rdar://15669586
[33mfbe1d09[m stop marking "$0" arguments in closures, and generator variables in foreach loops as 'let', silgen isn't ready for it yet.
[33mef89ed2[m Fix up CMakeLists for LLVM's r197394
[33m3b80655[m [driver] Switched from --help-hidden to -help-hidden.
[33m44dcc43[m ClangImporter: Make NS_OPTIONS imports conform to RawOptionSet.
[33m11b6d19[m Add a location to NormalProtocolConformance.
[33m33b2564[m [sil-extract] Instead of deleting functions, just make them have no basic blocks (i.e. be external).
[33m036f80a[m There is no need to link sil-opt with CoreFoundation and libedit either.
[33mfdaecc0[m There is no need to link sil-extract with CoreFoundation and libedit
[33m14a05b0[m [sil-mode] Updated the word highlighting given the current SIL Instructions.
[33m73ad892[m Add in a simple SIL Extract utility that currently only handles functions.
[33m5627820[m Small whitespace fixup.
[33mabe496b[m [sil-inliner] In SILInliner::visitSILBasicBlock, invert for (...) { if (!Cond) { do } } -> for (...) { if (Cond) continue; do }.
[33ma359e3c[m Fixed some whitespace.
[33m292192e[m Record the value-witness-of relationship in the ASTContext as we assign witnesses.
[33m93c15be[m [AST] Introduce the ASTPrinter class, and have its callbacks invoked during AST printing.
[33m04b98c7[m [driver] Move execution of Jobs from main() to Compilation.
[33m44971d2[m [driver] Added support for specifying the number of commands to execute in parallel.
[33m2d75ca2[m Add a LazyResolver to ProtocolConformance::getWitness().
[33m1667ed6[m SIL: Tweak protocol_method for the SIL-witness-tables regime.
[33m85511c0[m Remove mistakenly-committed file
[33m90f13d5[m [stdlib] NSStringAPI: add a couple of missing .AutoReleased annotations
[33m139ff76[m [frontend] Fix typo in the help text for -emit-verbose-sil.
[33m40dfbc0[m [frontend] Add support for parsing ImmediateArgv.
[33m6127955[m [driver] Add support for passing arguments after -- down to the frontend as-is if the driver is in immediate mode.
[33m25283a2[m [driver] Fixed an issue where creating Commands with no output failed due to an attempt to initialize a StringRef with nullptr.
[33m58ec588[m [driver] Adjusted the implementation of Driver::getOutputMode() so that it uses Option::matches() instead of a series of ArgList::getLastArg() calls.
[33m620b5ab[m [frontend] Add support for -disable-diagnostic-passes.
[33m5dc5f49[m Debug info: set the appropriate scope for box-allocated variables. Fixes rdar://problem/15638864.
[33m0d3369b[m [frontend] Add support for -help and --help-hidden.
[33mcc43e39[m [frontend] Restructure FrontendOptions.td into separate [FrontendOption, NoDriverOption] and [FrontendOption, NoDriverOption, HelpHidden] sections.
[33ma126639[m [frontend] Implemented support for verifying diagnostics with the integrated frontend.
[33mdebe690[m [frontend] Restructured frontend_main() so that SILGen, SILPasses, and IRGen are not attempted if earlier stages generated errors.
[33md7c819b[m SIL: Redefine archetype_method in the SIL-witness-tables regime to return an unsubstituted witness.
[33m90f285f[m Restore compatibility with libstdc++
[33m60b8499[m Merge a small test into a larger one on the same topic
[33madf13e4[m Don't link swift driver against CoreFoundation -- there is no need for this at the moment
[33m19cb9a3[m Correctly compute memory block size
[33me87b611[m Change silgen to lower non-inout-self arguments as simple values, instead of allocating a box for them.  When self is not marked inout (which will be the default for structs someday) it changes the codegen of:
[33m14c858b[m Fix a nasty memory smasher in SILVTable that was causing one of my innocent (!) tests to fail.  Basically, in the case of an empty vtable, SILVTable::create was allocating space for 0 entries (sensible!) but then the default ctor fires for the 1 element declared in the class, which would write off the end of the memory block, leading to unpleasantness in random places later.
[33m98a9480[m the base expression of a member ref can be an rvalue soon, remove some obsolete verifier assertions.
[33m07c0793[m Construct the type witnesses of SpecializedProtocolConformance lazily.
[33mb26ac34[m rework how let-ness of 'self' is determined, to be based on the type of self. This time, it correctly handles static methods, which have metatypetype.
[33m1b161ff[m Eliminate ProtocolConformance::getTypeWitnesses().
[33mcb6cad6[m Trust the newly-introduced adjustSelfTypeForMember().
[33m14143ae[m Encapsulate the lvalue/rvalue adjustments needed for 'self' in a static function.
[33meee1711[m AST printing: add printing tests for NS_ENUM and NS_OPTIONS
[33m3d59523[m Clang importer tests: move NSUInteger definition to ObjectiveC module to be consistent with reality
[33m8833833[m Reduce duplication between IDE / Clang importer tests
[33mf81b89b[m Revert r11287, it is breaking basic/lookup/name_lookup.swift
[33m531adcb[m Remove unused variable
[33md35cf94[m Move Clang importer test SDK to a toplevel dir test/Inputs where it can be shared between Clang importer and IDE tests
[33md29a54d[m Clang importer tests: merge tests
[33mf203e1f[m [frontend] Moved ModuleSourceListPath from CompilerInvocation to FrontendOptions.
[33m7e56d75[m Clang importer: don't import superfluous typedefs to tag decls that have the same name
[33m8f46532[m [frontend] Split target-related options out from ComplierInvocation into a new TargetOptions class.
[33m7d7599e[m improve our computation of 'let'ness of self decls to know that 'self' on a value type should be immutable when it isn't lowered to an lvalue.  Right now, it is always lowered to an lvalue, so NFC.
[33m281cd52[m recommit @inout attributes, now with serialization support.
[33me0b163a[m Pass a SILBuilder into the debugger client so that it can indeed build SIL expressions rather than just look at them go by.
[33m2db553c[m SIL: Give protocol members @cc(witness_method) convention.
[33m9d45fe9[m ClangImporter: factor out a routine to search in the cache
[33m6055899[m [frontend] Fix the handling of -debug-constraints-attempt.
[33m8aa7eaa[m Remove ProtocolConformance::getWitnesses().
[33mb4a7398[m Stop using ProtocolConformance::getWitnesses().
[33mfe99127[m SILGen: Don't emit base_protocol or associated_type_protocol witness table entries for @objc requirements.
[33m1da0fba[m SILGen: Emit witness tables for generic types.
[33m1f3c29b[m Give ProtocolConformance a getGenericParams() method.
[33mf5a7d0c[m Make sure we are not calculating dominance for an empty function.
[33m359ddeb[m Remove an unused public member.
[33me905d45[m Remove another stray .DS_Store.
[33m65bd853[m [serialization] Look for underlying conformances in refined protocol adopters.
[33mab12a4a[m Move static members into the class because future features will need access to class members. No functionality change.
[33madc64f5[m typo
[33mfadebe0[m Stop using ProtocolConformance::getTypeWitnesses() almost everywhere.
[33me01d25b[m [Sync with ToT LLVM] Output the new debug info metadata version.
[33mc19f9e3[m Add newline at the end of the file.
[33m1ecccd8[m Remove unused static function.
[33m61c674b[m SILGen: Include refined protocol conformances in witness tables.
[33m1d12c53[m Check a complete array-new expression within a single constraint system.
[33m6faf833[m Finish comment
[33me0fa463[m Diagnose attempts to allocate multidimensional arrays with specified inner lengths.
[33md405aa3[m Hush!
[33meea35fd[m BlockShims: correct a mangled name
[33m402f4da[m SILGen: Emit protocol witnesses.
[33m38bbeb4[m SILGen: Don't emit witness tables for @objc protocols.
[33m0256574[m Fold checking of the subexpression of 'is' into the enclosing constraint system.
[33maf6da9b[m [ClangImporter] Adjusted ClangImporter::create so that it accepts a ClangImporterOptions instead of individual parameters.
[33m48a111b[m [ClangImporter] Switch ClangImporter::create from directly accepting search path information to using the ASTContext’s SearchPathOptions.
[33me4de1a1[m [ClangImporter] Add OverrideResourceDir to ClangImporterOptions.
[33m20ce2ba[m [frontend] Moved SDKPath from CompilerInvocation to SearchPathOptions.
[33mc610ac9[m Add an IsBare attribute to SILFunction for functions that do not have an AST.
[33m74784f8[m Fold checking of the subexpression in "x as T" into the enclosing constraint system.
[33mfff391e[m Added missing newlines to the end of a few files.
[33m85b16ae[m Adjust comment for swift.Slice -> swift.Array rename
[33mbd31457[m Set options for module interface printing in printModuleInterface(), rather than in swift-ide-test
[33m374aa1d[m AST printing: when printing module interface, explode PatternBindingDecls
[33ma188143[m Added support to allow LLDB to provide the location of variables at SIL generation time. This patch introduces a SILDebuggerClient that knows how to resolve the locations of variables that are generated by the debugger.  These variables have a flag on them that only LLDB sets.
[33maf96933[m remove a dead function.
[33mb5b46ca[m Remove stale fixme: Decl::shouldPrintInContext() should not be responsible for skipping implicit decls, there is an AST priting option for that.
[33m476b4e6[m Fix the build
[33ma7f6f9e[m Handle indirect returns in @objc methods properly.
[33m1011340[m Always record known protocols even when there are no source inputs.
[33ma9e90b6[m [serialization] Don't eagerly load extensions for deserialized nominals.
[33m037c674[m Move diagnostic about missing function definition into semantic analysis.
[33m5c24f79[m [stdlib] NSStringAPI: create missing block shim
[33mf29f083[m [serialization] Stop eagerly deserializing decls with conversion functions.
[33mc2bd6eb[m Lazily deserialize members from AST files.
[33m0fe7748[m [serialization] Allocate an array on the ASTContext instead of the stack.
[33m7d1c35f[m Don't immediately type-check synthesized RawRepresentable functions for enums.
[33m9a1c706[m [frontend] Moved FrameworkSearchPaths from CompilerInvocation to SearchPathOptions.
[33md9b9d4e[m Fixed typo in comment.
[33m1ecc5cc[m [frontend] Moved ImportSearchPaths out of CompilerInvocation/ASTContext and into SearchPathOptions.
[33m86b4a3b[m [frontend] Begin moving search path-related options into SearchPathOptions.
[33mef5f423[m fix some test failures from my last commit.
[33mee8a9af[m AST printer: add an option to print types qualified if they are possibly ambiguous
[33ma00268d[m accept (but ignore) @inout on func decls.
[33m1b5944f[m Move the specialization suffix counter and reset it per function, not per specialization. When we specialize we search for an available function name for specialization. We keep a running counter and try a different suffix until we find a free name. When we specialize a single function multiple times with multiple types we create work for ourselves because we need to lookup the same name multiple times. Resetting the counter per function solves this problem and reduces the compile time.
[33mab27d86[m Parse all top-level code in the same local context.
[33mff15811[m describe some basic 'let' stuff in the release notes.
[33m30e388f[m Extract the actual context info out of the ParseFunctionBody RAII object.
[33m6ef6af2[m move mutability model doc out of proposals since it is basically agreed to and in progress.
[33m8e86f3d[m When emitting debug intrinsics for generic arguments, make sure they point to the cop[ied]_addr and not to the incoming value.
[33maddbe4a[m Iterate over the AllocStack instructions in the function instead of collecting them before we optimize them.
[33mb6a648c[m illustrate how let decls work with classes.
[33ma768ea8[m AST printing / getDisplayDecls: correctly form the access path to the module
[33m1a3ff1e[m implement 'let' pattern bindings.
[33m645f85a[m Don't try to bind incompatible type variables together.
[33m726d1db[m When compiled with TOT clang, this code produces an error.
[33me9870cd[m [SIL] Add helper - it's useful when printing SILInstructions.
[33m65aa09d[m implement support for let declarations.
[33m0c4baac[m Make the 'self' declaration of a value type constructor be '@inout'.
[33m03518d2[m revert r11192, I accidentally included too much in the patch.
[33m778225e[m Implement let declarations.
[33m0165a50[m Put ClangImporterOptions into the swift namespace.
[33me6b0f16[m [frontend] Add support for -print-stats.
[33md0c96e4[m Implement a very very basic SIL Mem2Reg pass that promotes write-only and single-basicblock allocas.
[33m23a60d6[m [frontend] Added support for -delayed-function-body-parsing.
[33ma4f766e[m [frontend] Add support for -emit-sil-protocol-witness-tables.
[33mdffef5d[m Revert "Handle indirect returns in @objc methods properly."
[33m64f7748[m mark "self" immutable (except in methods on value types), and mark the "value" argument to setters as immutable.
[33m973ece4[m Handle indirect returns in @objc methods properly.
[33ma55474b[m Options.inc depends on FrontendOptions.td.
[33m8661d23[m [frontend] Added an accessor to CompilerInvocation to get the invocation's ClangImporterOptions.
[33m04bdf73[m [frontend] Move options for controlling the behavior of the Clang importer into a new ClangImporterOptions class.
[33mdfe138f[m Build and register the PDB earlier, removing the need for a special case in code-completion.
[33m342a8b3[m Parse default-argument expressions in an initializer context.
[33mc755c99[m Allow casts directly from DeclContext to AbstractFunctionDecl and its subclasses.
[33m0bfa866[m Introduce (but don't yet create) a new kind of DeclContext for various kinds of expressions that appear outside of local evaluation contexts.
[33madbd61d[m [frontend] Added support for -debug-constraints-attempt.
[33md14959b[m [frontend] Switch from providing a constructor for FrontendOptions to providing default values for its members.
[33mb4ea0c8[m [frontend] Added support for the -use-malloc flag.
[33m7ca3ce1[m Speedup lookup visible decls in Clang importer ... by removing a call to isVisibleFromModule() call, which did not filter anything.
[33m85c2afc[m [driver] Added support for -Xfrontend, which passes arguments through to the frontend.
[33ma3bb62d[m AST printing: print imports of submodules while printing Clang modules
[33mca7140c[m Fixed a formatting issue in FrontendOptions.td.
[33m4ede1d0[m [frontend] Added support for parsing the “-emit-verbose-sil” frontend argument.
[33ma5a67f9[m [frontend] Added an accessor to CompilerInvocation to get the invocation’s FrontendOptions.
[33m84f9c6f[m [frontend] Add comments to FrontendOptions.
[33mb434cfe[m Updated comment.
[33m295b438[m [frontend] Check for unknown arguments before attempting to handle other arguments.
[33ma8887d0[m Specialize calls using call-graph information.
[33m59c07ab[m [frontend] Began splitting options in CompilerInvocation into separate classes.
[33m0e81e10[m [frontend] In frontend_main(), fall back to SWIFT_MODULES_SDK if -sdk is not passed to the frontend.
[33m7dacbe0[m AST printer: print import declarations while printing Clang modules
[33me2fb898[m Release note for Optional.map
[33m8730b47[m Fix autolinking to properly find indirectly-imported adapter modules.
[33m6d4cd89[m mark closure arguments, subscript arguments and destructor arguments (??) as immutable.
[33m2eae182[m Brag about lazy initializers some more.
[33m451ade4[m nullptr => false in bool context.
[33m41b5f24[m AST printer: pretty-print import declarations while printing deserialized modules
[33m88e5dec[m SILGen: Implement a visitor to produce witness tables.
[33mcd24db0[m Don't out-of-bounds when selecting the primary archetypes out a generic param list with a Self archetype.
[33m1479318[m Release note lazy global initializers.
[33m6547c69[m Turn on lazy global initializers.
[33m910b962[m IRGen: Change the magic code to populate C_ARGC/C_ARGV to go through their lazy initializers.
[33m9cbb354[m Update tests affected by enabling lazy global initializers.
[33m4a25b56[m SILGen: REPL globals are not lazily initialized.
[33m3688e6f[m SILGen: Don't try to emit lazy initializers for globals from Clang.
[33m68c47c7[m [stdlib] Remove ObjectPointer.swift; it was not ready for prime-time
[33mb1a2059[m Implement the ability to create a Pattern as a set of 'let' decls instead of var decls.  I was originally intending to use this for argument lists, but I don't think that's a great direction to go anymore.
[33m4c98b50[m [stdlib] Expose NSString.stringWithContentsOfFile on String
[33mfb73f93[m code cleanups, NFC.
[33m698380d[m Introduce a new bit in VarDecl, "isLet".  Teach Sema that 'isLet' properties are not settable (like get-only ones).  Set the 'isLet' bit in various places, but not the particularly interesting or useful places yet.
[33m9c2ccd5[m indent
[33mf4bbd58[m Note improvements in type checker performance in the release notes
[33ma5167f6[m Remove the type-checker performance workaround in <rdar://problem/14925518>
[33me9b6d4a[m Use a non-NSString example
[33mf8e0070[m Simplify: use a fixed-size array as suggested by Jordan
[33m69a3c41[m Deal with tuple-to-scalar conversions a bit better.
[33ma01809e[m Use SmallVector instead of std::vector
[33m49e739e[m Replace a nonsense DeclContext with the correct one
[33m2f02b02[m Remove accidentally committed debugging code
[33m7243a4c[m [driver] Updated the driver so that it accepts -module-name.
[33m93fcbed[m [frontend] Switch from a default case to OPT_UNKNOWN for catching unknown arguments.
[33m42c61e2[m [frontend] Return immediately from frontend_main() if CompilerInvocation::parseArgs() failed.
[33mf04a492[m Add release notes for AnyObject/AnyClass
[33m788912d[m Introduce AnyObject and AnyClass (for 'DynamicLookup' and 'DynamicLookup.metatype')
[33mcd3d2d1[m @objc inference: don't infer @objc through protocol conformance if the original protocol member does not have @objc
[33mc6d2322[m [frontend] Updated CompilerInvocation::parseArgs() so that it emits a diagnostic when it encounters an unknown argument.
[33m78833dc[m adapt to the new fangled lexicon of stored property.
[33m7c4f40f[m Simplify locators for unresolved member expressions that are calls (e.g., .Some(x))
[33m1bcbaed[m Debug info: get rid of intrinsickind.
[33m34c5c96[m Only visit supertypes when we inferred from a constraint that permits supertypes.
[33m2acb718[m SILArgument: Make Decls mandatory for function arguments.
[33m61318e3[m Compute potential bindings with the help of the constraint graph.
[33mfb38d09[m [driver] Switch from passing “-triple” to “-target” to the integrated frontend.
[33m8b99609[m relax assertion
[33m7c41f9e[m more diagnostic QoI improvements, refer to properties, not ivars.
[33m4bed0d6[m more added dependencies, this really doesn't seem right.
[33m46893b2[m another build unbreaker.  CompilerInvocation::parseArgs is calling driver::createDriverOptTable.  I'm not sure if this is a layering violation or not, but someone should think about it.
[33mae413a8[m restore a makefile overly zapped by r11082
[33mb55f943[m stdlib/FixedPoint: fix indentation
[33m44a714a[m SILDeserializer: We expect SIL_FUNC_NAMES first, then SIL_VTABLE_NAMES, then SIL_GLOBALVAR_NAMES. But each one can be omitted if no entries exist in the module file.
[33m42fd177[m silence warning
[33m1f927d9[m Overhaul the handling of return locations for auto-generated code. - change SILGenFunction to use Cleanup and Implicit return locations for   auto-generated cleanups/returns where sensible. - Fix a bug in where ConstructorDecl that would return the wrong   source range. - Move the expected locations of some errors to the end of the function   where they should belong.
[33m0fb0dff[m formatting
[33m0975a3c[m [DI] Now that the location info is more precise, shorten the message.
[33m02c1532[m Initial support for an integrated frontend in swift_driver.
[33m7ee082c[m rework general accesses to self to be modeled as full loads, instead of as escapes, and simplify some code.  The notable aspect of this change is that it improves diagnostics for method calls before super.init.
[33mc5dd36c[m SILGen: Attach debug scopes and location info to lazy init functions.
[33m4d1459a[m SILGen: Don't blow up trying to emit lazy global initializers for computed properties or declarations without initializers.
[33m6fb1860[m Replace multiple generated constraint sets with a single vector.
[33m3755e6d[m Replace worklist deque with Active/Inactive constraint lists.
[33mcaaa6ba[m Remove a DS_Store file
[33m4b24b7f[m Two more QoI improvements to DI diagnostics.  For enums, diagnose failure to initialize with:   "return from enum initializer method without storing to 'self'" instead of:   "variable 'self' used before being initialized"
[33m2420c48[m mention that we diagnose super.init issues.
[33m12db3b2[m Implement support for validating super.init invariants.
[33m66972fb[m When sema synthesizes a derived class init method that has initialized values, it was emitting the super.init() call before the ivar initializers.  Swap this around to correctly obey our model.
[33mab95d6c[m stdlib: Add a BitwiseOperations protocol.
[33m02a0e99[m SIL: Kill initialize_var instruction.
[33m2d61bd3[m Always use the constraint graph and worklist.
[33m799fba7[m Improve the location information for class and value initializer bodies.
[33me4343a0[m Don't infer [auto_closure] types; use the result type.
[33meaae203[m Look through one-tuples when deciding on a variable binding.
[33mb4fe56e[m Actually fix the Makefile build for multi-file Swift libraries.
[33mfac5659[m [serialization] Sprinkle PrettyStackTrace throughout deserialization code.
[33m549b2f1[m [stdlib] Turn the String append speed test into a reallocation test
[33m598b5d4[m Make sure to validate known protocols when we look for them in the type checker.
[33m8d997cd[m remove an unnecessary special case from SILGen.  There is now only one last use of initialize_var left, which is used in NSString bridging.  Once that is gone (tracked by rdar://15568558, which I don't plan to do) then initialize_var can be removed as well.
[33m4232864[m update tests for builtin_zero being removed.
[33ma0499d9[m remove the SIL builtin_zero instruction.
[33m3c03c0b[m rework emitOptionalToRef to use an optional code sequence to get a null class reference, eliminating the last thing that creates a SIL builtin zero.
[33mab38416[m Remove leftover testing code
[33m2293ac8[m Fix the Makefile build
[33m39224db[m remove the ZeroValueExpr AST node.
[33m908cfcd[m eliminate the isDefaultInitializable method, inlining the one bit we need (checking to see if a superclass has a default initializer) into the place we need it.   It seems that this code should be common somewhere already, hopefully someone knows how to delete it outright.
[33m22f1d8c[m Debug info: Repair emission of the swift.type type after introducing the _Tta mangling. Fixes <rdar://problem/15599592> Type for $swift.type arguments is now Builtin.RawPointer.metatype
[33m4fcf12d[m Add a comment.
[33m7c64fc4[m remove some dead code: this eliminates the scan of an initializer body that attempted to detect whether there was an explicit init in the body. DI takes care of this now.  It also removes the logic for generating code to default init ivars.
[33m73c26e7[m Clang importer: rename importDeclContext -> importDeclContextImpl to emphasize that it should not be used directly.
[33m18ae5c6[m Improve the diagnostic for root classes that fail to initialize something.  The location of this diagnostic still doesn't make sense (pointing the the { of the function) but that is tracked by rdar://15581664.
[33mcda85f6[m Canonicalize copy value of trivial types to no-ops+RAUW and reference types to strong_retain+RAUW.
[33m07d7df4[m Canonicalize destroy value of trivial types to no-ops and reference types to strong_release.
[33me27001d[m Clang importer: determine the module for enums correctly while importing enum's decl context
[33m9533bdb[m testcase update to go with 11037
[33m99a3e68[m don't emit a bogus "variable defined here" diagnostic for 'self' related diagnostics.
[33m8a5d66d[m Start improving "DI for init methods" diagnostics.  New additions:
[33m3040f21[m Factor our the selection of "alternative" literal type suggestions.
[33m00e4a84[m [stdlib] Begin exposing the NSString API directly on String
[33m4ddd82c[m As soon as a (partial) solution becomes worse than the best solution, stop.
[33m51a5a3c[m turn on DI for ObjC classes, resolving: <rdar://problem/11937539> implement a definite initialization checker in swift
[33m8cc1dc4[m Only consider relative scores when the fixed scores are identical.
[33me37897b[m SILGen: Always emit physical access to stored properties in 'init' and 'destructor', even for @objc stored properties.
[33m79f8175[m Solver: Keep track of a solution's score as we're computing it.
[33mac7ee4b[m release note DI of ivars.
[33m375c92a[m Turn on DI for derived classes.  Except for @objc classes, it now ensures that all ivars in all cases are initialized before super.init is called.
[33m47aa689[m Teach DIMemoryUseCollector to handle "derived self" versions of the MarkUninitialized instruction.  The ugliness here is that 'self' is stuck in a box (not promoted to a value) by SILGen because super.init can change it.  This requires some ugly but effective pattern matching to be able to look through the loads and stores involved.
[33m16c15ca[m Remove an unused typedef
[33mbf39481[m introduce a new "derived self" form of mark_uninitialized.
[33ma30e873[m teach SILBuilder::emitStrongRelease that copyaddr and assign instructions cannot decrement a retain count when they are initializations or of trivial types.  This allows us to zap some retain/releases being emitted by silgen, particularly when accessing self ivars.
[33m951fd56[m Track the # of solutions computed and discarded.
[33m5bb053c[m Fix renamed file names
[33m691111e[m Split constraint system solution ranking into a separate source file.
[33mee545e9[m Rename TypeCheckConstraintsFoo.cpp to CSFoo.cpp.
[33ma6bd190[m Split the core implementation of ConstraintSystem into its own file.
[33m72c1e8c[m Split constraint simplification into its own source file.
[33m0889319[m Pre-calculate and store the type variables referenced by a constraint.
[33m52d611a[m Add, use factory methods to create constraints.
[33m715cb8d[m AST: Quell truncation warnings in ArchetypeBuilder.
[33m0aff0a2[m Turn on DI for init methods in root classes that are not marked ObjC. We are inching towards DI world domination.
[33m0566ebd[m Fix a bug in in our tuple-element dataflow propagation, where global "partial liveness" would overwrite local "always live"ness. Always liveness on a local level always makes a value live-out, even if it is partially live in.
[33m4c16619[m Remove some vestigial code for creating per-iteration constraint graphs.
[33m1179409[m Replace the type variable -> graph node dense map with an embedded pointer.
[33m2dbc501[m s/ConstraintGraph::Node/ConstraintGraphNode
[33m0d20749[m teach DI of class ctors (not enabled yet) to tolerate extraneous retain/release instructions.
[33m25a7832[m [Frontend] In FrontendOptions.td, add aliases for '-I'/'-F' options with '=' as separator.
[33ma0403e3[m [AST] In DeclContext::getDeclaredTypeOfContext() make sure that the extension context has a resolved TypeDecl to use.
[33m5ef027c[m [Sema] Fix crash when checking for overrides among erroneous declarations.
[33m32da0cd[m [ClangImporter] Fix a crash in the clang importer, due to not taking into account imported macros.
[33mc28d460[m [AST] Make ClangNode a class.
[33m041a49b[m [Frontend] Add '-module-name' to FrontendOptions.td.
[33mfcf3cc2[m Give GenericFunctionType a substGenericArgs method.
[33m0a929d3[m Assert that PolymorphicFunctionTypes don't get used as interface types.
[33m7efe2eb[m Lazily borrow the context initializer type as the initializer interface type for non-generic ConstructorDecls.
[33m864ed38[m Add getGetterInterfaceType and getSetterInterfaceType methods to property decls.
[33m5a08bfa[m Extend SubstitutableType::getName() to handle dependent substitutable types.
[33maed29b4[m When r10841 turned on DI for struct init methods, it started SILGen generating new mark_unitialized instructions.  These defeated the alloc_box to stack promotion pass, so everything ended up on the heap, leading to really terrible performance. This updates things to understand mark_uninitialized, allowing us to promote them.
[33me07994c[m Two changes:  - Fix a misunderstanding I had about ownership requirements in my previous patch:    now any references to value-promoted self do a retain and use a ManagedValue,    just like the semantic load path used to.  This is the change to visitLoadExpr  - Second, change argument lowering to drop the "self" argument of normal class    methods into a constant reference, instead of making a box for it.  This    greatly reduces the amount of SIL generated for class methods.
[33m61f227c[m Refactor ArchetypeBuilder to work with abstract generic parameters.
[33m73ea257[m remove an old and apparently unnecessary hack in pattern lowering for arguments. Disable the copyaddr peepholes when the loadexpr is from a constant VarDecl.
[33m8c7ff5b[m inline a lambda into its only caller.
[33mc1b30b8[m remove CleanupDestructorSelf, which was only used by now-removed destructor logic for dancing around self issues.
[33mdb0fe52[m Introduce a new CaptureKind::Constant concept to SILGen, allowing it to correctly form closures over 'constant' VarDecls like 'self' in some cases.
[33m0109df6[m This would not affect the display of the demangled type name, but would cause LLDB to fail to retrieve the type, as it went looking for the wrong kind of thing
[33m97ce2b1[m Debug info: Emit dbg.values for self arguments without explicit storage (such as in destructors). Fixes <rdar://problem/15609657> No debug info for self in some cases.
[33m669295b[m Revert "Refactor ArchetypeBuilder to work with abstract generic parameters."
[33m5ec4678[m Add interface type helpers to DeclContext.
[33m6dcb5b0[m IRGen: Correctly lower index_addr for types where size != stride.
[33m2f18a87[m Add a file I forgot to add in r10970.
[33mb76dbb0[m ClangModuleUnit::getTopLevelDecls: filter out declarations that come from re-exported modules
[33m29bd9c0[m [stdlib] Prototype new protocols for Sequences, Streams, and Containers
[33m155a4ae[m Refactor ArchetypeBuilder to work with abstract generic parameters.
[33mdec95a6[m At Joe's request, rename CaptureKind::Constant -> CaptureKind::LocalFunction, and LocalConstants -> LocalFunctions
[33mec2beb4[m Debug info: Let cleanup instructions that appear in the middle of a basic block share the location of the previous instruction. Fixes <rdar://problem/15597915> Stepping through code occasionally leaps to surprising source lines
[33m1e76faa[m restore an assertion my patch removed incorrectly
[33m0e271de[m introduce a new kind of VarLoc to SILGen: "constant".  This is used for VarDecls that are immutable once defined.  This will eventually be used to model 'val' in SILGen, but for now we can use it to optimize some 'self' situations.
[33ma42debf[m fix a few places that missed marking 'self' as an implicit decl.
[33m11ccb38[m AST printer: use getDisplayDecls() to find a list of decls to print.
[33m55e2792[m Serialize @IBLiveView attribute.
[33ma19ab49[m ClangImporter::lookupVisibleDecls: actually populate the cache.  No testcase because we don't do more than one lookupVisibleDecls() call in tests...
[33m12161a1[m Introduce @IBLiveView attribute, only applicable to classes.
[33m3455643[m Rename 'ibaction/iboutlet' attributes to 'IBAction/IBOutlet'.
[33m439ba3e[m Accept swiftmodule files on the command line as partial AST inputs.
[33mb4e4b55[m Rename CompilerInstance::doIt to performParse.
[33m27d96bb[m SIL: Generalize archetype_method to accept concrete types.
[33m725eda9[m [driver] Reimplemented Swift::constructJob() so that it actually produces compile commands.
[33me932743[m [driver] Assert that the linker is only asked to produce outputs of type TY_Image.
[33md456848[m [driver] Added support for differentiating SIL emitted by -emit-sil and -emit-silgen.
[33m40bb91e[m [driver] Added options for -sdk and -g to Options.td.
[33ma56ba25[m [driver] Added temporary output in Command::execute() to print out commands as they are executed.
[33mb75cb37[m Reapply r10534 in a more convenient form.
[33m378a425[m Allow @transparent on computed VarDecls.
[33m9d2f571[m IRGen: Factor logic to look up witness tables out of forEachProtocolWitnessTable loop.
[33mdfe6646[m Micro-optimization: replace ActiveConstraints set with a bit on Constraint.
[33mcdb7413[m Remove the FIXME and the conditional from Decl.cpp Decl::isTransparent()
[33m30b6302[m Introduce a basic worklist into the constraint solver.
[33m3d9f94e[m Properly implemented "swift_driver -driver-print-bindings".
[33mf556ee5[m Added a few initial tests for swift_driver.
[33med20385[m Initial set of changes to add a new 'swift_driver' executable.
[33m8fcb7c4[m AST printer: print declarations from a module in alphabetical order
[33m7d9c88d[m update comment for "constructor" -> "init" syntax change.
[33mcd59522[m Zap an unused method
[33mf8e2273[m Mangler: Make sure to restore the state of the mangler after binding generic parameters from parent decl contexts. Fixes <rdar://problem/15599314> Crash in the Mangler.
[33md4664f6[m Don't inject trivial bindings when applying a partial solution.
[33m680a5ba[m Introduce a per-constraint system constraint graph (optionally).
[33m5c8e9bc[m split SILGenFunction & SGFContext out to a new header, to trim down SILGen.h to being global stuff.
[33me385446[m Debug info: Get the storage size of basic types from llvm::DataLayout.
[33m61eb9b1[m (Optionally) Evolve the constraint graph during simplification.
[33m59e5272[m SIL: archetype_method and protocol_method will have simpler requirements in the new regime.
[33me9deb9e[m Add an -emit-sil-protocol-witness-tables flag.
[33m80d0e03[m Don't path-compress the fixed type for a type variable binding.
[33m9834389[m [stdlib] Rip out mistakenly committed test code
[33m01b2a39[m [stdlib] Add a length property to NewString
[33m1ca699e[m [sil-mode] Make sil tab stops vary by 2 and standardize tab width to 2.
[33m2397fbd[m Fix some identation in a test case.
[33m29c8172[m [sil-mode] Remove trailing whitespace.
[33mca0d9fb[m [sil-mode] Change two (if (not ...) ...) -> unless and fix a capitalization error.
[33m1e795f2[m Add sil_vtable highlighting to sil-mode.
[33m045b9eb[m [cse] Add support for metatype.
[33m5f928ef[m Constraint graph operations: merging nodes, removing nodes, binding type variables
[33mb3b50b0[m Refactor out the isIdenticalTo code into a visitor pattern.
[33mc635294[m Fix verification of the constraint graph
[33mf78476a[m Fixed a broken test.
[33m5b333cd[m Track fixed bindings within the normal adjacency info.
[33md569de7[m [cse] Add support for tuple_element_addr.
[33m0bdb3a3[m Eliminate unused parameters for constraint graph add/remove adjacency methods.
[33ma5febc6[m Track discriminators for closure expressions.
[33m6a77613[m Code completion: don't substitute generic parameters if the actual parameters are just canonical generic types
[33mbc9cb71[m Debug info: An Int1 still occupies 8 bits. Fixes rdar://problem/15474135.
[33m1c8b70d[m comment fix
[33m2a7de8f[m Introduce a SILWitnessTable class.
[33m0372bed[m Give ProtocolConformance a 'printName' member.
[33m0ff977d[m Add a 'WitnessMethod' enumerator to AbstractCC.
[33m651f858[m Represent all type variables within the constraint graph without simplification.
[33ma740587[m add missing comment.
[33m6681885[m Mangler: Clean up the Qq DeclContext mangling by cloning a fresh mangler. Fixes <rdar://problem/15476638> Qq mangling points to wrong DeclCtx.
[33m1f44c9d[m Allow marking generic functions with the transparent attribute by lifting the current restriction.
[33m704bbba[m Make the order of specializing functions deterministic.
[33mccf3a12[m Add a simple generic specialization pass.
[33m395b8f4[m SILSerializer: handle sil_global and sil_global_addr.
[33m5ada4c8[m teach definite initialization about root classes.
[33m63da4ac[m [cse] Change order of header includes so swift is before llvm to match other passes.
[33mb5b3820[m [sil-combine] Change order of header includes so swift is before llvm to match other passes.
[33m4379283[m Remove inclusion of SILPasses/Passes.h into Subsystems.h and update all relevant files.
[33m559cc87[m Forgot to include this in r10877. *DOH*.
[33mb3fd8e9[m Refactor out SILPass declarations from Subsystems.h => SILPasses/Passes.h.
[33m707d04c[m Clang importer: always expand out the (Objective-C) protocol list.
[33m0a85353[m s/verifyParsedBase/verifyCheckedBase
[33m2055386[m Debug Info: Move the argument ordering logic into IRGenSILFunction and get rid of the hack that used to be in IRGenDebugInfo. This commit also adds a bunch of interesting testcases for function args. Fixes <rdar://problem/15464454> Arguments sometimes go missing.
[33mf249fbd[m Update diagnostic name for Enumerable -> Sequence rename
[33mba5351a[m remove the "allOfThis" initialized logic, which is dead now that structs and enums are handled by DI.  You can't assign to self in a class ctor (not currently rejected, but presumably will be when we have 'val').
[33mfb9e0c2[m Allow a user-defined conversion before converting to an existential type.
[33m1363140[m Correct assertion message
[33mc69c069[m Enhance sema to know to never give imported C structs a default initializer, they should always use their memberwise init method.
[33mc3aacf3[m End sentences with a period. Period!
[33madb4fb0[m Separately rank the partial solutions for each connected component.
[33m7ab9d36[m [stdlib] Rename Char => UnicodeScalar
[33m02c5b92[m [stdlib] Release note for Enumerable => Sequence change
[33m0bbf7c9[m Give ConstraintSystem::findBestSolution() a more reasonable return type.
[33m4c0e6ee[m [stdlib] Rename Enumerable => Sequence
[33m2055707[m [cse] Remove load/store code from CSE.
[33mb59ea21[m [cse] Refactor hash switch into the SILInstruction visitor HashVisitor.
[33mdc69898[m [cse] Change main worklist to use a vector instead of a deque.
[33m32c3430[m [cse] Move cse to be before SILCombine as per Chris's suggestion.
[33m715b37b[m [cse] Move subsystems header to be first since it defines the interface to the file.
[33m8063a4a[m expand release notes for precedence change with some rationale.
[33m9ffb31e[m a few pedantic like tweaks, more important stuff sent through email.
[33mb0c883c[m [cse] Add support for tuple_extract.
[33mf3d1c51[m [cse] Add support for tuple.
[33ma5d76c9[m [cse] Add support for struct_element_addr.
[33md6f3c52[m [cse] Add support for struct_extract.
[33m14e945e[m [cse] Make sure that we distinguish in between structures that have the same structure but different struct decls.
[33m4428b3d[m [cse] Add support for struct literals.
[33mcdbeb69[m Turn on DI for struct init methods!  - Change silgen to generate mark_unintialized so DI does its thing.  - Change Sema to not generate an init() method if some stored member has no initial value.  - Change Sema to disable its horrible horrible heuristic that scans init() bodies to try to decide whether members are initialized.  - This doesn't handle structs imported from clang yet.
[33m2881fd7[m Convert a group of std::sets to DenseSets on principle.
[33m417b5d3[m Merge TranslationUnit into Module, and eliminate the term "translation unit".
[33m5dda63a[m Remove LoadedModule, and strip ModuleLoader down to just loading things.
[33mf5eae17[m Move VectorDeclConsumer to swift/AST/NameLookup.h.
[33mbe12d86[m Turn ClangModule into ClangModuleUnit.
[33m68272b1[m Remove FailedImportModule. A failed import is now represented as an empty TU.
[33m8b8cc8e[m Turn SerializedModule into SerializedASTFile.
[33md0d6611[m Move lookupQualified from Module to DeclContext.
[33meede5ec[m Begin refactoring for mixed file kinds within a single module.
[33m17b21b8[m DI scalarizes multi-element load/store/copyaddr instructions as a form of canonicalization.  However, structs will soon be modeled as multi-element accesses (and we don't want to scalarize them), so we have to handle non-scalarized versions of these.  NFC.
[33m892a900[m Track a discriminator for named declarations (except physical vars) in local contexts, for future use in mangling.
[33mf08ee12[m stdlib/FloatingPoint: add APIs to handle special floating point values
[33mcae5eba[m isDefinition() should return IsDefinition.
[33m463e52b[m [cse] Add support for string_literal.
[33m05899b7[m SILParser: parse sil_global and sil_global_addr.
[33m15be357[m when DI is reporting an error about a multi-element access, indicate the first element that is undefined, not the first element being accessed.  In the example, passing the tuple inout uses both elements, but the first element is initialized, so we should complain about t2.1 being uninitialized, not t2.0
[33me24a5ea[m Remove two already-fixed FIXMEs
[33me2b8312[m Code completion: try to substitute generic arguments when completing a constructor reference
[33m942b490[m Copy and paste error: we do not have a ** operator
[33ma0335b7[m Convert typeCheckBinding() over to a listener on top of typeCheckExpression().
[33mee52ddd[m [cse] Add support for float literals.
[33me0a8f7f[m RelNote the operator precedence simplification
[33mecb3563[m 11242731 simplify precedence of binary operators
[33m46375f2[m Switch typeCheckArrayBound() over to a listener on top of typeCheckExpression().
[33m51acb02[m Element analysis applies to more than just tuple elements now, just refer to them as elements of the memory object, not as tuple elements.
[33mee28dce[m Switch typeCheckCondition() over to a listener on typeCheckExpression().
[33m44147a9[m Fix indentation
[33m468e143[m Rework MemoryUseCollector to individually collect struct field members as individual elements when processing the 'self' decl in a struct init method.  This isn't exercised yet.
[33m3194e88[m add a helper for ref_element_addr that doesn't require a result type, mirroring tuple_ and struct_element_addr
[33mb3cf7d7[m Code completion: remove redundant parentheses that were being shown in the types of the implicitly curried instance functions
[33ma84e428[m Make TypeChecker::preCheckExpression() static.
[33mea5efaa[m Remove the hack that inserts a '!' in implicitly-generated checked casts.
[33m7525fdd[m Switch typeCheckExpression() callbacks over to a more-sensible abstract interface.
[33mc99958d[m [cse] Small cleanup.
[33m25d0ab2[m Code completion: substitute generic parameters in references to members of metatypes
[33m8ca4269[m [cse] Add support for global_addr.
[33m3d4da69[m In "x as T", type-check the subexpression "x" using "T" as the context type.
[33m78330be[m [cse] Add support for BuiltinFunctionRefInst.
[33m5aebcfb[m [cse] Added support for function_ref.
[33mfb0fa90[m [Frontend] Parse the main file last to make sure implicit visibility works.
[33mf2b8c09[m [cse] Initial implementation of EarlyCSE Port.
[33m7e3cfd4[m demangler: don't consume the same character twice
[33ma5cd783[m Remove redundant code
[33mc7c15d6[m Added missing newlines to the end of a few files.
[33medad9e4[m Remove OverloadChoiceKind::IdentityFunction.
[33m95ebc6b[m Eliminate the use of the T(x) syntax as type coercion.
[33m6d3f2f9[m Code completion: when completing a reference to a variable that comes from a generic nominal, substitute known generic parameters if possible
[33m541c04f[m Code completion: switch constructor completion from using argument patterns to use type of the constructor member
[33md076501[m Don't repeat Context.getIdentifier("self") everywhere in the code base
[33meb67ae9[m remove dead code for scalarizing accesses to structs.
[33m4d3e475[m Fix typo in example
[33m627f0ae[m Allow "x as T" to perform implicit conversions from x to T.
[33m5a878c2[m Move tuple flattening functions into DIMemoryObjectInfo now that they fit there.
[33m6fdb5f9[m introduce a new abstraction for handling the memory object being analyzed, and use it as common currency between the element use collector and its clients.  Element collection is about to become more nuanced.  NFC.
[33mc4f9cd1[m Make a function static.
[33m3289b6e[m Start emitting "mark_unitialized [rootself]" for the self argument of enum ctors, and add minimal updates to DI to tolerate this.  Doing so exposed a bug that would cause DI to crash handling conditional destruction of mark_unintialized (which was never possible before since globals aren't destructed).
[33me4c2231[m Add some operator-> implementations to iterators to match their operator* implementations.
[33m50f0de5[m rename the still-unused "rootinit" enum in MarkUninitialized to "RootSelf". Teach silprinter to print the new flag.
[33mc350114[m [IDE] Fix a typo that caused a crash. <rdar://problem/15580756> Crash in ModelASTWalker::walkToDeclPre() when opening a document in Xcode
[33me974992[m Code completion: when completing a call to a function that comes from a generic nominal, substitute known generic parameters if possible
[33m12c525a[m Code completion: add parentheses in all cases when completing enum elements with payloads
[33m567a317[m extend the mark_initialized SIL instruction to have a "kind" enum field. Existing uses use a "globalvar" kind.  Add a new "rootinit" kind which will be used for root initializers (i.e. init methods of structs, enums, and root classes).
[33m90f7847[m Change ValueBase::replaceAllUsesWith to only go over the use list once.
[33m878cf0b[m Rename SILInstructionMemoryBehavior => MemoryBehavior and move MemoryBehavior into SILInstruction.
[33md00dc87[m Change TypeBase::getTypeOfMember to accept a const pointer to the AST node
[33m69a4cfb[m [IDE] Add InheritedTypeRanges to SyntaxStructureNode. Add tests to cover name source range and inherited types to the structure tests.
[33m4d827aa[m Replace an unnamed namespace with a static specifier on the function
[33mf81f8bd[m Change mayWrite => mayWriteToMemory and mayRead => mayReadFromMemory to match the same methods in LLVM.
[33m007d397[m Use a proper mangling to try to share reabstraction thunks.
[33m4d4985c[m [sil-combine] StructElementAddrInst has only one result. Use the special replaceInstUsesWith since it will be faster.
[33m627488f[m Add an option to the Demangler to not show the type of ivars when displaying their "field offset" symbols iVars of a given type should be unique by name and so in certain cases, their types will not actually add information to a consumer of the demangled string This mode is mostly useful for LLDB. When searching for a field offset by name in a generic scenario, the search can succeed or fail depending on whether archetypes are obtained through the Demangler ("A","B","C") or through the module (which will vend proper archetype names when poked the right way) This mode removes that ambiguity
[33m301a42f[m Move SILInstruction::replaceAllUsesWith -> SILValue::replaceAllUsesWith.
[33m1d03ec3[m [sil-combine] Set the insertion point of the builder after we have run the instruction through simplifyInstruction.
[33m08181f9[m Refactor out all result replaceAllUsesWith from SILCombine into SILInstruction::replaceAllUsesWith.
[33m37a68b7[m Ensure that we don't end up with interface types that involve type variables.
[33m498a2a9[m [sil-combine] Add an overload of replaceInstUsesWith that handles replacing only one result with another result instead of all results.
[33mc210d23[m [sil-combine] Change replaceInstUsesWith so that it replaces all results instead of just the 0 result.
[33m55a05b4[m [cse] Actually follow the directions from Hashing.h and put hash_value into swift namespace. Also remove a few const.
[33ma8e3a42[m AST verifier: determine the AST node base class by consulting .def files, instead of hardcoding it everywhere.  This change also adds a few missing calls to base class verifier functions.
[33me2bb01f[m AST printer: don't forget to pass down printing options when printing tuples and function return types
[33m67f3115[m Customize diagnostic for using anonymous closure arguments in a closure with explicit arguments
[33m6ea1925[m AST Verifier: dispatch to verifier function for the base class AST node type
[33m41e92af[m Mangler: Add a DWARF-only mangling for type aliases that includes the decl context of the type alias. This implements <rdar://problem/15290346> "typealias sugar needs to be mangled into debug info mangled type names".
[33m002038a[m Allow a comma-separated list of init expressions in C-style for loops.
[33mce97654[m Permit Type::transform and Type::findIf on SILFunctionType. Disallow Type::subst more specifically.  Add findIf support for reference storage types.
[33m946fbf7[m [utils] buildbot-script.sh: Create XCode projects that can be opened in XCode
[33mfaea4d5[m [cse] Implement hash_value for SILValue and SILType.
[33m9e77cf2[m Canonicalize the header guards for SILType.h and SILValue.h.
[33md8d1393[m Implement SILInstruction::isIdenticalTo for all literal types in preparation for CSE.
[33ma822eca[m use SmallStrings instead of std::string
[33mf2e8e4b[m Debug info: Emit L-Values as indirect would be redundant, because they are already reference types.
[33m38b9b25[m Add getTupleType/getStructDecl to TupleInst/StructInst respectively to wrap getting TupleTypes/StructDecls from the AST.
[33mc2342df[m Removed trailing whitespace.
[33m177f48a[m Change SILSuccessorIterator++() to be a canonical preincrement and add in a postincrement operator.
[33m90082a5[m Add in a swift namespace typedef DominanceInfoNode for llvm::DomTreeNodeBase<SILBasicBlock>.
[33mb91d335[m teach DCE's "isUserCode" predicate to ignore autogenerated code, like the conditional destroy logic generated by DI.  This silences a bogus warning building the stdlib, in which DCE is proved that conditional destroy logic wasn't needed.
[33m7e95367[m [PatternMatch] Change m_Apply_Ty => Apply_match to match the rest of the matcher structs.
[33maeddc57[m enable definite init for generic enums initializers as well.
[33mf890405[m @objc inference: disallow @objc on static properties, since they don't exist in Objective-C
[33mebddf90[m [IDE] Update the character source ranges for structure nodes so they properly span the entire end token.
[33m1ec5094[m [IDE] Add a structure test for property in the syntax model. Adjust the range to include the type.
[33me686707[m [IDE] Don't pass token nodes during popStructureNode() as it's not necessary.
[33m5061ee5[m stop emitting initialize_var instructions in enum constructors.  This is all we need to enable DI for enum constructors.  Structs and classes are more complex, and the diagnostic produced is not great.  This resolves rdar://14922277.
[33m8640266[m remove the RemoveDeadAddressingInstructions helper, in favor of the more fully featured "recursivelyDeleteTriviallyDeadInstructions".
[33mf7c8970[m rename a testcase.  It doesn't make sense to have both a definite_init.sil and definite_initialization.swift.
[33md2adddd[m Now that memopt is its own SIL pass, split it out to its own file.  Now the file sizes are more reasonable and better structured.
[33mdadc9fc[m split predictable memory optimization (load promotion + alloc deletion) out to its own SIL pass.  The bulk of this patch is updating the DI testcase to detangle DI tests from load promotion tests.
[33m78e5e98[m move the ElementUseCollector out of DefiniteInitialization.cpp
[33m92594b9[m DI is over 3000 lines of code now, and should be split into two separate passes.  Start splitting some utility functions out, and rearranging code a bit.  While I'm at it, rename some bits to make more sense now that their purpose has settled.
[33mdac8624[m Don't merge the TVO_PrefersSubtypeBinding bit; it doesn't affect solving.
[33md52887c[m Constraint graph WIP: collapse two nodes into a single node.
[33m3e290f4[m Use a intrusive doubly-linked lists for active/retired constraints.
[33m486d6e6[m 15242776 relnote: Slice and Array are now merged.
[33m83f953b[m 15242776 docs: Replace "Slice" with "Array"
[33md08712c[m 15242776 stdlib: merge "Array" and "Slice" into Array.swift
[33m8bd3582[m 15242776 stdlib: rename Slice to Array
[33m78dd42e[m more minor cleanups, things are settled now.
[33m722436c[m the main liveness analysis loop doesn't need escape analysis, the load promotion pass doesn't need anything more than a set of blocks that have local definitions.  Simplify code.
[33m005e9a8[m Fix memory corruption with trailing closures
[33mf36e720[m The AllocOptimize phase doesn't need a full LiveOutBlockState, make do with a single bool instead.
[33mb8d628d[m ingloriously fix the serious DI problem: <rdar://problem/15511392> DI cannot promote loads until the initialization semantics of an entire function is known
[33mdc9e21e[m implement support for conditional destruction of tuple elements.
[33mb84fd18[m implement support for full conditional init/assign processing of tuple elements, generating the appropriate shifting and or'ing of bits in our liveness mask to treat each tuple element separately.  This allows us to compile something like:
[33m27a94b9[m add some helpers to SILBuilder, NFC.
[33mf0f997a[m rework the conditional init/assign algorithm to generate destroy_addrs instead of generating a CFG diamond with a copy of the store (in init and assign forms) on each arm.  This generalizes to operations that touch multiple tuple elements better.
[33mecfba9f[m Rename getBuiltinValue -> getBuiltinValueDecl since it doesn't produce a value, it produces a decl.
[33m5a29366[m Fix the test for builtin_function_ref SIL instruction change
[33mad05efc[m Redesign the BuiltinFunctionRefInst to contain an Identifier instead of a FuncDecl.  This makes it much more straight-forward for SIL passes to introduce a new one - without doing name lookup in the builtin module!
[33ma5cf0fa[m Hoist the FuncDecl out of builtin function IRGen, working in terms of the simpler Identifier instead.
[33m3b954ed[m strength reduce SILGenModule::getBuiltinInfo/getIntrinsicInfo to take an identifier instead of a FuncDecl.
[33ma0fc29b[m strength reduce a few calls to get builtin info.
[33m9410440[m don't pass a FuncDecl into functions that ignore it.  Don't recompute the BuiltinInfo for an intrinsic when we already have it on hand.
[33m173f130[m move 'const' to the right spot.
[33m1a612b6[m rewrite the logic to handle conditional destroys to use the same control variable as is used by conditional inits.  This allows some simplifications and sharing of concepts, and makes sure that we emit at most one control variable for each memory object being DI'd.
[33m583d93f[m Implement support for DI emitting conditional control variable that tracks the liveness of a memory object throughout the flow graph.  This implements support for conditional liveness (e.g. the testcase) of general types, but top level tuples are not handled properly yet.  This is progress to implementing rdar://15530750.
[33mec283ac[m add a SILInstruction::clone method that does a trivial copy of an instruction.
[33mb312116[m adopt IsInitialization_t in LowerAssignInstruction, and inline handleInconsistentInitOrAssign into its caller, since it will remain simple.  Also, add an assert to make sure the handleStoreUse covers all instructions possible in it.  NFC.
[33meeb1b16[m now that things are rearranged to our liking, introduce a new function to handle stores that are either an assign or an init, depending on the control flow leading to them.  This case needs to have a diamond inserted in the CFG in the general case.  For now, we whitelist trivial types, since init and assign are the same for them.  This fixes rdar://15530750 for trivial types.
[33m4a50ba4[m further improve classification: coming out of silgen, we don't know if anything is a proper reassignment: we only know that it could be either InitOrAssign or Init.  Classify stores as such, and then have DI classify things into Assign when it is clearly an overwrite.  This allows later iterations to avoid reanalyzing generated instructions and allows more precise reasoning about ambiguous initializations.
[33m8e1b68e[m refactor a "InsertCFGDiamond" function out of the conditional destroy logic.  NFC.
[33m3e20621[m introduce a new store classification "InitOrAssign" since the trivial type stores coming out of SILGen are unknown whether they are init or assign. No functionality change.
[33mb3955c6[m [stdlib] NewString.swift: work in progress
[33m06ec5ff[m Remove debugging-only vector of solved constraints. It doesn't help.
[33m3a71c85[m Remove the notion of a cutpoint from the solver; we no longer need it
[33mcc75981[m Solve different connected components in isolation, then combine the results.
[33mc8523f3[m Solver step: separate "what constraints to solve" from "how to solve it".
[33m8cd63c9[m Use the constraint graph to isolate and solve the smallest connected component.
[33m4fc5c96[m Mangler: Eliminate an ambiguity in the mangling of contexts. <rdar://problem/15444866> Mangling is ambiguous -- may want prefix for functions
[33m8fdf6fe[m Provide a place to collect folk wisdom for implementors.
[33mb0276bd[m Debug info: Emit the names of struct members when emitting their types. I'm somewhat surprised no one complained about this before.
[33m5d9b955[m Overload-binding constraints can have base types; add those adjacencies.
[33md40c6e1[m Debug info: Assign the location of the terminator to cleanups. Yay! Less hacky. <rdar://problem/15510646> Current line seems incorrect after single stepping from breakpoint
[33me28c425[m Compute connected components for the constraint graph.
[33mf4a8b5e[m More documentation for the constraint graph
[33mccf0137[m Introduce a constraint graph to track relationships among type variables.
[33m7c2f5cb[m [sil-combine] Small cleanups.
[33m81ab638[m Add a template specialization to PatternMatch::match for SILValue to eliminate need for match(&*Value) to match.
[33m510ed4c[m Introduce a new use classifier: "Initialization".  This allows us to tag things known from SILGen to be initializers (e.g., copyaddrs with the bit set) and when we analyze the DI properties for an assign, we can move it to this classification.  This allows stuff that wants to reason about the difference (e.g. the conditional destroy logic) to do so precisely.
[33m3493b05[m Eliminate debug spew in release builds
[33m214fc4c[m Debug info: Don't emit duplicate debug info for existential types and fix indirection flag on lvalue parameters.
[33me84acdb[m one more lvalue -> addr in a parameter name.
[33m795656f[m Have DI generate control variables and conditional destruction logic for destroy_addrs of memory that is only live on some paths.  This finally wraps up rdar://15209088.
[33meb88f82[m parameter naming changes: refer to addresses, not lvalues in SIL.
[33m76bfe8d[m [DCE] Add more stats.
[33m88b0eda[m [stdlib] NewString: conversion from string literals
[33ma29a877[m [docs] SIL.rst: fix another ReST error
[33m283662f[m [docs] SIL.rst: fix ReST error
[33m84b649e[m Cleanup: construct the names of builtin types on the fly.
[33me95dc16[m Describe SIL function types, the restrictions on SIL value types, and the problem of abstraction difference.
[33m60515e9[m [CCP] Add folding of more binary operations (shifts, bitwise &|^, op on floats).
[33mead8ede[m [CCP] refactor: rename + method extract
[33md2cc658[m Debug info: typeargs are always direct values even if they are shadow-copied. <rdar://problem/15476354> $swift.type arguments emitted as 'deref' in DWARF
[33m75afc03[m Add project directory local variables for Emacs users
[33m0428eea[m Introduce --debug-constraints-attempt=N to debug a specific constraint system.
[33m4ac8b87[m [docs/tests] Move prototypes into a dedicated test subdirectory
[33mc0cf0e7[m Remove spurious debugging output
[33m516fc3a[m Track constraint solver statistics for the largest system.
[33mab6d002[m Add a couple statistics for the constraint solver
[33mb44fc94[m [sil-combine] Small cleanup to the peephole from r10619 suggested by Chris.
[33mb8e7ca2[m Only check elements that we care about.  This is only a cleanup, no functionality change.
[33m1f55287[m teach definite init to correctly handle releases of tuples where each element has a known yes/no liveness, as a generalization of the "none are alive" logic.  Now the only piece missing is the flow sensitive liveness case.
[33m0e6bec9[m Enhance emitDestroyAddr to return the instruction it produces, if it does.
[33m8f439ae[m Remove unused OverloadChoiceKind::FunctionReturningBaseType.
[33m1975952[m Allow delayed identifier expressions (.foo) with static variables and methods.
[33m2c109ff[m Rename checkDefinitelyInit -> getLivenessAtUse, and split it into two methods: one that determines the liveness of a set of elements at a point in the CFG, and one the merges the result across the elements used by a particular access.  The getLivenessAtUse is useful for traditional DI properties, but the vector-returning one is important for analyzing the liveness at a release.  Still no functionality change.
[33m78cc047[m improve encapsulation by introducing a new AvailabilitySet type that wraps llvm::SmallVector of bit pairs - centralizing the logic for working on it, and abstracting the bit pair encoding.  Also add a comment describing what this is doing in lattice theoretic terms.
[33md052644[m Clean up the computation of potential bindings.
[33m4b882d8[m [sil-mode] Teach sil-mode how to highlight "mark_uninitialized" and "mark_function_escape".
[33m4bba9b3[m Make several new interfaces traffic in AbstractionPatterns.
[33md0090d7[m Make CanType's operator bool explicit.
[33mf47d871[m Reapply "[sil-combine] (struct_extract (load %x) #vardecl) -> (load (struct_element_addr %x #vardecl))"
[33m6e075ae[m Add the missing debug scopes to functions cloned by the capture promotion pass.
[33ma3960c4[m silentium!
[33m5c81290[m Revert "Revert r10613, the debug info problems are significant."
[33m98ab121[m simplify testcase, no functionality change.
[33mc5034f8[m Revert r10613, the debug info problems are significant.
[33m41e3d0f[m Re-commit Stephen's patch: Enable capture promotion pass by default
[33me05b4a4[m Revert "[sil-combine] (struct_extract (load %x) #vardecl) -> (load (struct_element_addr %x #vardecl))"
[33mb1ac7ba[m [docs] Fix all ReST/Sphinx warnings, turn sphinx warnings into errors
[33m07ce530[m add a SILType::isTrivial helper function.
[33m5ad19d5[m Revert "Enable capture promotion pass by default"
[33md78a328[m AST: Give AnyFunctionRef.h a getInterfaceType() method.
[33m3c10621[m [docs] Suppress "not included in any toctree" warning in CMake build
[33m4208d36[m [sil-combine] (struct_extract (load %x) #vardecl) -> (load (struct_element_addr %x #vardecl))
[33m2138426[m Diagnose partial applications of (non-class-bound) generic methods.
[33m53f7779[m [Sema] Fix crash when applying '@objc' to an invalid method.
[33m4244463[m Debug info: don't crash when handling enum-like enums. <rdar://problem/15418642> Swift compiler crashes when producing debug information
[33m83d9db4[m Member references can produce metatypes.
[33mb1bbbac[m Correct the mangling of SIL results to include the ownership convention.
[33mcb4ba7a[m Enable capture promotion pass by default
[33md739cd9[m Handle broken closures more gracefully.
[33mc3907b3[m Teach DI to remove destroy_addrs on paths where the memory is always uninitialized.
[33mba6362a[m Update VOID mangling for block shims.
[33md8e8c36[m [utils] buildbot-script.sh: speed up incremental builds by not configuring when CMakeCache.txt exists
[33m6fc5d91[m [utils] buildbot-script.sh: no, you can't pass -o pipefail et al on the bash command line
[33mf2055ca[m [Parser] Fix crash when parsing top-level 'for i' in '-parse-as-library' mode.
[33mbd1f074[m Properly escape string literals when printing them in SIL.
[33m3c897bc[m IRGen: Use the parameter convention of 'self' when partial_apply'ing ObjC methods
[33m7fca2d8[m Debug info: Encode the provenance of types imported from Objective-C in the debug info. <rdar://problem/15414884> Debug information must indicate location of Objective-C types
[33mb360633[m Fix a compile error in release mode.
[33mc13f84c[m [utils] Rename the user-facing build-and-test script
[33mbb0ab1c[m [utils] Add a user-facing build-and-test script
[33md530ebc[m [utils] buildbot-script.sh: Build test binaries in parallel before running lit
[33m61360de[m Reabstract scalar arguments correctly in normal argument emission.
[33mf2edd61[m Don't give IRGenDebugInfo privileged access to the TypeConverter.
[33m84cf9d1[m Cope with local functions within a generic context that have no captures.
[33madcae9a[m Remove trailing whitespace.
[33ma18e25f[m Add SILArgument/SILUndef includes to PatternMatch.h since we generate matchers for SILArgument, SILUndef.
[33m8c2cc82[m Mangle local property getters/setters as closures.
[33mfda0b16[m Quell warning about non-virtual destructor.
[33m84ab2a4[m SILGen: Peephole physical lvalue-to-lvalue assignments.
[33m2f8a60d[m Silence a warning.
[33m20e58dc[m Change the type of function values in SIL to SILFunctionType. Perform major abstraction remappings in SILGen.  Introduce thunking functions as necessary to map between abstraction patterns.
[33m07b7bf7[m Add a mangling for SILFunctionType.
[33m614ab66[m Fix a bug Joe found in DI: when exploding a copyaddr that is loading from our current allocation, we'd sometimes add loads corresponding to the "assign" to the use list for this memory object.
[33m3a1d504[m [Parser] Fix crash-on-invalid, with top-level statements and -parse-as-library.
[33m934f02f[m Remove unnecessary #include.
[33m5caa24a[m IRGen: Use swift_retain/swift_release directly for T? value semantics.
[33m909c2c1[m Have isNonescapingUse() see through enums as well as structs and tuples
[33m4ebdf9c[m Capture Promotion: have new closures inserted before their original versions
[33mcacdcab[m CapturePromotion: correct conditional accidentially reverted in previous commit
[33m1404df0[m CapturePromotion: use existing variable containing callee since it's available
[33me6ab97f[m CapturePromotion: Propogate SILLocation from original closure to cloned closure.
[33mf6b1745[m SIL: Remove 'ModuleInst'.
[33mf099503[m SILGen: Don't expect an override for declarations from class extensions.
[33mc2c15e4[m Disallow use of module values
[33md188fd5[m IRGen: Handle class-existential-to-opaque-archetype cast.
[33m2224008[m move SILFunction::dump out of line, so that LLDB can find it.
[33m15dc496[m IRGen: Lower SILGlobalVariables.
[33m5e94be5[m Fix rdar://15492647 - destroy_addr dropped by DI, causing leaks
[33mc72cc21[m remove obsolete file.
[33m22ff8ec[m Change silparser to parse a sil_vtable with no entries.  This is what you get with a trivial class type and matches what the SILPrinter produces.
[33mae2bdb8[m Enhance DI to know that trivial types don't have complicated cleanup semantics, so they don't need code motion on releases.  This fixes Jordan's testcase from rdar://15209088, though non-trivial types still don't work.
[33mbb6df84[m now that we have a more disciplined approach to copyaddr explosions, we don't need logic to compute conditional access paths.  Simplify the code.
[33mfeee9f6[m pull release processing into the main DI flow, no functionality change.
[33m18fc62f[m 15489271 Adopt @transparent on min/max static var min/max decls of the integer types
[33m2c24ee6[m Switch integer min/max static funcs to static vars
[33maccb165[m 15484346 Disable crashtracer for applications
[33mf22377c[m Fix a concurrency leak
[33m727a0e4[m Fix make build system
[33m5f63cbe[m Move driver test to a correct place
[33mc1b48e3[m Add release notes for 'def' -> 'func' change
[33m81dc5de[m Change 'def' keyword back to 'func'
[33mec0e1e6[m Rewrite most of DI to work on the entire memory object at once, instead of working a tuple-element at a time.  This requires it to use bitvectors to compute each tuple element's liveness separately.
[33m7b9f61d[m SILGen: Emit global var decl refs as calls to the accessor.
[33m562e2bf[m Runtime: Add swift_once function.
[33m3e8fa76[m Dynamically and statically dianose a conversion of a negative integer to an unsigned int.
[33mf4e6b74[m Better handling of overflow diagnostics when user types are not available.
[33ma049ee9[m SILGen: (Optionally) emit lazy initializers and accessor fns for globals.
[33m4c0ebed[m SIL: Add SILGlobalAddrInst.
[33m0cc9417[m SIL: Introduce a SILGlobalVariable concept.
[33mab65140[m Add a 'Builtin.once' builtin.
[33m7c199fa[m AST printer: add a test showing that we can print Clang imported modules
[33meb8122e[m Debug info: Types should not be in the scope of the first variable that is using them.
[33m07bdac2[m silence warning
[33ma1c17f2[m Add a pretty name for 1-bit integers.
[33m2775de4[m releases apply to the entire memory object, not to tuple elements within it, stop tracking them on a per-element basis.  They also don't make sense for global variables, so verify they don't occur there.
[33ma3ea223[m split processing of "release" instructions out to a separate list, since they are handled in a completely different way from other uses and already had to be std::partitioned to the end anyway.  They will only become more different over time.
[33m4962fc6[m merge more and harder.
[33m1935515[m merge the alloc_stack and alloc_box processing logic. NFC.
[33m27ff69e[m Bitpack LiveOutBlockState to fit into a single byte.  Add some tests for empty structs (which already pass).  No functionality change.
[33m1d46859[m This is a temporary Demangler change to allow demangling of function decl-contexts when part of a qualified archetype This "greedy" demangling should not be necessary anymore once <rdar://problem/15444866> goes in As of now, this extension should help LLDB support generics in functions
[33m7119b8e[m Enum case parsing: always set the identifier location during recovery
[33m936cdd4[m Parser: recover better if a keyword is used as an identifier in enum case that appears as a last member.  (Consider r_brace a synchronization token.)
[33m4d44c7e[m Visible decl lookup: clarify logic for functions, no functionality change
[33m47951ef[m Implement code completion support for static variables
[33mcdb6e7b[m Handle 'Bw' -> 'Builtin.Word' mangling in the demangler.
[33m35df6b9[m Snip unused variable.
[33me75ca8b[m AST: Improve modeling of static property references.
[33m8b21e8e[m Add negative integer to unsigned conversion example to release notes.
[33maa0bc1f[m Start demangling the new Qq production that Adrian introduced in r10470
[33mf651e34[m Add static checking for signed <-> unsigned int conversions (for same size ints).
[33m0f390c9[m Add dynamic checking for sign errors(overflows) during signed <-> unsigned conversions for integers of the same type.
[33m7be4b0c[m Release note unreachable code warning and integer conversion overflow detection.
[33m111dd0c[m ClangImporter: Use type name to clip prefix from single-element enums.
[33mb6e5fee[m Allow construction on arbitrary metatype values.
[33ma1f1233[m Enable NS_OPTIONS import by default.
[33m2edcd17[m [Mangler] Fix a bug in the new Qq mangling that would insert the innermost DeclContext of the decl that uses the archetype instead of the actual generic context of the archetype.
[33m19457c1[m Give Builtin.Word an abstract size.
[33m9aceb43[m add a missing split(). Thanks Joe for catching this.
[33m8f53824[m DeadCodeElimination: eliminate eraseAndCleanup and call recursivelyDeleteTriviallyDeadInstructions directly, which is also fixed to do reference dropping, checking for dead operands, and instruction erasures in the right order. No intended functionality change.
[33m60e7263[m Rework the applicable-function constraint to handle its own argument conversion.
[33m6158700[m Correct an error message
[33m16f2b95[m 15466633 _getBuiltinArrayBoundValue should be @transparent
[33m0817145[m Make it a bit easier to propogate expressions around instead of having to lower to an RValue.
[33md5f2162[m enhance the mandatory inline pass to delete the bodies of closures that get fully inlined, in addition to transparent functions which it already did.
[33maca108a[m Point to Wiki for older release notes
[33m2354717[m Only include about a month of history in the release notes
[33mcca343e[m [stdlib] Initial prototype demonstration of a mutable Indexable container
[33md5047c9[m Reject duplicate definitions of enum elements during the first pass of type checking
[33m4968cc2[m A couple of related changes: - Enhance SILBuilder::emitStrongRelease to be smarter. - Start using emitStrongRelease in type lowering, SILGen,   CapturePromotion (replacing its implementation of the   same logic), and MandatoryInlining (one more place) - Rename the primitive createStrongRetain/ReleaseInst   instructions to lose their suffix. - Now that createStrongRetain/ReleaseInst are not special   cases from the naming perspective, remove some special cases   from DeserializeSIL and ParseSIL.
[33m9570e1f[m Remove the "createStrongRetain" and "createStrongRelease" SILBuilder methods. They are the same as createStrongRetainInst and createStrongReleaseInst, but peephole away FunctionRefInst.  It turns out that there is only a couple places in SILGen where this behavior is necessary, and this tramples on the general pattern used in SILBuilder.
[33mb2ac1db[m introduce a new helper to SILBuilder that emits a StrongRelease operation, scanning up the local block to see if it immediately cancels a retain operation.
[33m34f5e43[m [CCP] Diagnose truncation errors in int to int conversions.
[33mf058c52[m Cleanup/Fix comments
[33m305fe6c[m A couple more cleanups: use the SILBuilder helper that wraps emitDestroyValue, and create SILBuilders locally when needed (they are cheap to construct) instead of creating them once and passing them around.
[33m24ce4c0[m more tidying up, e.g. use a helper on SILBuilder, no functionality change.
[33maa79f01[m Replace a condition with an assertion
[33meea8e95[m remove some caveats that have improved a lot.  Generics support isn't perfect, but is a lot better than when that was written.
[33m3830957[m Reenable a case in a switch that joe disabled in r10434.  I think that it was an accident.  If not, lemme know.
[33m3f09766[m secondary cleanups now that bool is a struct: we can directly access .value to convert a Bool to i1 and can use the Bool ctor to convert i1 to Bool.
[33mf0be7f3[m switch Bool in the stdlib to be modeled as a Struct instead of an enum. The primary motivation for this is to generate more svelte and optimizable SIL code.  This resolves rdar://15463130
[33mfdd858d[m ClangImporter: Import NS_OPTIONS constants as static properties.
[33m2b245b1[m MandatoryInlining: rearrange a conditional a bit to be more clear
[33mb687c3c[m Add runtime integer truncation checking to the conversion constructors
[33md9340cc[m MandatoryInlinning: Clean up arguments that end up being unused after inlining, such at metatype parameters to some standard library functions. Resolves <rdar://problem/15218643>.
[33m9753825[m ClangImporter: Rename 'EnumKind::Options' to 'Unknown'.
[33mc1ce33a[m @objc diagnostics: reject @objc methods with tuple-style declarations
[33m9ea8681[m [utils] buildbot-script.sh -- Support building and testing Swift with Xcode
[33mef9bab2[m Fix an off-by-one in r9905, which patched MandatoryInlining to avoid invalidating iterators.  The off-by one would lead to it failing to remove retain/release pairs around partial_apply's on inlined closures, preventing the partial_apply itself from being removed, and thus making it look like lots of values (including self) escape.
[33m991900a[m cosmetic changes, primarily to end comment sentences with a .
[33mb5c0abb[m Sema: Remove 'enum' references from variable names for UnresolvedMember constraints.
[33m3aad110[m buildbot-script.sh: Check for '--release' before '--*'.
[33mf0e2331[m Release note struct/enum static properties.
[33m0eaea16[m SILGen: Handle computed static properties.
[33m66b9f36[m When emitting sibling method calls, callect substitutions from all levels.
[33m5831209[m fix an 80 column violation a different way.
[33m425819a[m Change the SIL string_literal instruction to produce three results (the same way alloc_box returns two) instead of returning a tuple.
[33m3a50d63[m KeywordArguments proposal: Describe behavior with trailing closures.
[33m76bb0ae[m update comment and fix 80-col violation: the StringLiteral expr and SIL representation will always produce a 64-bit length value, even on 32-bit targets.
[33ma4237e2[m whitespace changes.
[33mc0ab416[m [utils] buildbot-script.sh: support user-friendly testing with Ninja builds
[33mc43e04b[m Validate protocol members before doing the conforms-to-itself check.
[33mefcb786[m Teach the constraint checker to validate declarations before looking at them.
[33m5bdaf96[m Update grammar for comma-separated increment expressions in C-style for loops.
[33md0f8619[m [utils] buildbot-script.sh: remove more stray backslashes
[33m59d0757[m [utils] buildbot-script.sh: revive mistakenly-dropped SOURCEKIT_PATH_TO_SWIFT_BUILD setting
[33m8a03020[m [utils] buildbot-script.sh: run tests and build packages using the selected CMake generator
[33m44322ff[m [utils] buildbot-script.sh: remove stray backslash
[33m80e9cef[m [utils] buildbot-script.sh: support alternate CMake Generators, such as Ninja
[33m88c77df[m [utils] buildbot-script.sh: remove some flotsam
[33m7a69441[m [utils] buildbot-script.sh: factor out common configuration options
[33md2e153a[m Reverting "[utils] buildbot-script.sh: factor out common configuration options"
[33m2aa72b3[m [utils] buildbot-script.sh: factor out common configuration options
[33m3700c7b[m Allow comma-separated expressions in the increment portion of a C-style for loop.
[33m022136e[m Code completion: now frontend rejects accessing types through expressions (rdar://14489286), adjust code completion results
[33m50cb22b[m Teach Builtin.castToObjectPointer to handle class-bounded existentials.
[33m969e70e[m AST: Settable static properties are settable through metatype bases.
[33m4c333d8[m AST: Accessors of static properties must be static functions.
[33m3ae9bd6[m SILPasses Utils: Change "count() > 0" to just "count()" since it is just a bool.
[33m8c1e44a[m Revert "Add helper function that will be necessary for recursively removing a group of instructions without dangling pointer issues."
[33mdc88f2e[m The convention is for print*Description to print a newline.
[33mdc1c110[m Don't let the demangler crash when presented an incomplete generic type
[33m738bde8[m Clean up isInstanceMember()-related checking in the type checker.
[33m9acc637[m Don't allow references to an enum element via an instance of the enum.
[33m0f8d6fe[m @objc diagnostics: also mention that subscript declarations can be @objc
[33m18de690[m @objc diagnostics: allow @objc functions with a single unnamed parameter
[33mffab09a[m @objc diagnostics: update diagnostic message to provide more information
[33ma16dcea[m @objc diagnostics: reject @objc on getters and setters
[33m19f1bbd[m SILGen: Emit global initialization for static properties.
[33mb06afcb[m Ensure 'isStatic' bit of PatternBindingDecls is always initialized.
[33m6d30835[m Sema: Don't create both a default and elementwise ctors for types with static vars but no instance vars.
[33m5c8c456[m Removing a few unused Demangler node kinds
[33mb64d601[m Sema: Don't try to initialize static properties in implicit constructors.
[33m01b38f6[m Use SmallPtrSet instead of DenseSet
[33m60cf42b[m Add helper function that will be necessary for recursively removing a group of instructions without dangling pointer issues.
[33meeda966[m SILPasses: Avoid trying to processes the same instructions twice in recursivelyDeleteTriviallyDeadInstructions, in case an instruction is an operand of two instructions being deleted at once so appears in the worklist twice.
[33m4bb201b[m SIL: Verify that static properties aren't accessed using extract insns.
[33mf26a5fa[m AST: Static vars aren't stored properties of instances.
[33m3e48f59[m Sema: Resolve static property refs in the type-checker.
[33m5d9c9f3[m Disable long_tests in autoconf build by default
[33m4f2adbe[m AST: Include 'static' bit in VarDecls.
[33m599d311[m Move REQUIRES closer to RUN.
[33mf06b354[m [lit] add targets as features and add REQURES: ARM lines to a couple of tests
[33mc64ff16[m [utils/buildbot] SWIFT_MODULE_CACHE_PATH is not used when building SourceKit; remove it.
[33m2f4352e[m buildbot script: remove variable exports that are not needed
[33m14ffcff[m @objc diagnostics: use a custom diagnostic for the case when a function has a single parameter
[33mfd349de[m [utils] buildbot-script.sh: remove an unused option
[33m506505a[m @objc diagnostics: produce diagnostics when function's parameter pattern is a ParenPattern
[33m7315d38[m [proposals] OperatorMethods.rst: minor ReST fixup
[33mde0b3ea[m [utils] buildbot-script.sh: add command-line option system
[33mfe8e0f4[m @objc diagnostics: explain why function parameter type can not be represented in Objective-C
[33m2abe03f[m Debug Info: Emit a shadow copy of the type metadata in an alloca at -O0 so we can emit persistent debug info for it. Fixes <rdar://problem/15428758> dbg.value doesn't make it into the .o file.
[33mbd0f778[m @objc diagnostics: add a special case diagnostic for generic type parameter
[33mba8ff3e[m @objc diagnostics: start producing diagnostics about functions that can not be marked @objc
[33m8b11158[m Parser: Allow static vars in DisallowStoredVar contexts.
[33mea698da[m Parser: Admit 'static' properties in nongeneric struct or enum decls.
[33mda0cb5a[m [Mangler] Introduce a 'Qq' mangling format for archetypes that will be used only for debug info and within the _Tt namespace. The DWARF output created by swift is intentionally flat, therefore archetypes need to be emitted with their DeclContext. While increasing the length of the mangled names in some cases (substitutions help a lot) it has the advantage of making names completely self-contained. There is a lengthy thread on swift-debugger discussing this change.
[33mb89f1fd[m Minor tweaks to the initialization proposal
[33m7de9706[m IRGen/Runtime: Expose extra inhabitants of class protocol types.
[33mde2064a[m @objc diagnostics: highlight source range of the variable type
[33md1700b9[m Use standard wording in the warning.
[33m084bdfd[m Change the signature of the trunc builtins to return a tuple containing teh overflow bit as well as the result.
[33m4d51545[m Abstract out a function to print a SILLocation during PrettyStackTrace and fix it to handle AST-less SILLocations.
[33m0f97e93[m Extract out a function to print a SourceLoc for pretty stack traces.
[33mb16378f[m @objc diagnostics: specialize diagnostic text for structs and enums
[33med25254[m KeywordArguments proposal: Describe vararg keywords, note QoI issue with 'foo.bar:'
[33mc2a4b0a[m Remove unused diagnostics
[33m218d022[m Draft initialization proposal.
[33m8fc1dea[m KeywordArguments proposal revisions.
[33mb8cb9ae[m Add IRGen test for multi-payload enum with class references in payloads.
[33mddd47be[m [SourceLoader] When importing a source file, check if the source file has already been added to the SourceManager.
[33mde6cb0b[m [Frontend] Handle '-module-source-list' in CompilerInvocation::parseArgs.
[33m5a673d2[m [Frontend] Handle '-serialize-diagnostics' in CompilerInvocation::parseArgs.
[33me36ebb2[m Remove empty files
[33m21d1b2f[m @objc: produce diagnostics if a variable is explicitly marked @objc but can not be represented in Objective-C
[33md19d82e[m Parser: fix a crash on extra closing brace in parse-as-library mode
[33m684f616[m Show the Objective-C version of NS_ENUM usage for comparison.
[33md601245[m Eliminate IsTopLevel parameter from Parser::parseBraceItems() -- its value can be computed from other parameter.
[33mf1aed19[m IRGen: Don't use uintptr_t to represent target-pointer-sized values in compiler.
[33m93dfaa6[m Make everything getting a TypeInfo declare whether it's working with a SIL-lowered or SIL-unlowered type.
[33mabebe41[m Allow substitution to walk into reference storage types.
[33m555b57c[m The constant types on ASTContexts are all canonical.
[33m88ff3dc[m SIL: Suppress uninitialized variable warning.
[33me99b6b3[m Add an example of the use of NS_ENUMs from Swift.
[33m36dc25e[m @objc inference: check types on function parameters, function return values, and handle variables that have function type
[33m554abf2[m IRGen/Runtime: Expose extra inhabitants of class types.
[33mbeb94c5[m [CMake] For executables, don't export symbols.
[33mcd619c5[m Don't create a symlink named '*' when macosx-x86_64 was not built.
[33m38b9e68[m [stdlib] CharacterEncoding.swift => Unicode.swift
[33m2e936ea[m [buildbot-script] make it possible to force the CMake executable and install prefix
[33m2ed33e4[m Make convenient accessors for getting a lowered SILType for a struct/class field or a tuple element.
[33m3d7208c[m comment typo
[33me2981aa[m [buildbot-script] Only check for installation scripts if actually packaging
[33mdaefa4c[m [buildbot-script] re-order assignments in preparation for factoring
[33mc13b05e[m [buildbot-script] use bash with -o pipefail for improved error detection
[33mb91e25a[m Add a long_tests feature for tests.  These tests are off by default, but run on the buildbot.
[33md715c2c[m Provide a simple IntRange class as well as an 'indices' function for getting the indices of a vector or array.
[33mf08baf5[m [proposals] Operator Methods (opportunity/2.0)
[33m2b3a922[m Move SerializedDiagnosticConsumer into swiftFrontend.
[33mac8d86d[m [Frontend] In CompilerInvocation::parseArgs() parse the output filename argument.
[33m6fb1dce[m [Frontend] When setting up the buffers for a CompilerInstance, allow a memory buffer to provide the contents of a filename, based on its buffer identifier.
[33me7b15e3[m [unittests] Link libswiftBasic to its unit tests.
[33m51f6156[m IRGen: Don't assert out when a generic class conforms to a protocol.
[33m5ba10e7[m KeywordArguments proposal: Some QoI details.
[33m645ce0b[m [stdlib] Add support for bound protocols
[33m2c90207[m Sketch out a new proposal for how keyword args should work.
[33mc6cfd80[m Remove CompoundNames proposal; we're going down a different path.
[33m9c0e07f[m SIL: Capture generic parameters through nested closures.
[33m2ba1d6c[m [IDE] Remove IBAction / IBOutlet specific SyntaxStructureKind values, and pass through the DeclAttributes instead.
[33m72be5e8[m IRGen: Always use PIC relocation model.
[33m1705940[m Back-release-note T? to U? conversion.
[33mc1f3472[m SILGen: Release re-abstracted value on 'default' branch of 'is T' pattern match.
[33m7fa8bbd[m Include ARM target in the buildbot's LLVM.
[33m2950f48[m IRGen: Test other test case from <rdar://problem/15410780>.
[33m7b610ae[m IRGen: Don't round payload size up to alignment for single-payload enums.
[33mf402f66[m Release note NS_ENUM import.
[33m774db24[m Enable importing of NS_ENUMs as Swift enums.
[33m2a4dfed[m SILGen: Emit RawRepresentable methods of imported enums.
[33m65632a5[m ClangImporter: Don't register imported case decls.
[33mc16f777[m ClangImporter: Don't expose NS_ENUM cases by their unqualified names.
[33m44d46de[m Use swift::SourceManager's addNewSourceBuffer() instead of llvm::SourceMgr's AddNewSourceBuffer().
[33m5183cec[m [Frontend] In CompilerInvocation::parseArgs() handle the input filenames as well.
[33m1568c54[m [proposals] MutationModel.rst: fix a footnote
[33mf63e16f[m [proposals] MutationModel.rst: ReST cleanups
[33m1149141[m [proposals] MutationModel.rst: edits to define formal language semantics and incorporate results of the last meeting
[33m7594f89[m [IDE] Annotate IBAction/IBOutlet with their own SyntaxStructureKind.
[33m96d1038[m ClangImporter: Drop enum constant aliases.
[33maee4eef[m IRGen: Emit metadata for imported NS_ENUMs.
[33m6370f91[m ClangImporter: Handle negative C enum constants.
[33m413e5bf[m IRGen tests: consistently use a fake Foundation module located in the Inputs directory when using a fake SDK
[33m9329ef4[m Assigning variable to itself: fix a bug where we did not handle member experssions with a complex base correctly
[33md3495ec[m Use ASCII quotes in the diagnostic message.
[33m0f401d5[m Mock Foundation module in tests: introduce an overlay module and switch over one test to use it
[33mf8a79a5[m Address the reviews for r9982
[33m9e918e2[m Release notes for optional protocol requirements.
[33mbeac4e6[m Generate Objective-C protocol metadata for optional requirements.
[33mdcb87f1[m (De-)serialize @optional attributes.
[33mdf2a6fe[m Import @optional methods in Objective-C protocols as optional methods/subscripts.
[33m1d31ce5[m Add tests that we import octal and hex enum constants properly.
[33m1650a3d[m ClangImporter: Remove common prefix of C enum case names from Swift names.
[33meb7ce39[m Use VarDecl::get[GS]etterType() and SubscriptDecl::get[GS]etterType() in SILGen
[33me68fe3e[m IRGen: Fix up raw value evaluation for Clang-imported enums.
[33m6f519d7[m SILGen: Emit enum constructors for Clang-imported enums.
[33m38ceed4[m ClangImporter: Provide a null SourceLocation when lexing NS_ENUM token.
[33mc5305f3[m IRGen: Lay out enums from Clang with C-compatible layout.
[33ma0b42a7[m Sema: Resolve ExprPatterns using swift.~= if ~= doesn't exist in the current context.
[33m49e1856[m Add Builtin.[trunc|zext|sext]OrBitCast() instead of hijacking the true casts.
[33mc8ed195[m Issue a warning when returned expression is on the next line after the return keyword.
[33m00dad2e[m Thread an isSILType bit through the validateType APIs.
[33mdfd3c16[m Switch resolveType over to a visitor.
[33m25c0c1b[m Self-assignment diagnostic: pass 'const Expr' where possible
[33ma68819e[m @objc inference: structs and enums imported from Objective-C are obviously representable in Objective-C
[33ma5e6abd[m [IDE] Annotate init & destructor in document substructure.
[33m9329573[m [serialization] Initial -multi-file-output support.
[33m61c067f[m Implement a check in Sema to find self-assignment
[33md79b175[m Add getter/setter type computations to VarDecl and SubscriptDecl.
[33m5736258[m @objc on protocols: simplify diagnostic logic
[33m84a4c08[m Factor the computation of the 'self' type into an easier-to-use place.
[33m80366af[m @objc inference: recognize more types as representable in Objective-C: classes, @class_protocol @objc protocols, @objc protocol compositions, and metatypes of those.
[33m54524e6[m Replace ExprStmtOrDecl with ASTNode and make it a struct.
[33m46f26de[m Inlined countLeadingZeros per Dmitri's suggestion.
[33mc6195df[m @objc inference: handle UnsafePointer<T> type
[33m0ec7617[m Simplify enum and Int1 integer_literal instructions.
[33mec70f48[m Set Dictionary up to use only power-of-2 bucket counts.  Introduce countLeadingZeros helper to accomplish this.  It would be really nice if we could figure out how to inline countLeadingZeros.
[33m72b0b01[m Add SILGen tests for references to optional protocol members.
[33m7ddfe0e[m Use DynamicMemberRefExpr/DynamicSubscriptExpr for optional protocol requirements.
[33mee0763d[m References to optional protocol members produces values of optional type.
[33ma7a0a59[m Fix matching of subscript witnesses to requirements.
[33m0107e36[m Allow models to omit witnesses for optional protocol requirements.
[33m6145fc3[m Restrict @optional to members of an @objc protocol.
[33m964ed46[m Add test missing from r9957.
[33me5ca2c9[m Parse @optional attribute on protocol members.
[33mfaf1c45[m Shuffle the files in the testsuite a bit to try to reflect language structure.
[33m5c5d67d[m ClangImporter: Import enum raw types and values from NS_ENUMs.
[33m6c3daca[m @objc inference: start checking types while inferring @objc
[33m1d76cad[m ABI.rst: Add missing comment.
[33m15d5388[m typo
[33m83b37b5[m ABI.rst: Fix description of protocol descriptor layout.
[33m2e53423[m ASTContext: add "the one true way" to get the stdlib module
[33m16c5d69[m ClangImporter: Recognize NS_ENUM declarations and import as Swift enums.
[33m24f090c[m Factor out a table of builtin Clang types <-> Swift CTypes
[33m1677449[m [SILGen] Emit warnings when SILGen fails to emit unreachable code.
[33ma48d832[m Improve error message
[33m284d9a4[m Unify the generic and non-generic overloading paths.
[33mb43dd09[m All SourceFiles should always remember their buffer IDs, not just imports.
[33m8d604b6[m TypeChecker: Remove getStdlibModule() hack that searched all loaded modules.
[33m6373158[m [serialization] Introduce ModuleID, with codes for special modules.
[33me001667[m Add missing preformat marker.
[33mf7e285d[m Revert r9937; getInnermostDeclContext() doesn't do what we need
[33m74d66a1[m Fix bogus comment and short-circuit a check
[33m25b604f[m getInnermostDeclContext() is already better than getPotentialGenericDeclContext().
[33m68c4e72[m Eliminate return-type sensitivity in overload resolution.
[33m2e2f651[m @objc inference: we don't ever infer @objc on a protocol
[33m6ac9a53[m Extend generic overloading to methods.
[33m1616276[m SILGen: Remove 'SILGenLValuePeepholes' flag.
[33mf6d3395[m fix typo
[33m1534474[m fix rdar://15379013 - Definite initialization inappropriately changes existential initialization to assignment
[33m9b3ca11[m IRGen: Fix leak when destroying dependent generic single-payload enum.
[33m5c50ab8[m Introduce partial ordering of generic global functions.
[33mb781191[m [proposals] MutationModel.rst: cleanup
[33mf03082f[m [proposals] ClassConstruction.rst: updates based on Doug's feedback
[33m553983f[m Fix misuse of alignof, which returns alignment as 2^N instead of N.
[33mce104ed[m Introduce ValueDecl::getPotentialGenericDeclContext()
[33mc2188c8[m SIL Serializer: vtable can trigger serialiation of a SILFunction declaration.
[33mba2c1ae[m Sema: Remove dead private instance variable.
[33mdb86f4d[m Bump SILValue up to allow 2 bits of result number, enabling instructions to produce up to 4 results.
[33m010a12e[m CompoundNames proposal: specify when default args are evaluated...
[33m82567f9[m SILValue is just a wrapper around its ValueAndResultNumber.  Derive the number of low bits available in it from the #bits in ValueAndResultNumber, instead of computing it independently.
[33m18dd933[m SILGen: Factor abstraction change from branch in checked cast emission.
[33m0f3c949[m inline emitStringLiteral into its only caller.
[33mf823a8b[m typo
[33mcf07401[m Stop creating type variables for archetypes.
[33m2ec8d21[m Add test for type inference of instance variables.
[33m901047d[m Eliminate the opening of archetypes in the substitutability check.
[33m74cd118[m CompoundNames proposal: more revisions.
[33m502748f[m CompoundNames proposal: Revise in response to DaveA feedback.
[33ma41500f[m [proposals] Mutation Model Draft
[33m08b6181[m [proposals] Class Construction Draft
[33m9d86770[m Start putting together a complete proposal for how keywords and compound names should work.
[33mf959378[m revert my previous patch.  It doesn't break anything, but there is more going on here than I think I understand, so I'm backing off.
[33maa4d919[m remove some peephole logic that is trying to turn a copyaddr into its component parts.  Our canonical representation is going towards more complex operations now, so this isn't useful.
[33ma92e4de[m teach instsimplify about struct/structextract folding, mostly for completeness. This cuts 46 instructions out of the stdlib.
[33ma0c5afa[m re-commit r9816, allowing DI to delete allocations *in* transparent functions.  Before it would only delete them once they got inlined, which is a waste of compile time and serves no purpose.
[33m7989080[m mandatory inlining was using an iterator pointing to the ApplyInst it inlines after it was invalidated.  This was exposed by an unrelated change I'm about to land.  Fixing this required reworking a few things, and unfortunately seems to have broken the string O(1) optimization again.
[33m2ce7f37[m add a missing ) that broke the bot
[33m2909a0e[m teach simplifycfg to constant fold switch_enum instructions, now that all the tuple stuff is out of the way.  This kicks in 600 times in the stdlib and ends up shrinking the stdlib by 2500 lines (down to 53209).
[33m5005445[m remove SIMD vector support from the stdlib.  I think we all really want this, but we don't have time right now to make it great.  This shrinks the stdlib by 9000 lines :-)
[33m68af974[m Remove 'axle' related code and build machinery.  It turns out that we will not be pursuing this project in the immediate future.
[33mbeab485[m enhance the constant folding pass a bit to be smarter about folding tuple-producing results (like those produced by folding overflow builtins).
[33m8083f2d[m add setOperand() to unary instructions.
[33mfe34c28[m teach silcombine to use the new InstSimplify functionality.  Also switch it to use an ArrayRef in one place.
[33ma2a1b2a[m Clean up tuple and extract SILBuilder stuff: - Introduce emitTupleExtract / emitStructExtract, which fold when their operand is a tuple/struct. - Rename SILBuilder::createTupleExtractInst -> createTupleExtract, "Inst" isn't used as a suffix. - Switch capture promotion and DI to use the new functions.
[33m21d196a[m [stdlib] Implement basic transcoding of UTF8 and UTF16
[33m4bc7549[m Update syntax highlighting scripts for 'func' -> 'def' change
[33maeb2219[m [driver] Treat "main.swift" as the main source file if given multiple inputs.
[33m98717a2[m Add -multi-file-output mode, which generates one object file per input file.
[33m55ed831[m Add release notes about 'func' -> 'def' change.
[33m70dd310[m [driver] Honor -o in -emit-sil, -emit-silgen, and -emit-llvm modes.
[33m91ce216[m Change 'func' keyword to 'def'
[33m44bdefa[m Debug info for Archetypes: Get rid of the typedef for the type variable used by the programmer. It's no longer needed, LLDB can get to it from the AST.
[33m313bd88[m SIL Serializer: fix a bug in handling of forward-referenced values.
[33m473cd24[m [IDE] Clean up and simplify syntaxStructureKindFromNominalTypeDecl().
[33m25a4ed6[m Fuse SILGen 'switch' test cases together to reduce test time.
[33m410c9c0[m ABI.rst: Describe existential container layout.
[33m1b0e03c[m ABI.rst: Describe protocol descriptors.
[33m45dd79a[m ABI.rst: Describe the now-somewhat-useful layout of protocol metadata.
[33m87c26c3[m Unit-test that existential metadata is instantiated with the right kind.
[33m72594e0[m IRGen: Remove dead code for producing existential 'typeOf' value witnesses.
[33m22e3208[m IRGen: Stop emitting static metadata for protocol types.
[33m98f0a5f[m Update runtime unit tests for getExistentialTypeMetadata name change.
[33ma372191[m Open unbound types via their generic parameters, not their archetypes.
[33me0d7586[m The type checker no longer opens up polymorphic function types.
[33mbbddf41[m IRGen: Instantiate existential metadata through the runtime.
[33mb1a8e30[m Teach witness matching to use interface types appropriately.
[33m5744b57[m SILGen: Handle an 'is T' pattern in a switch that introduces concrete-to-archetype casts.
[33m915209b[m Add IITDescriptor::VarArg case to DecodeIntrinsicType().
[33ma0c4486[m IRGen: Emit protocol descriptors.
[33m003709d[m SIL: Add a backreference from SILModule to its originating Swift Module.
[33mc57ea38[m SILGen: Don't produce context arguments for captured typealiases.
[33mbeaa56d[m Add Builtin.Word and use it to implement swift.Word.
[33m40467f3[m refactor some code out into a new "simplifyAfterDroppingPredecessor" function.  It isn't doing anything useful yet, but some day it will, don't you doubt it.
[33m7403194[m minor simplifications, no functionality change.
[33mbc15db1[m Kill off an unnecessary use of the associated type -> type mapping.
[33meb6a328[m Clang importer: correctly find the Clang module that corresponds to the decl
[33m1082ea5[m Actual use location information when looking for local variables.
[33md873764[m Sema: Allow an implicit conversion from T? to U? if T can be converted to U.
[33m2e6aedd[m Define an entrypoint for an "instsimplify" analog, which only does one trivial transform right now.  No clients yet.
[33m4d75b58[m teach simplify-cfg to constant fold cond_br instructions.  Jump threading exposes these all over the place, so we need to clean them up.  This cuts 2000 lines out of the SIL for the stdlib.
[33m5042504[m Trivial cleanups in protocol conformance checking code.
[33ma329721[m implement a simple and intentionally limited jump threading optimization in simplifycfg.  This is intentionally pretty simple, but already kicks in 827 times in the stdlib, and cuts 1000 lines of sil out of it.
[33m419b3c5[m tidy up * placement.
[33mdb9cda3[m introduce a  SILBasicBlock::getPreds() range to match getSuccs()
[33mfe7ecec[m Runtime: Provide value witness implementations for class existentials.
[33meeed359[m Runtime: Add unknownRetain/unknownRelease entry points.
[33mf342493[m Give every declaration an interface type.
[33m459db73[m Debug info: Move the logic for emitting type metadata arguments to GenProto, and emit both the mangled name and the type variable used by the programmer for archetypes. Fixes <rdar://problem/15346134> The $swift.type metadata arguments do not show up anymore
[33mc83be50[m Add missing include.
[33m36dba2e[m silence warning
[33mafb11e1[m @objc inference: fix inference for getters and setters
[33m16d041f[m complete this file comment.
[33mcc15ad9[m Fixed a crasher in the testsuite when Callee.getDef() isn't a FunctionRefInst. Sorry about that!
[33mb342f68[m Fix Float80 suppression.
[33m8be81e8[m @objc inference: add tests for inferring @objc on a class
[33mb4dc611[m Two modifications to the SIL linker:
[33m065a90d[m @objc inference: destructors are always @objc
[33mc8a3809[m Simplify code: getDeclContext() can not return nullptr
[33m1abce88[m AST Printer / @objc: print @objc(inferred) for constructors and destructors
[33m324e694[m AST Printer / @objc: print @objc(inferred) for stored properties
[33mb306d2a[m AST Verifier: check that only VarDecls and SubscriptDecls can be considered parents of getters and setters
[33mc2425d5[m Revert r9816.  It causes three tests to enter an inf loop: Interpreter/archetype_casts.swift Interpreter/classes.swift Interpreter/generic_casts.swift
[33m40c7f25[m [driver] Pull code generation out into its own function.
[33m7b5fc3f[m Make the interface types of nominal types be a metatype.
[33mf265135[m [IDE] Add Enum SyntaxStructure kind. Rename to spell out enum values in full form. Refactored to remove duplication.
[33m5555e60[m Kill off the member-reference path that opens based on archetypes.
[33ma1b1be7[m AST Printer: print inferred @objc attributes for variables, properties, and getters/setters
[33m77264dc[m Give associated type declarations interface types.
[33mb09cf2a[m AST Verifier: if a BraceStmt (including function body brace stmt) is marked as implicit, we should not verify source locations with this patch.
[33ma667e61[m Make the "delete store only stack allocations" logic delete all allocations in transparent functions.  They will be deleted anyway when they get inlined into callers, so there is no reason to do the work to carry them around and inline them, only to delete them.
[33mc38ad64[m Runtime: Expose assignExistentialWithCopy entry points.
[33mefcdf94[m Call validateAttributes() for enum elements to reject wrong attributes
[33m7b8cd1c[m [IDE] Add support for a few more SyntaxStructure kinds, and add name range.
[33maf97622[m Collapse the specialized and non-specialized member reference building paths.
[33mcab6017[m Unbreak the build after r9803
[33m7d8c212[m Fix a bug in unreachable code diagnostic.
[33me3891a5[m Update some comments that use old-style attribute syntax
[33me6eff36[m Simplify code: getDeclContext() can not return nullptr, this is checked by AST Verifier
[33m4daa82d[m Simplify condition checking when we need substitutions.
[33mdb5f378[m Update the comment to reflect reality
[33m480cd8f[m Allow @objc in generic contexts.  We might want to disallow some of these cases later, but for now Objective-C should be able to access Objecvive-C-representable members of generic class instances if one passes such an instance to Objective-C.
[33m5ec3cad[m ClangImporter: Emit metadata for imported enums.
[33mfb08372[m Code completion tests: check declaration kind, it is computed with non-trivial logic now
[33mc216a84[m stdlib/FloatingPoint: port floating point implementation to gyb
[33me31c93a[m [AST] The ASTContext parameter in FuncDecl::getResultType() is not really needed.
[33m9223587[m Runtime: Provide a specialization for zero-witness-table existential container layout.
[33m462bc95[m stdlib/FixedPoint: use camel case names in generator script
[33m98f0e6e[m IRGen: Lower SIL 'undef' to IR 'undef'(s).
[33m03e7b75[m teach simplify-cfg to merge blocks connected by an uncond branch, when the dest has no other predecessors.  This fires 6926 times on the stdlib.
[33mcb6cf87[m revert r9785, it isn't correct.
[33mcd844ed[m run simplifycfg as part of performance optimizations (e.g. swift -O1 and above runs it). It only has one trivial optimization that kicks in only 19 times in the stdlib, but its progress.
[33mb3d07ad[m fix sil-opt to call llvm_shutdown when its done, allowing it to work with -stats.
[33m9c6e940[m performance optimizations cannot produce diagnostics, so make runSILOptimizationPasses return void.
[33me06bd4c[m SIL: Silence warning about uninitialized struct literal fields.
[33m681ad64[m teach simplifycfg's dead block deletion to correctly handle blocks with instructions that are used cross-block.
[33m9ed8986[m silence a warning: Metadata.cpp:1280:26: warning: zero size arrays are an extension [-Wzero-length-array]   const void *_witnesses[NUM_VALUE_WITNESSES];                          ^~~~~~~~~~~~~~~~~~~ Metadata.cpp:1366:12: note: in instantiation of member class       '<anonymous>::OpaqueExistentialValueWitnesses<0>::Container' requested here   /*size*/ Container::size(),            ^ Metadata.cpp:1448:51: note: in instantiation of static data member '<anonymous       namespace>::OpaqueExistentialValueWitnesses<0>::ValueWitnessTable' requested here       return &OpaqueExistentialValueWitnesses<0>::ValueWitnessTable;                                                   ^ 1 warning generated.
[33m7782e7e[m remove unused variable.
[33m6ee92ec[m Code completion: add a test with non-ASCII identifiers
[33ma1d755e[m Eliminate the old generic-member-substitution path and its support code.
[33mf26834e[m Handle member type and instance variable references without recomputing substitutions.
[33m1a9545f[m Open references to types within generic contexts via the "new" path.
[33m6201b72[m Give typealias declarations interface types.
[33mf473246[m Dump associated type declarations
[33m9ca2f25[m Eliminate redundant type checking code for type alias declarations.
[33m0f21968[m Open references to fields/properties using the interface type.
[33m3b4d03a[m Disallow @objc on generic classes and classes in generic contexts; disallow @objc on constructors in generic contexts.
[33mef93c81[m Introduce a new SIL-level "undef" value, useful for SIL transformations. IRGen support is missing, Joe volenteers to implement it.
[33m7ce3892[m rename test
[33m8218c41[m Don't cache the result of ProtocolDecl::requiresClass() if the type checker did not calculate the inherited protocols yet
[33m1ff79ff[m SILGen: Fix use-after-free in 'x?' codegen.
[33m3b63fac[m Handle dynamic lookup through the "new" generic type path.
[33m769ed07[m Use the opened type of a subscript reference to compute substitutions.
[33m6c23f3e[m Add an important assert to ValueBase, to make it a hard error to delete a value that still has uses.  Doing so leaves dangling pointers and is unwise.  Nothing in the testsuite triggers this, but simplify-cfg can on real code.
[33m999b856[m Open references to subscript operations via interface types.
[33m2a1e35a[m Properly diagnose a top-level variable declared @objc or @iboutlet (instead of crashing)
[33m7e47f59[m Fix a comment.
[33mc46c0ce[m [DCE] Refactor, use more explicit data structures/names.
[33me5eb77e[m [SIL] Mark these locations as cleanup.
[33mf7606b1[m Warn on unreachable user code after a call to a noreturn function.
[33m45d840e[m Factor out the opening of generic function types.
[33m4d168bb[m [IDE] SourceEntityWalker: Visit the base of a member ref expression in source order.
[33ma1618e9[m [IDE] Have SourceEntityWalker report a subscript decl reference.
[33m76faca0[m [IDE] Enhance SourceEntityWalker to report walking of expressions.
[33m0f97444[m [IDE] Have SourceEntityWalker invoke the callbacks for getter/setters.
[33m45d0ae0[m Runtime: Add value witness forwarders to Metadata type.
[33md5fd6a6[m Sketch out a trivial start at a simplify-cfg pass with one optimization to delete dead blocks (which happens to be incorrect).
[33m968e89a[m improve the DEBUG output of inout-deshadow and allocbox-to-stack. clean up a couple random things in silcombiner:   - it shouldn't return "made any changes" out of the pass.   - statistics should be spelled out more and don't end with periods.
[33mff3290e[m simplify inout deshadowing to not look at load/store sequences at all, just at autogenerated copy_addrs.
[33m143fd76[m revert r9703, which added a bunch of complexity to inout deshadow to look through copy_value.  With the new approach, this isn't needed anymore.
[33m47a77e1[m Runtime: Provide implementations of opaque existential witnesses.
[33mc31e5c7[m teach allocbox-to-stack about assign instructions, enabling it to promote a lot more boxes.  This is the last step to resolve rdar://15228172 getting us back O(n) string performance.  There is still more work to do, but this is progress.
[33mbb109d6[m Now that allocbox-to-stack is run before DI, we can run inout-deshadow before DI.  This will enable us to simplify its algorithm to make it more predictable and powerful.
[33m840b3a9[m Verifier: add a missing call to the more general check function
[33mb2bd2e9[m SIL Serialization: handle SILVTable.
[33mebeeebf[m Debug info: Reset the debug location after emitting the initial phi-node locations for a more coherent line table. Relax testcase.
[33md83c552[m Debug info: Simplification.
[33m8db71c7[m [AST] Use the more specific ValueDecl type (instead of Decl) for the declaration that a getter/setter was created for.
[33mf7b6fbb[m [stdlib] NewString.swift: integrate into the stdlib and testing framework
[33mc293d6d[m SIL Serialization: add helper function writeTable to write out a table to sil_index_block.
[33me0084c8[m [docs] Flesh out the mixed Swift/ObjC build model.
[33m00ca99b[m SIL Deserialization: readSILFunction handles the case where the input SILFunction is null.
[33md38b1a1[m SIL Serialization: seperate sil_index_block from sil_block.
[33mc9f7382[m Simplify ValueDecl::setIsObjC()
[33m03ebb9e[m Give interface types to subscript declarations.
[33mb4ef9f4[m Clarify the difference between swift::IsTriviallyCopyable and llvm::isPodLike
[33m672a9fe[m Zap unused TypeChecker::encodeSubstitutions() overload.
[33mb5a3f2f[m SIL Serialization: add helper functions to handle SILDeclRef.
[33m37e652b[m Runtime: Add swift_getExistentialMetadata entry point.
[33m92d9d37[m move the allocbox to stack pass to run before definite init, now that the dependencies blocking this have been resolved.  No important functionality change, this is working towards fixing inout promotion.
[33m2d0bc50[m teach definite initialization to handle dealloc_addr instructions, instead of treating them as an escape point.
[33m0f5798e[m stabilize this test against diagnostic pass changes.
[33m82184a6[m s/addSubstitutions/setSubstitutions
[33m55bcded[m Replace substitutions vector with an ArrayRef, now that we have only one level.
[33mdf44269[m Eliminate more PolymorphicFunctionType uses from the type checker.
[33mf172e93[m Set the 'super' bit on function applications harder.
[33mf0cd6e3[m Don't import the standard library multiple times in the REPL
[33m112c612[m Terminate SpecializeExpr with extreme prejudice.
[33m9e346b6[m Clean up implicit import code: use SmallVector instead of a plain array
[33meecac1f[m Eliminate the last few sources of SpecializeExprs.
[33m731fe65[m Teach OtherConstructorDeclRefExpr to track substitutions.
[33ma2da6e5[m Code completion: use imports only from the current SourceFile
[33m682a6c8[m One source of SpecializeExpr's is now unreachable: remove it.
[33ma000a25[m Open EnumElementDecl references via their generic function types.
[33m45c7850[m Compute interface types for enum elements.
[33m28173a1[m Fix typo
[33m65d443a[m runtime: Define structures for protocol descriptors and existential metadata.
[33m1aac046[m reimplement alloc_stack/box deletion in DI instead of being part of allocbox_to_stack.  This is simpler and more efficent given the info DI already has, and this enables future progress.
[33mcbeb113[m Fix DI to remove assign instructions from its Uses list when it lowers them (causing the pointer to dangle).   This doesn't currently manifest as a problem, but will with some changes that are coming.
[33m47f4945[m Enhance inout deshadowing to look through copy_values, allowing it to eliminate stack allocations of non-trivial type.  This is progress towards rdar://15228172 but is not enough, we are still leaving copyvalue+destroys around, which need to be fixed.
[33mcff5097[m fix 80 column violations
[33m7826c7d[m simplify this pass pretty substantially based on its new design, no functionality change.
[33m9c6ef17[m Now that definite initialization is exploding copy_addrs, the simplistic algorithm used by inout deshadowing broke in many common cases.  Reimplement the pass with a different approach, where it looks for autogenerated copies into and out of the inout pointer, which may be exploded.
[33mc118613[m Fix SILValue use_iterators to type the user as a SILInstruction, not just a ValueBase.
[33m5ce1700[m - Mark the copyaddr's generated for inout shadow variables as autogenerated,   so they can be easily identified by the inout deshadowing pass.  This does   not mark the alloc_box as autogenerated though, since it is a user variable   when the variable escapes.
[33m2127da6[m Enhance the function_ref instruction to maintain a refcount on the SILFunction that it references.  Use this in the mandatory inlining pass to remove deserialized transparent functions, to clean up the -emit-sil output of the compiler (and presumably speed up compile time).  This implements rdar://15272652
[33m991856d[m Fix the swift driver to not run SIL diagnostic passes on a .sil file that is already in canonical form.  Besides being the obviously right thing to do, this stabilizes an IRGen test file against SIL diagnostic pass changes.
[33m9ca612d[m change allocbox to stack to remove stack_allocs that are coming from SIL files.  This makes testing easier and simplifies the code.
[33m75e8106[m Disable 'sdk', 'swift_interpreter', 'swift_repl' features on Linux
[33mb62e890[m Portability: libstdc++ does not implement is_trivially_copyable yet, implement our own wrapper
[33m0648d1d[m Portability: CMake build system: use ln -n instead of ln -h.  For Darwin ln these options are the same, but GNU ln only implements -n.
[33m29836d9[m Split SIL parser test into SDK-independent and SDK-dependent parts
[33mea4da29[m Abstract copy_addr identification out of inout deshadowing.  This is just a refactoring, no functionality change.
[33mf1c9778[m Added a ReachingBlockSet and ReachingBlockMatrix for efficiency.
[33m37a803a[m For type checking, open constructor references based on their interface types.
[33m3483216[m Fix the interface type of the implicit-declared constructors.
[33m9ea280e[m Assign interface types to instance variables/properties of generic types.
[33m3b37cba[m Dump interface types for any value declaration.
[33m5bbe0af[m Debug info: Properly handle the function prologue in the line table. Introduces a new flag in SILLocation: InPrologue to mark instructions that setup the stack and allocate storage for local variables/arguments.
[33m15f2b7c[m Ocaml _did_ beat us today. Next up: C++14.
[33m13cbf2d[m Update uses of llvm::MemoryBuffer::getFile() for r193429.
[33mfc88c5d[m Operators imported in one source file shouldn't affect another one.
[33mec4234b[m Perform unqualified lookup using the current SourceFile as context.
[33m147f4b8[m Allow the type of any variable to be inferred from its initializer.
[33m080c9fc[m When generating a default constructor, don't initialize invalid patterns.
[33m27328ac[m Warn on unreachable code due to a constant condition in a switch over enum.
[33m499deab[m Infer the generic arguments from context in variables, closure parameters.
[33ma7664fd[m Clean up the checking of pattern binding declarations.
[33m0540559[m Sema: Handle negative raw values for enum cases.
[33m6e666c7[m <rdar://problem/15321132>
[33m9625c08[m [sil-combine] Fix comments.
[33ma333b69[m Flip the switch: multiple input files = multiple SourceFiles.
[33m32130d3[m Teach delayed parsing to get its SourceFile from the saved DeclContext.
[33m64e0b22[m Make sure to resolve library intrinsics before using them.
[33m4a90ab0[m [IRGen] Separate out SourceFile-specific processing from whole-module stuff.
[33m28e01f3[m Eliminate "MainSourceFile" from TranslationUnit in favor of an array.
[33mcf31df9[m Push operator lookup into SourceFile, and simplify the interface.
[33m918d66d[m Move some functions from TypeLowering to SILFunctionType.cpp.
[33m31e2348[m Rename SILType.cpp to SILFunctionType.cpp.
[33m8ea71f0[m Teach ExistentialMemberRefExpr to handle all levels of substitutions.
[33ma927afa[m Remove unused #includes
[33m679b254[m Clang importer: don't verify imported modules if we verified them already
[33m341c4e0[m Code completion result caching: update result set cost in libcache after we have created the result set
[33m0cafcee[m Code completion: add more assertions
[33me31a1cf[m IRGen: Nominal type descriptors can be constant.
[33m729e658[m IRGen: Substitute aggregate field types when classifying their type size.
[33m045c0b9[m Code completion result cache: implement cache invalidation
[33m10164fa[m Teach ArchetypeMemberRefExpr to handle all levels of substitutions.
[33mbb06872[m [libBasic] Add documentation comments for ThreadSafeRefCounted.h
[33mb7d3a23[m Code completion result cache: use libcache
[33m60edb96[m [libBasic] Introduce a thread-safe version of llvm::RefCountedBase.
[33mec570d7[m [libBasic] Dmitri caught that always static_casting the key to check for equality will break if the rest of the cache traits do not provide a direct pointer to the key object.
[33mfdebc3d[m [sil-combine] Port of LLVM's pattern matching infrastructure to SIL.
[33m515fa0b[m [buildbot] Include the date in release builds to avoid module cache issues.
[33m2aeba96[m Use SourceFile in a few more places.
[33m766f41f[m Put top-level decls in the SourceFile DeclContext, rather than in the TU.
[33m0702aca[m Make SourceFile a DeclContext, but don't actually do anything with it yet.
[33mec23db6[m Push the TU's lookup cache down to SourceFile.
[33mf03928b[m For the 'Self' of a method reference, use equality constraints when we can.
[33m9bbb225[m Clean up handling of opening references to methods of protocols.
[33mb2034f7[m [CCP] Fold integer binary predicates.
[33ma8aef7a[m Open references to protocol methods via their interface type.
[33md64313d[m [IDE] Use a switch to convert to CodeCompletionDeclKind, to make sure we cover every decl kind.
[33mc757ebf[m IRGen: Give nominal type descriptors for Clang-imported types thunk linkage.
[33mf9382f8[m Remove ModuleLoadListener, it is not used anymore
[33m7b5e0db[m Simplify code and fix a bug: we can have computed properties in an extension
[33m8f8cabc[m Clarify comment
[33m881e646[m [IDE] Introduce CodeCompletionDeclKind enum to encapsulate a bit more info than the DeclKind (e.g. whether the function is an instance/static method).
[33m3b676d2[m More missing "-sdk=%sdk" arguments in tests.
[33m8d8b60f[m Code completion: implement result caching per-imported module across muptiple ASTContexts
[33m97eb752[m IRGen: Make getFixedPacking a public interface of TypeInfo.
[33m8a563f1[m Fix the file name in the comment.
[33me452548[m Tighten the constraint on the base of a '.' expression for protocol members.
[33mbae79dd[m Give imported protocols a proper generic signature.
[33mea25142[m [utils] Another place to path rpath which I missed.
[33m2b75fc4[m [utils] Update install-test-script to pass the rpath of the swift libraries to a compiled swift file.
[33m8681e0a[m Open operators in protocols with their interface types.
[33maf6b5d7[m Record overload choices for declaration references.
[33md28d76a[m Factor out the code for building a DeclRefExpr during constraint application.
[33mb5b057a[m Handle member references to generic functions first.
[33mfbdfc7b[m Eliminate a few places where we were willfully faking the "full opened type".
[33m6f87c8c[m Eliminate SpecializeExpr for qualified references to free functions.
[33mfcf9f91[m Add the value witness marker for generic builtins.
[33mb70a0d7[m Formatting fix
[33meaa7018[m Fixup attribute syntax in LangRef.html.
[33m80d753d[m Portability: use std::make_tuple instead of relying on a libc++ extension (an implicit constructor in std::tuple)
[33m905078a[m Open method references via the interface type rather than the polymorphic type.
[33m1eebdc9[m Replace the free type variables in a solution with generic type parameters.
[33mdc24cb2[m Portability: APInt is not implicitly convertible to bool, call getBoolValue explicitly
[33m6129bc7[m Build system: specify dependencies more precisely, allows us to build on systems with more strict linkers
[33m49a5f53[m [libBasic] Introduce a caching mechanism, that evicts its entries when there is memory pressure.
[33m6676690[m IRGen: Handle single-payload enums with empty payload.
[33m29ae59e[m Debug info: some refactoring to make emitVariableDeclaration more flexible.
[33mb15085a[m [DCE] Add a note about the branch that has caused the unreachable code warning.
[33m5708b8b[m Remove mention of Optional.get().
[33md8b6473[m Dump DeclRefExpr's ConcreteDeclRef appropriately.
[33mf71890e[m Parsing and serialization tests for SIL cond_fail instruction.
[33maa337de[m AST Dumper: ensure that all output goes to the given raw_ostream
[33mc6f1bec[m Add an API ASTContext::getLoadedModule() to return the module only if it was loaded already, without trying to load it.
[33m569f98d[m Fix Makefile build.
[33m594e2f5[m [CCP] Rework CCP to use an inverted algorithm.
[33mff0a037[m [IDE] Add initial document structure annotation support.
[33mdf693fd[m Make the CharSourceRange constructor take the SourceManager parameter as const.
[33mfdb71c0[m [IDE] Rename SyntaxColoring since it's about to handle more than coloring.
[33m5711ec1[m stdlib: Trap overflows with condfail instead of if { trap }.
[33mb8ec74f[m IRGen: Lower CondFailInst.
[33m0644879[m Quell 'dump' deprecation warning in AST verifier.
[33mdb5fe95[m AST: Add a Builtin.condfail function.
[33ma334ce8[m SIL.rst: Document cond_fail instruction.
[33m2e0d554[m runtime: Minimal implementation of swift_conditionalFailure.
[33m00dcdf3[m SIL: Introduce CondFailInst.
[33m549dfb8[m [AST] Record and report the protocol requirement decls that a ValueDecl conforms to.
[33m0dd411d[m [ClangImporter] Add appropriate protocol conformances when creating the methods from the inherited protocols.
[33m91c7cea[m Remove the SILModule& argument from a few methods in SILInstruction.h. Instructions know which module they came from, so there is no need to pass it in.
[33mc538feb[m some more minor tidying up: use StringRef instead of std::string in one place, and use types already available instead of reconstructing them (to simplify code).
[33mc495daf[m Code completion: assign "OtherModule" semantic context to Axle results
[33m4fc000c[m [test] Clear out the module cache in some of the tests.
[33m791d9b7[m [ASTDumper] Centralize the ValueDecl-specific dumping to one function.
[33m882b770[m Portability: replace isnumber() with isdigit()
[33m61360ba[m SIL: Remove ConvertCCInst.
[33m3a5267c[m SILGen: Build a thunk in SILGen instead of using convert_cc instruction.
[33m9ea487e[m Debug info: Emit local variables without storage as local variables constant 0. Fixes rdar://problem/14802771.
[33m3eec81a[m Add 'asserts' as a REQUIRES feature for lit tests.
[33m62905cf[m [docs] Revise Modules Build Model to include dependency analysis.
[33m5cf8999[m Debug info: some more refactoring for rdar://problem/14845534.
[33m8648126[m SILGen: Remove some debug noise.
[33m4a9909c[m Debug info: emit the runtime language of archetypes as DW_lang_swift.
[33m43fde08[m Move a section in release notes
[33me2b0f08[m Parser: allow an optional trailing comma in array and dictionary literals
[33m9def310[m Give a real struct name SelectedOverload to (OverloadChoice, Type) pairs.
[33m0108536[m Remove debug-dependent SILGen test.
[33m61a0958[m Open method references to methods using their interface type.
[33mf2f38b9[m Teach GenericTypeResolver to produce the type of a DeclContext.
[33mb0b5009[m Lookup visible decls / code completion: correctly filter out non-NominalDecls when looking for visible members
[33mead6838[m Code completion: don't dump constraint solver debug output
[33mc2f60db[m Eliminate a now-silly use of FuncDecl::computeSelfType()
[33mc1eb091[m Move CMake toolchain files to a separate directory.
[33m238d898[m Code completion for enums: model completion in switch case as a separate kind of completion.  This approach (rather than SourceLoc tricks) better reflects the intent and allows us to fix the rest of testcases.
[33m0da9261[m SILGen: Thunk Clang-imported top-level functions when used unapplied as values.
[33macdd5b1[m Make type checker debug output redirectable
[33ma49878d[m Fix missing part from r9551.
[33m4248e63[m Eliminate a possible stale DenseMap reference in the type checker.
[33mcd0299f[m Push get/setInterfaceType() up to ValueDecl.
[33m63c2644[m Code completion for enums: complete "switch e { case .#^A^#"
[33m85ea53a[m ABI.rst: Describe nominal type descriptor layout.
[33md870f60[m Don't print statistics twice under -print-stats.
[33m0dd231f[m indentation: don't indent cases under switch statements.  Even thought Xcode insists on doing this, it is "wrong".
[33m5119318[m Some belated code review for the constant prop pass.  Overall the algorithm looks great, I made a number of minor stylistic and comment changes, used some simpler APIs, and simplified some things.  The only functionality change is a corner case correctness bug where it looks like the struct/tuple extraction folding logic in constantFoldInstruction could return the wrong result in some corner case.
[33m83d8954[m Some belated code review of CapturePromotion.  Much of it is minor typographical/style changes and use of simpler/strength reduced apis (e.g. empty() instead of size() != 0).
[33m2b7c36c[m Parser recovery: skip multiple right braces at top level, both at the beginning and at the end of the file
[33m77dbdb2[m SIL: Allow AllocBoxToStack to promote any non-var allocation.
[33mc9b30d1[m Give the builtin generic functions proper interface types.
[33mda3e2c3[m Portability: isdigit() returns int, which is not required to be strictly 0 or 1
[33m5521b53[m Use DeclRefExpr's substitutions rather than SpecializeExpr for free functions.
[33md3fd829[m SILGenPattern: Let 'is T' and 'U(x:, y:)' patterns coexist.
[33m4bc267f[m SILGenPattern: Don't drop preceding wildcard rows when specializing a column.
[33maa928fa[m Ensure that a PolymorphicFunctionType doesn't leak into GenericFunctionType paths.
[33m5269d99[m Store substitutions within a DeclRefExpr.
[33m50cfd44[m Separate the computation of substitutions from the creation of SpecializeExpr.
[33m4872a6f[m SILGen: Use "constructor prefix" heuristic to optimize switch decision trees.
[33meff38e5[m Sema: Fix up type-checking of generic types in nominal type patterns.
[33m1d65de0[m Sema: Allow single-element '(a)' patterns to decay to paren patterns.
[33m9b6652b[m Sema: Set up coerceToType on patterns to rewrite pattern ASTs.
[33me63081f[m Oops, adjust release note example to be fully covered.
[33mbdc38a7[m Release note nominal type patterns.
[33m98a7830[m SILGen: Run cleanups emitted as a part of pattern dispatch.
[33m3b84c0f[m use the standard idiom for defining a const and non-const version of a method.
[33ma2d4439[m [sil-combine] Add NumCombined statistic so we can count the total number of combines that occur.
[33ma2ee7a3[m Make sure that the non-const version of getOperandForField calls the const version of said function instead of infinite looping.
[33m5f190a8[m implement cross-block load promotion in definite initialization.  This allows us to diagnose things that span multiple blocks, e.g.:
[33m0bf1e89[m Code completion: remove debug output, it is not useful
[33me7242d3[m SIL: Print the id of valueless instructions.
[33m6760c8d[m SILGen: Implement NominalTypePatterns for stored properties.
[33m4d8d797[m SILGenPattern: Add debug output.
[33m26c6659[m Introduce a Solution::specialize() for generic function types.
[33mbe353ab[m simplify some code by getting rid of some bool results, and computing their result at the top level.  No functionality change.
[33m4d03f74[m Code completion / type checker: while type checking a base expression for code completion, don't fail if we have unsolved type variables.  Type variables are replaced with GenericTypeParamType types.
[33m5fe7849[m Add CMake toolchain files for non-Xcode cross compilation.
[33mc81077d[m Build FastEntryPoints.s using C compiler when generating for not-Xcode.
[33m1f7192f[m Add print/dump methods to Substitution.
[33m3fafb6c[m Debug info: Make the ret instruction in the function epilogue a cleanup location rather than a regular location to avoid the linetable jumping back to the beginning of the function. Add a large number of testcases that check the sanity of the return locations in various scenarios involving implicit/explicit returns, cleanups, and multiple return locations per function.
[33m0d7aae2[m Fix dropped part of r9507.
[33md7a1d53[m Introduce value witness markers into the generic set of requirements.
[33m3a09877[m [stdlib] Remove unintended flotsam
[33mf3053a8[m [stdlib] WIP: prototype the basic data structure of the new string design.
[33m742c90f[m [DCE] Add unreachable code warning to DCE pass.
[33me3ebb03[m Start opening GenericFunctionTypes for references to non-member functions.
[33m3a8f814[m IRGen: Add a nominal type descriptor to class metadata.
[33mef9a1b3[m <rdar://problem/15213551>
[33m1dbe2ac[m Don't import constructors for class Protocol because they use a symbol that is absent on iOS.
[33mfbd1c95[m Add support for iOS builds using cmake.
[33m3d60786[m IRGen: Add a requiresProtocolWitnessTable fn instead of peppering isObjC() everywhere.
[33mf5c6ea1[m Use requiresObjCDispatch() rather than Decl::isObjC() for accessor callees.
[33m5bbbd47[m ABI.rst: Correct description of generic parameter vector.
[33mdea5d15[m Eliminate the useless distinction between "solve" and "trivially solved".
[33mb8c7576[m IRGen: Emit nominal type descriptors in struct and enum metadata.
[33m64449f7[m Have the buildbot 'make check-swift' instead of just running lit tests.
[33ma0cd122[m Tweak NominalTypeDescriptor layout a bit.
[33m307d2c2[m Remove the "trivial" flag from ConstraintSystem::matchTypes() et al.
[33mf7f2533[m Re-add -l flag to Swift interim driver.
[33mce51189[m Create same-type requirements for generic function types.
[33m55d7744[m Code completion: don't copy static strings to a separate allocator
[33m4ce90a8[m Code completion: move result builder to a private header
[33m4e29c56[m Code completion: don't copy static strings into a separate allocator
[33mae03a13[m Code completion: complete tuple memebrs
[33mf92d4dc[m [CMake] Set "@rpath" as the install name of the stdlib dynamic libraries and add an rpath to swift executable so the interpreter can load them.
[33m87ae08a[m Introduce some versioning for the swift executable.
[33m70329a2[m Add a test that I wrote a while ago, but forgot to 'svn add'
[33m5721bdd[m Don't pretend we can parse enum case refined types.
[33m0974d7d[m IRGen: Register ObjC protocol conformances at runtime when JIT-ing extensions.
[33m1c826fb[m Synchronize a generic function type's requirements with archetype requirements.
[33md2de66b[m IRGen: Include formal protocol conformances in ObjC class and protocol data.
[33me35da35[m Parser / code completion: disambiguate <...> as a generic parameter list if followed by a code completion token
[33m62d3b16[m Workaround 15254902 -- Simple generic functions aren't inlined
[33m37a0827[m Debug info: fix a bug with indirect values by using enums for type-safety. rdar://problem/15248201
[33mbdfd263[m [build] Use CLANG_SRC_ROOT instead of a hardcoded path.
[33md415380[m [perftests] Fix check for if performance tests passed.
[33me82167c[m [perftests] Always submit performance test results, even with failures.
[33m0d50abc[m Runtime: Sketch out a layout for NominalTypeDescriptor.
[33m0adc639[m ABI.rst: Formatting OCD.
[33mb356170[m [build] Refer to clang path via LLVM_{SRC,OBJ}_ROOT.
[33me51e9bf[m Fix comment style
[33ma3bf2b4[m Code completion: basic completion for qualified references to enum elements
[33mac43e98[m Added SILExternalSource, a class that can be used to interpose on the SIL linking process.  Under the following conditions:
[33ma8a77f7[m Check the condition of the ternary operator along with its other subexpressions.
[33mcfd07dd[m Release notes: Fix a typo
[33m2adb808[m 'union' -> 'enum' in test module name.
[33m302609d[m Sema: Diagnose when enum cases are matched from other enum types and non-enum types.
[33m82e2f3d[m Sema: Allow EnumElementPatterns to infer bound generic parameters.
[33m57c8040[m Introduce a skeletal man page for swift, to satisfy buildit verification.
[33mbc13aca[m [CMake] Introduce SWIFT_EXTRA_FLAGS to set additional flags at configure time.
[33m08b5998[m A better release note for Array<T>
[33m0a85753[m Sema: Resolve unqualified EnumElementPatterns.
[33m65654de[m Code completion: add tests for the previous commit (complete references to enum elements)
[33mde6a0a0[m Code completion: complete references to enum elements in switch statements when we have enough type context to find the correct enum
[33m90eeeda[m Release note the death of Vector<T> in favor of Array<T>
[33m9a4528c[m Move gyb from tools/ to utils/
[33mb78fefd[m Vector is dead.  Long live Array.
[33m13b834c[m stdlib/FixedPoint: move more @transparent annotations to extensions, as suggested by Anna
[33m2aed708[m stdlib/FixedPoint, stdlib/Float: mark constructors and comparison functions as @transparent
[33mc103647[m Release note div by zero and missing return diagnostics.
[33m2415cd9[m Code completion: rename a variable for consistency with AST node name
[33md527df5[m [ClangImporter] Force NSDictionary's subscript index to conform to NSCopying.
[33m65dc82d[m Debug info: emit Archetypes and their conforming protocols. Fixes rdar://problem/15209779 and rdar://problem/15211793.
[33m2a8d4bb[m Do not emit debug info for external references.
[33mf164a88[m IRGen: Emit ObjC protocol records for protocols used in casts.
[33med33141[m Turn "missing return" diagnostic into a hard error.
[33m36e6f36[m Further Vector -> Array migration.  Also updated Array with several good suggestions from Dave A.
[33m381d6ff[m stdlib/FixedPoint: Fix coding style
[33mb17f512[m AST Verifier: Check that non-static member functions have the correct type set for the "self" parametr.
[33m1e97539[m Model lvalue-to-rvalue conversion as a conversion restriction.
[33m03db2c6[m Add a reminder to check the namespace for language constants later.
[33m9e87ae2[m Don't perform tuple conversions so eagerly during application.
[33me980d87[m Explicitly model the single-element-tuple-to-scalar conversion.
[33ma745686[m Separately convert each element of a dictionary literal to the element type.
[33m7d3472e[m Separately convert each element in an array literal to the array element type.
[33m71a1b56[m Use disjunctions to decide between tuple-to-tuple and scalar-to-tuple.
[33m5bd53db[m Actually report success when at least one of the disjunction terms succeeds.
[33mfe5f30e[m Change LLVM_DELETED_FUNCTION => = delete since we are using c++11 (sorry about that Joe).
[33mbdf7cbe[m [sil-combine] Initial SILCombine implementation.
[33m964dd6a[m Replace assert(false) with llvm_unreachable
[33m16e66e6[m IRGen: Swallow the 'Proto' suffix the Clang import tags onto ObjC protocols.
[33md273b79[m IRGen: Emit downcasts to ObjC protocol types.
[33md839801[m Interpreter: perform SIL linking for loaded modules
[33m65a4766[m Demote the integer literal overflow error into warning in some cases.
[33mf5d64a3[m IRGen: Handle concrete-to-archetype casts.
[33mcbe05e2[m Sema: Type-check concrete-to-archetype and concrete-to-existential casts.
[33m5b1bd6e[m AST: Add checked cast kinds for concrete-to-archetype and concrete-to-unrelated-existential casts.
[33m8d5e8e2[m ABI.rst: Describe the generic parameter vector layout.
[33m60e338d[m SILParser: handle negative integer literal.
[33mcf146ec[m Use disjunctions for "deep" equality match vs. user-defined conversions.
[33m38745bf[m Add division by zero and integer division overflow diagnostics.
[33md9906f5[m Refactor: properly group the overflow diagnostics.
[33mde416e2[m Eliminate ConstraintSystem::isSubtypeOf().
[33m610fc5f[m Kill ConstraintSystem::isConvertibleTo().
[33m278cbad[m Code completion: don't produce any results in enum case.  Only integer literals are allowed in that context.
[33mf53c93a[m Eliminate the "trivial" bit from FunctionConversionExpr.
[33m54b9f8c[m ClangImporter: Make sure Foundation is available when bridging NSString.
[33mdd66c7e[m Update LangRef for 'as' syntax change that happened some time ago
[33m863ffe3[m Fix the weighting of generic default literal types (slices, dictionaries).
[33m0f93a92[m Code completion: complete '!' and '?' on Optional<T>
[33m993da4c[m Release note dynamic struct layout.
[33md500349[m SILOpt: remove accidental fall-through from capture promotion to next case
[33m2670111[m Release note support for overflow detection in integer constant expressions.
[33m961c2b0[m Use the correct cache to lookup builtin info.
[33mcf2ff89[m Add type info to the constant expression overflow message
[33m6c265ef[m Use subtyping constraints rather than conversion constraints for dot access.
[33m08903d9[m Don't use ConstraintSystem::matchTypes() when comparing solutions.
[33mba16f88[m Unbreak CMake build.
[33m8180068[m ABI.rst: Finish describing class metadata layout.
[33m94dbad4[m Add (but do not enable by default) a pass for closure capture promotion (rdar://problem/14757727).
[33m3ed49cf[m Fix typo in vtable example: s/B/C/
[33mcd74f49[m Revert "SILGen: Enable lvalue-to-lvalue copy_addr initialization peephole by default."
[33m747d6f5[m [CMake] Conditionalize the 2.8.10 requirement based on whether the Xcode generator was used.
[33m9187b92[m [serialization] Accept @weak and @unowned on VarDecls.
[33mcadead3[m [serialization] Wrap attribute checking in a nice template function.
[33m7277b12[m [serialization] Handle @transparent on constructors and extensions as well.
[33m016701a[m [CMake] CMake 2.8.9 works fine, at least with the makefile generator.
[33mad37992[m SILGen: Don't apply the copy_addr peephole to initializations from computed lvalues.
[33m47dd733[m SILGen: Enable lvalue-to-lvalue copy_addr initialization peephole by default.
[33m06fb25c[m ABI.rst: Point out that empty aggregates are allowed and take no space.
[33m823dab7[m code cleanups: remove a pointless cl::opt and inline some now really similar functions.
[33m528ab40[m Teach definite-init to forward stored values to copy_addrs, exploding them on demand.  This finally resolves rdar://15170149, which allows a bunch of tests in SILPasses/constant_propagation.swift to work.
[33m46e3b7b[m Several changes: - Enhance the driver of definite initialization to scalarize copyaddrs   that span multiple tuple elements so that DI can only thing of a single   element at a time (when it comes to copy_addrs - inout and escapes can   span anything of course) - Teach load eliminate to explode copyaddrs into its components when   doing so would allow eliminating a load. - Fix a bug where indexing into a tuple inside an enum could cause   accesses to be attributed to the wrong element, which manifested   as a crash on the testsuite now that DI is being more aggressive.
[33md4ac7b6[m tweak release notes.
[33m46a4bc1[m Code completion: preserve the AST for the parsed top-level code.  This enables us to find iteration variables while doing code completion in nested top-level code.
[33md503c65[m SILParser: parse sil_vtable
[33m4eb24f9[m Release note integer literal overflows.
[33m74645a2[m Step #2 of the load promotion rewrite: change how assigns are handled.
[33m4d50044[m Add MandatoryInlinedLocation SIL location type.
[33m5708f5d[m Take a big step towards rewriting how definite init promotes loads into SSA form, moving to resolving rdar://15170149.
[33mf57e20e[m Use disjunctions for subclass-to-superclass vs. user-defined conversions.
[33ma6cde9c[m Add a convenience function to map a CanType+StructDecl to the mapped CanType.  This doesn't really fit on SILBuilder, but until StructType and BoundGenericStructType are merged, this will do.
[33md8676b7[m Debug info: Emit something for local variables without storage. rdar://problem/14802771.
[33mff510f9[m Use disjunctions to disambiguiate existential vs. user-defined conversions.
[33m1f47c79[m Remove a fixed FIXME
[33m27bd312[m silence warning
[33m5dbf111[m Debug info: The end-of-prologue location of an explicit closure now has a line number again. rdar://problem/15204469 again.
[33m47e550a[m A notable deletion.
[33m740fc0a[m Revert "Revert "Reimplement integer arithmetic overflow checking to use special, error on overflow builtins""
[33m7f688c8[m Debug info: attach more appropriate locations to the phi nodes at the beginning of each basic block. rdar://15189057
[33m9bd48f8[m Bugfix. Thanks for catching this, Jordan.
[33m158ed79[m Adds overflow checking for floating point literals.  The approach is the same as for integer literals.
[33m684a588[m Proposal for how to handle option sets.
[33ma36025e[m [Make] Introduce SWIFT_OPTIMIZED variable, enabled by default like in the cmake build.
[33m6c19463[m Remove a bogus assertion that breaks ambiguous T -> U? conversions.
[33m38a0f85[m [Make] Build the stdlib with -O2, -O0 causes crashes at runtime.
[33m8a896ef[m Use disjunction conversions to handle T -> U? conversion ambiguity.
[33m78406b4[m 14834091 swift_allocObject should not sleep when memory is unavailable
[33m589bd73[m simplify this, per Joe's advice.
[33m8a6b5a2[m add some helpers that return the struct/tuple associated with a {struct|tuple}_element[_addr] instruction.
[33ma73952a[m Abort if single threaded and the address space is exhausted
[33mae0826e[m Fix compilation issues with ToT Clang
[33m6be398d[m Don't cast Size type to unsigned, use .getValue()
[33m00467ba[m Reintroduce "Add support for Axle library." from 9292. Added an dependency to prevent building the core and axle core at the same time.
[33mf40ba62[m Make integer literals 2048-bit.  This covers the whole Float64 range.
[33me145b5b[m teach allocbox_to_stack that init_existential and destroy_addr don't inherently keep a stack object alive.  This allows it to remove 50 more stack allocations from the stdlib.
[33mb6ce3ca[m Teach allocbox_to_stack to be a bit smarter when removing dead instructions: have it remove trivially dead operands of the dead instructions.  On the same testcase as last time, this eliminates a dead metatype, getting us to:
[33m0d610cf[m teach AllocBoxToStack to remove alloc_stack's that are artificial (or inlined) and only stored to.  With this change, we now -emit-sil this testcase:
[33m3d8e8d1[m Remove fixed FIXMEs
[33m3c87c2f[m IRGen: Copy superclass generic parameters from superclass metadata.
[33mb233f5f[m runtime: Start class layout from superclass's size and alignment.
[33m3478f65[m IRGen: Copy field offset vectors from super metadata.
[33ma818f6f[m IRGen: Steal single-Swift-refcounted partial_apply argument as context.
[33ma288f16[m SILGenPattern: Refactor clause matrix specialization to filter pattern set by each pattern.
[33mcf457d2[m Revert "Add support for Axle library." It breaks the build.
[33mc5f20ca[m [IDE] When syntax-annotating a string interpolation, make sure that quotes are always annotated in a string-literal token.
[33m41aca3e[m Add support for Axle library.  Please note that AxeBuiltins.gyb will be expanded soon for the other graphics builtins.
[33m74ba1e8[m [Parser] In Parser::parseBraceItemList, when we don't find a right brace recover by using the PreviousLoc.
[33m84b0664[m [Frontend] For verifying diagnostics, allow this format: "expected-error@<Relative line offset>{{text}}".
[33md9e0921[m [ASTWalker] Walk the pattern of a ForEachStmt.
[33mf995d2a[m [ASTWalker] Walk the TypeRepr of a typealias.
[33mc40f519[m [Sema] A base decl reference that was not written in source should be implicit.
[33mb8baf03[m rename parseAttribute* to parseDeclAttribute*, since they are for decl attributes.
[33m24ff772[m switch get/set specifiers to the new attribute syntax, and completely remove the old syntax, woo.
[33md564b86[m fix the astprinter to print attributes in the right place, which should fix IDE/print_ast_tc_decls.swift
[33mb3fe5a3[m stop parsing old attribute syntax on functions.
[33m6d6ad84[m switch ast printer to print attributes in the new syntax.
[33mb47ad7f[m Perform SIL linking when running code in REPL
[33md585bf1[m Fix tests after r9275
[33m61c5039[m rip out parser support for the old attribute syntax from a bunch of decl kinds. notably, var and func are left to go (as are get/set)
[33m6c36f9f[m adopt more modern attribute syntax throughout the testsuite.
[33md3d6d71[m Switch a bunch of attributes to the new syntax.  There are still some left, but many fewer after this.
[33md3e998a[m switch AttributedTypeRepr::printAttrs to use the new attribute syntax. This code apparently isn't exercised by the testsuite.
[33ma476f65[m Abolish the old attribute syntax for type attributes (and SIL type attrs)
[33m704126b[m clients of TypeAttribute are better behaved than those of DeclAttribute, there is no need for a shadow array of bools to know if the attributes are set, we can just see if they have a sourceloc.
[33m80aee75[m The weak/unowned attributes are overloaded to mean two things: 1) on decls, they say the decl is weak/unowned. 2) in sil mode, on types, they indicate that the type has weak/unowned storage.
[33me341dd9[m inout, localstorage and silself are type attributes, not decl attributes.
[33mb75e7c1[m cc, auto_closure, thin, and objc_block attributes are only valid on types, make them specific to types.  While we're at it, improve the diagnostic for when a decl-specific attribute is applied to a type, or a type-specific attribute is applied to a decl.
[33m6e006bb[m remove the (unused now) AttrListKind enum which previously distinguished between decl and type attributes.  Now that these are going down different paths, it isn't needed.
[33m0dd0602[m introduce a new (thinner) TypeAttributes class, which *just* holds type attributes.  Use this when parsing type-annotations, and when building TypeReprs.
[33m4f6af95[m if an attribute is used that isn't valid on a type, diagnose the specific attribute.
[33m82f6a0b[m kernel/vertex/fragment are decl attributes, not type attributes.
[33m09705dc[m 1) Redesign DeclAttributes to be based around an array indexed by attribute, instead    of having a ton of ad-hoc bools in it.  This allows us to consolidate a ton of    boilerplate, eliminating 250 lines of code:
[33ma718c8f[m start improving the attribute implementation: start with passing down a "kind" for the attribute, to indicate whether the caller is looking for a type, decl, or sil attribute.  This is currently unused.
[33m9f43929[m Implement support for type-attributes on the result of a function type or decl. Also, improve error recovery for new-syntax attributes.
[33m921e248[m move an interpreter-based test to the interpreter directormove an interpreter-based test to the interpreter directoryy
[33mab04ce9[m IRGen: Populate fixed offsets in class metadata when we have them.
[33m4a92814[m Fix typo in comments
[33m28c24ea[m Fix Metadata unittest after r9249
[33m4204c02[m Revert r9252 -- 'underflow' is not the correct term here
[33m58e4494[m Integer overflow diagnostics: specialize diagnostic message for underflow
[33m011284e[m Make minus sign part of IntegerLiteralExpr and make integers literals 136-bits wide
[33me4a22d0[m Push a generic root class through the interpreter.
[33m280fc60[m IRGen, runtime: Poke generic size and alignment into class metadata.
[33m9ab5414[m IRGen: Load dependent class instance size and alignment from metadata.
[33m4ff3c62[m IRGen: Include instance size and alignment mask in class metadata.
[33m89a8cdd[m AST Printer: add PrintOptions::SynthesizeSugarOnTypes for use by LLDB in some cases
[33ma0d7510[m improve a comment, improve support for copyaddrs to and from the same aggregate.
[33m760438f[m [docs] Fix internal links in ModulesBuild.rst.
[33md18f19f[m [docs] Sketch out a Modules Build Model doc.
[33m1ecf1fb[m Distribute Module's lookup cache to its subclasses.
[33mad75aa5[m Remove -l flag from Swift interim driver.
[33mce612d3[m Remove TranslationUnit's HasBuiltinModuleAccess field.
[33m8b6b9b7[m Use 'unsigned' to represent a present input buffer ID.
[33m43dd2f7[m runtime: Add swift_initClassMetadata function.
[33m2acfadb[m AST printer: correctly print more complex cases of variadic tuple patterns
[33m88e5426[m Debug info: Line table: Calls to swift_releases should not jump to the point where that memory was retained/allocated. rdar://problem/15204469
[33m14edefa[m Update order of operations in test/IRGen/enum.sil.
[33m77b1cda[m IRGen: Emit runtime call to initialize generic class field offsets.
[33m07ccb7c[m Simplify superclass type matching.
[33mc8b16f7[m Debug info: Linetable-wise, treat all closure expressions alike and ignore them. rdar://problem/15204469
[33me3a664c[m Factor out the scalar-to-tuple type matching.
[33me90c93b[m [sil] Removed stale comment and replaced one instance of auto with the actual type for additional clarity.
[33md0822c5[m Start factoring the solver's type matching to support multiple matches.
[33m1d646a8[m Implement overflow checking on integer literals (1 of 2)
[33madc913b[m Debug info: The end of the prologue should point to the opening brace. Some refactoring the separate the needs of the line table versus decls. rdar://problem/15204469
[33mb8089da[m Remove a FIXME
[33m73bedde[m IRGen: Misc cleanups, no functionality change.
[33mb724a6e[m IRGen: Fix an off-by-one in class field access calculation.
[33m9f0ba72[m Isolate the tuple-to-tuple or scalar-to-tuple conversion decision somewhat.
[33md615072[m Lookup visible decls / code completion: don't show overridden decls (show only the overriding decl)
[33m94bbb55[m Fix up Generator release note
[33me2a8c60[m [stdlib] GenericIVar is dead; long live "var _: T"!
[33m120ab19[m Zap anther vestige of overload sets
[33m249ad9e[m Remove overload sets from the contraint system.
[33m2a0acba[m Teach ConstraintSystem::addOverloadSet() not to use OverloadSets.
[33m7301ac3[m Don't interleave the vtable and field offset vectors in generic class metadata.
[33m6dc7870[m Prefer to solve the first disjunction with the smallest # of terms.
[33m5c90f30[m Teach ConstraintSystem::addOverloadSet() to create disjunction constraints.
[33m9d51719[m Replace single-element overload sets with an overload-binding constraint.
[33m1690147[m Introduce an overload-binding constraint.
[33mf9e75bd[m Test that fixed-layout generic classes emit ivar offsets.
[33mbc0aadb[m Validate that SIL functions don't use LValueTypes as values.
[33m2e41a8d[m Fix CRTP on SILVisitor.
[33m1a95c47[m Split OverloadChoice into its own header.
[33m2d215d6[m Split Constraint and ConstraintLocator into their own headers.
[33mb898d1d[m Don't pass a null pointer as the NonFixedOffsets for classes.
[33m256847d[m SIL Parser: Substitute parsed ref_element_addr element types.
[33m0fdb562[m IRGen: Test fragile access into nongeneric subclass of generic.
[33mb4f0a4b[m [Frontend] Introduce "-Xclang" option to pass extra flags to the clang importer.
[33m7c1bc94[m IRGen: Substitute superclass generic parameters.
[33me084fa7[m Fix a -Wnon-virtual-dtor warning.
[33mc2d3da3[m IRGen: Stub out some dependencies on fixed layout in class metadata codegen.
[33mb6c5da2[m Conditionalize dynamic class layout on -enable-dynamic-value-type-layout.
[33mbb7765a[m Fix the build by temporarily adding Clang libraries to libSIL
[33m3e7adcd[m Remove the wrong dependency in CMakeLists
[33m94d2c06[m Replace MemPromotion with Definitie Init in debug output.
[33m5b183cd[m Updated lib/SILGen/CMakeLists.txt in light of r9184 removing OwnershipConventions.cpp.
[33m9de1dbf[m [sil] Teach StructInsts how to return the operand for a given VarDecl.
[33me173d3c[m remove stale comment
[33m9ad9548[m Debug info: Update the inout testcase and emit debug information for unboxed [inout] arguments.
[33m8fbc790[m Subsume OwnershipConventions into SILFunctionType.
[33m1c742f1[m Move SubstTypeVisitor to AST.
[33me0f3477[m Diagnose attempts to declare a postfix '!' operator.
[33mcf9bdf8[m ABI.rst: Finish up some talk about class metadata I left mid-sentence.
[33mdbb2b65[m Release note removal of 'as!'.
[33m1bdbc97[m Drop the 'x as! T' cast syntax.
[33mb314941[m SILGen: Generate an unconditional checked cast for (x as T)!.
[33m6a19042[m Lookup visible decls / code completion: don't show constructors from superclass
[33md8391f6[m Release notes for the DynamicLookup downcasting via postfix '!'.
[33m014b63e[m Restrict the DynamicLookup postfix '!' downcast to cast to class types.
[33mc0df8ff[m Bring swift up to sync with ToT LLVM. Please *upgrade both*. Lookup types using a DITypeIdentifierMap.
[33m7b936e2[m Remove unfinished notion of "Component" (originally for resilience).
[33m9135f61[m Lookup visible decls: don't allocate two vectors when we only need one
[33me7b78b7[m Introduce conjunction constraints into the type checker.
[33ma62b864[m ABI: Note that we don't currently provide labels in tuple metadata.
[33me3376d3[m ReST mistake.
[33mb92fa26[m ABI: Document the tuple, function, protocol, and metatype metadata layouts.
[33m0c78c40[m Teach copy_addr explosion to scalarize any generated loads so that we can forward larger stores to them.
[33me19ce56[m Keep track of stores produced by exploded copy_addrs in the NonLoadUses set.  This is the last fix required to get copy_addr to forward to the load in this trivial example from rdar://15170149:
[33ma3836f4[m Fix -enable-copyaddr-forwarding to properly extract out the result of a large aggregate store to forward to a smaller load, e.g. to feed a copyaddr of an Int to a load of the Builtin.Int64 inside of it.
[33m1284eac[m The Uses vector can grow now, ElementPromotion::doIt shouldn't iterate over it with a for-each loop.
[33m25deab5[m Misc. cleanup related to use of TranslationUnit.
[33m98b30d4[m Lookup visible decls: refactor the way it propagates lookup state
[33m99737ed[m Fix segfault crash bug in Verifier check and correct error message
[33m5325fd3[m Debug info: Don't make byref types indirect.
[33m84f4397[m Make BumpAllocatedString a member of IRGenDebugInfo.
[33mbca0a8e[m Add a dump() function to DebugTypeInfo.
[33m9b8a94b[m Support forced downcasting of DynamicLookup lvalues via postfix '!'.
[33ma2807bd[m ABI.rst: Clarify that struct field offset is given in bytes.
[33m0da7502[m ABI.rst: Describe struct and enum metadata layout.
[33md0bf4ed[m Don't track "kind" constraints; we don't use them for anything now.
[33m5a67d4c[m Rename ConstraintClassification::Archetype to ConstraintClassification::TypeProperty
[33mf51542a[m Implement basic support for downcasting from DynamicLookup via postfix '!'.
[33m216d3ed[m ABI.rst: Add subheadings to the Mangling section.
[33ma906658[m ABI.rst: Describe type metadata header.
[33m1c7641d[m ABI.rst: Fix description of struct layout algorithm.
[33m3500e82[m Debug info: Implement the correct lookup for the DeclContext of NameAlias types.
[33m14daeaa[m Revert "temporarily disable assertion while I figure out what's wrong."
[33mc6eac89[m Introduce disjunction constraints into the type checker.
[33md084573[m ABI.rst: Update struct layout discussion.
[33m51645d2[m temporarily disable assertion while I figure out what's wrong.
[33m17560ab[m Debug info: use the new getOrCreateDesugaredType() function to create aliased types, too.
[33m104dd0e[m ABI.rst: Update enum layout discussion.
[33m29066ca[m SIL: Make consistent use of element-type-deriving createStruct/TupleExtract helpers in DefiniteInitialization.
[33m8f68e1b[m SIL: Add create(Struct,Tuple)ElementAddr helpers that derive the element type.
[33m22be594[m [AST] Making the walking parent the TU when walking a SourceFile.
[33m65fd2ee[m [IDE] Provide 'walk' method in SourceEntityWalker for SourceFiles.
[33mde05f45[m [Frontend] Add a const version of CompilerInvocation::getLangOptions.
[33me57ab17[m AllocBoxToStack: Don't promote if there's no "last release".
[33m802140a[m SIL: Disable a verifier for ApplyInst substitutions that breaks because of PolymorphicFunctionType uniqueness issues.
[33m5650130[m SIL: Substitute struct field types when creating struct ops in passes.
[33m00f6840[m Let dynamic struct layout out from behind the -enable-dynamic-value-type-layout guard.
[33m005e684[m Run a generic struct through the interpreter.
[33m3957ac0[m IRGen: Consult the metadata field offset vector for StructNonFixedOffsets.
[33m2123682[m Code completion / parser: propagate code completion bits from braced stmt
[33m293bc08[m [stdlib] Enumerator is dead; long live Generator!
[33m6aa9242[m IRGen: Lay out fields when instantiating generic struct metadata.
[33m7789109[m Remove unused forward declarations
[33m75b4fcd[m Progress towards having memory promotion explode copy_addrs when necessary to feed loads.  The new behavior is currently only enabled by the -enable-copyaddr-forwarding flag and is known broken, I'm working on it!
[33mef58b85[m runtime: Add a swift_initStructMetadata entry point.
[33mcb62753[m Debug info: don't fully desugar types when emitting them, just recursively peel off the outermost layer of icing.
[33m41c63e2[m Debug info: Emit swift.type as a name alias $swift.type so the data 	formatters can recognize is easily.
[33me88786b[m runtime: Factor out basic layout from getTupleTypeMetadata.
[33maf706c8[m swift::SILFunctionType::ParameterType -> swift::SILParameterInfo swift::SILFunctionType::ReturnType -> swift::SILReturnInfo
[33m5226266[m Don't fall out of the SILFunctionType serialization code.
[33m6d8942f[m IRGen: Put struct field offsets into struct metadata.
[33m5ed38c0[m Clarify SourceFile vs. TranslationUnit interfaces for SILGen and IRGen.
[33maf4ad7e[m Code completion: assign a special semantic context for iteration variables in a C-style for loop
[33m9f7325a[m Axle: add code completions for Vec<type, length> and Matrix<type, rows, cols>
[33m939f24a[m Code completion: Generic parameter name chunks have text.
[33mf7b84d4[m Code completion: add chunks for <, >, and generic parameters.
[33m9d09d9c[m Adopt SourceFile for type checking.
[33m0d2ccf7[m Adopt SourceFile in name-binding.
[33mfe37b82[m IRGen: Rename TypeInfo::initializeValueWitnessTable to initializeMetadata.
[33mda196a8[m IRGen: Stub out a StructNonFixedOffsets class.
[33me59e533[m Added include guard and fixed filename.  Thanks Dmitri
[33m4389759[m Silence warning.
[33m9a6632f[m Add Vec<UIntNNN, M> support.
[33m7fee09b[m Axle: Implement Matrix<T, N> and Matrix<T, N, M> syntactic sugar.
[33m23ca481[m Debug info: Emit an artificial variable to describe type parameters. Implements rdar://problem/14978875
[33m201d3cf[m Add a testcase for rdar://problem/15187441
[33m03c4c43[m Hey, we actually have a "proper C++11 compiler" now.
[33ma581486[m Code completion: assign a special semantic context for calling overridden decls through 'super'
[33m6ad6518[m AST Printer: prefer visit() to nested print() calls
[33mfba128e[m Axle: Implement Vec<T, N> syntactic sugar for the VecTxN structs.
[33mb880e60[m Remove SILFunctionTypeInfo in favor of SILFunctionType. We still don't actually use this as a type, however.
[33mdcf9d15[m Rewrite SILFunctionTypeInfo in terms of SILFunctionType.
[33maf1aa96[m Make ArrayRefView::iterator conform to the random-access iterator requirements.
[33ma38abec[m Introduce (but don't yet use) SILFunctionType.
[33m826bdfd[m IRGen: Remove some debug code.
[33m57ea202[m Adopt '_TPA.*' as a proper mangling for partial_apply thunks.
[33m1056668[m IRGen: Give non-fixed structs a proper explosion schema.
[33m589341a[m Replace operator StringMaps with Identifier-keyed DenseMaps.
[33me83d0d6[m Use Optional for SourceFile::getImportBufferID, instead of a sentinel.
[33mccce45b[m Improve comments for SourceFile.
[33m9474844[m Use SourceFile in TypeChecker's REPL-specific logic.
[33m266c445[m Push ASTStage down into SourceFile.
[33m9f7ea27[m Make performAutoImport work in terms of SourceFiles.
[33m55d4d05[m Don't automatically create one SourceFile for every TranslationUnit.
[33m0978720[m Push TUKind into SourceFile (as InputKind).
[33m49cd5b1[m Use SourceFile in IRGen.
[33mcba6b2c[m Use SourceFile in REPL code completion.
[33mf5de2e4[m Push SourceFile into Parser and REPL somewhat.
[33m597640a[m Introduce "SourceFile" within a TranslationUnit.
[33m37bb48a[m Debug info: Create debug type info for box-allocated types by using their Decl. This should allow us to emit debug info for boxed generic types.
[33mbbaa071[m refactor the checkLoadAccessPathAndComputeValue to be a method on ElementPromotion, preparing it for future changes.  No functionality change.
[33m32c40e8[m Document @sil_self.
[33m3826808[m IRGen: Apply substitutions when laying out bound generic struct types.
[33ma012f60[m Make protocol methods generic over <Self>.
[33me6d578b[m SIL Parser: Substitute the result type of parsed struct_extract and struct_element_addr.
[33m0dbf32c[m improve the debug output for inout deshadowing.  I'm satisfied that it is catching all the cases it should right now.  The primary misses are by-ref closure captures, which are modeled as inout arguments but have no inout shadow to remove.
[33mf9c6bf0[m Initial framework for generating Axle metadata.  This currently only supports the function level metadata.  Argument and result metadata to come later
[33mb4d196e[m fix unbalanced paren.
[33m50c7f54[m IRGen: Anonymize EnumImplStrategy; it's a detail of GenEnum.cpp.
[33m99a0c64[m IRGen: More robustly lay out enums with payloads.
[33medb520c[m IRGen: Assert that fixed-size aggregates are laid out as LLVM types of matching size.
[33m2ac198d[m IRGen: Use packed structs to accurately lay out aggregate types.
[33m5cfdb86[m IRGen: Multiply vector size by number of elements.
[33m598793f[m IRGen: LLVM considers x86_fp80 to be 16 bytes in size.
[33m6895c34[m Code completion: report "semantic context" for every code completion result
[33mf07d0c1[m Lookup visible decls: remove no-op code
[33ma79cee2[m Revert "Reimplement integer arithmetic overflow checking to use special, error on overflow builtins"
[33m105e501[m Get rid of duplication in this file. (Sorry about that.)
[33ma0a6a5a[m Add file accidentally left out of previous commit.
[33ma1badb1[m Add kernel/shader data to SILFunction.
[33mad0ee9b[m AllocBoxToStack: Promote the last release of a box to destroy_addr.
[33m2099abf[m Parser: improve recovery for extra braces in a nominal decl
[33m627fec7[m Debug info: fix scoping for boxed values that get promoted to stack allocated values. Fixes rdar://problem/15035350
[33mbfbe25f[m Fix comment: 'constructor' is no longer a keyword
[33m21e6e93[m Improve inout shadow elimination to apply to values of trivial type which don't get their init/take flags reliably set.  This causes the transformation to trigger on many many many more inout shadows, and also breaks the debug info test.
[33m1acbc5a[m SILGen: Fix a crash when 'x!' was able to emit into a buffer.
[33mf012f40[m Fix a bug in SILType::isInOutArgument that caused it to assert on indirect returns.
[33mbfe5278[m [serialization] XRefs to types can be fully resolved by their names.
[33mec020af[m rename file to have the right suffix.
[33mc4abbec[m [SIL] Print the constant expression as part of the arithmetic overflow error message
[33mccc1dae[m Reimplement integer arithmetic overflow checking to use special, error on overflow builtins
[33m275ce09[m [ASTWalker] Walk the TypeReprs of an extension decl.
[33m87e5114[m [docs] SIL.rst: ReST fixups
[33md9560a9[m SILGen: Simplify lvalue initialization peephole when dealing with semantic stores.
[33mfa26956[m Release note 'Generator' protocol.
[33m2ffd735[m SILGen: Peephole lvalue-to-lvalue initializations as copy_addrs.
[33m323314a[m Dmitri already fixed this for me yesterday, so [9023] wasn't necessary.  Reverting it.
[33m86ed376[m Oops, forgot to svn add a critical portion of yesterday's submission (r9012).  Thanks Dmitri for catching this.
[33mefe1ff3[m update example for the "new" syntax.
[33m3eb220d[m IRGen: Fix layout bug with payloaded enums.
[33m554fcc9[m SILGen: Use SILBuilder::emitDestroyAddr in place of TypeLowering::emitDestroyAddress.
[33mb5954b1[m Reenable some assertions in Mangle I shouldn't have silenced.
[33mb66ce0d[m Lookup visible decls: rename a function to reflect reality
[33mf751aaf[m Excommunicate Enumerator as a known protocol.
[33m0bda31c[m Switch over to Generator as the 'for' loop protocol.
[33m3bb5ae1[m ExternalNameLookup: fix the build and address review comments
[33m03e51df[m Added ExternalNameLookup, a mechanism that allows UnqualifiedLookup to ask an external source for names.  There are two phases to this external lookup:
[33m9d3720c[m Excise TranslationUnit from some parts of code completion and type checking.
[33mb31ab72[m Implement inout deshadowing.  This currently doesn't trigger on non-trivial types but seems to work in other cases.  It still needs to load+release to be emitted as destroy_addr, and isn't extensively tested.
[33m7f6a183[m Code completion: [really] type check all decl contexts of the completion point, not just the nearest one
[33m5cca960[m Remove DeclContext from IdentTypeRepr.
[33m9ca8498[m Code completion: type check all decl contexts of the completion point, not just the nearest one
[33m5934df5[m [docs] Update Modules User Model based on discussion and feedback.
[33mc2b00fc[m Excise the global TranslationUnit from TypeChecker.
[33m348ace2[m sketch some more infrastructure for inout promotion, no functionality yet.
[33m4043b9c[m MandatoryInlining: Correct cast<> to dyn_cast<>
[33m08c2cc5[m Sema: Type-check the Generator protocol in for loops alongside Enumerators.
[33m4997737[m Anoint 'Generator' as a known protocol.
[33m7dde669[m Code completion tests: move some tests to a separate file.  I will be adding more similar tests soon.
[33m86fdde3[m Verify that we have interface types wherever we expect them.
[33m73ad4db[m Completely remove the stacktossa pass, it is dead now.
[33m2489f00[m Disable the diagnostics level "stack to SSA" pass, which is almost completely subsumed by definite initialization.
[33m821560f[m Compute interface types for destructors.
[33m7cbe03c[m Fix typo in comment.
[33md33d78a[m Compute interface types for constructors.
[33m7fc27208[m SILGen: Replace uses of TypeLowering::emitCopyInto with CopyAddrInsts.
[33mfb836cc[m cast<> never fails, no need for 'if'
[33mfcdf862[m Code completion: use a helper function to add type annotations -- it does getString() for us
[33mfdd08a4[m Remove a pile of typealiases that can be deduced associated type witnesses.
[33mabd8a6d[m SIL.rst: Update for attribute syntax change.
[33m6358874[m SIL.rst: Document new alloc_stack/dealloc_stack invariants enforced by verifier.
[33m865310a[m SIL: Verify alloc_stack/dealloc_stack balancing.
[33mfd9fd40[m Properly nest class initializer 'self' box with other argument boxes.
[33mce254c5[m Fix nesting of boxes in allocbox_to_stack test.
[33mf6f78fa[m Balance alloc_stack/dealloc_stack in parser test.
[33mdf9eb39[m tweak comment as requested by Jordan.
[33m087e9f7[m Member lookup: finding a superclass doesn't mean we should skip protocols.
[33m1633ce9[m Fill in missing comment.
[33m849ea33[m When constructing a CodeCompletionString, compute the required memory chunk size correctly
[33m8b127b9[m Properly use type witnesses when determining the type of an associated type.
[33m0bff1eb[m SILGen: Emit cleanups before returning from enum case constructors.
[33mc6d7c29[m make the scan for copy_addr slightly stronger when emitting a destroy_addr.
[33m607114f[m Introduce a new "emitDestroyAddr" function, which attempts to fold destroy_addr into preceding copy_addr instruction when totally trivial.  Adopt this in SILGen, eliminating a couple dozen destroy_addr instructions from the stdlib and producing more canonical SIL.
[33m3e9a947[m Fix typo in comments
[33me1b0d4e[m the new approach will only look at copy_addr's.  Sketch this out.
[33m1687382[m Checkpoint some progress on inout deshadowing, since I'm about to take a direction change and remove it all. :-)
[33mfdd203f[m Compute interface types for non-generic functions in a generic context.
[33mb7e66f9[m [ASTDumper] Print the overridden decl.
[33m745f266[m [serialization] Make FailedImportModule::Status const, no functionality change.
[33m559a718[m SIL: Verify that upcasts and downcasts cast between valid super/sub-classes.
[33mabeaef8[m Track the generic parameters and requirements of nominal type declarations.
[33m6424e99[m SIL: Rename 'condbranch' to the more idiomatic 'cond_br'.
[33m467626f[m New file that I forgot to svn-add.
[33maccdbf3[m SIL.rst: Clarify language describing enum initialization.
[33md6b01a4[m add a new (skeleton) pass for deshadowing inout variables.
[33m6a84a1c[m SIL.rst: Describe SIL vtables.
[33m1e09725[m pass -module-name to the build command for the stdlib.  Rearrange to pass -c at the end to make it easier to copy and paste the line for messing with sil.
[33m235f4e5[m SILGenPattern: Kill redundant helper function.
[33m8b652e3[m Require the operand of postfix '!' to be an optional type.
[33m611a5cc[m Replace the library-defined postfix '!' with an expr-postfix production.
[33maca3bd5[m SILGen: Build SILVTables while visiting classes.
[33m88ef6fb[m Print sil_vtable decls in /*comments*/ until the parser learns to handle them.
[33m2728b7d[m Improve lexer error for multiple-Unicode-scalar "character" literals.
[33mb4f8565[m SIL: Introduce SILVTables.
[33mbca82ea[m Add block<->closure shims for most of Foundation's block object API.
[33ma19d756[m Introduce Builtin.staticReport, which allows compiler diagnostic reporting.
[33m0a0a1a0[m add a specialized diagnostic for variables with no initializer in the REPL. We now get:
[33m91173c9[m Handle 'self' and nested generics in the interface type of generic functions.
[33mbe12f30[m Move MaxScalarsForDirectResult to SwiftTargetInfo.
[33m963b6f0[m [serialization] Introduce 'FailedImportModule', which is used to track of when a module file failed to load (e.g. because of missing dependencies).
[33m3e2f360[m [AST] In the ModuleKind enum class, shorten enumerators by removing 'Module'. No functionality change.
[33m3f5c0db[m Update SILArgument::getModule(), SILBasicBlock::getModule() and SILInstruction::getModule() signatures to match SILFunction::getModule(), for consistency; standardize usage of SILFunction::getParent() to SILFunction::getModule().
[33m3b6759f[m Release note RawRepresentable protocol.
[33m0d8d756[m Sema: Teach conformance checking to derive requirements if needed.
[33ma6108db[m Rename FunctionRefInst::getFunction() and BuiltinFunctionRefInst::getFunction() to FunctionRefInst::getReferencedFunction() and BuiltinFunctionRefInst::getReferencedFunction() to avoid shadowing SILInstruction::getFunction().
[33m6b8d705[m Use the proper high-level entry points to get witnesses in the for-each loop.
[33m767da73[m Change the command line option to sil-opt for the definite initialization pass to be -definite-init instead of -memory-promotion, rename the entrypoint for the pass to match, and tidy various and sundry comments.
[33m07fda51[m rename two tests to follow the name of their pass.
[33m6b6887b[m rename MemoryPromotion.cpp -> DefiniteInitialization.cpp.
[33m9bc9d87[m [SIL] More aggressive folding of struct_extract and tuple_extract
[33ma194b88[m [SIL] Using SetVector (instead of set) might make the pass faster
[33m317a347[m Update comment to reflect reality.
[33m940717a[m [Clang importer] Don't double-import subscripts when the getter/setter types conflict.
[33mdb98aea[m implement memory promotion support for enums, specifically the inject_enum_addr and enum_data_addr instructions.  These need to be modeled a bit differently than other related types, but it still fits into the general architecture of memorypromotion.
[33m55b215b[m [stdlib] StringDesign.rst: incremental progress
[33m0f55c18[m rename a test to follow its keyword.
[33mc4854a0[m Add whitespace to @-based control structures in FixedPoint.gyb.
[33m98b8b16[m Use @attribute syntax in FixedPoint.swift.
[33m3e8c82c[m add new attribute syntax to the release notes and update the whitepaper to use it.
[33m2f3f76f[m update langref to describe the new attribute syntax.  Drop the old syntax, even though the parser still eats it temporarily.
[33mf990775[m enhance the parser to parse the new attribute syntax on all decls.  Switch a few testcases to use it.
[33mf07a485[m SILPrint the local_storage attribute with the new syntax.
[33mec31b01[m Remove incorrect optimization of dynamic casts of non-ObjC objects.
[33m394ca8f[m implement basic support for parsing the new form of attribute, though this is only used by the sil parser.  The old form is still parsed.
[33mc384f33[m Make RawRepresentable a known protocol.
[33ma709801[m Add hidden disable-diagnostic-passes.
[33ma2980ed[m Move the check for unresolved dependent member types into the verifier.
[33maf509af[m make '@' be a valid token, even when not in sil mode.  No functionality change.
[33m36df570[m Record the generic type of a generic function as its "interface" type.
[33mf340bd0[m Release note enum raw types.
[33m41cbf95[m Shorten autoreleasepool syntax example.
[33m3614470[m Canonicalize generic type parameters with depth/index.
[33mfdd0537[m Sema: If a type-checked {Archetype,Existential}MemberRef's base is implicit, so should be the member ref.
[33mfb7fb33[m Sema: Synthesize raw type methods for enums.
[33m410ecbe[m Release note autoreleasepool().
[33m17025ea[m Don't set the generic args in DeclRefExpr if they are already set.
[33m446aae6[m SILCloner: Explicitly convert SILSuccessor to SILBasicBlock* rather than rely on implicit conversion; for some reason the latter is not always working as expected
[33mdf377fb[m SILCloner: tweak value remapping logic to be more flexible, for an in-development subclass. No functionality change
[33m0871f8c[m SILCloner: change ValueRetTy to void, because it is unused and because an in-development subclass cannot always provide a valid return value of the current type
[33m5cb4879[m MandatoryInlining: 80 char line limit fixup
[33m3628d6c[m Parser: recover when a keyword was used as an identifier in a pattern
[33m04a8cde[m Completely remove the 'constructor' keyword
[33m12e228c[m Introduce a new representation of polymorphic function types.
[33m781dcf7[m [AST] Store the TypeReprs of generic arguments used to specialize a decl reference in DeclRefExpr, to impove source fidelity.
[33m883a9ee[m [ASTWalker] Walk the TypeReprs of UnresolvedSpecializeExprs so we can syntax-annotate them.
[33mcb4e51c[m [ASTDumper] For UnresolvedSpecializeExpr, print out its TypeReprs.
[33m9d155f9[m SILCloner: copy over debug scope from original instruction by default (not used by MandatoryInlining, which overrides the debug scope; this is for use by another subclass being developed)
[33m12ffb98[m AST: Give Stmts an independent 'implicit' bit.
[33m7a791b0[m Remove stray object file introduced in r8872.
[33maffefbe[m Remove the AllocSelfExpr from constructors and teach alloc_ref how to call +allocWithZone: for classes that might (i.e. probably do) use ObjC allocation.
[33mb2f3b30[m Fix memory leak in NSString->String conversion.
[33m1a24338[m Stop using swift-mangled names directly.
[33m2d7204b[m Parser: don't crash if the last token is an interpolated string literal
[33m84b6493[m Fix coding style
[33m296f233[m swift-ide-test: remove the dynamic-lookup-completion mode that was used to test DynamicLookup itself
[33mbf5be06[m Code completion for DynamicLookup: check that we don't show unavailable decls
[33m46abc58[m [AST] Make DotSyntaxCallExpr implicit or not depending on if it has a valid location for the dot.
[33mfcb3dbe[m Lookup visible decls / code completion for DynamicLookup: don't report declarations with the same signature multiple times
[33m789617c[m Update all remaining tests to use a private module cache
[33m81ab506[m When creating a constructor reference expression, don't discard source info about the type reference and the qualifiers that were used for it.
[33m9556692[m addd copy_value
[33m8808d48[m Debug info: emit captured variables in closures. rdar://problem/15035486
[33m6a122e1[m Clang module importer / code completion for DynamicLookup: when enumerating decls accessible from DynamicLookup, don't import properties twice and don't report properties with setters twice
[33m1f9a720[m Clang importer: import subscript declarations from protocols (instead of crashing in getClassInterface)
[33m73a7ffd[m Revert an unintended change
[33m2d38d4c[m Code completion test: pass a function parameter correctly so that the type checker can pick the correct overload of '!'
[33m921a9a9[m SILCloner: minor pointer declaration style fix
[33m6404d0b[m Remove SILInstructionCloner: unused and broken by refactoring in r8849; can be restored later if necessary by introducing another intermediate base class
[33m4ba5de9[m Refactor SILInliner, moving functionality to its base class so that it can be reused for other purposes (e.g. cloning functions, rather than inlining them). No functionality change.
[33mb5842cb[m [stdlib] Initial implementation of Character
[33m4850f12[m Release note '_' assignment.
[33m3b0180b[m Allow '_' in assignments again.
[33m7e61978[m Clang importer: don't import ObjC method decls twice
[33m80b95c8[m Resolve dependent member types to specific associated types.
[33m5148c12[m Dump the declared result type of a function declaration.
[33me5e97f5[m Diagnose uses of postfix ? on non-optional values.
[33m3598b10[m typo fix
[33m9f867d0[m Update release notes for dynamic property/subscript access.
[33m1165ab2[m [ASTDumper] Only print both argument and body params if the function has selector-style syntax.
[33m9f31dda[m [Sema] When typechecking errors out for a BraceStmt element, recover by replacing the untypechecked element with the result of typechecking.
[33m3a91a27[m Remove unused function.
[33mcec7d3d[m Add the postfix ? operator to the release notes.
[33m6df6897[m Add an InjectIntoOptional implicit conversion expression instead of generating ugly artificial calls to _injectValueIntoOptional in the AST.
[33m9703399[m Rework optional intrinsic methods to work with RValues.
[33m100bcdb[m Silence -Wunused warning in Release builds.
[33m05cbbf1[m Clean up BridgeNSString.mm. Fix bug in Unicode string conversion.
[33m2985776[m Introduce the monadic ? operator.
[33ma186738[m Distinguish the "cleanup handle" and "scope" use-cases of CleanupsDepth.
[33m916b566[m Push and invalidate uninitialized-local cleanups.
[33m66dafba[m Reject empty switch statements.
[33m4b5db0c[m Parse trailing closure productions as expr-postfix.
[33m14c0de1[m Clang importer, lookupClassMembers(): return SubscriptDecls when enumerating all class members
[33m7055713[m Remove declaration of nonexistent function swift::performCaptureAnalysis()
[33me136245[m [SIL] Add integer overflow warnings on simple arithmetic to swift.
[33m563dc79[m [SIL] + a bit of debug output
[33maf6dd2b[m Sema: Ban partial application of struct/enum methods.
[33m30761e2[m Code completion for DynamicLookup: move extra inputs to a separate directory; more will come in future
[33me2060d6[m Code completion for DynamicLookup: add a test with selective imports
[33m47f642e[m [docs] Massage wording in Modules.rst.
[33m720dab7[m Separate non-String code from BridgeNSString.mm.
[33m165d56a[m Correct date in release notes.
[33m95a70cc[m Release note 'x as T'.
[33m5049dbb[m Update LangRef for 'x as T'.
[33m28f159b[m Remove '?' from 'as?'.
[33mce2e87f[m SILGen: Emit 'x as? T' conditional casts.
[33m700dcab[m [docs] Add some Objective-C interop stuff to Modules.rst.
[33mec53b6d[m Code completion for DynamicLookup: subscripting
[33m1cdc05f[m Code completion for DynamicLookup: use Optional<T> type for properties
[33mf1993cf[m Parse and type-check 'x as? T' conditional cast syntax.
[33m9b4c94d[m [AST] Walk body parameter patterns.
[33m097d9a0[m When we have selector-style syntax for functions, make the argument patterns implicit.
[33m7205b7d[m [Parser] Some refactoring inside parseSelectorArgument(), no functionality change.
[33m911929f[m Parse and type check initializer closures after 'new T[n]' exprs.
[33m6f4cb05[m Code completion: basic support for completing memebrs of DynamicLookup (id)
[33m8666b38[m [docs] Fill out another third or so of the Modules User Model doc.
[33m0bd4357[m Debug info: Emit shadow copies of boxed value's addresses in an alloca at -O0 so the register allocator will not elide its DBG_VALUE.
[33mf5d4269[m Parameterize the resolution of generic type parameter types to archetypes.
[33mc003b4e[m Code completion: use AST Printer to print patterns
[33mb884b17[m AST Printer: don't print a space before a colon in a tuple label
[33me461b3f[m [ASTDumper] Print the 'implicit'ness of a pattern.
[33m2dfa037[m [ASTDumper] Print argument and body patterns of abstract function decls.
[33m4a0c050[m Store the standard library module name as ASTContext::StdlibModuleName ... instead of repeating it everywhere
[33mbea03d2[m Bring back frame pointers.
[33mca57deb[m Lookup visible decls: rename doMemberLookup() -> lookupVisibleMemberDeclsImpl()
[33m603521a[m [AST] When cloning a NamedPattern, make the var implicit if we are propagating implicit'ness.
[33mafe06ac[m [IDE] Fix semantic annotation of subscript declarations.
[33mf0773bc[m Rename '__subscript' -> 'subscript'.
[33m33d77d7[m Lookup visible decls: rearrange code to remove forward declarations
[33m93c1ac3[m Visible decl lookup: simplify code
[33mbdc3da4[m Visible decl lookup: update comments (we don't have a specific name to look up)
[33m7bfebfb[m [AST] Have the ASTWalker visit the indices pattern and element TypeRepr of a subscript decl.
[33m151f76e[m [Parser] Add the getter/setter of a subscript decl in source order.
[33m8b76b30[m [AST] Add 'Implicit' boolean parameter in Pattern::clone(), which if true propagates 'implicitness' in the cloned pattern and its subpatterns.
[33mdf5f1f5[m Parse attribute list after enum 'case' keyword.
[33mc51a636[m Comment grammar
[33m5bec039[m Syntax-annotate 'get'/set' in a getter/setter as keywords.
[33mefe3d94[m [AST] Introduce DeclContext::walkContext(), used for ASTWalking a DeclContext.
[33mbded524[m [AST] Introduce DeclContext::getLocalContext(), which returns the first local parent context.
[33mae00d91[m IRGen: Remove needless empty enum assertion.
[33m6740964[m Rename IRGen 'union' tests to 'enum' tests.
[33m3840970[m Sema: Resolve and type-check NominalTypePatterns in cases.
[33m92cce69[m AST: Give NominalTypePattern a better AST-level representation.
[33m8d4055f[m Properly update SIL DCE test.
[33m9909ba2[m SILGenPattern: Handle subsumption and orthogonality of superclasses in 'is' patterns.
[33m6b80e1c[m AST: Add a TypeBase::isSuperclassOf convenience method.
[33mb4d0d01[m [AST] Enable walking of all VarDecls.
[33mc00fce9[m [Parser] Add the getter/setter of a computed variable in source order and after the pattern binding decl.
[33mbedc40e[m [Parser] Make sure VarDecls created for UnresolvedPatternExprs have a DeclContext.
[33mc85355d[m [Sema] Provide a location for the vars that the REPL creates.
[33m9d156e1[m [Sema] In cleanupIllFormedExpression() make sure that the parameters of a ClosureExpr are cleaned up from type variables.
[33m3b5990f[m [AST] Verify that a type variable has not escaped the type checker.
[33m35bd9d8[m Make sure VarDecls have locations, even the implicit ones.
[33m3d7cf20[m [AST] If a ValueDecl is given an error type, also make it invalid.
[33m6b732c9[m [Parser] If the name for the setter var is missing, use the 'get' as its location.
[33mc5cbae0[m [astwalker type parent]
[33m6942646[m [AST] Make 'self' vars implicit and provide a source location for them.
[33m4a91e28[m [AST] For the ASTWalker add Module and Decl as a parent kind, and make ParentTy a class.
[33m0e7a617[m SIL.rst: Some fun facts about enums.
[33m5255529[m Type printer: replace a broken variant of GenericParamList printer with a use of AST printer
[33m03db9ef[m AST type printer: add testing infrastructure and a basic test
[33m3899406[m AST printing: merge swift::Type::PrintOptions into swift::PrintOptions
[33mef6965b[m SIL.rst: Update for removal of 'specialize'.
[33m82a1833[m SIL: Purge SpecializeInst.
[33md9b8186[m [docs] Tweak description of a computed variable's lack of storage
[33m91e1ade[m [docs] Start of Modules User Model: the high-level purpose and semantics.
[33m09f44ae[m Move ValueDecl::getDefaultArg() -> AbstractFunctionDecl::getDefaultArg()
[33m1e95e4e[m Emit Objective-C entry points for initializers defined within class extensions.
[33m68a6817[m [SIL] Update docs to specify that copy_addr/destroy_addr on trivial types is equivalent to a load/store and no-op respectively.
[33m85c7a0b[m Change SILValue::operator*()'s return type from ValueBase * -> ValueBase & to match the normal canonical implementation of operator*.
[33m7a2075d[m Allow free type variables slightly better.
[33mcf861ea[m [CMake] Processing asm files using Clang requires CMake 2.8.10 or newer.
[33m6003129[m Add a test for type-checking mutually-dependent TUs.
[33m3e5c1f8[m Support transparent attributes on struct and enum extensions.
[33mf0dda14[m Move attributes from ValueDecl to Decl.
[33mf031eee[m [SIL] Improve the comment.
[33m3303dba[m [CMake] Get Swift library sources to show up in Xcode.
[33mf07404e[m [CMake] Handle assembly files natively.
[33mf32167d[m [AST] Introduce a walk() method for TranslationUnit.
[33mb955d8e[m [Parser] Adjust the end source locations in a few places.
[33m8b3d906[m Improve handling of Objective-C properties with dynamic lookup.
[33m7de90d7[m Make Decl::dump() not print before it dumps.
[33m4a5185a[m Revert r8705, r8706, r8722.
[33m00e51f5[m CMake: Don't add assembler-generated object files as sources
[33m0d33ff3[m Teach SILGen to directly emit optional injection operations for dynamic lookup.
[33m01840d2[m Added operator->()'s brother operator*() to SILValue.
[33m2bbdee6[m Fixed bug where SILInstructionVisitor was expecting visitSILArgument to have ValueRetTy not void.
[33m22aef6c[m Change swift/SILPasses/Utils/Local.h to have a C++ mode declaration.
[33me1204bf[m Clean up handling of subscript imports from Objective-C modules.
[33m5a1a7c0[m Fix emission of the index for a dynamic subscript.
[33mb2d39b5[m Use `xcrun` to find the swift compiler when cross-compiling.
[33mb33caad[m AST printer: print raw type of EnumDecl
[33m9ba4347[m Serialize EnumDecl::RawType in binary modules
[33m555b182[m make assertions more verbose
[33m61b5d05[m Debug info: allow for boxed arguments. rdar://problem/15035486
[33m355ee1e[m Make the demangler less prone to crash on invalid input in release builds.
[33mba2e473[m Remove unused member EnumDecl::isEnum
[33ma2d3e03[m [CMake] s/Swift sources/External Sources/ in one more place.
[33m675e893[m [CMake] Get Swift library sources to show up in Xcode.
[33m448d7cf[m AST Printer: add tests for printing deserialized modules ...and fix bugs found by this.
[33m04d2625[m Record known protocols without calling the type checker
[33m2074b8a[m Add support to the swift driver for running SIL Optimization Passes when the optimization level is > 0.
[33m626479f[m s/property/accessor/ in SILGen and TypeLowering
[33m75ae10d[m [docs] Note that our abstract model for literals has arbitrary precision.
[33mc4a065a[m Teach dynamic lookup to find subscript operators.
[33me68201f[m [IDE] Replace ide::findSemanticSourceEntities() with a more general SourceEntityWalker abstract class.
[33me05c03d[m Standardize terminology for "computed", "stored", "variable", and "property".
[33m2118a70[m SIL.rst: Describe new checked cast instructions.
[33ma2672e9[m SIL: Turn conditional checked casts into a branch instruction.
[33m8b1628b[m Update LangRef for destructor syntax change
[33m5c14234[m Destructor syntax: require an empty parameter list for destructors
[33m8f112c2[m [docs] Add a side doc describing the literal conversion process.
[33mcc4c7d0[m [Clang importer] Stop creating property/subscript getter/setter thunks.
[33m3a72c7f[m Use dynamic dispatch for [objc] properties and methods used in lvalues.
[33m7bc9b9b[m Added SILInstruction::moveBefore to move an instruction before another instruction.
[33me287701[m [IDE] Fix annotation of constructors.
[33mc0b3277[m Improve diagnostic for function attributes.
[33mbe87761[m Change name to Axle everywhere.
[33m3600624[m Add an option to turn off Swift LLVM IR ARC Optimization.
[33m5507375[m Remove a reference to 'as?' from a diagnostic and add test coverage
[33mc0efcf1[m Add {destroy,copy}_value syntax highlighting for sil.
[33m4bb2b89[m [stdlib] Make && and || work on LogicValue, rather than just Bool
[33m4255aa6[m [ASTWalker] When walking a SelfApplyExpr, walk the base expression first to get a source-order walk.
[33m59175bd[m [SIL] Remove TranslationUnit pointer from SILModule.
[33m5268940[m AST Printer: simplify the check for DynamicLookup known protocol
[33mf46dd5e[m AST Verifier: remove a redundant check (now we verify all Patterns)
[33m9993fa8[m [docs] Add a description of stored and computed variables.
[33md485d5c[m [Sema] When building member expressions, give an empty location if there is no dot.
[33mb14b2d2[m [AST] Adjust the source locations of SelfApplyExpr subclasses.
[33mc2adc1e[m Restructure parsing to ensure that bodiless constructors/destructors/subscripts are fully diagnosed.
[33mf19ee85[m Fix duplication in test and rename file.
[33m4a8ac0d[m Parse kernel, vertex, and fragment function attributes. Metadata is not yet being generated.
[33mcbfe371[m SIL: Rename the 'isObjC' SILDeclRef specifier to 'isForeign'.
[33mc057ca4[m [AST] Adjust the location of a CallExpr to be the location of the function reference.
[33m40eba06[m Limit the "requires Objective-C dispatch" predicate's use of hasClangNode().
[33mb398492[m LangRef: Elaborate on interaction of closure capture and inout.
[33me54f6d9[m add a bit more rationale.
[33mdbade0f[m Capitalize.
[33m0621b81[m Describe inout semantics in more detail in LangRef.
[33mc11a7b4[m Release note byref -> inout change.
[33m3d4c125[m Rename 'byref' attribute to 'inout'.
[33mf109476[m AST Verifier: verify source locations on Patterns and fix bugs found by this
[33mb30d11d[m Allow bodiless constructors, destructors, and subscripts when parsing Decls in SIL mode.
[33m823d2ce[m Enums.rst: Spot fixes.
[33m2219b84[m Enums.rst: ReST errors.
[33m2e13334[m [docs] SIL.rst: fix ReST errors
[33m6009987[m Debug info: implement support for shadow-copied [byref] arguments. This patch has a negative line balance -- those are my favorite!
[33m33904b4[m Rename TypeChecker::validateTypeDecl to simply validateDecl.
[33mb11fb61[m Resolve protocols in extensions whenever the base type is accessed.
[33m0d445bf[m Eagerly validate decls that conform to special protocols.
[33mf69576b[m Extract generic param code from DeclChecker.
[33m15e9819[m Define implicit struct constructors on demand and not lazily.
[33m3750177[m Type checking: validate attributes when a type is needed.
[33ma69b2e9[m Type checker: compute archetypes when validating a protocol type.
[33mf6389c8[m Include the Self archetype in a protocol's type mapping.
[33me660a88[m Turn TypeChecker::validateTypeDecl into a more generic function.
[33m15bfc8d[m Don't type-check imported decls unless referenced in the source file.
[33m38ce790[m Bind extensions in all visible modules, rather than just the current TU.
[33m6e1ed42[m s/swift::lookupVisibleDecls/swift::lookupVisibleMemberDecls/g
[33mc5322d4[m Record a back-pointer from a VarDecl to its containing PatternBindingDecl.
[33mf672d9f[m Remove NSTypedArray and the iboutletcollection hack.
[33m2c794c0[m [ClangImporter] Refuse to import a subscript if the index type doesn't match.
[33mf0bbb58[m rearrange text a bit.
[33md38d2b0[m Release note byref capture semantics.
[33m92f5609[m SIL serialization: add testing cases based on SIL/Parser/basic.sil.
[33me05b551[m Add an interpreter test for new byref capture semantics.
[33m8f58555[m SIL: Fully capture byref shadow copy boxes.
[33mec6717d[m Sema: Remove the restriction on byref captures.
[33m970bcd3[m fixup for r8625
[33md69eb66[m SILGen: Emit shadow copies of byref arguments.
[33m30039a5[m Emit Swift declarations when printing SIL.
[33m4c61550[m [SIL] Use TranslationUnit instead of ASTContext when creating a SILModule.
[33mc4ece4e[m Revisit scopes and locations in the light of SIL-based transparent inlining.
[33m03466c1[m Add an implicit conversion from T to T?.
[33m9acad47[m Add a convenient API for applying type arguments to a polymorphic function type.
[33m15cfbce[m Release note for the changes to the type of a [weak] var.
[33m33aada4[m Set DeclContext for argument parameter patterns
[33m5967115[m Remove Requirement::isImplicit()
[33m1d27584[m [swift-ide-test] Rename option '-terminal-output' -> '-terminal'.
[33m0fe6d45[m [IDE] Introduce semantic annotation functionality and test.
[33m56edc42[m IRGen for Objective-C subscript thunks.
[33md110451[m Uncurried parameters are already backwards; we don't need to reverse again.
[33m3f15ea9[m AST printing tests: move error cases to a separate file
[33m4b6e14b[m Clone DebugScope to new instruction when inlining, for Adrian (who will write tests for this)
[33m9fe5f88[m Objective-C Class<Proto> is unretained just like unqualified Class.
[33me6f47a6[m IRGen for dynamic subscripting operations.
[33m153630d[m Handle multiple levels of currying for Objective-C methods.
[33md967efd[m Give the same love to swift.Bool which is also an enum that we were vending as a struct
[33m44ec002[m Fixing up the demangling for swift.Optional<T> to be an Enum instead of a struct (Optional is an hardcoded substitution, so even if its definition changes, the mangling won't change, and the demangler has to keep up!)
[33m2456b33[m Propagate implicit'ness of OverloadSetRefExpr nodes.
[33m725b0e0[m AST Printer: fix printing of same type requirement in generic parameter lists
[33m614a427[m [ASTDumper] Print out whether an expression node is implicit.
[33m0b0efd6[m Fix formatting.
[33me224667[m Refactor Implicit'ness of expressions.
[33mb8daa3c[m SIL generation for dynamic subscript expressions.
[33m3f02cc8[m SIL serialization: clean up using macro
[33m6ff9cee[m "transparent" attribute on SILFunction
[33me3b50c2[m Back out r8591; it's going to take me a bit longer to fix.
[33m71dddd1[m AST Printer: implement requirement printing in a generic parameter list
[33m4dc7cee[m Add in the option -disable-llvm-optzns to swift.
[33mfdd5ebd[m SIL generation for dynamic subscript expressions.
[33m7b2b00e[m Fix build failure
[33mf67aa78[m Dynamic lookup for subscripts: semantic analysis and ASTs.
[33m6a1db60[m Allow [objc] subscripts and emit Objective-C thunks for the getters/setters.
[33me6b1e00[m Release note comma-separated 'case' syntax.
[33ma044e2a[m AST Printer: don't print properties twice and don't print top-level variables in braces
[33m1921d26[m Sema: Check that enum raw values are unique.
[33mdec19cc[m AST printing: function parameter printing: simplify code
[33m3b41274[m SIL Serialization: SIL blocks can be optional.
[33m10d8fdc[m AST/AbstractFunctionDecl: Remember if a function had a selector-style signature ... and use this information in AST printing
[33mbe3a410[m SIL Serialization: perform SIL linking right after SILGen.
[33m65f5a90[m SIL: Verify that class_method and super_method result types match their operand method.
[33m55bbf1f[m Stale comment.
[33m801efc5[m SIL.rst: ReST typo.
[33m9a4c677[m Simplify ModuleFile::getDeclContext()
[33mc9d1aa3[m AST Printer: fix parameter name printing in setters
[33mae496fa[m ASTWalker: Walk the pre-type-checked raw literal expr of EnumElements.
[33m014f270[m SIL: Have project_existential_ref project to a protocol Self archetype.
[33m14f1b9d[m SIL.rst: Update for 'This' -> 'Self' sea change.
[33m6ad7454[m [SIL DCE] Chain optimization rounds to ensure true/false folds.
[33mec899de[m AST Printer: don't print a trailing space after "get:", "set:" labels
[33ma4807df[m [Sema] When encountering a "enum case cannot have a raw value if the enum does not have a raw type" error, recover by setting the raw type as that enum elements' type.
[33md70ac6f[m [AST] Mangler: recover from erroneous extension decl context.
[33m7dedb70[m AST Verifier: add a check that AssociatedTypeDecl has a protocol DeclContext
[33maf8fa8c[m Remove a circular dependency AST<->Sema caused by type printing
[33m9e54a69[m SIL: Allow RefToObjectPointer and ObjectPointerToRef to cast to/from Builtin.ObjCPointer.
[33m9e0cfb8[m [AST] Allow the mangler to handle declarations with error types in them.
[33mab82766[m [AST] Walk the inherited TypeReprs of a nominal type declaration with the ASTWalker.
[33m8e1538e[m [AST] Consolidate walking of NominalTypeDecl subclasses to reduce duplication.
[33m9b0525b[m Objective-C "Class" (which maps to DynamicLookup.metatype) is unretained.
[33m385d13d[m Update use of array_pod_sort for LLVM-side change
[33mcac7969[m split dump() into two functions, LLDB doesn't know about default arguments.
[33m361aba5[m improve QoI for global function closing over global variable.  Where before we produced:
[33md5314e7[m rearrange REPL's SIL/IRGen path so that sil diagnostics are recovered from the same way as sema diagnostics.  This fixes: <rdar://problem/15000923> REPL exits if you declare something without initializing it
[33m2c04f45[m Have the ASTWalker walk type-checked raw value exprs.
[33mc4b4db7[m Parse and check raw values on enum cases.
[33mefd8e75[m Move type printing to ASTPrinter.cpp and use the AttributePrinter class in Decl attribute printing
[33mf9d1923[m Add a basic AST printing test
[33m738d65f[m Make generic parameter list printing an implementation detail of TypePrinter
[33m1f601d8[m AST: rename bitfield data structures to have a common naming pattern
[33m3ef23d6[m [weak] variables have Optional type.
[33m29ca4e2[m comments.
[33m31dfc7b[m Debug info: Emit the implicit import of swift.swift in DWARF. rdar://problem/14821063
[33m22a3574[m Use copy_value and destroy_value when destroying loadable aggregates in SIL-gen.  Leave the old expanded paths around as emitLoweredCopyValue and emitLoweredDestroyValue.
[33mac290b2[m Don't claim all the elements from an explosion; we might be getting used recursively.
[33mdf26716[m Refactor type printing to use TypeVisitor
[33mf6cd12c[m SIL Serialization: handle newly-added SILInstructions (CopyValue, DestroyValue).
[33mb8c4019[m Make Int's init() 128-bit-Int-proof.
[33m207dd91[m [AST] Sort the includes in Mangle.cpp.
[33m7d35db8[m Type-check raw type of enum decls.
[33mfb97bef[m SIL Serialization: rename layout from TODO to NO_OPERAND.
[33meecb56a[m Move the Mangler from the SIL library to the AST one.
[33m12dbffa[m Remove a useless variadic template from TypeVisitor
[33m90827ff[m Honor environment variable SDKROOT.
[33m6af9923[m SIL Serialization: always generate two top-level blocks for SIL.
[33m903a4d2[m Implement SILGen/IRGen support for dynamic lookup that resolves to properties.
[33mc7801fc[m LIT: Hack the %libdir expansion once more, so it works with - configure+make - cmake+make and (drumroll) - cmake+xcode The problem is that in XCode, swift_lib_dir will expand to "lib/$(CONFIGURATION)$(EFFECTIVE_PLATFORM_NAME)". So apparently the only safe solution is to use $(dirname %swift)/../lib.
[33m5b71c8d[m [SIL] Propagate basic block arguments.
[33m271902b[m SIL Serialization: turn SIL deserialization on by default.
[33mf948082[m Remove EnumCaseDecl backreference from EnumElementDecl.
[33m8d0d6ff[m LangRef: Demonstrate comma-separated case syntax.
[33mee2b554[m Update parseDeclEnumCase grammar comments and style.
[33m17d9d66[m SIL Serialization: handle SwitchIntInst.
[33mcbf6e8a[m Fix the Makefile to use "Enum.cpp" instead of the old "Union.cpp".
[33mf7df726[m Switch dynamic member references over to Optional injection functions.
[33maf7fc03[m SIL Serialization: handle SpecializeInst.
[33m5d8a7ff[m Allow multiple comma-separated enum elements in a 'case' decl.
[33m11b436a[m SIL Serialization: fix issues.
[33m9f84b92[m Mangler: Implement hierarchical lookup of generic parameters for the case where we don't find an ArcheType in the local context. Fixes rdar://problem/15033772
[33m62e84f5[m s/constructor/initializer in diagnostics
[33me52687f[m Use "initial value" rather than "initializer" in diagnostics.
[33mbc3f655[m s/constructor/init in a few more places.
[33m4beee47[m [SIL DCE] Reapply r8471: Constant fold SwitchUnionInst and SwitchIntInst.
[33m429633b[m Let the type checker create implicit DestructorDecls
[33m3fef691[m [SIL DCE] revert folding of SwitchUnionInst and SwitchIntInst (r8471)
[33mcf5d78e[m [SIL DCE] + comments
[33m1937c6f[m Fix weird space
[33ma7cb896[m Make example code actually work. Thanks, Joe
[33mbdaffde[m Use ! rather than .get().
[33m47839da[m Release notes for 'id' and 'Class' mapping to DynamicLookup[.metatype].
[33m40cf8d1[m Remove ASTMutationListener::addedExternalType(). It's useless now.
[33m6dad378[m Filter out duplicates for DynamicLookup lookups.
[33mf2b0944[m Map Objective-C's Class to DynamicLookup.metatype.
[33maa761fb[m Teach Clang importer to find Objective-C class methods.
[33m8f3184e[m Implicitly-defined default constructors for classes.
[33m824b2b3[m hey, add a "link" too :-)
[33m668b001[m add some rationale.
[33m685c487[m Release note 'union' -> 'enum'.
[33m26125d0[m Update 'union' references in other docs.
[33m5106cd5[m Capture the current enum game plan in a proposal doc.
[33m9ad45ee[m Some more id -> DynamicLookup fixes.
[33me109124[m Replace 'union' keyword with 'enum'.
[33m9b5d7da[m Unconditionally enable interpreter- and repl-based tests.
[33m2395bdf[m Keep track of type variables for which stronger type bindings are preferable.
[33m06b76d4[m Put in a temporary hack for rdar://problem/15033772 while I investigate the issue.
[33mbce7589[m [SIL DCE] Constant fold SwitchUnionInst and SwitchIntInst when possible.
[33m1065caa[m [SIL] Store the BitWidth in the SwitchInstInst instead of computing it
[33m7a1233b[m [SIL: CCP] Fix a bug that was preventing chaining constant propagation.
[33mc103404[m IRGen: Forward extra inhabitants through single-payload unions.
[33mc8e9a9d[m Stale comment.
[33mf05641d[m Don't #include internal header <os/tsd.h> on platforms that don't need it.
[33m37b7284[m Code completion: don't crash when completing in constructors/destructors placed in contexts where they are not allowed
[33m7954960[m Add 'copy_value' and 'destroy_value' operations to destroy entire aggregates at once.
[33mbd38bc4[m Code completion: don't show [byref] on 'self'
[33m8324827[m SIL Serialization: handle more instructions.
[33m2155d3d[m Debug info: Fix line table entries for implicit return statements. rdar://problem/14981751
[33mafd5371[m Switch imported 'id' from NSObject over to DynamicLookup.
[33meaa5ae0[m Eagerly de-duplicate dynamic lookup results.
[33md33691a[m <rdar://problem/15013536>
[33m20152bd[m [Type checker] Try user-defined conversions to satisfy conformance constraints.
[33m4b24197[m Reorganize includes.
[33m36db63b[m [stdlib] StringDesign.rst: remove "Extended with Restraint" section per Chris Kane's advice
[33m818cd1a[m Add transparent constructors to integer types.
[33m8f06118[m Remove unused, nonexistent header.
[33m1a07770[m Remove x86-specific code that was unused on x86.
[33m842d917[m teach memory promotion to promote alloc_stack values, which can have promotable loads and stores after inlining.  This resolves rdar://15025490
[33m53f3ab9[m Don't overwrite a fully-annotated variable's type just because its initializer failed to type-check.
[33m0aaceb3[m Parser: improve error recovery in case of a bad function signature with selector-style arguments
[33m6679696[m Code completion: implement completion of types in constructor parameter lists
[33mdd90362[m Type-check both sides of a PatternBindingDecl within the same constraint system.
[33mc915139[m Convenience accessor for drilling into Optional<T> to T.
[33m0f2f25d[m Disallow [transparent] on any declarations within a class (Not only on static methods.)
[33mecff374[m Sprinkle transparent on methods involved in computation of true/false
[33mfaffef3[m SIL Serialization: handle switch instructions.
[33mbcf5345[m Eliminate the completely-broken implicit default constructor for classes.
[33m021bdd7[m Debug info: emit the return type for main(). Lldb gets really confused otherwise.
[33m15673a1[m [stdlib] StringDesign.rst: add "Goals" and "Non-Goals" to introduction
[33m39ff770[m SIL Serialization: handle branch instructions.
[33m12b3583[m Code completion inside function parameter lists: simplify code
[33m53e3252[m Added a swift::Type::PrintOptions class to allow printing the module when dumping type names. This allows you to get a fully qualified type name for any swift::Type or swift::TypeBase, including any contained types like function parameter types, bound generic types, etc.
[33m73b6cd6[m Release note Optional-as-union.
[33mfd1e1c5[m SILGen: Don't pass down stale stack values from address-only ternaries.
[33m4492f85[m When we import an Objective-C init method as a constructor, suppress the method.
[33m18f9420[m Stop generating definitions for the imported initializing constructors.
[33med7f951[m Update syntax highlighting for constructor -> init change
[33m6eab362[m SIL Serialization: handle more SILInstructins.
[33m3fbfded[m Code completion / lookup visible decs: find 'self' in constructors and destructors
[33m6178f3b[m SIL Serialization: handle more SILInstructins.
[33m86a0721[m SIL Serialization: handle more SILInstructins.
[33m5dba8fc[m Code Completion: Add case sensitive secondary sort order.
[33m7b631ad[m SIL Serialization: handle float_literal and string_literal.
[33ma813e14[m Code completion: complete 'super.init' in constructors
[33m3033e02[m typo
[33mb78939e[m SIL Serialization: handle partial_apply.
[33m3aa01e4[m [IDE] Syntax-annotate inherited types as type-identifiers.
[33mba4fd38[m Attempt to make the ASTStreamer test more robust under various build setups. (My configure+make build to verify this change is still not finished, so there may be more coming)
[33m621be68[m Disallow [transparent] attribute on class methods and inside protocols
[33m4d2444a[m [SIL] Ensure that we mark the apply instructions within ObjC getters/setters
[33mba3298e[m Add support for [transparent] attribute on property getters and setters
[33m1fe6405[m Reword error messages as a follow up to r8221.
[33mdabdb5c[m Swift has a more restrictive definition of 'init method' than Clang.
[33m1928361[m Change the list of usecases for structs.
[33m810d2db[m Fix some minor type-o's and grammar mistakes.
[33ma53d2ce[m minor typographical change.
[33mfa8792d[m LangRef: Discuss why structs do not support inheritance
[33m974f1e4[m Clean up -force_load and linkage of libswift_runtime.a. Fixes test Interpreter/Union.swift.
[33ma14ddd4[m Minimally update LangRef for "constructor" -> "init" changes.
[33m50ffac5[m Release notes for constructor/init changes.
[33m72afb17[m s/constructor/init/g in tests and a few diagnostics.
[33m7d774c5[m Replace "constructor" with "init" in a number of Swift sources.
[33mf32b6e9[m [test] Add test requirements swift_interpreter for `swift -i` and swift_repl for `swift -repl`.
[33m978959c[m Make the "init" and "constructor" keywords synonymns.
[33ma0b59d1[m a slightly simpler fix for r8373.
[33m401ff53[m fix bug that clang noticed:
[33m73b674a[m reword DI for TLC.
[33m485ed71[m Rename SWIFT_SDK to MODULES_SDK in make to match cmake.
[33md3bfad8[m Parser: simplify code
[33m30117c6[m Code completion tests: split 'super' tests into complete_after_super.swift
[33m43859ce[m Code completion / lookup visible names: find body parameters in functions with selector-style signatures
[33m81040f0[m Rename some "init"s to "initialize"; the former will become a keyword soon.
[33m0b69e0e[m Code completion tests: factor out duplication
[33m65bc68b[m Debug info: Implment bound generic unions. Fixes rdar://problem/15014441.
[33m7460a77[m MemoryPromotion: Fix infinite loop due to iterator invalidation.
[33m2287c78[m SIL Serialization: handle more conversion instructions.
[33mf7a2d5e[m Emit Objective-C thunks for [objc] initializing constructors.
[33m8cd6761[m SIL Serialization: handle more SILInstructions
[33m4671a63[m Code completion tests: split 'self' tests into complete_after_self.swift
[33m7760c23[m IRGen: Plumb bound generic parameters and nominal parents for NecessaryBindings.
[33md749169[m runtime: Fix stride calculation for dynamic single-payload union value witness.
[33me1a48ab[m [stdlib] StringDesign.rst: finalize first installment
[33m17f0ae8[m disable bound generic unions while I investigate rdar://problem/15014441.
[33m247b925[m Debug info: Implement bound generic unions properly.
[33m90b8b3e[m Constructor selectors always start with 'init'.
[33m3d9b27b[m Debug info: Don't require 0-termination in the membuffer. Thanks to Greg for finding this.
[33mca32217[m Release note single-payload generic unions.
[33m4051734[m IRGen: Unguard dynamic layout for implemented union cases.
[33m569bb0d[m Update test.
[33m9578dba1[m Debug info: extract line and file from the decl.
[33m03154cf[m mention DI for TLC.
[33mcd9c9e9[m Debug info: Support [unowned] and [weak].
[33m0a16b96[m Swift containers and value types
[33m7c40879[m Code completion: implement delayed parsing of destructors (and basic code completion)
[33m1d8183d[m IRGen: Fix naming inconsistency with runtime.
[33m35e5a1f[m Link swift_stdlib_core with -all_load so it links in all .o files from swift_runtime.
[33mdfb4c97[m s/Destructed/Destructured/g
[33me3b30db[m Silence a couple more warnings.
[33mf34166c[m [AST] For SubscriptDecl and ConstructorDecl, have the getLoc() point at the 'subscript'/'constructor' respectively, not at their first parameter.
[33m5b1c412[m Use 'override' when overriding ASTWalker functions
[33mcf04c47[m s/assert(false &&/llvm_unreachable(/
[33ma11f623[m Code completion: partial type checking of constructor bodies
[33mac23112[m Debug info: Turn the warning about unsupported types into an error. If this assertion fires it is because a new type was added, and I should be implementing it.
[33m5f9f3b3[m Debug info: Implement initial support for UnboundGenericType, PolymorphicFunctionType, BoundGenericUnion, BuiltinVector, SubstitutedType, ParenType, OptionalType.
[33me3f542c[m SIL Serialization: handle more SILInstructions
[33m07e83ea[m Code completion: basic completion in constructor bodies
[33m2b509fc[m Use visitor to avoid O(N^2) behavior when getting destructured Swift argument types for computing partial apply result type
[33m717d3b2[m IRGen: Implement tag injection for dynamic single-payload unions.
[33m7e22216[m SIL Parser: Substitute result type of union_data_addr.
[33m58407c4[m IRGen: Switch over dynamic single-payload unions.
[33m420cab9[m [AST] Move the NameLoc source location from ValueDecl's subclasses into ValueDecl itself.
[33m3e640df[m Record ambiguous type solutions in -debug-constraints output.
[33md01e725[m Fix Makefile build of unittests.
[33mcb06e31[m Add CanBoundGenericType::getGenericArgs().
[33mb72aa5e[m Dump the types when the SIL verifier detects a type mismatch.
[33m9036664[m Permit local arrays to be copied into an ASTContext.
[33m6f32a84[m Add a convenient method to create a new basic block.
[33mb34d631[m Debug info: Implement multi-module swift ASTSections. When multiple swift .o files are linked, ld automatically concatenates the swift/AST sections. Updated section header, SwiftASTstreamer, ASTSectionImporter, and lldb-moduleimport-test to support this feature.
[33mdedffc6[m Remove a reference to FuncExpr in a comment
[33mb9d9023[m Replace AddConstructorArgumentsToScope() with a call to addFunctionParametersToScope()
[33m0900e99[m Simplify AnyFunctionRef::getAsDeclContext()
[33mf1f189f[m Rename PipeClosureExpr -> ClosureExpr
[33m000d8e4[m Runtime: Add functions for dynamic single-payload dispatch.
[33m14112d6[m IRGen: Abstract the value semantics of single-payload unions to accommodate the dynamic case.
[33m5dd6b2a[m Reinstate workaround for rdar://14897572 (slow arm64 compilation)
[33m64cb705[m Add AnyFunctionRef::getArgParamPatterns() ... and simplify getFuncNaturalUncurryLevel() with it
[33mc32b783[m Move closure parameter pattern to AbstractClosureExpr
[33m694f56e[m Implement helper to compute partial apply return type; insert convert_function as necessary where this type does not match the needed type
[33m1fdb8cb[m Type checker: factor out repeated type checking into typeCheckAbstractFunctionBody()
[33m5515922[m Don't force a dynamic member reference if there is no outer call.
[33ma35edf2[m AnyFunctionRef: add an assertion that it wraps a non-null AST node
[33md26cc5b[m Tighten verifier check and cast in AbstractClosureExpr::getResultType()
[33mdaded7a[m Always Objective-C categories for extensions with [objc] entry points.
[33m9636b9f[m Migrate the last use of FuncExprLike to AnyFunctionRef
[33m34a703a[m Move PipeClosureExpr::getResultType to AbstractClosureExpr
[33m7a3d43a[m Add a verifier check that the type of closure is sane
[33md0d0978[m [AST] Fix the parents in a few entries in DeclNodes.def.
[33m09c8bb7[m [AST] NominalTypeDecl is an abstract node, move its constructor to 'protected' access.
[33mb18c38a[m Rename ImplicitClosureExpr -> AutoClosureExpr
[33m10291e0[m Make AbstractClosureExpr a DeclContext (remove DeclContext base class from PipeClosureExpr and ImplicitClosureExpr)
[33m4a37757[m IRGen support for dynamic method lookup of static methods.
[33m650b75a[m Debug info: emit mangled names for protocol compositions.
[33mf2cc4cb[m Rename CapturingExpr -> AbstractClosureExpr
[33mf9ff9f2[m SILGen: Handle non-forced dynamic lookup of class methods on metatype instances.
[33m6af084a[m SILGen support for forced dynamic member lookups on DynamicLookup.metatype instances.
[33m3354dd4[m Unify two implementations of TypeChecker::computeCaptures()
[33m75aa34e[m Don't allow lookups on DynamicLookup.metatype to find instance members.
[33m60f5503[m Making ProtocolList have a TypeList child This makes it easier for the LLDB side to obtain a ProtocolCompositionType from a demangled tree
[33mf8bd657[m ImplicitClosureExpr (AutoClosureExpr in future): store body as BraceStmt
[33m8d3c488[m SIL Serialization: able to serialize then deserialize a simple SIL function.
[33m64ae92c[m Destruction of partially-constructed objects is required  for any replacement of 'self'.
[33m25bec36[m Allow dynamic lookup through DynamicLookup.metatype.
[33mb94b8a3[m [buildbot] Use toolchain Clang as the perftests compiler, and reenable.
[33m61b4e8e[m [Lexer] Add some comments for Lexer::getLocForStartOfToken().
[33m0a61cf8[m Disable perftests in buildbot while I investigate failures.  - Also, tweak quoting.
[33m918cf5f[m Constructors and initialization proposal, first draft.
[33md686672[m Better shell quoting.
[33m44d4e10[m [perftests] Run performance tests via the buildbot.
[33m5db368c[m [Lexer] Introduce Lexer::getLocForStartOfToken() that returns the location at the start of the token that a given offset points to.
[33me7af4d6[m Collapse ImplicitClosureExpr into its abstract base class, ClosureExpr
[33mb0cdee2[m Move SILBuilder::getTupleElementType and SILBuilder::getStructFieldType to SILBuilder.cpp
[33m45448d0[m Clarify comment per review
[33mbbed45f[m Add a comment for AbstractFunctionDecl::getBody()
[33m74bf9c9[m change the CaptureInfo::getLocalCaptures() method to return a SmallVector by reference, avoiding allocating heap memory.
[33m411ce4d[m remove dead code.
[33m0ed4eaa[m reduce indentation
[33mde64743[m DI for TLC seems to have stuck, remove the conditional logic it was hiding behind.
[33m39ea0c9[m Refactor MetadataScanner CRTP subclasses for structs and unions.
[33mb80840d[m Debug info: Implement function pointers. rdar://problem/14960518
[33m4851b89[m IRGen: Handle argument bound generic abstraction differences for address-only unsubstituted types.
[33m8369073[m Debug info: Emit protocols as DW_TAG_structure_types like everything else (ideally we would use DW_TAG_interface_type, but LLVM doesn't support that  yet).
[33m950f819[m Debug info: support protocol function arguments. rdar://problem/14978875
[33m74aa05b[m SILGen: Handle () and arg-less union cases consistently in the face of substitutions.
[33m7aa3e0c[m Sema: Apply substitutions when type-checking union element patterns.
[33mfcd8204[m SILGen: Substitute union element types when emitting union pattern matches.
[33ma6fa8fd[m IRGen: Substitute union element types when making UnionTypeInfos.
[33m6a1df4b[m Remove Int128 because it is unreliable or incomplete on some architectures.
[33m0da2b85[m Embed the same SDK path in swift-ide-test as in swift itself.
[33mf627c43[m Remove some Int128 assumptions from FixedPoint generator.
[33mdb0cf25[m Split Foundation.swift because NSRect is not in Foundation on iOS.
[33md3d00c3[m Use OS names -darwin / -darwin_ios / -darwin_sim to match build_llvm better.
[33m8cbadcd[m turn on definite initialization for top-level code by default.
[33me2436e1[m enhance SILGen to emit mark_function_escape instructions for ctors and dtors, allowing definite init to reason about them.
[33mee1a914[m move the capture list up to AbstractFunctionDecl, and compute it for all AbstractFunctionDecl's.  Refactor ASTDump of AbstractFunctionDecl's to all go through the same funnel point and print it in the right place.
[33m0e9b9c5[m refactor ast dumping a bit to make room for AbstractFunctionDecl.  Right now, just have it print a body.
[33mca31b28[m LangRef: add some basic documentation for generics.
[33m536ed95[m Remove FuncExpr.  Add CaptureInfo to FuncDecl.  Introduce AnyFunctionRef.
[33mc4f8e59[m Cleanup comments on UnqualifiedLookup (FuncExpr is going away)
[33m62e878c[m [perftests] Change test-perf to run with a single thread, and write test results.
[33m9414f11[m [perftests] Add a script for submitting benchmark results to LNT.
[33m5ac875e[m Add CaptureInfo class that manages capture lists
[33m65f0562[m Debug info: emit typedef types in the appropriate file scope.
[33mb117c94[m Debug info: emit the names of [byref] arguments.
[33m83d7e9d[m silence warnings
[33me797f23[m SIL Serialization: add handling of types.
[33m760a4d3[m SIL: Verify destination BB args of switch_union family args (again).
[33mc89ac62[m forgot to add testcase.
[33m64881bd[m silence warnings
[33m5f7ea89[m Debug info: Boxed values need an extra deref.
[33m6775516[m [SIL] Propagate [transparent] from decl to apply inst for constructor.
[33md5f8265[m [SIL] Ensure we mark default argument generators as transparent.
[33m529b247[m Allow [transparent] attribute on constructors
[33m1cd2d5a[m SIL: Verify operands of UnionInst and UnionDataAddrInst.
[33m6fb78ed[m Debug info: Add initial support for boxed values on the heap.
[33m313654d[m Remove an unused header (that has syntax errors)
[33m04b9685[m SIL.rst: Remove currently irrelevant and potentially confusing caveat.
[33mfb227e6[m Remove CapturingExpr::getParamPatterns()
[33m12ea948[m SIL: Apply type substitutions to union cases during type lowering.
[33m7b37f2d[m SIL.rst: Clarify class subtyping rules wrt generic instances.
[33m6d2d584[m SIL: Verify result type of RefElementAddr.
[33m57d68f3[m SIL: Verify result type of StructElementAddr.
[33m405f080[m SIL: Verify result type of StructExtractInst.
[33mb24190a[m SIL: Apply type substitutions to struct fields during type lowering.
[33m6e56a42[m SIL.rst: Describe aliasing rules for heap object references.
[33mba105c5[m Debug info: Emit byref parameter types as reference types. Also scan store instructions for byref arguments.
[33mcbadcde[m SIL: Verify operand types of StructInst.
[33m7c3e1e1[m SILGen: Emit semantic-to-storage conversions in implicit struct ctors.
[33mfa0acc9[m SIL Serialiation: add implementation to deserialize SIL and a wrapper class SerializedSILLoader to hold a list of SIL deserializers.
[33mc2c367b[m Pass the right selector to swift_objcRespondsToSelector().
[33mc0317ec[m AST: Add Type::getStructOrBoundGenericStruct helper.
[33mb5d5169[m Fix some incorrect fallthroughs in the mangler.
[33mbd60314[m Safeguard against invalid scopes.
[33m8d38710[m Fix more vector-stream-flushing issues with extracting Objective-C selectors.
[33mdee0a04[m Property return the string for a zero-argument selector.
[33ma2df2ca[m Introduce TypeBase::getTypeOfMember() to produce the type of a member access.
[33m25f3bfe[m Debug info: Implement [byref] function arguments. rdar://problem/14949469
[33m2fc13d0[m Make a helper function 'static'.
[33mbaf070b[m Zap BoundGenericType::hasSubstitutions() and its only, unnecessary use.
[33me5c39d3[m Always compute the substitutions of a BoundGenericType on-the-fly.
[33m978eaab[m Introduce lazy computation of a BoundGenericType's substitutions.
[33m427a3f3[m teach the memory promotion pass to enforce definite initialization rules for "mark_uninitialized" memory locations.  This gets us definite initialization checking for top level code, enabled by the -enable-top-level-definite-init flag.
[33m7fe2fc5[m Teach the memory promotion pass to remove the new 'mark_uninitialized' and 'mark_function_escape' instructions when it is done, they are only valid in raw-sil.
[33m27dd292[m this is the right check, the problem is that ctors don't have capture lists and aren't FuncDecls.
[33mfe16d53[m In -enable-top-level-definite-init mode, emit a "mark_function_escape" instruction for func decls that capture globals defined in the current file.  For example, for:
[33mea75b2a[m Fix implementation of ValueDecl::isDefinition()
[33m45e654f[m Make AbstractFunctionDecl a DeclContext and remove DeclContext base class from FuncDecl, ConstructorDecl and DestructorDecl
[33m16ce358[m Sink FuncDecl::getExtensionType() to AbstractFunctionDecl
[33m8c876d9[m Cleanup comments
[33m97e772b[m Generics manifesto: Rename "requires" to "where" and update syntax.
[33m8e13188[m Consolidate some build flags for .swift files. Add cross-compilation support.
[33m616b637[m Add SwiftTargetInfo for arm64. Add objc_msgSend variants to SwiftTargetInfo.
[33m0d6d9a0[m Move the DeclContext base class from FuncExpr to FuncDecl
[33m63ecd5c[m Add UIKit module.
[33mebebd98[m Workaround rdar://14883575 muloti missing from libcompiler_rt on arm64.
[33me37d06e[m arm64 does not have fast entry points.
[33m6ee8877[m [frontend] Enhance CompilerInvocation to accept an array of extra arguments to pass to the clang importer.
[33mc65f4c3[m Rework archetype mangling to follow parent hierarchy.
[33mfe63b96[m [SIL] Provide a single source for determining a function transparency.
[33m7da84fd[m Make FuncExpr, PipeClosureExpr and ClosureExpr DeclContexts on their own.
[33ma1ac2dd[m <rdar://problem/14971418>
[33m2ca2ce9[m Teach BoundGenericType to compute its own substitutions.
[33m9e887fc[m [SIL] Mark calls to implicitly generated union element constructors and default arg generators as transparent.
[33mbb163c1[m Sema: Reference 'Self' archetypes back to their AssociatedTypeDecl.
[33m12c365e[m Allow type substitution with a null resolver.
[33mab7a760[m Remove unused bit in CapturingExpr
[33m4d00616[m Add a fast path in the [auto_closure] removal transformation for the no-op case
[33m526dbd8[m Propagate explicit-conformance declaration to inherited protocol checks.
[33mfcf8741[m Replace calls to FuncExpr::getType() with FuncDecl::getType()
[33m8db6568[m Abstract the fact that both FuncExpr and FuncDecl have a type inside semaFuncDecl()
[33m9e889d1[m Revert my commit r8157.  It is breaking tests in +Asserts.
[33mf49f9b0[m Abstract the fact that both FuncExpr and FuncDecl have a type inside semaFuncDecl()
[33mf7ddd97[m Add PrettyStackTrace to typeCheckDecl()
[33m1dc589d[m Remove more dead code in the type checker that handles FuncExpr
[33mb696265[m Remove dead code in IR generation that handled FuncExpr
[33mb76013b[m Remove more dead code in the type checker that handles FuncExpr
[33m1bd34c6[m Constraint generation: remove dead code to handle FuncExpr
[33mc69c790[m Move result typeloc and body result type from FuncExpr to FuncDecl
[33m7c8ae93[m Add a new "mark_function_escape" instruction that will be used to mark the escape point of function definitions that "close" over global variables.
[33m26eec21[m Factor out the search for explicit conformances.
[33m59b3ecc[m IRGen: Bind the destination BB argument for dynamic_lookup_br.
[33m6dbc1a8[m Add manglings for associated types.
[33m9c793e5[m Add a new (temporary and hidden) commandline option: -enable-top-level-definite-init.
[33mc3e2519[m When emitting the top-level-code function and processing pattern binding decls for global variables, enter the global_addr into the VarLocs mapping so that the global_addrs are CSE'd in the generated SIL code.  For now, this simply reduces the size of the generated SIL (by reducing some common subexpressions) with no other functionality change.
[33m0de24cd[m perform one hash table lookup instead of two.
[33m3c0c9a5[m introduce a new mark_uninitialized SIL instruction which will be used by definitive initialization of top-level code.
[33m7a00197[m [IRGen] llvm.global_ctor should not be emitted as a constant.
[33mc6ae53e[m Don't call getFuncExpr() to create a SIL location with FuncExpr instead of FuncDecl
[33m5975fb7[m Use FuncDecl in typeCheckFunctionBody() parameters
[33me1a1f12[m Remove 'FuncExpr' from variable names
[33m49fe003[m Remove two uses of FuncExprLike and simplify the definition of FuncExprLike
[33mc366c87[m Another minor fixup to MandatoryInlining: bail if CalleeValue becomes invalid, rather than try to dyn_cast and crash
[33m169a0a3[m Remove a redundant parameter from SILGenModule::emitFunction()
[33m19de5fe[m Add minor extra assertion to MandatoryInlining
[33me08eee2[m Move some of SILGen for functions to use FuncDecl instead of FuncExpr
[33m2f5869f[m Add test for r8124
[33m796eac4[m Make SILLocation::dump() more informative
[33me6076d1[m Move protocol-conformance computation into Module::lookupConformance().
[33m3aeb481[m SILGen: Fix assertion failure when currying a natively ObjC method.
[33m4a535d4[m Mandatory inlining: clean up alloc_box, partial_apply, etc. after inlining an [auto_closure] argument, in simple cases.
[33m176b89d[m AllocBoxToStack: correctly identify last release of an alloc box when there are multiple releases in the post-dominating block.
[33m9ff68ca[m [ClangImporter] Hack in a wrapper for NSZone*, which is always opaque.
[33mf58d65a[m SIL.rst: Update description of 'thunk' linkage for its broader role.
[33mc07a6e3[m SILGen: Emit currying thunks lazily with thunk linkage.
[33m705102b[m SIL: Rename 'ClangThunk' specifier to 'Thunk'.
[33m46caf67[m More cleanups: Someone implemented Size and Alignment while I wasn't looking :-)
[33m7a472f8[m Debug info: Get the best known alignment even for non-fixed-size types. Thanks to Joe for pointing this out.
[33mda57c68[m Just code cleanup.
[33mb9ac293[m Revert "more code cleanup." Accidentally committed too much.
[33mb287c34[m more code cleanup.
[33m11dbb0c[m SILGen: migrate some uses of FuncExpr to FuncDecl
[33m7410a83[m Replace Bool._getBuiltinLogicValue stub with a Swift implementation.
[33m450ad66[m Comment typo
[33m4a4c70a[m IRGen: Implement partial_apply lowering for objc dynamic method values.
[33m7eb0264[m Update SIL.rst discussion of objc calling convention.
[33m7b2507b[m Minor variable renaming; also, remove unncessary pass by reference
[33m3997330[m [SIL] Remove the redundant secondary AST node.
[33me7e3c10[m [SIL] Add appropriate SILLocations to the inlined code.
[33m992e95e[m Add -emit-verbose-sil argument to sil-opt.
[33m7433fec[m misc cleanup. No functionality change.
[33m3fb2d14[m Simplify FuncDecl::getExtensionType() implementation
[33m8a2ec6c[m Minor documentation rewording
[33mb415d3f[m Fixup reference counting when doing mandatory inlining across a partial application. This does not yet remove the alloc_box for the [auto_closure] but at least ensures that we do not leak or over-release.
[33m681803c[m Minor cleanup of mandatory inlining SIL test
[33mce592de[m Introduce TypeBase::getSuperclass() to retrieve the superclass of a given type.
[33m7a4ff53[m getSourceRange(): handle delayed constructor and destructor bodies
[33mda7bb5b[m Factor type substitution logic into Type::subst().
[33mc3833c1[m [serialization] Validate the number of param patterns in a FuncDecl.
[33mabfa512[m Sink getArgParamPatterns() and getBodyParamPatterns() into AbstractFunctionDecl
[33m12f6e68[m [serialization] std::function is already nullable; no need for Optional.
[33m46f6169[m Debug info: Emit mangled name for bound generic structs and classes. Implements rdar://problem/14802271
[33mddd7fb4[m SIL Serialiation: add implementation to serialize SIL basic block and a few SIL instructions types.
[33m2c8e7e4[m Sink GenericParamList to AbstractFunctionDecl from derived classes
[33mcc37187[m SIL: Remove 'UncurryDirection' and uncurry all methods right-to-left.
[33m3cc01cf[m Introduce AbstractFunctionDecl -- a base class for ConstructorDecl, DestructorDecl, FuncDecl -- and move some of the common concepts and logic into it
[33me6bfc39[m FuncExpr: use the function name as the primary source location (used to be the 'func' keyword)
[33m642ef36[m [stdlib] StringDesign.rst: Finalize the Overview section
[33mad9a958[m Document SIL dynamic_method_br instruction
[33m39b7a43[m [SIL] Mark locations of implicit constructors/destructors as auto-generated.
[33m32e14dc[m [SIL] Add another missing location (for BBArguments).
[33m0236dc2[m [SIL] Not all location types are valid on all instructions
[33m0e3aa19[m Factor the selector-loading logic into its own routine.
[33m5917038[m Untested IR generation for dynamic_method_br.
[33m88c310a[m Verifier: add verifyCheckedAlways() family of functions, that is run on typechecked ASTs even if there were errors.
[33mcb00894[m Refactor the way builtin functions are created
[33mcea6cb0[m [stdlib] StringDesign.rst: Remove needless level of document structure, simplify the description of indexing
[33m30202f0[m Release note that class method currying finally works.
[33mc7852b5[m SILGen: Emit currying thunks for class methods.
[33me80871f[m SIL: Don't crash when printing closure-local SILDeclRefs.
[33mb86203f[m IRGen: Emit partial applications of indirect function calls.
[33m37ee3a2[m Run AST verifier on modules produced by Clang importer and fix bugs found by it
[33mcdf160e[m Introduce and optimize for uniquely-referenced opaque values.
[33md04e9b7[m SILGen: Manage retain/release properly for dynamic member lookups.
[33maf562d1[m Debug info: name mangling for composite types containing Archetypes. Among other things this enables mangled names for tuples. This adds a pointer to the DeclContext to SILFunction and which is used to provide the necessary context to the Mangler. Fixes rdar://problem/14808764 and rdar://problem/14813658.
[33mb400879[m [stdlib] StringDesign.rst WIP
[33m5d1834e[m REPL: create a PipeClosureExpr for a function that is immediately called instead of creating a FuncExpr without a corresponding FuncDecl
[33ma558acc[m Update the SIL stage at the end of the canonicalization phase.
[33m24f4706[m SIL: Introduce the dynamic_method_br instruction.
[33m68d47c8[m now that module kinds are split out of DeclContext kinds, we can drop the alignment of DeclContext to 3 bits.  This should save some memory and work around the debugger problem.
[33m55200e5[m Now that Module has its own kind field, drop the various module discriminators from DeclContext.  This is cleaner and should enable us to drop the alignment of DeclContext (coming next Jordan!)
[33m89fff39[m [SIL.rst] Update the guaranteed passes section.
[33mfba35a3[m [SIL] Move condbranch location from if/while/.. stmt to the condition
[33mc06bd83[m [SIL] Remove the last few uses of SILLocation constructor.
[33me36839c[m [IRGen] Eliminate calls to SILLocation() from IRGen.
[33mfbc6824[m SILGen: Emit curry thunks for generic functions.
[33m53e0f11[m Introduce a new ModuleKind enum to implement RTTI for module downcasting.
[33m3879462[m Describe calling convention for [byref] arguments in SIL.rst.
[33m8c60d88[m Provide DynamicMemberRefExpr with .Some(fn)/.None helper expressions.
[33m1e23c93[m Rename FuncDecl::getBody() to FuncDecl::getFuncExpr()
[33m485e1f4[m SILGen: Emit curry thunks for struct instance methods.
[33mb960da9[m SIL: Fix logic bug in SILDeclRef::atUncurryLevel.
[33md9a6827[m revert this, I didn't mean to commit it.
[33me48b3a4[m Rework how capture lists work in CaptureExpr: now we record global variables used by functions in the capture list as well.
[33m1d86968[m Update subscript operator example in comments
[33m2cdbec4[m SILGen: Currying thunks always have Freestanding CC.
[33mf575b7d[m Fix typos in SIL verifier messages.
[33m586f54e[m [Constraint application] Properly pass down the context for a closure.
[33m9640751[m update file header comment, ooops.
[33m13c33e0[m split declcontext stuff out to its own file.
[33m77d0fb5[m add some support for dumping DeclContexts, which is useful for diagnosing problems, particularly given LLDB's bug handing our DeclContext class (filed as rdar://14944683)
[33mc5557a6[m SIL: Introduce the 'dynamic_method' instruction for dynamic method dispatch.
[33m4cfb77b[m Don't emit Objective-C thunks for protocol members.
[33m5b31090[m Propagate [objc] to properties, methods of [objc] protocols.
[33m1b48b78[m Dynamic lookup can find members of class extensions.
[33m6e67e34[m Rename DynamicMethodInst -> MethodInst.
[33medbeaa9[m AST verifier for dynamic member reference expressions.
[33me67f33b[m [sil-mode.el] Add keyword highlighting "to", "sil_sage".
[33md718c8a[m [stdlib] StringDesign.rst: WIP with a new "introduction by example" approach
[33mbe21524[m [docs] Silence warnings by removing non-existent documents from the toctree
[33m8da6fdf[m [stdlib] StringDesign.rst: note that we have to cover YAGNI
[33mdae1d10[m Fix an error in DeclNodes: ValueDecl did not include DestructorDecl
[33mbb7c94f[m Remove useless classof() overloads
[33md7c6406[m Debug info: Don't copy the memory for a serialized swift module in an __ast section. Thanks to Jordan for pointing this out. No functionality change.
[33m21466a9[m IRGen: Get dynamic singleton unions working as args and switch subjects.
[33ma6ec308[m SIL: Disable verification of switch_union bbarg types.
[33mcb43f56[m [SIL] Remove more dependancies on SILLocation(), specifically from debugging related code.
[33m369a948[m [SIL] Minor auto-generated SILLocation API rename/refactor.
[33m42f87d7[m [SIL] Represent module-level locations.
[33mb6dba22[m [SIL] Remove another use of SILLocation()
[33m04b4901[m [SIL] Split emitBlock() into 2 to remove dependency on construction of a NULL SILLocation.
[33md175076[m IRGen: Add initializeValueWitnessTable to TypeInfo.
[33mbb7e33e[m First pass at emitting dependency (.d) files.
[33mfa063a4[m Mark diagnostics from expr-super parsing as PointsToFirstBadToken
[33m22c287f[m Mark a diagnostic from expr-postfix parsing as PointsToFirstBadToken
[33ma1f5f2b[m Switch 'case' parsing: when the parser expects a colon, don't unconditionally consume the next token; consume the token only if it is actually a colon.
[33m4446e9a[m Mark diagnostics from switch parsing as PointsToFirstBadToken
[33mfbe081b[m Mark diagnostics from c-style-for parsing as PointsToFirstBadToken
[33m621c341[m Mark diagnostics from do-while parsing as PointsToFirstBadToken and add test coverage
[33m8423a4b[m Mark diagnostics from while statement parsing as PointsToFirstBadToken
[33mbde42e0[m Mark a few diagnostics as PointsToFirstBadToken
[33md441771[m Improve QoI for "expected expression in 'return' statement" diagnostic
[33mf24063d[m Parser: don't try to parse the expression after 'return' if we see the beginning of decl (we used to only check for the beginning of statement). This is going to be a parse error anyway.
[33m32a79f9[m IRGen: Key dependent generic TypeInfos by bound generic type.
[33m9cedfee[m Mark a diagnostic PointsToFirstBadToken and add test coverage for it
[33m833b313[m Mark a diagnostic as PointsToFirstBadToken
[33m66df4d9[m Parse errors in array types: improve recovery a little and mark a diganostic as PointsToFirstBadToken
[33mc75a339[m for completeness, have -ast-dump print the captures list on FuncDecls as well as FuncExprs.
[33me77b647[m Mark a diagnostic PointsToFirstBadToken and add test coverage for it
[33m935d494[m Mark the diagnostic for missing function return type as PointsToFirstBadToken and use it in func decl parsing instead of the generic 'expected type' diagnostic
[33md10491a[m SIL.rst: Add a note that 'apply' currently consumes thick callees.
[33m34e0f03[m IRGen: Create NonFixedUnionTypeInfos for dynamic singleton unions.
[33m29b866b[m IRGen: Remove stale FIXME.
[33mdcc8015[m Mark a few "expected <something>" diagnostics as PointsToFirstBadToken
[33m94d417a[m Parser: introduce skipUntilGreaterInTypeList(), which implements a better heuristic than skipUntilAnyOperator() to find the end of a type list
[33mb3576d8[m Replacing the GenericTypeApplication node with more specific BoundGeneric{Class|Structure|Union} nodes Removing the TypeList node underneath a TypeList, a TypeList just needs to wrap a list of Type nodes
[33m1ba2554[m [SIL] Ensure that all loop branches have valid locations.
[33m4d7de37[m [SIL] Refactor splitBasicBlock() into splitBasicBlock and splitBasicBlockAndBranch
[33mf295c48[m [AST/Verifier] Push the check for HadError down into the verifyChecked implementations.
[33m4290549[m [utils/buildbot-script.sh] Get the buildbot to run the SourceKit tests.
[33m45e072c[m Fix the AST defect found by AST verifier; a bad IdentTypeRepr was created while parsing an incomplete identifier type, for example, "var a : Z."
[33m1edb604[m Mark a diagnostic as PointsToFirstBadToken
[33m4c719bb[m Mark the "expected type" diagnostic as PointsToFirstBadToken
[33mfcf5aa5[m Sema: definitive initialization check in constructors: don't complain about variables with ErrorType
[33m462fe42[m Adopt [transparent] more
[33m84d36a8[m Mark a few diagnostics for syntax errors in operator decls as PointsToFirstBadToken
[33mc82807e[m Mark a diagnostic as PointsToFirstBadToken
[33m6f6be18[m Mark 'expected { in constructor/destructor' diagnostics as PointsToFirstBadToken
[33m644d1a8[m Mark one more 'expected {' diagnostic as PointsToFirstBadToken
[33md2b9b6f[m Mark a couple subscript parsing diagnostics as PointsToFirstBadToken
[33me0998b7[m IRGen: Emit extra inhabitant value witness table entries.
[33mdc5e5d5[m IRGen: Add TypeInfo methods for dynamic extra inhabitant witnesses.
[33m2d26fd2[m IRGen: Derive spare bits for no-payload unions.
[33m4235c0c[m Mark some "expected {" diagnostics as PointsToFirstBadToken
[33m1fce165[m Mark a diagnostic as PointsToFirstBadToken and add a test that shows this behaviour
[33m606f0a1[m Mark a diagnostic as PointsToFirstBadToken and add a test that shows this behaviour
[33mdf5d0a0[m Point the diagnostic "expected '{' in body of func declaration" to the first invalid token (used to point to the function name).
[33m9bbfe27[m Add an option for diagnostics -- PointsToFirstBadToken
[33m80278df[m Simplifying the demangling for UncurriedFunctionType objects, from: k = UncurriedFunctionType   k = UncurriedFunctionMetaType     k = Type       k = MetaType
[33mc001e3e[m Added SILInstructionMemoryBehavior::MayRead/MayReadWrite and mayRead()/mayWrite() methods on SILInstruction.
[33m1200ef4[m Move benchmark machinery out of stdlib.
[33m933e7c4[m Add verifier check for invalid decls.
[33me77baa7[m Rename __DWARF/__apple_ast segment and section to __SWIFT/__ast so the linker doesn't discard it.
[33m9b53417[m remove Initialization::defaultInitialize, which is dead now.
[33mdea8213[m remove the -enable-definite-init command line option.  Definite init seems to have stuck.
[33m409d7c3[m ArrayTypeRepr printing: print size as an expression, instead of a pointer value
[33md52982c[m Recovery from parsing extensions for non-nominal types: stop abusing the type checker for what can be a simple syntactic check, when implemented on appropriate level -- during type parsing.
[33m0797ecb[m IRGen: Fix a bug in switching on a union with no empty cases.
[33me1eb850[m Minor variable rename to avoid shadowing of a parameter
[33m7a909b6[m Update the description of 'assign'.
[33m08ac7f8[m Use nullptr instead of '0'
[33m6179448[m Remove dead code: BraceStmt::create never returns a null pointer
[33m1dc9b9f[m fix the -allocbox-to-stack pass to handle the case when emiting a "destroy address" expands out to multiple basic blocks.  This enables it to work with the new union typelowering stuff.
[33m84748df[m Enhance the SIL verifier to detect improperly terminated basic blocks and report them as such, instead of exploding when trying to compute dominance information.
[33m8a8de7f[m Generalize MandatoryInlining to see through alloc box or alloc stack, and also fix a bug in not checking if the store is to the right alloc; new tests forthcoming
[33m743e99f[m Fixed typo in SIL documentation.
[33m6988171[m As per my discussions with Anna, removed MayWriteAndHaveSideEffects.
[33mb9dea7f[m Remove the emitSemantic* methods from TypeLowering and move the corresponding functionality into SILGen.
[33m215ffa5[m Make SILGenFunction methods for stores as well.
[33ma265845[m Move some basic l-values and address operations into SILGenLValue.cpp.
[33m6aae640[m Refactor in support of semantic vs. storage type differences.
[33m9c0f1fa[m Update slow versions of FastEntryPoints.
[33m4c41256[m [perftests] Add build system support for running performance tests.
[33madae15f[m [build] Remove some dead targets.
[33m11e4fda[m Add test coverage for 'typealias' parse errors ...and fix diagnostic text to actually say 'typealias' instead of 'var'
[33mea61572[m IRGen: Tail-emplace dependent vwtables into generic metadata patterns.
[33mbdba280[m Parser: add a fixit for the case when ':' was used instead of '->' to specify the function return type
[33mb3c4dfa[m SILGenApply: minor local variable rename for consistency
[33m5951c66[m Allow [transparent] on curried functions, but only apply it to the fully uncurried call.
[33ma1f21b2[m [SIL] Add a location to destructive_switch_union_addr + a couple more.
[33m422ab63[m [SIL] Add proper location when copying a ManagedValue.
[33m940d3b6[m Fold test/selector_functions.swift into test/functions.swift
[33m7cf2e3e[m Move interpreter-based test selector_arguments.swift to Interpreter directory
[33m734fe31[m parseDeclFunc(): sink error recovery for bad signature into parseFunctionSignature() and add more tests
[33md112448[m [serialization] Remove dead code found by the static analyzer.
[33mfb74a12[m Fix indentation. No functionality change.
[33m3b8e8b6[m IRGen: Implement generic parameter metadata lookup for unions.
[33ma864b8e[m enhance the union retain/release implementations to split the block when inserting a diamond into the middle of an existing block.  This fixes a problem that manifests in memory promotion when lowering an assign.
[33m115a158[m [SIL] Replace empty locations with valid locations in tuple exploding/encoding and pattern gen code.
[33m2ea48d3[m [SIL] Assign SIL location info for tuple initialization code.
[33m2015d3a[m [SIL] Dump the <no loc> SILLocation, which means the SILLocation is null.
[33m8fae98d[m [SIL] Specialize the source locations for ReturnLocation and ImplicitReturnLocation.
[33m62ad1cc[m Take out the hack in SILInliner that is no longer necessary now that [auto_closure] is handled specially in SILGen, and allow MandatoryInlining to see through basic indirection through alloc box instructions in order to inline calls to [auto_closure] arguments. Note that the logic here is conservative; any second store (beyond the initial store in the prologue) or any capture of the alloc box will preventing inlining.
[33m20ad7d8[m parseDeclFunc(): simplify a little bit and add a test
[33m52283c0[m IRGen: Bind archetype metadata for generic value witnesses.
[33m36a469d[m [modules] Introduce Module::getTopLevelDecls() to get the local-in-module top-level decls.
[33m5065699[m Enhance SILBuilder::emitBlock to emit new blocks after the current insertion point's block, if it has one, instead of always at the end of the function.
[33m4829626[m Pin the DWARF version to 3 until everyone has access to an updated version of ld64. (echristo bumped the default for LLVM to 4 yesterday).
[33md4f17ee[m Mark calls to [auto_closure] variables as [transparent]. Technically, we only want this to apply to parameters; however, I'm told that the plan on record is for [auto_closure] only to be allowed on parameters anyway and that the parser accepting local variable [auto_closures] is a bug, so I've implemented this assuming that will be fixed. This does not require [auto_closure] to be in the SIL type system; the [auto_closure] type information is pulled from the AST during lowering.
[33md516b1f[m Update metadata unittest for generic metadata pattern ABI change.
[33me630915[m IRGen: Kill the 'buildFakeType' abomination in GenericMetadataBuilder.
[33m3d62ae4[m [stdlib] StringDesign.rst: More Work In Progress (WIP)
[33m89b65ac[m Update package test script harder. Avoid some unwanted REPL chatter.
[33me011a80[m Add an option to disable 'unimplemented' errors for dynamic type layout.
[33md7ca99a[m Release note removal of 'as'.
[33mbfdd2f1[m Update package test script for removal of 'as'.
[33m82f1ea8[m IRGen: Kill dead methods from GenericMetadataBuilderBase.
[33m33d2122[m IRGen/Runtime: Change generic metadata template to use a fill function.
[33m724a938[m Code completion tests: move tests for completion inside closures into a separate file
[33m2a6dc12[m [modules] Introduce APIs to get the path for the file that a module came from.
[33mb38d8e3[m Code completion: basic completion inside closures
[33md3b0f3f[m lookupVisibleDecls(): visit patterns in switch 'case' stmts
[33m371659d[m [tests] Go ahead and remove the shootout interpreter tests.
[33m3107bcd[m AST printer: include inheritance info even if we don't have source info for it
[33mdfec888[m Parser: build AST for 'for <expr>; {}' and improve partial type checking of function bodies
[33mad318b0[m SIL Serialiation: add Transparent to SILFunction so we can decide which functions should be serialized.
[33md334833[m Add SerializeSIL.cpp to CMakeLists.txt.
[33md24a5d7[m Improve recovery in parsing the c-style for statement
[33m0dcca3a[m Eliminate CoerceExpr entirely.
[33m64ccd88[m SIL Serialiation: pass in a SILModule to serialize and a few other functions.
[33m1dea838[m Remove the "x as T" syntax from the language.
[33m70c9ab5[m Move class definition of Serializer to header file to help SIL serialization.
[33m19fb7d6[m runtime: Allocate refcounted storage for swift_NSStringToString.
[33mb3aa55b[m Fix grammar in diagnostic per feedback from Jordan
[33m7ada278[m Remove an unused diagnostic and improve diagostic wording
[33m2063a27[m Relocate Mach-O AST section parsing from SerializedModuleLoader/ to ASTSectionImporter/.
[33me622720[m Simplify ordering of constraint systems with dynamic-lookup results.
[33m7c40a3b[m Simplify handling of lookup results into DynamicLookup.
[33ma22911a[m Limit dynamic lookup to [objc] methods/properties/subscripts.
[33mb7fa0c9[m Ban the use of DynamicLookup in a generic constraint.
[33m820e05a[m [tools] gyb: Add two missing Python "dedent keywords"
[33m56b1bf3[m Don't allow DynamicLookup to be part of a protocol composition type.
[33m9dd7053[m [stdlib] StringDesign.rst: Work In Progress (WIP)
[33m12282a9[m Minor whitespace consistency cleanup
[33m691ce0e[m runtime: Add swift_allocPOD entry point.
[33me216617[m Use portable LLVM header instead of Darwin header.
[33mb49b986[m Remove unused overloads of parseIdentifierDeclName()
[33m27f2279[m Parser: fix recovery for 'case' with a keyword as a union element name
[33md929050[m Implement SerializedModuleLoader::addASTSection() to parse AST sections as created by IrGen/SwiftASTStreamerPass.
[33m07da340[m Move Dwarf constant definitions from lib/IrGen to include/basic.
[33mfb801cd[m a couple more.
[33m938ee19[m This -> Self.
[33m3d7f38d[m Remove the *SubscriptExpr::setDecl() methods.
[33m0554c94[m Fold GenericSubscriptExpr into SubscriptExpr.
[33m2958f73[m Fold emitAnyMemberRefExpr() into its own caller.
[33m786f9d2[m Fold GenericMemberRefExpr into MemberRefExpr.
[33mfc5d0b9[m Use ValueDecl::dumpRef() for dumping references.
[33m7a0ce11[m Replace ProtocolConformanceWitness with ConcreteDeclRef.
[33m967072f[m Allow dynamic lookup to find a generic member.
[33m75326e2[m Release note that unions support address-only, fixed-layout types.
[33m60b6d12[m IRGen: Implement indirect value semantics for multi-payload unions.
[33ma30a94c[m fix typo
[33mc3d1f0d[m IRGen: Sketch out a SwiftTargetInfo class with fun facts about pointers.
[33m04b799b[m IRGen: Patch up conversion of address-only unions.
[33m1b07a4e[m SILGenPattern: Spot fix. No functionality change.
[33m915ed36[m IRGen: Lower SIL destructive_switch_union_addr instruction.
[33m3ed1303[m Parser: improve recovery when the extension name is a keyword
[33mc3492c9[m Type parsing: produce an ErrorTypeRepr when the recovery succeeded (or at least if we think so)
[33m47629bf[m Revert unintended change
[33m23ced2f[m Move the parseIdentifierDeclName() helper above parseDeclExtension() (so that extension parsing can use these helpers)
[33md7cbadb[m Parser: improve recovery when the protocol name is a keyword
[33mcfa8cb7[m SILGenPattern: Support address-only unions.
[33m71430d0[m Parser: improve recovery when the union name is a keyword
[33mdbbbe61[m Parser: improve recovery when the class name is a keyword
[33m8208bf6[m [SIL Loc] Replace calls to SILLocation() with more specific locations.
[33m781ee9b[m [SIL Loc] Allow CleanupLocations that point to the beginning of the AST node.
[33mfbcf5d4[m [SIL Loc] Use a separate bit to represent auto-generated code
[33mcc8cc64[m Parser: improve recovery when the struct name is a keyword
[33m3358955[m SILGenPattern: Destroy destructured subject rvalue before entering cases.
[33m82219c8[m definite initialization release notes.
[33m73832e4[m Allow [prefix] and [postfix] functions to overload one another.
[33m6d8a637[m Parse: reject [prefix] and [postfix] on the same function.
[33mb8b0253[m Parser: improve recovery when the typealias name is a keyword
[33m019f6dd[m [frontend] For "-I" and "-F" options stick to the space separated form.
[33mcf2928f[m [frontend] For "-I" and "-F" options add aliases to parse them as space separated too.
[33m5365296[m Make 'self' and 'Self' real keywords.
[33m0d34c37[m [stdlib] FixedPoint.gyb/.swift: factor out more of the boilerplate repetition
[33m1e51c49[m SILGenPattern: Tidy up some weedy logic in ClauseRow::emitDispatch.
[33m44e8296[m Make 'weak' and 'unowned' real keywords
[33me378af3[m Make 'metatype' a normal keyword
[33mc6d960c[m Minor type-o in Reserved Punctuation Tokens.
[33m04d1574[m Make sure that the dynamic lookup table has the right set of members.
[33m8c84806[m [stdlib] StringDesign.rst: this => self
[33m3b4a90e[m Serialization: handle transparent attribute.
[33me45792c[m SILGenPattern: Simplify tracking of ExprPattern guards.
[33m708a73e[m IRGen: Add a 'loadForSwitch' method to UnionImplStrategy.
[33mc1eddbe[m Update SILInstruction VALUE_RANGE in SILNodes.def.
[33m6aba15b[m Document unowned_to_ref and ref_to_unowned, and discuss some of the philosophy behind preserving this information in the type.
[33mfc04d57[m Rework the assign instruction in two major ways:
[33mc0ddd35[m Add a script to find unused diagnostics
[33m3da36d8[m Remove unused diagnostics
[33md1e1930[m Email feedback from DaveA
[33ma09343e[m Lock down on exports from TranslationUnit modules.
[33mdca88b5[m Don't use "main" as the name of a script module if it has a real file name.
[33m32c3059[m '-=' is valid on both signed/unsigned types
[33m2da9232[m Adopt [transparent] in a bunch of places
[33m3d1ed8a[m Remove unused no_sil_stage_declared diagnostic.
[33m5679974[m Fixed comment typo.
[33mc86a54a[m Renamed SILBasicBlock::getInsts() => SILBasicBlock::getInstList() as discussed on the list.
[33m1500410[m Make 'super' a normal keyword
[33m75099b7[m Narrow the rule that ApplyInsts in transparently inlined functions get the [transparent] flag to only apply to ApplyInsts that directly call function arguments, which is enough to handle the intended use case of [auto_closure] arguments to [transparent] functions without virally enforcing inlining more than we want to (or should be, once the phase ordering and incomplete SSA-ification issues are resolved).
[33mceffc29[m Make 'constructor' a normal keyword.
[33mf12eca7[m change formatting.
[33m3828b61[m Make transparent inlining apply transparency recursively to all calls and also see through applications of partial applications (in SSA form); this is intended to ensure that [auto_closure] arguments of [transparent] functions get inlined, although that's additionally blocked by (apparent?) incompleteness of SSA-ification passes currently and phase ordering issues.
[33m1da2dc4[m s/Bitstream/MemoryBuffer/g
[33m9bc6220[m Debug info: forgot to zero-terminate string.
[33m2cae5e1[m [stdlib] StringDesign.rst: add DaveZ's organizational notes
[33ma6176da[m [stdlib] Check in WIP on Strings State of the Union
[33m35dd32f[m Disallow 'self', 'Self', and other identifier keywords in decl names
[33m7c56b45[m Parser: fix a crash while doing recovery when we tried to reinterpret a binary operator at the beginning of an unary expression as unary operator
[33m8f3c900[m [SIL] Add cleanup locations to SIL instructions.
[33m7f20dfd[m Include inner class members in dynamic lookup results.
[33m202f65b[m SILGen: Warm over some stale comments in SILGenPattern.
[33m930f786[m [stdlib] Add regeneration instructions to FixedPoint.swift
[33m40d3f9e[m [stdlib] Add "gyb" templating engine; use it to generate FixedPoint.swift
[33m91010d1[m Dynamic lookup can never find a member of a generic class.
[33mcc53e1a[m Remove Type parameter from ValueDecl constructor.
[33m47f529d[m Fix variable name case.  The rest of the file seems consistent.
[33mddfa9bc[m Parser::skip*() routines: don't stop on code completion token anymore
[33mcad735b[m [serialization] Remove FALL_BACK_TO_TRANSLATION_UNIT hack.
[33m65a53df[m IRGen: Implement SIL union_data_addr and inject_union_addr insns.
[33m55c8418[m SIL.rst: Update is_nonnull description for John's change.
[33me06104b[m Turn off dynamic lookup in a few places, e.g., the REPL.
[33m76d9995[m Parser: because identifier keywords can not be used by parser to resynchronize, consume them while parsing the type when expecting the identifier.
[33m4d5fc70[m Introduce equivalence of [objc] declarations for dynamic lookup purposes.
[33m9b90a66[m Use \returns in the documentation comment
[33m80ca07d[m Remove comment that already exists in the header
[33m9efa20e[m Improve overload resolution for dynamic lookups.
[33m102f3e8[m add a few DEBUG logs, no functionality change.
[33m6de3df2[m Define _getBool purely in swift.
[33m415eff8[m Permit expressions which "obviously" resolve to Builtin.Int1 to be used directly as conditions.
[33m6e457f8[m Add TypeBase::isBuiltinIntegerType(unsigned).
[33md984084[m Remove unused OwningPtr.h includes
[33m0d157c8[m Prune unused includes
[33mea41db7[m lldb-moduleimport-test: replace VLA of char with SmallString, replace iostream with llvm::{outs, errs}
[33m4ca4482[m lldb-moduleimport-test: no-op whitespace fixes
[33m83767b8[m Fix a dumb infinite loop.
[33m60163b4[m Removing the : between name and type for function declarations, since that does not exist in the language.
[33m389c867[m Making the Demangler work properly with nested types, in the sense that Paths that represent nested types need to come out flat instead of hierarchical Adding a couple test cases for this
[33m3a82557[m Fix swapped overload kind checks in solution comparison.
[33mf11057c[m Fix for Makefile builds.
[33m02ce2fe[m Make is_nonnull produce a primitive Builtin.Int1 instead of Bool, and use swift._getBool to turn that into a Bool as necessary.
[33md767e0d[m Treat _getBool as a library intrinsic as well.
[33mce08a05[m Change _doesOptionalHaveValue to take its argument [byref].
[33ma911ef8[m Make ASTContext::getProtocol use lookupInSwiftModule as well.
[33mf6cfe63[m Check for Optional<T> and a set of four "intrinsic" functions whenever we build a reference to a [weak] variable in the AST.
[33m80a2c4c[m Add a simple query for whether an archetype has any requirements at all.
[33m72112bf[m More demangler changes - these introduce a new structure to the demangling that is better suited to Greg\'s need to produce types and decls out of demangled trees
[33mdae4bc7[m Update buildbot script to set $LLDB_MODULEIMPORT_TEST.
[33m4a73138[m Parser: improve recovery when function name is a keyword
[33m31c9266[m Extend SerializedModuleLoader to load modules from a bitstream. Add tools/lldb-moduleimport-test, which simulates LLDB importing modules from the __apple_ast section in Mach-O files and use it to regression-test the new API.
[33m6d34a12[m parseDeclFunc(): improve recovery when the function parameter tuple is missing
[33m0dfaf23[m Fold interpreter-based test/Dictionary.swift into test/stdlib/Dictionary.swift
[33m6a40338[m Move some interpreter-based tests that test stdlib from test/ to test/stdlib/
[33m005003b[m Fold a one-line testcase into an existing file
[33md3d1675[m Simplify handling of ErrorType
[33m3708177[m Prefer declarations found via normal lookup to those found via dynamic lookup.
[33m3a6feb7[m Disallow constructors in protocols
[33m508e02d[m All classes implicitly conform to the DynamicLookup protocol.
[33mf19fc5e[m IRGen: Implement indirect value semantics for single-payload unions.
[33mfa3dd42[m Don't parse function bodies in imported TUs.
[33mf82f001[m Migrate TypeChecker::getProtocol() over to ASTContext.
[33md247bf3[m A few updates to the external doxygen search capability to reflect certain changes I made on trunk and a few mistakes I made as well.
[33m9cacf75[m Revert "Debug info: Class are passed by reference, make class args and local"
[33m2e98f85[m Parser: parse, discard and complain about parameter list in destructors
[33m4c95289[m Add test missing from r7687.
[33mb06e65c[m Add the DynamicLookup protocol for lookup across all classes and protocols.
[33m61783ae[m Improve recovery and remove noise in diagnostics for 'constructor {}'
[33m06f96ff[m Merge test/Parse/{constructor,destructor}.swift into a single test and add more testcases
[33m1c3961e[m Fixed typo.
[33m64e0672[m Add support for generating doxygen compatible external search indices for swift.
[33m74abe70[m Use new aggregate doxygen target for building swift doxygen.
[33m35ae80a[m parseDeclConstructor(): don't give up on parsing the constructor if constructors are not allowed in this context
[33m6fd2cd3[m Added the option to TranslationUnit::dump() to have the output go to a provided ostream.  This allows it to be used for logging in LLDB.
[33mcfe6951[m Parser: if we parsed a bare closure as an expression, it will be a discarded value expression and the type checker will complain anyway.
[33m9447f6c[m parseBraceItems(): don't skip over braced lists of statements during recovery
[33mfe2e45f[m ASTStreamer: Fix another inconsistency between spec and implementation.
[33m32e6566[m Loads in an escape region cannot be safely promoted.  Add a super naive, but sound implementation.  This should be improved later.
[33mc4d53aa[m Debug Info: Make sure that top_level_code has a decl_file/decl_line.
[33mb8c0115[m remove this for now.
[33m6d57b49[m Have the ASTWalker walk protocol declarations.
[33m2524f76[m Debug Info: Rename builtin types. [cosmetic]
[33m453205f[m LangRef: fix the only instance of missing this -> self rename that I could find
[33mf4196d8[m IRGen: Logic inversion.
[33m38bd98e[m IRGen: Make (non-functional) FixedTypeInfos for address-only unions.
[33mcceb5f4[m Fix -Wnon-virtual-dtor warning.
[33m3119706[m Fix -Wdocumentation warning.
[33mc52a778[m IRGen: Refactor strategy-specific behavior out of UnionTypeInfo.
[33ma3928d4[m fix this -> self conversion issue.
[33mf7ab5bc[m Change oneof -> union in a comment
[33m53e0921[m Make 'self' and 'Self' keywords
[33m1593632[m More 'this' -> 'self' replacements
[33md903542[m Rename RebindThisInConstructorExpr -> RebindSelfInConstructorExpr
[33m69cfa73[m More 'this' -> 'self' replacements
[33ma199242[m Sending 7641 again + a fix for the inf loop that Dmitri found I also added that one as a test case
[33me1f346b[m Update comment for print_double to mention that NaNs don't need ".0" either.
[33m8f40675[m Update release notes and xcplugin instructions.
[33md40f74f[m [Parse] Treat ! as a postfix operator when both left- and right-bound.
[33m1e5720d[m Remove an unneeded #include
[33md0823de[m [SIL] Use AutoGenerated location when generating thunk bodies.
[33mdd1c2f7[m Parser: consume tok::code_complete where it is handled
[33m6eb5bc5[m Revert r7641.  It causes an infloop while demangling a name in test/SILGen/class_bound_protocols.swift
[33m0f9b53a[m Mention 'this' to 'self' rename in release notes.
[33m567d120[m parseStmtIf(): Actually propagate error bits from condition.
[33m15a4a10[m parseStmtIf(): propagate error bits correctly
[33mff3ea6e[m <rdar://problem/14830080> & <rdar://problem/14822344>
[33m821fbb1[m Debug info: Class are passed by reference, make class args and local variables use a DW_op_deref expr. Fixes <rdar://problem/14849106>
[33mfc3a5f5[m [ClangImporter] Believe type info coming from integer literals in macros.
[33m9b42f8f[m Don't append ".0" to "inf" and "-inf".
[33m5d05204[m Fix a -Wdocumentation warning
[33m8a8b979[m Lexer: fix a bug where restoring lexer state could produce duplicate code_complete tokens
[33m8842d75[m [SIL Diagnostics] Warn on implicit return from a noreturn function.
[33mb67f3c3[m [SIL] Use the ReturnLocation/ImplicitReturnLocation instead of generic SILLocations.
[33md71c70d[m [SIL] Refactor to make it explicit which location is used + add FIXMES
[33m440631f[m [SIL] Add the SILLocation hierarchy.
[33m8f5b8ccb[m Rename "This" to "Self" and "this" to "self".
[33m4d895eb[m Some code formatting fixes.
[33m0f1a58c[m Add support for skipping / displacing SyntaxNode tokens, so that we can effectively replace Identifier nodes with TypeId nodes. Reenable SyntaxNodeKind::Identifier.
[33mdb44574[m parseBraceItemList(): use ParserResult
[33ma0f44d5[m Update remaining references to [force_inline] to [transparent]
[33m55dec1e[m Remove outdated comment.
[33m330f5fe[m For nested archetypes, track the corresponding associated type.
[33m5d369db[m Remove [auto_closure] recursively from types in TypeLowering, as it is not meaningful in SIL. This prevents SILGen from generating code that is rejected by the parser and/or verifier.
[33md07a5e8[m parseStmtCase(): use ParserResult
[33mfeed009[m Remove the code to emit SyntaxNodeKind::Identifier to pass the tests. We need to support turning identifer nodes into potential type identifiers before we can enable identifer nodes again.
[33mc3c5d7d[m parseStmt(): use ParserResult
[33m14f6b67[m Correctly propagate code completion bits from parseExprPostfix() during the first parsing pass.  This allows us to remove a workaround in parseBraceItems() that directly looks at the current token.
[33maf8fd2c[m Change variable name in header to match source file
[33m78d2f03[m parseStmtSwitch(): use ParserResult
[33mcadc901[m parseExprOrStmt(): use ParserStatus
[33me1d39e5[m parseStmtFor(): use ParserResult
[33m09d0d07[m IRGen: Detect dynamic, address-only, and recursive union layout cases.
[33m510ad27[m Remove retain/retain_autoreleased/release/retain_unowned from sil-mode.
[33m417a162[m Rename enum class SyntaxColor to SyntaxNodeKind, since this represents more than color. Set the size for SyntaxNodeKind to uint_8_t, since we're packing it together with length in a 32-bit value in SourceKit. Add SyntaxNodeKind::Identifier.
[33m09ad614[m parseStmtDoWhile(): use ParserResult
[33mb8e7ccd[m Updated SIL.rst in light of r7602.
[33ma9f56c4[m parseStmtWhile(): use ParserResult
[33m45c4631[m parseStmtIf(): use ParserResult
[33md41b871[m At Joe's suggestion added the prefix strong to instructions Retain,Release,RetainAutoreleased,RetainUnowned to prevent confusion in between RetainUnowned and UnownedRetain.
[33mc6f0dd1[m parseStmtReturn(): use ParserResult
[33m9b9e669[m Add support for :print_module on Clang modules.
[33meef39ff[m Add a :print_module directive to the REPL.
[33m803f5dc[m Rearrange the careful dance that is Initialization finalization. We had a weird (and problematic for me) situation before where tuple initializations would not recursively finalize their tuple elements when they were finalized.  Making them do so runs afoul of the poorly named Initialization::getSubInitializations(x,y,z) method, which had nothing to do with the Initialization::getSubInitializations() method.  Rename the former to "getSubInitializationsForTuple" to make it more clear what is going on, and make it handle the finalization of the SingleElement initialization when it explodes it.
[33ma677146[m switch 'case' parsing: don't stop on the first error, leaving the rest of the switch body not consumed and confusing the rest of the parser
[33m3ef60c5[m Code completion: eat the code completion token where we handle it
[33m83f37e0[m SILGen: Emit address-only union constructors.
[33m4c210e8[m Improve error recovery for switch statement
[33mc0c6efd[m CMake: Add explicit library path for linking against Swift stdlib libraries.
[33m45fba04[m Autoconf build: add missing source file to swiftObjectiveC library.
[33m6ff2ac9[m Improve testcase friendliness to definitive initialization.  This is the set of changes that work in both modes.
[33m4d0d6c8[m Change wording of a diagnostic
[33mc74dc79[m SIL: Add instructions to implement address-only unions.
[33mbb3bec5[m Switch TypeChecker::transformType() over to Type::transform()
[33m2852e46[m Teach AST to lazily fill in the T[] and T? implementation types.
[33m3e992a6[m Use -module-link-name to encode library names in standard library modules.
[33m9202538[m Fix autolinking for libraries in immediate modes.
[33mee2ed39[m Hack in a -module-link-name option for autolinking.
[33m22912bc[m Add a -l flag to Swift and use it to provide autolinking information.
[33m940d53c[m Fix definition of "nil": it has to be null, not a default-initialized NSObject.
[33m72221eb[m CMake: check for an empty variable value correctly
[33m7a779ba[m Set LLVM_INCLUDE_TESTS/LLVM_INCLUDE_DOCS to 1 in standalone mode so that in standalone mode we have the same defaults as when we build in tree.
[33mcf4e28a[m Debug Info: Change the type caching to be based on the Type instead of DebugTypeInfo. This is based off the observation that no two types that share the same canonical type can have different storage and alignment and has the benefit of being able to locate the debug info for a type described by a meta type.
[33m861993a[m [CMake] Use xcrun to get the MacOSX SDK, instead of hard-coding it.
[33m6b90a80[m move test/SIL/Diagnostics testcases into test/SILPasses.
[33m80cb202[m teach the repl to run SIL diagnostic passes too, which is required for correctness with the new definite init model (well, it always is, but not IRGen explodes if they aren't run instead of just producing broken code).
[33m28cc919[m Infer conformance requirements from the signature of a generic function.
[33m2e964b6[m teach definite init about upcast_existential.
[33m799c608[m Diagnose failure to meet a superclass requirement.
[33maf1a820[m rename tools/swift/Frontend.{h|cpp} -> Helpers.{h|cpp} to avoid hopelessly confusing me with the Frontend library.  Add some more include guards around the real Frontend.h header.
[33m4d97f46[m Make TypeLoc::isError() return true when... there is an error.
[33m0c8deef[m move the list of sil diagnostic passes out to a "runSILDiagnosticPasses" helper function which is shared by the compiler and the immediate mode stuff.  This way, diagnostic passes are run on modules imported by "-i".
[33m41ea6ac[m refactor the interface to RunImmediately to pass down the CompilerInstance, instead of a few parts of it.  No functionality change.
[33m4cb38a2[m more support for protocols: model accesses to protocol members as loads since they are uses.  The diagnostic now doesn't complain about them escaping.
[33m683cf52[m Global variables must have an initializer or be default constructible, even with the new initialization rules, since they are executed in series.
[33m312d127[m CMake: Remove ridiculous llvm-tblgen search logic.
[33m1ff3fa8[m teach memory promotion about init_existential, allowing it to work for variables of protocol type.
[33m96a7c83[m IRGen: Emit generic union metadata harder.
[33ma242717[m Mangler: Fix mangling of generic union cases.
[33mbb8b422[m SILGen/IRGen: Move union constructor generation to SILGen.
[33mfe1ad58[m SIL: Add a 'union' instruction to construct unions.
[33m9a79a1b[m Define options to enable the user to turn off inclusion of tests/docs.
[33m1696b0f[m Added code for building swift doxygen documentation.
[33m35ceac4[m Code completion: ensure we don't try to complete the identifier in pattern-atom
[33mb1d0891[m Code completion: complete types in extension declarations
[33m45c4cc3[m Brush up comments in Parser: no need to describe the return value of functions that return ParserResult; use Doxygen syntax.
[33mc7c67e0[m Code completion: complete types in the union inheritance clause
[33mb02fb06[m IRGen: Emit generic union metadata templates.
[33m4d4444b[m Use UnionElementDecl::getParentUnion in more places.
[33m55926f3[m Don't crash in IR-gen if the SIL basic blocks aren't dominance-sorted.
[33m610d2b7[m Code completion: complete types in the protocol inheritance clause
[33mb7bdb2b[m Remove redundant return
[33m087b035[m Refactor assign lowering out to a helper function.
[33m117d151[m Parser: propagate code completion bits to the result
[33m46fd1c9[m IRGen: Emit metadata and value witness tables for nongeneric unions.
[33m6385b60[m ABI.rst: Clarify 'bit size' to 'storage size in bits'.
[33m508a674[m use TypeLowering to emit the retain and release operations when lowering assign instructions.  This properly handles aggregates with retainable members, fixing a crash of memory promotion on the stdlib.
[33m7a02b7a[m Code completion: complete types in the class inheritance clause
[33md4a0c16[m revert my r7505 patch to 'assign'.  It turns out that changing assign in this way doesn't actually make things simpler, and the former model for assign is simpler to work with.
[33m484ab25[m Switch a few more clients over to Type::findIf().
[33m0cf6ba5[m Code completion: complete types in the struct inheritance clause
[33m78319bb[m Switch to non-capturing lambdas and update comment.
[33maf2603f[m Add a section to ABI.rst describing union layout.
[33m2bffdb7[m Introduce Type::findIf() to find a type that corresponds to some predicate.
[33m5130342[m Minor refactor to make variable usage fit naming better
[33me96a3f6[m Debug Info: Set the scope line of a subprogram to the beginning of a function, except for pipeclosures. Fixes rdar://problem/14798676.
[33mc33b325[m Fix type printing harder.
[33mfe131be[m Switch TypeBase::isDependentType() over to Type::transform().
[33m93a0c8e[m Introduce Type::transform() to transform a type via some function object.
[33m8bdc236[m The CMake-built Xcode project puts llvm-tblgen into Debug/ or Release/.
[33m4bc13e6[m Code completion: complete types in the typealias inheritance clause
[33mf97c0ce[m Add a release note that recursive unions are among the yet-unsupported features.
[33m615cf09[m CMake build system: do exactly what Clang does to find tablegen
[33ma1c6b65[m Move DebugScopeStack from SILBuilder to SILGenFunction, using the swift new InsertedInstrs facility. No functionality change intended.
[33m2d8a163[m Update union discussion in LangRef and add a section on union element patterns.
[33mc9f7ef5[m Advertise unions in the release notes.
[33m16ecc1a[m IRGen: Handle value semantics for nontrivial multi-payload unions.
[33md0375e6[m SIL Parser: stop incorrectly rejecting partial_apply instructions with fewer arguments than callee input types
[33m13f08d9[m mark some type lowering classes final to enable devirtualization.  This shouldn't be needed in principle (see newly filed PR16984) but helps for performance now (not that this is super perf critical code).
[33ma62cfd3[m [Parse] Parse the '@' in "x@.y" as a postfix op.
[33m06c92f0[m Correctly print function types when input is an unnamed function type (i.e. not wrapped in a tuple type)
[33mc031546[m Enhance SILBuilder to give clients a way to track what instructions are newly created with the builder.  This is useful when you want to separate the complicated logic for creating instructions from something that wants to bulk process them.  One example is debug info generation in SILGen.
[33mdfaa784[m Zap unused TypeChecker::substArchetypesForGenericParams().
[33md6a5653[m Type-check generic constructor signatures before building archetypes.
[33m7e5e154[m Traversal: turn missing visit*Stmt methods into link-time errors.
[33mf6a5c78[m Per John's advice (a few weeks ago), rework the 'assign' instruction to being a semantic assign.  The functional difference here is only for unowned pointers, where now the conversion from strong to unowned is implicit in the assign.
[33m7634cd2[m Traversal: turn missing visit*Pattern methods into link-time errors.
[33md930560[m Traversal: turn missing visit*TypeRepr() methods into link errors.
[33m9320e0f[m Type-check generic function signatures before building archetypes.
[33mb3064a0[m ASTWalker: Walk OptionalTypeReprs, and add TypeRepr::walk().
[33m7d3aac7[m Make TypeBase::isDependentType() recursive, rather than shallow.
[33m2a16e56[m Allow destruction of moved-from ArchetypeBuilder instances.
[33mad38cb3[m [frontend] Add '-parse-as-library' at the tablegen'ed frontend options.
[33mb91b4b6[m Code completion: complete type-ident without dot, for example Foo#^A^#
[33mac8f768[m IRGen: Implement other value semantics ops for single-payload unions.
[33m32b9066[m IRGen: Resurrect 'copy' with a dual 'consume' LoadableTypeInfo method.
[33m38baa05[m Add a _Tt prefix to mangled class names in class metadata.
[33mfec5c85[m Code completion: complete types in protocol compositions
[33mf2ba4c8[m This commit changes the way the Demangler handles substitutions Previously, substitutions were treated as unstructured text chunks, but this was causing problems when using the demangler as a source of structured type information This patch ensures that substitutions are properly stored as the type they represent for later semantic reconstruction
[33ma9e4c92[m IRGen: Implement "destroy" for single-payload unions.
[33me62fa5c[m Debug info: represent union types as union types instead of base types.
[33m1b687f3[m Add autolinking metadata output to IRGen.
[33m1e3b418[m Remove hacks to speed up includes of "swift.swift", which doesn't exist now.
[33m7d6d336[m Add autolinking infrastructure to Module and ClangImporter.
[33mf1bc780[m Rework getReexportedModules to optionally find all imported modules.
[33m4980cb8[m parseTypeTupleBody(): propagate CodeCompletion bits from parsing individual elements to the tuple ParserResult
[33mfa957ab[m [SIL] Optimize SilGenApply by using builtin cache instead of comparing strings.
[33m2f3664d[m [SIL CCP] fix typo
[33m0306a7f[m [ClangImporter] Stop ClangImporter from trying to figure out where the swift runtime library is, this should be the responsibility of the caller to provide it.
[33mffeea0c[m Move getTypeOfRValue into Sema as well.
[33m1ea82af[m Split ReferenceStorageType into {Weak,Unowned}StorageType.
[33me1855fd[m move SIL verification logic to SIL/Verifier.cpp and change sil-opt to run the verifier after every sil pass it runs.
[33m77ff9c7[m [CMake] Fix CMake's definition of LLVM_TABLEGEN_EXE.
[33mdc439ad[m Lexer: improve recovery for invalid character literals and invalid escape sequences in charater literals
[33m3bee330[m Lexer: don't inf loop on an unterminated string literal near EOF
[33m8c9a7a5[m Introduce parsing of frontend options using LLVM's tablegen'ed Options infrastructure.
[33m39d40c5[m Lexer: don't emit a diagnostic if it was not requested
[33mc4775b8[m Lexer: unterminated/invalid character literals: recover by skipping to a single quote, newline, or EOF, whichever is first
[33m966e9a1[m Update a comment.
[33m97cdb29[m Turn on (swift) debug symbols for debug builds. This gives us a bunch of additional test coverage for free.
[33m4ba6197[m Lexer: add a specific diagnostic "unterminated character literal" instead of a generic one "invalid character literal"
[33mf808746[m Debug info: Remove an unneeded and wrong RAUW.
[33mae65ab1[m Introduce NullClangImporter library which is for clients that don't want to link Clang.
[33m7b3988f[m [frontend] Put CompilerInvocation implementation into its own file.
[33m4536a90[m Lexer: fix a crash on an unterminated character literal starting right before EOF
[33m7c84fd5[m Start detangling archetypes from the interface of generic functions.
[33m1579e17[m IRGen: Implement projection for multi-payload unions.
[33mb24b385[m IRGen: Fix up multi-payload dispatch to handle spare bits.
[33m8d9b42d[m IRGen: Emit injection functions for multi-payload unions.
[33ma379a71[m IRGen: Handle switch dispatch for multi-payload no-spare-bit unions.
[33mfe4c177[m IRGen: Share LoadableTypeInfo ops for single-/multi-payload unions.
[33m80bec3d[m Give swift.Option a standard mangling substitution.
[33m2e91172[m Don't record the declared type of nominal type decls within the module file.
[33m5034803[m Lazily compute the type of protocol declarations.
[33m29829a2[m change the SILPrinter to print the demanged name for a function_ref on the previous line, instead of at the end of an already really long line.  This is a purely cosmetic comment change.
[33m611b52f[m enhance constant folding to work with BoundGenericStruct's, fixing a crash building the stdlib with -enable-definite-init.
[33mc564fd4[m Have memory promotion require that variables are fully initialized when they are released.  This causes it to reject some useful cases that I'd like to broaden out later, but makes it sound.
[33m69d0afb[m rename [force_inlining] to [transparent].
[33mca1daac[m removeShadowedDecls(): simplify the way we get the type
[33mb6caa9b[m [SIL CCP] Constant fold struct_extract.
[33m4a3c36f[m Selector-style function parsing: try harder to recover
[33me7f5f3d[m Set the type of class/struct/union declarations during type checking.
[33m6f7048c[m Debug Info: Reorganized and generalized the layout of the __apple_ast section based on feedback from Greg.
[33ma56893d[m parseDecl(): use ParserResult
[33madaea00[m Actually propagate the code completion bit
[33mcaeddfd[m parseExprList(): use ParserResult
[33m421b107[m parseExprCollection, parseExprArray, parseExprDictionary: use ParserResult
[33m2bf0101[m parseExprSequence(): use ParserResult
[33m4957bca[m parseExprUnary(): use ParserResult
[33mf3b78dd[m Remove outdated xcplugin from core Swift repo.
[33mb9ff2e8[m Move getTypeOfReference fully to Sema as TypeChecker::getUnopenedTypeOfReference.
[33mb4973be[m Variously remove more uses of ValueDecl::getTypeOfReference.
[33mef91955[m Cut down on the direct calls to getTypeOfReference from the type-checker.
[33mf9a2407[m parseExprPostfix(): use ParserResult
[33m04bcc55[m parseExprNew(): use ParserResult
[33m2e3d313[m parseExprSuper(): use ParserResult
[33mfaff10f[m Parser: use ParserResult in 'is' and 'as' expression parsing
[33mec7b2eb[m Parser: use ParserResult in the interface of parseExpr()
[33m7937167[m [sil-mode] Added initial sil mode based off of swift-mode.
[33m5993c92[m Debug Info: Fix a bits vs bytes error.
[33m148ccdb[m [serialization] Have swift::serialize forward to swift::serializeToStream.
[33mf7ad1c9[m parseDeclVar(): use ParserStatus
[33mbee9980[m Build modules alongside object files for the standard library.
[33mb75d500[m Fixed 2x instances where we were missing C++ editor identifiers on .h files and a mislabeled header file.
[33m7df930b[m Remove some more uses of getTypeOfReference.
[33m004cc0c[m Remove some invalid or unnecessary uses of getTypeOfReference from SIL-generation and type lowering.
[33mad2ca67[m parseDeclSubscript(): use ParserStatus
[33m255aeae[m parseDeclUnionElement(): use ParserResult because this function returns at most one Decl, no need to pass in a vector
[33m76d1131[m parseDeclImport(): use ParserResult because this function returns at most one Decl, no need to pass in a vector
[33m581cac8[m Don't carry a type on an Initialization; just pass it down where needed.
[33m0fdd6e5[m We're going to type-check these expressions, no need to try to give them the right type now.
[33mecf4cc4[m parseDeclClass(): use ParserResult because this function returns at most one Decl, no need to pass in a vector
[33m1626955[m [SILGen] Remove premature optimization/folding.
[33me392e1a[m parseStruct(): use ParserResult because this function returns at most one Decl, no need to pass in a vector
[33mbf25dde[m [CMake] Enable -Wdocumentation for the CMake build.
[33m323b9d9[m Distinguish a function's result type in the interface vs. in the definition.
[33mfe2d8d5[m [SIL] Get access to LLVM intrinsic attributes.
[33meda22039[m Fix bogus comments
[33m186355f[m Zap an unused parameter
[33m53685fe[m parseUnion(): use ParserResult because; it returns at most one Decl, no need to pass in a vector
[33m6613157[m Debug Info: This patch implements the "emit modules when compiling -g" proposal. When compiling with debug info, build a swiftmodule that contains all the type decls referenced by DWARF and emit it into a special __apple_swiftast section in the .o file.
[33mc79bb32[m parsePattern(): try harder to recover.  Fixes a code completion test case
[33maefbf9d[m Parser: fix diagnostic regression from r7387
[33m354c5f4[m Parser: replace diagnose(Tok.getLoc(), ...) -> diagnose(Tok, ...)
[33m6e41124[m Parser: don't use Diags directly, use diagnose()
[33mdc43b10[m Fix indentation
[33mc4a1367[m Parser::parseList(): no need for special handling of tok::code_complete anymore
[33m21ce681[m [SIL] Add attributes to swift builtins, specifically, the readnone attribute.
[33m2f05d5c[m [SIL] Move GenFunc to use getBuiltinInfo and getIntrinsicInfo.
[33m581db76[m Use ParserResult and ParserStatus in tuple and function argument parsing
[33m71a11dc[m parseTypeIdentifier() and parseTypeSimple(): return ParserStatus with CodeCompletion bit set when we see tok::code_completion
[33mb701fe4[m parseList(): don't create throw away the existing status which might contain the CodeCompletion bit set.
[33m73353d9[m Remove an unused variable
[33m9b5e231[m Revert "Compile and emit modules for the standard library at the same time."
[33mf18556f[m [serialization] Don't bother serializing empty conformance lists.
[33mb434f7c[m Added a convenience operator| on ParserStatus
[33m082bc4a[m ParserStatus: always initialize all members
[33m11b5e47[m Add a default argument to skipUntilDeclRBrace() so that it can be used with a single token
[33me4eaf3f[m Record depth/index of generic parameters.
[33m3a8c63e[m Compile and emit modules for the standard library at the same time.
[33m501c49d[m Add a test case for [weak] IR-generation.
[33m329a5e4[m Permit attribute lists to be split into multiple clauses.
[33m1fd528c[m Add ErrorTypeRepr, which is constructed during parser recovery for a type with a syntax error.  Usually the type parsing can just return nullptr for the TypeRepr, but when we want to construct an AST node that should have included that type, we should provide a non-null TypeRepr.
[33m158e5d0[m Only strip the last extension from a file when inferring a module name.
[33m8cbca69[m Rename/remove debug info tests to not pretend to be adapter modules.
[33ma2200ad[m simplify some code by using getAnyNominal() method, no functionality change.
[33m7d759cc[m Debug Info: ignore property members that do not have any storage in the offset calculation.
[33m6ff6ec9[m Reduce the reliance of PolymorphicFunctionType on GenericParamList.
[33m529122f[m SIL Type Lowering: slightly simplify code
[33m9b8dcb9[m FuncExpr::create: add an assertion that we always have at least one parameter
[33mbeb743a[m [runtime] Push swift_getObjectType down into the runtime.
[33mf13b584[m Parser: use ParserStatus in parseList()
[33m26bde07[m Parser: use ParserResult in parseTypeArray() and parseTypeOptional()
[33m0cf7dc8[m Update syntax in Pattern Matching doc.
[33m2094d23[m Add an Interpreter test that round-trips trivial unions.
[33m1ca346d[m IRGen: Fix up union payload packing for aggregates.
[33m6c6f70d[m Remove debugging code
[33mb2e75c5[m add a readme to proposals.  Remove PublicNSStringAPIs.html (it looks like a collection of someone's random notes) and move NSString.rst to proposals (also a collection of notes).
[33m21e63ae[m actually, just remove the "simple user defined datatypes" stuff.  The pattern matching description subsumes most of it.  It was amusing that I thought (back in the day) as structs as a special case of unions, but this isn't pertinent any more.
[33m80d7edb[m remove "Memory and Ownership Model" which is really really really old, out of date, and not useful anymore.
[33m91ccedc[m remove an old spreadsheet that has lost its utility and move another proposal out.
[33m7bcd9ff[m move a bunch of proposals out to a new proposals subdir to avoid confusion of what is planned for swift and what is just blue sky concepts.
[33mc395498[m Parser: use ParserResult in parseTypeSimple() and everything that uses it/ is used in it
[33m2870c53[m [SIL] Cache Builtin Kind and type lookup in SILModule and speed up CCP
[33mb0dd877[m Use ParserResult in type parsing
[33m74d1196[m IRGen: Start implementing the projection half of switch_union.
[33m0f9328c[m Remove LoadableTypeInfo::copy, which has become dead.
[33m1a8e574[m Rename load -> loadAsCopy and fix a test case that was accidentally causing a double retain (in a suspicious case, but still).
[33m2ffcef1[m Make a couple minor interfaces traffic in Address instead of OwnedAddress.
[33mfae4359[m [SIL CCP] Fold trunc, sext, and zext builtins.
[33mae7bf3d[m [SIL CCP] Handle more arithmetic intrinsics with overflow and tuple_extract.
[33m5fb0985[m [SIL] Fixup the copy and pasted comments.
[33m1ddb34f[m Factor generic parameters and associated types into their own decl nodes.
[33m9690e3d[m IRGen: Implement switch_union dispatch for SinglePayloadUnions.
[33m2ffce71[m IRGen: Implement LoadableTypeInfo for trivial SinglePayloadUnions.
[33m687b142[m Undoing the damage of clang-format + first round of demangler cleanup
[33mdeff836[m Parser: use ParserResult in parseDeclFunc
[33meaa6228[m getFragileTypeInfo -> getTypeInfo
[33m4cefdf2[m [ClangImporter] Don't unique selector names when doing id-style lookup.
[33m1faafcc[m [serialization] Pull AST parts of ModuleFile out into new Deserialization.cpp.
[33m048c659[m Remove useless forwarding methods from LoadedModule.
[33mc098cd1[m Parser: convert some pattern parsing functions to ParserResult
[33m8d1f71d[m demangle some of the demangler source code.
[33m2d97d22[m clang-formatted the Demangler
[33m74f111d[m The space here was needed
[33m19a90b6[m Parser: add ParserResult<T> -- a wrapper around the AST node plus extra bits
[33mde0e9c7[m Fixing a crasher where the demangler was not checking a substitution for NULL
[33m2c7858b[m Add an entry point for id-style lookup of a known name.
[33m49d8b2c[m Add ClangImporter results to dynamic class member lookup.
[33m271046d[m IRGen: Start implementing switch_union lowering.
[33m63fb3d0[m Regular comment -> documentation comment
[33m6c80f64[m Diagnostic circular class inheritance.
[33m64f178a[m Reimplement circularly check for protocol inheritance.
[33mb8f9e53[m IRGen: Emit injection functions for single-payload unions.
[33mc3e102b[m IRGen: Generate empty payloads with a static PackUnionPayload method.
[33m0e41a7e[m IRGen: Teach LoadableTypeInfos how to make union payloads.
[33m65eab9f[m IRGen: Add FixedTypeInfo routine to generate extra inhabitants.
[33mab8f347[m IRGen: Add utilities to pack/unpack values out of union payloads.
[33m2f3a03a[m [buildbot] Build and package up SourceKit.
[33m4ed9594[m Parser / code completion: don't stop on a parse error when parsing function parameters.  If we see an arrow, try parsing the result type.
[33mcdb1df5[m Code completion: completion of type-ident in type contexts (like Foo.#^A^#)
[33mff3143a[m [analyzer] Eagerly DCE in ConstPropagation; teach about side-effect-free intrinsics.
[33m3ac84f3[m [SIL] Add getIntrinsicID(FuncDecl*), which lazyly looks up the llvm::IntrinsicID for it.
[33m7ea5c4c[m Teach definite init to do cross block analysis (finally)!
[33m9db7b5e[m Improve invalid module name warning by suggesting using -module-name.
[33m50e0de0[m Only require a valid module name if we're actually producing a module.
[33mb1ef559[m Use Module::forAllVisibleModules to decide what libraries we need to link in.
[33m5486dd4[m Module::forAllVisibleModules never needs to capture its callback.
[33mf04d645[m Uncomment the code that actually made r7291 work.
[33mc851c54[m SIL Parser: parse switch_int.
[33m0a30b2a[m Completely rework struct field store->load forwarding to be based around the idea of an access path (a sequence of tuple or struct fields).  This fixes miscompilation and assertions that happened before (such as in the testcase) because the wrong field was being forwarded to loads (!).  This changes where struct_extracts are placed in some cases, but no other functionality change.
[33m9a68bc5c[m enhance SILBuilder to have some methods for extracting tuple/struct members without having to specify the result type of the instruction (which is determinable from the other operands).
[33mc127e98[m Removing non doxygen-kosher comments
[33m47d1a13[m Major demangler changes. This commit changes the Swift demangler to produce a tree-like list of tokens instead of a string. This is mostly useful for LLDB since we can use the inherent structure in a Swift mangled name to make more informed decisions about matters such as type information extraction from modules The ability to convert the tokenized output into a plain string for viewing purposes is of course preserved
[33m23f657f[m make Fixnum more comparable
[33m2ebd475[m [ClangImporter] Force load adapter modules whenever a Clang module is named.
[33mc1b3ef5[m Set and check invalid bits on declarations more regularly.
[33m4ee66d3[m IRGen: Calculate representation types for (fixed-size) unions.
[33m8baa585[m IRGen: Add FixedTypeInfo methods for extra inhabitants/spare bits.
[33m2241086[m Add lookupClassMembers for use in id-style dynamic lookup.
[33mcf6bb91[m [serialization] Serialize a table of all class members, by name.
[33m26c1181[m Fix printing for unions, vars, subscripts, and typealiases.
[33mad71b46[m When pretty-printing func declarations, use selector style when needed.
[33m5b952b0[m Rename OOD and OOED variables that used to stand for OneOfDecl and OneOfElementDecl
[33m1e78a3b[m Fix indentation
[33md8c3302[m [serialization] Check cyclic dependencies for typealiases better.
[33mc700bc9[m Remove some fixmes that are resolved now, and a pointless if now that the tuple/struct stuff is settled.
[33ma09222a[m Suppress warning in -Asserts builds
[33m4dbac4e[m Parser: improve recovery and diagnostics for "extension <type> {}" where <type> is not a type-identifier
[33m23d48b6[m Use NullablePtr in more decl parser functions
[33mf49852e[m Parser: don't drop the extension from the AST if any declarations inside had a parse error
[33m0fdb8ac[m Parser: don't drop the whole nominal decl from the AST if any member had a syntax error
[33m7b1b578[m diagnose accesses to structs that are not *completely* initialized in aggregate.  We don't allow initializing a struct by assigning to all of its members any longer.
[33mec4c1cc[m substantially rework how scalarization is done.  Now we aggressively scalarize all loads, even to struct elements, but do not scalarize stores.  This resolves a number of problems and makes sure that we can expose the underlying LLVM IR operations on builtin types (underlying Int!) that is required to expose the overflow checks required for diagnostics.
[33m6f5d463[m LangRef: include "T?" syntax.
[33m95ff29b[m Make deserialization of known protocol adopters lazy.
[33m4c74b6c[m Add a comment for the preprocessor trick used to calculate NumKnownProtocols.
[33m76980b9[m Add swift language mandatory inlining tests
[33mce54da3[m Use NullablePtr in ForStmt
[33m5ce857c[m Only record conformances to known protocols, and include them in modules.
[33mae788c8[m Mark compiler-known protocols as such early on in type-checking.
[33m10f08ee[m Look up standard protocols and types in the standard library, not the TU.
[33m65172b8[m TypeChecker: don't create tuple elements with null types.
[33m45f3773[m [serialization] Separate extensions out into their own table.
[33mbca05da[m [serialization] Lazily load top-level decls, extensions, and operators.
[33m49f1d53[m TypeChecker: a variadic tuple may be our first use of Slices.
[33md1d1f4d[m MandatoryInlining: move check for already-processed function to apply to top-level calls as well
[33m03cd1b9[m [stdlib] TextFormatting.*: formatForDebugging => debugFormat
[33mc72f07f[m [stdlib] TextFormatting.*: formatForPrinting => format
[33m217b50a[m simplify the diagnostics produced by mempromotion to emit both "can determine variable name" and "cannot" into the same diagnostic.  The upshot of this is that SIL testcases will just print <unknown> as the variable name.
[33m1929823[m Update grammar for stmt-for-c-style: add optional parentheses
[33mc278805[m Parser: better recovery for statements with omitted controlling expression: if { ... }  while { ... } for { ... } -- see tests for more.
[33mbe6feaa[m [SIL] Fixup commit r7248.
[33m939badf[m [SIL] Move recursivelyDeleteTriviallyDeadInstructions so that it could be used by other passes.
[33mcc43fc7[m now that we don't need to cache anything, TupleFlattening has no state.  Replace the class with a bunch of static functions.
[33m69f3cbc[m - rename NumElementsCache -> TupleFlattening. - Rename the "get" method to "getElementCount. - Now that we don't flatten nominal types, we can't get into   exponential complexity situations, so we can remove our DenseMap. - Simplify logic now that tuples are the only thing being flattened.
[33mbb92973[m Reorganize test/SIL to match lib/SIL reorganization
[33m8d90466[m Reorganize SIL source tree: move lib/SIL/SILGen -> lib/SILGen, move lib/SIL/Passes -> lib/SILPasses, add lib/SILPasses/Utils
[33m28e7245[m definitive initialization is not going to be field sensitive for structs anymore: structs are going to be required to be completely initialized through a constructor before used. Start removing some complexity around them.
[33mba57441[m [DCE] Rely on dropping operands instead of a hack (possible as of r7234).
[33m3c8a5ef[m [CCP] Fixme for r7236
[33m4ae68cd[m Completion of MandatoryInlining pass: recursive inlining, multiple basic blocks, and diagnosis of circular inlining.
[33m12e9086[m Initial implementation of mandatory inlining pass; non-recursive inlining, single basic blocks, no diagnosis of circular inlining
[33m8fa4801[m Remove unused diagnostic
[33mb073815[m [SIL] Remove ValueBase::replaceAllUses, which should never have been added.
[33m88d0f1b[m [DCE] Make dead instruction elimination run on demand
[33m359695a[m [SIL] Add dropAllReferences and a mutable version of getAllOperands
[33m4c99106[m Represent char literals as i21 down to the compiler level.
[33ma944894[m IRGen: Add ValueWitness enumerators for union layout and access.
[33med9f734[m update comment.
[33md1c1f4d[m Debug info: Emit the appropriate encoding for builtin types.
[33m095f322[m Fix comment
[33m90dbdf9[m Add (belated) release notes for unowned/weak.
[33m7ec0f84[m Demote most of the Explosion routines on TypeInfo to the new LoadableTypeInfo refinement interface.
[33mfcbefd0[m SIL: Don't allow switch_union to work with address-only unions.
[33m2786c30[m Code completion: add a parser hook to inform code completion about generic parameters while parsing the function signature.  Generic parameters are not accessible at that time through the AST node, because the FuncDecl AST node was not constructed yet.
[33m6794921[m Describe operations on [weak] and [unowned] values.
[33mab7d9e0[m Describe local-storage types and the changes to alloc_stack.
[33m827fbd2[m SIL: Implement TypeLowering for nontrivial unions.
[33m18cc8d6[m Generalize John's FieldRange and use it in UnionDecl::getAllElements.
[33m536723e[m Code completion: implement delayed parsing of all (?) declarations
[33m3c4fc9e[m Fix REPL commands (e.g., :print_decl), which were totally broken.
[33m67d82f6[m Fix 80-cols violation
[33mfa0a1d4[m s/address of/reference to, per Jordan's request.
[33ma1f6b3f[m Cope with lvalue expressions more reasonable.
[33me6a445c[m Fix comment.
[33mdb24281[m Don't allow loads from explicit lvalues.
[33mb2a5e2c[m Code completion: complete in type contexts -- basic implementation
[33me6d8168[m Pattern parsing: fix awful recovery when while parsing the tuple we would try to skip to the matching right paren no matter what, skipping over other declarations, instead of resynchronizing on them
[33m0f6df2d[m Code completion: rename CompletionLookup::LookupKind::DeclContext to ...::ValueInDeclContext
[33m342dff1[m [SIL CCP] Add the early constant propagation pass skeleton.
[33me94627b[m [SIL Diag] Adjust for SIL locations coming from parsed SIL.
[33m3ad301b[m Add a couple of fixmes for functional problems that still need to be fixed. Remove an 'if' condition that isn't needed now that loadinsts are scalarized.
[33m369aa1d[m at john's request, fission the emitSemanticStore method.  This eliminates the InitAssignUnknown_t enum and eliminates a bit of dynamic control flow.
[33m3f0ae3b[m remove a TODO that is not a todo.  AFAIK, the only major missing feature now is that memory promotion is completely intra-basic-block.  That's a big issue, but not "unpossible".
[33m45c6e9d[m add a micro optimization to avoid inserting lots of extracts of aggregate producing values.
[33me27595e[m teach memory promotion to scalarize loads as well, which enables it to capture missed cases where it would fail to propagate scalar stores to aggregate loads, which will someday affect downstream diagnostics based on the SSA graph.
[33mceeb6a8[m Teach memory promotion to scalarize aggregate assign's and stores into memberwise operations.  This is a more canonical form for it work with, and defines away a problem it has, where it would rewrite an assign for one element without regard for other elements the assign can touch.  In this new canonical form, this issue is defined away.
[33m0e4fcda[m refactor the collectAllocationUses functions into a new ElementUseCollector helper class to enable future enhancements.
[33mfa5a82b[m Code completion: rename internal implementation functions from addSwiftZzz() to addZzz().  The 'Swift' part of the name was added because there was a codepath for completing swift decls and a different one for completing clang decls.  Now we complete clang decls by first importing them, so the 'Swift' part of the name is just redundant.
[33mc98719d[m Cleanup includes and forward declarations
[33mf812056[m use the spiffy getPhysicalFields() range to simplify some code, no functionality change.
[33m66a447a[m Code completion: code completion on a different line that the expr-postfix: use the Tok.isAtStartOfLine() check instead of comparing line numbers
[33m8a7628d[m Code completion: fix a bug where code completing in a function body on the next line after a var decl with initializer would complete based on the initializer expression.
[33mab4048b[m make the -enable-definite-init staging option enable the new "assign" insertion logic in SILGen.  This exposes a bug in the definite analysis pass handling aggregates, which is why the testcase is changing.  Given that noone is using this yet, I'm just changing the test, I'll fix it next.
[33mc27b447[m Delete unintentionally-committed files
[33m9d0a172[m Implement DynamicMethodInst::getType()
[33m014af2b[m Add createTupleExtractInst to SILBuilder (which bypasses the peephole in createTupleExtract)
[33m4308e49[m Add missing createSwitchInt to SILBuilder
[33ma093f2a[m SILGen: Choose pattern specialization branches by subsumption rather than orthogonality.
[33mc5c8ecc[m SILGen: Actually set the new cast kind on specialized IsaPatterns.
[33m4ea395f[m [Constraint solver] Track whether type variables can bind to lvalues.
[33m128e69d[m [docs] Revise TextFormatting.* to reflect posted proposal
[33macc96c5[m [docs] Rename "printf.*" documentation as "TextFormatting.*"
[33m0d7fc0a[m [ide] Use the newly introduce CharSourceRange inside ide::SyntaxNode.
[33m70f2b64[m Add CharSourceRange -- a half-open character range, which will be used in IDE integration
[33m67affb4[m Introduce a new concept into TypeLowering: the idea of "not knowing" whether an assignment is an initialization or not.  This will be used by SILGen shortly to emit the right operation when it doesn't know what sort of an assignment it is dealing with (which is a flow sensitive property).  The definite initialization pass will then "do the right thing".
[33m4ba6035[m implement definite initialization checking for unowned pointers, which are modeled with the assign instruction.
[33md57a6a1[m [frontend] Introduce CompilerInvocation::setRuntimeIncludePath()
[33mae67a77[m Cache results of visible decl lookup at top-level in a TranslationUnit.
[33mc4990cf[m Perform proper shadowing when looking for module-level visible decls.
[33m4a5c357[m Change SILBuilder::createRefElementAddr() return type to RefElementAddrInst* to fit common pattern
[33mf4e9c17[m [Constraint solver] Eliminate rvalue equality constraints.
[33md801bef[m [Solver] Member constraints fully bind unless lhs/rhs type variables intersect.
[33ma583ea5[m const'ify Constraint dump and print methods.
[33m5fc7966[m Add [force_inline] to SIL apply instruction; kill FunctionInst abstract value type
[33m48e4fba[m Implement definite initialization support for load_weak and store_weak, includes testcase for store_weak sil parsing.
[33mb25af92[m change the StoreWeak "initialization" bit and accessors to follow the naming convention of the CopyAddrInst methods.
[33m9b14f75[m Fix the SIL Parser to parse store_weak into a StoreWeak, not a Store. Testcase forthcoming.
[33m2ab06da[m Teach memory promotion to handle "assign"ment analysis of address-only types, turning "assign" copy_addrs into initialization when necessary.
[33mf08d141[m break up test a bit.
[33mf3a9657[m teach the memory promotion pass to properly handle assign instructions, turning them into initializations or stores depending on what they are, and diagnosing cases where an assignment has different behavior depending on the path to the instruction.
[33mbd50e60[m If an overloaded declaration reference refers to all-invalid decls, give up.
[33m6645cde[m Don't try to call the witness for an invalid requirement
[33m84240b6[m Mark constructors invalid when their pattern does not type-check.
[33m0862731[m [Solver] Applicable function constraints fully bind the left-hand type variables.
[33mb468455[m Add some more pretty stack traces.
[33ma85ef1e[m Introduce stack trace information for resolving type representations.
[33m417f567[m Use CHECK-LABEL more.
[33meae021c[m add a trivial test for SIL parsing the assign instruction, and fix the bug exposed by it.  :-/
[33mc8f01a0[m Introduce a new SIL "assign" instruction to represent assignments in SIL when SILGen doesn't know whether they are initializations or stores.
[33m68125d5[m Update lit configuration per LLVM r188108.
[33m793bc9e[m Change return value of isTakeOfSrc() to isTake_t for consistency
[33m497ed1f[m Remove some trailing whitespace (so it doesn't show up in a diff for another patch)
[33m242f630[m significantly improve the QoI of the definitive initialization check by printing the variable being used and the access path to the uninitialized field (if relevant).
[33m0fd72ac[m teach mem promotion about InitializeVarInst, allowing it to handle struct ctors.
[33mf825c0d[m hack up sema and silgen to respect the -enable-definite-init flag.   This lets us write our first pure swift test for definite initialization.
[33m1332be7[m add a new "-enable-definite-init" command line option that will gate the new definitive initialization work until it is ready to be on by default. This needs to be a langoption as well, because it will affect some of the things SILGen does.
[33m86997d3[m fix a crash when promoting a singular subelement of a struct or tuple where a larger wrapper is also used.   This was the last crash of mempromotion on the stdlib (not that it is particularly useful yet).
[33mb7d72c2[m split mem promotion regression tests out to its own file.
[33m981976e[m fix a crash that occurred when we would mix aggregate and scalar element load promotions, leading to a dangling pointer dereference.
[33m37726d1[m teach memory promotion about properties, which are not a structural field in a struct.
[33m8f6f8f3[m cache computation of NumElements, turning an exponential algorithm into a linear one.
[33m1896177[m Fix rdar://14705150, a crash on invalid I ran into.
[33m21dafe1[m Code completion: if the postfix expression is located on a different line than the code completion token, then the expression is irrelevant from the user's point of view.
[33mb07850f[m Cleanup includes: verifier does not depend on Lexer or MemoryBuffer anymore
[33m3d37954[m Remove SourceManager::decompose() and switch its clients to normal location and range printing
[33mefd688d[m Now findBufferContainingLoc() can not fail, so store Buffer IDs in unsigned variables.
[33m13070a3[m SourceManager: make findBufferContainingLoc() always succeed.
[33m09837a1[m Simplify the implementation of SourceManager::decompose() and its client
[33m0761a2e[m REPL: pass all unprocessed lines to code completion
[33mca5351e[m Fix bad recovery in Parser::parseList() and Parser::parseDeclUnionElement()
[33m79d935f[m Keep PersistentParserState while parsing a REPL line
[33m9c57f84[m Do the final cleanups and make SourceLoc::Value private
[33m8f7a437[m Wrap a few functions from LLVM SourceMgr in preparation of making SourceLoc::Value private
[33maa11e4b[m Debug info: Add a swift -g test that runs the metadata verification in LLVM and a bug uncovered by verifyer: Tuple elements should be member types.
[33md00fe7e[m Replace Twine with StringRef.
[33maacef75[m Move decompose from PrettyStackTrace.cpp to the SourceManager
[33mdc655eb[m Remove more abuse of SourceLoc::Value::getPointer()
[33mba6817c[m Add a documentation comment for SourceManager::getLocOffsetInBuffer
[33m411233d[m Eliminate the "pre-check protocol" pass from the type checker.
[33m03c9ade[m Fix rdar://14690497, diagnosing precedence declarations that are outside the allowed range.
[33mdb08a32[m Factor out SourceManager::getLocOffsetInBuffer() and remove some abuse of SourceLoc::Value::getPointer()
[33m0a84ed0[m Parse: Allow type-simple in expr-new, and make "T?" part of type-simple.
[33mb23880e[m Better recovery for "T[]?".
[33m88cad52[m Implement type sugar "T?" for Optional<T>.
[33mf736e17[m Check operator declaration binding in the first pass for FuncDecls.
[33m48faba2[m Simplify parser constructors
[33m538a4c1[m SIL Parser: parse specialize.
[33m23b4e9f[m Lexer: make some implementation details private
[33m888d9b4[m Tighten the contract of Lexer::getEncodedCharacterLiteral(): treat the token as a token (instead of a string) and check that it has the correct kind
[33md0455ca[m Remove unneeded llvm:: qualifier for llvm::ArrayRef
[33mabe1fcb[m SIL Parser: parse ModuleInst.
[33m9453e8e[m Eliminate ExprPrePassWalker.
[33mde59d8d[m Remove unneeded llvm:: qualifier for llvm::StringRef and llvm::SmallVector
[33m94e2fd9[m Eliminate unnecessary uses of ExprPrePassWalker in code completion.
[33me3caf7f[m Eliminate the early computation of the "this" type of methods.
[33m2749828[m Move the resolution of UnresolvedDeclRefExprs into the type checker.
[33md1453b3[m Lexer constuctors: allow to create a lexer that scans a subrange without having to create a parent lexer first.
[33m49e15b3[m Remove the public Lexer::getBufferEnd() function which breaks encapsulation of the source buffer
[33m41a463d[m Don't introduce invalid declarations into overload sets.
[33m987590a[m Lexer: constify permanent configuration parameters
[33m056923e[m Lexer constructors: inline Lexer::initLexer into the principal constructor. Introducing it was just a refactoring step.
[33m8c15b7d[m Lexer constructors: remove redundant code: Lexer::initLexer will query the SourceManager and set the code completion point correctly, no need to do this elsewhere.
[33mea710cd[m Lexer constructors: simplify and establish an invariant: Lexer::BufferID is the single point of truth, Lexer::BufferStart and Lexer::BufferEnd is just a cache -- they always point to the beginning and end of the buffer, even in a sublexer.
[33mb6cb0d0[m Remove some outdated help from the REPL
[33mc92fd7c[m Lexer: refactor constructors to bring the parameter count back to a sane number
[33m591410e[m SIL Parser: parse init_existential, init_existential_ref, deinit_existential.
[33m0d37a6e[m Let the type checker decide which protocol members are visible via conforming types.
[33m02cf73d[m Lexer: remove redundant parameters from the sublexer constructor
[33m9628330[m SIL Parser: parse switch_union.
[33m00b064c[m Fix a typo.
[33m4799118[m [SIL Verifier] Check that there is a unique epilog block
[33m178e1c9[m Clarify what it means for a SIL instruction to have side effects.
[33mb52166a[m [SILGen] Propagate location info through InitializeTupleValues
[33me592359[m Refactor Lexer::State to store a SourceLoc intead of a pointer into the buffer
[33m06b3372[m Type checker: don't add FuncExprs without a body to ExprPrePassWalker
[33m41723ae[m Code completion: correctly delay parsing of the function body that did not have a closing brace.
[33m96204e7[m Fix examples build (CMake). Don't build examples by default (Make).
[33mf42d4db[m Factor out SourceManager::getLocForBufferStart()
[33m469c01c[m Update comment and parameter names: SourceLoc::getAdvancedLoc(): it accepts the offset in bytes, not in characters
[33mb75ee23[m Use SourceMgr.rangeContainsTokenLoc() instead of poking inside the SourceLoc
[33m5e98acc[m Debug info: Rename createFunction -> emitFunction for consistency.
[33m13e9e94[m Honor [exported] or lack thereof for the imports of serialized modules.
[33ma35f7cb[m Thread [exported] through TranslationUnit and the Serialization library.
[33m093a428[m Add parsing support for the [exported] attribute.
[33mf184255[m Do not parse trailing double-quote as part of string literal.
[33m5a88513[m Don't link to curses library explicitly
[33mac80171[m Clean up error message for "module 'foo' has no member named 'bar'".
[33m841e3f4[m Properly ignore declarations not within the access path of a scoped import.
[33mf877661[m [Archetype builder] Add conformance requirments to the representative.
[33ma32d8e3[m Add basic color output to SILPrinter for terminals that support color.
[33m025df07[m Allow unresolved conforms-to constraints in solutions with free type variables.
[33m810f5dd[m Kill apparent debugging code.
[33m14cb700[m Implement basic support for [weak].
[33m204980b[m Add parsing for some missing SIL instructions.
[33mbb069b7[m Code completion: move tests for completion at the beginning of expr-postfix to a separate file
[33mc122e15[m Fix handling of partial_apply: byref is *always* a capture for partial_apply, since it's stated purpose in life is to build a closure around its argument values.
[33ma5b45fd[m [SILGen] Add location info to function_ref instruction.
[33m8d75dcc[m Code completion: implement partial typechecking of function bodies
[33m44d8a94[m Fix the sil parser to more correctly compute the result type of the partial_apply instruction.
[33m5dde862[m Teach memory promotion about copy_addr, enableing definite initialization checks for address only types.
[33m5831c1b[m Debug info: support chained typealiases.
[33m797f863[m Don't null out the expression in an ExprHandle; it breaks invariants.
[33mf329572[m Correct AST type printer to print "noreturn" when isNoReturn() not isThin().
[33mc2e5f49[m Correctly compute the set of protocol -> conformance mappings in name lookup.
[33m49fc1ba[m Implement proper shadowing rules for unqualified lookup.
[33m35f84df[m Remove "import foo, bar" syntax.
[33m027565a[m Implement proper shadowing rules for qualified lookup.
[33m42a1096[m [serialization] Serialize import access paths, and only the TU's own imports.
[33md3b31b8[m Don't include re-exports in a TU's imported module list.
[33mc3708c2[m Enhance the definite initialization checker to be field sensitive for structs and the properly support generic structs as well.
[33m2bbef34[m Code completion: refactor code completion callbacks so that actual name lookups happen after delayed parsing is finished.  This ensures that the AST for delayed parsed code (for example, function body) is constructed.  This is required for partial type checking of function bodies.
[33m45a8e79[m [Constraint solver] Properly find and substitute deduced associated types.
[33md9791c3[m teach memory promotion to model tuple elements precisely, this allows us to diagnose things like:
[33ma8059b3[m fix indirect return to be modeled as a store, not a byref use.
[33m1d05280[m Fix -verify mode in sil-opt to not capture diagnostics produced while *parsing* the .sil file.  If any errors happen while parsing the sil file, report them immediately and return with an error.
[33m20c5ee3[m Calls passing a variable byref demand that the variable is initialized. Diagnose errors where they aren't.
[33m214983b[m add a "Variable declared here" note to the use-of-uninitialized variable check. Convert the byref mem promotion check to be an alloc_box, so that mempromotion actually considers it.
[33mb1f6da2[m Add some tests for SourceManager routines that compare SourceLocs and SourceRanges
[33m49778d9[m pull over the test for stacktossa, since memory promotion handles it properly already.
[33me93bcda[m Rename SourceManager::rangeContainsLoc() to rangeContainsTokenLoc() to emphasize its limitations
[33m1a0875b[m Add curses library to the unit tests.
[33m686f9ec[m SourceManager: add functions that compare SourceLocs and SourceRanges
[33m1659de2[m [SILGen] Add location info to branches generated from control flow ASTNodes.
[33maaa4b2c[m [SIL Printer] Add optional source location printing.
[33mb478def[m Extend the SIL parser to add source locations to all parsed instructions. Based on this, .sil files can now use -verify mode.  Switch memory_promotion.sil to use it.
[33me261127[m extend SILLocation to be able to store locations in SIL files.
[33m3de1f5a[m More attempts at fixing the CMake build
[33m8b56b86[m give sil-opt a -verify mode.  Not particularly useful yet, since all source locations for sil instructions have no location.
[33m121e70f[m Refactor diagnostic verification (-verify mode) out to its own file in libFrontend.
[33m7148cf6[m Try to link swift-demangle against curses. Strange that we have a difference between the Xcode project and the makefile project
[33m615079a[m Diagnose (trivial) use before definition errors.  There is a bunch of work to make diagnostics tests on .sil files make sense.
[33m26fda44[m make SILLocation tolerate null locations, which is what it gets when parsing .sil files.
[33mb6000d9[m We don't need to explicitly link against curses.
[33mb8b806a[m use 'static' for functions instead of using anonymous namespaces, following the llvm conventions.  No functionality change.
[33mfcfab40[m Build out a lot more of memory promotion for loads.  We now actually do promote local stores, catching up to the stack-to-ssa pass in that regard.
[33m1e00af6[m attempt to unbreak jenkins
[33m3f4dcf4[m dealloc_stack is not a no-op.
[33mb66567e[m Be sure to check for uses of any result of an instruction before declaring that it has only one use.
[33m2eabba0[m Add a getUser() to ValueBase::use_iterator.
[33m5c8938e[m Prettify the stack trace when crashing in IRGenSIL.
[33mebbaef6[m Don't repeat SmallVector size in the iterator type
[33m68a86e1[m restructure this around a new ElementPromotion class to centralize the per-element promotion logic.
[33m89d688d[m continued progress on the uber memory promotion / definitive initialization pass. This is still not doing anything useful, but before I make a turn in how it is structured, a checkpoint is useful.
[33me9b913f[m Remove LocalStorageType, make it a kind of SILType.
[33m20ab338[m Fix comment markup
[33mfcd998a[m PrettyStackTrace enhancements for SIL constructs.
[33meaf693a[m Constify SILLocation.
[33mdc676c2[m ReferenceTypePath has been dead for a while now.
[33m81c1c61[m Implement "is more specialized than" for constructors, subscripts.
[33m8016fb6[m Rewrite type comparison logic to use early exits.
[33mdfe28a7[m Clang importer: put the Objective-C class into the module that contains the @interface definition, not just @class forward declaration.
[33mef3d96f[m [Protocol conformance] Select the most specialized witness for a requirement.
[33mbf436fd[m Debug info: The age of DietDebugInfo(TM) is over. Here come sugared types! Type aliases are represented as DW_TAG_typedef.
[33mfcd461d[m Code completion tests: check that we can complete members of an imported class
[33ma588fe4[m Don't try to find witnesses for invalid protocol requirements.
[33me223048[m Clang importer: when a function is re-declared in multiple imported Clang modules, put the imported decl into the ClangModule where the canonical decl is.
[33mc5cd9f5[m Eliminate -Wdocumentation warning
[33m16c75dd[m Code completion: add a test: check that we include code completion results for contents of the frameworks that are re-exported by the imported frameworks (but not explicitly imported in the .swift source).
[33mf8e0e31[m Code completion tests: remove an extra file that is not actually used
[33ma6519a9[m Code completion: implement code completion for dot member access on clang modules
[33m849ad1a[m libFrontend, swift-ide-test: add -F option to specify framework search paths
[33mbb3d38b[m Clang importer: put the top-level declarations into the correct ClangModule
[33md27879a[m Debug info: Global variables: emit the human-readable name in addition to the linkage name.
[33mb0084f7[m Prepare SILType for more than just isAddress.
[33m7e5659f[m Make bool conversions succeed on derived CanTypeWrapper<T>s.
[33ma55b10d[m Debug info: now with columns! This will be important since Swift is far more compact and closures are ubiquitous.
[33m2ecb0de[m Update test for [local_storage].  Sorry!
[33m4908da8[m [Lexer] Remove the public Lexer constructor that accepts a StringRef.
[33m4e297d0[m Move tokenization of interpolated strings in swift::tokenize().
[33md6b048d[m [Lexer] Refactor lexing of interpolated strings.
[33m47c04e7[m [Parser] Remove a constructor that is not used anymore.
[33mcda7a10[m [Lexer] Remove the special hack in the Lexer that handles lexing an expression in an interpolated string.
[33m36aa6c2[m alloc_stack needs to return two values like alloc_box.
[33madfba64[m Eliminate AllocInst, which does nothing for us.
[33me358406[m Distinguish the allocation cases in IR-gen.
[33m4a211bc[m Change docs version to "1.0" to match "Swift 1.0".  Copyright is also to Apple.
[33m135ca5a[m Introduce some discussion of locators, as used in the type checker.
[33m268a947[m Update the SIL docs for dealloc_box.
[33m592732c[m Split *one* unimplemented dealloc_ref instruction into *two* unimplemented instructions!  This is progress.
[33m7a042cf[m [SIL] Issue a diagnostic on a non-exhaustive switch
[33mb5f8c40[m Debug info: Add a testcase for closures. Ensure that closures are not artificial.
[33mc15cd49[m rename closure.swift -> autoclosure.swift
[33mbfe0c39[m SIL Parser: parse builtin_function_ref.
[33m5b3ddf7[m more scaffolding for the new memory promotion pass.  This still doesn't do anything yet, so I can't write a useful functionality test.
[33m0dd4aed[m [Constraint solver] Point at specific parameter or function in diagnostic.
[33m31917e2[m Debug info: Add a testcase for inner functions.
[33m14c02da[m Forgot to add the testcase for r6913.
[33mbacea91[m Omit bodies from module-scope decls in pretty-printed synthetic sources.
[33m33aced7[m Show decls in import kind warnings.
[33m1d54332[m Validate import kind, e.g. "import var swift.max" now errors, with fix-it.
[33m492a603[m Debug info: purge implicit closures from the linetable. rdar://problem/14627460
[33mf416d78[m Debug info: top_level_code is not an artificial function.
[33m0d8f8b0[m SIL Parser: parse alloc_array.
[33m6b988e9[m Fix DenseMapInfo for swift::SILDeclRef: empty and tombstone keys were equal
[33mf875f05[m [Lexer] When encountering invalid characters, emit diagnostic and ignore them.
[33m60caf62[m [Constraint solver] Don't eagerly build constraint locators.
[33m6400fdc[m [Constraint solver] Track resolved overload sets more efficiently.
[33m6fbe6de[m Rework (de-)serialization of generic and inherited conformances.
[33mdad961b[m Mark function declarations invalid when they have errors in their types.
[33m720932c[m [Protocol conformances] Don't aggressively de-label all witness types.
[33mb3fadfc[m Add the outline of a new SIL memory promotion pass.  This is what will handle definite initialization, promoting boxes to stack, building ssa, and doing definite initialization.
[33mf3dc7c1[m [Protocol conformance] Don't use protocol declarations as witnesses.
[33m83edd1f[m Stop making the awful type checker diagnostics even more awful.
[33m64afdba[m Simplfiy the check for free type variables.
[33m199d53e[m Decompose existential conversion constraints into conforms-to constraints.
[33m7c9831d[m [IDE] Handle string interpolation for syntax-coloring.
[33m7530220[m teach alloc_box promotion to promote boxes that are dealloc_ref'd instead of released.
[33mbe953fa[m Eliminate simplifyType() call from getFixedTypeRecursive().
[33mbe1053a[m rename test to match pass name.
[33m117f47f[m remove the hasFixedLifetime bit from ValueDecl, now that AST-level capture analysis is gone.  This functionality is subsumed by SIL passes, which turn boxes into stack allocations.
[33maec8cc9[m Simplify checking of conforms-to constraints.
[33m5a71750[m merge some common parsing logic together, no functionality change.
[33me6d197c[m SILParser support for dealloc_ref.
[33m1bd583c[m [Module file] (De-)serialize inherited protocol conformances.
[33m8956e85[m remove the old AST capture analysis pass completely.  The primary IR gen pass has had it disabled for some time, so snip the last few uses in the REPL and zap it.
[33ma70a4e7[m remove the NeverUsedAsLValue bit from ValueDecl - the only client was the ASTDumper.
[33mbeefd78[m teach the box to stack pass that ProtocolMethodInst doesn't cause an existential to escape.  This (in conjunction with Joe's patch to SILGen) allows us to handle the protocol case that the old capture analysis was able to promote.
[33mb77c430[m Add SIL-gen and some missing runtime support for [unowned].
[33m3ba07d5[m Merge unowned.swift into unowned.sil.
[33md7b6009[m Introduce the concept of the "semantic" type of a lowered type and audit a great deal of code to deal with it appropriately.
[33m0fe3bee[m Normalize the names of createUnowned{Retain,Release}.
[33m098f7cb[m Provide a convenient range for iterating over the physical fields of a type.
[33mad2d69b[m fix sil-opt to stop running if it sees a parse error.
[33m69e1af3[m Adrian reviewed this.
[33me96e256[m Debug Info: Include Pattern in the list of things that have a location.
[33m4316239[m Kill Builtin.OpaquePointer.
[33m5a2128b[m SIL: Model project_existential using an address.
[33mfb4ded9[m SIL Parser: parse super_method and autorelease_return.
[33mea4ace4[m SILGen: Implement UnionElementPattern dispatch.
[33ma851072[m SIL: Ensure all terminators are handled by TermInst::getSuccessors.
[33m893723d[m Sema: Actually set the type on a UnionElementPattern after checking.
[33maf5d5e5[m Tweak build announcement re: feedback from Troy.
[33m82a2cc1[m Add missing file from prior commit.
[33m6662133[m [Protocol conformance] Refactor protocol conformance representation.
[33maa0468a[m [DCE] Remove code after a call to a 'noreturn' function.
[33mfcc2599[m [DCE] Remove a redundant FIXME.
[33m885c9ce[m [IDE] Highlight type identifiers.
[33m2cb68e6[m [IDE] Modify output of swift-ide-test for coloring and add a test case.
[33m796e434[m Make "isTake" and "isInitialization" flags type-safe.
[33m773227d[m Code completion: add results for __FILE__, __LINE__, __COLUMN__
[33m8305b02[m Debug info: Emit the list of imported modules into DWARF. (They used to be elided by the backend because they had no namespaces anchoring them).
[33m947354a[m Code completion: in '.metatype' completions, strip LValueType before constructing the MetaTypeType.  LValueness of the expression does not matter for the metatype type.  (And it also makes the type annotations very long in many cases.)
[33mba3cec0[m Code completion: add tests for completion inside statements' controlling expressions
[33m2479f80[m Handle name resolution for qualified access into a module.
[33mcaad4f3[m Allow -o to refer to an output directory.
[33m2265e17[m Create NameBinding test suite and move existing name binding tests there.
[33m9d5c803[m Enable specific-decl imports.
[33m4c05f35[m If a submodule is missing, don't claim that the top-level module is missing.
[33mf03245a[m Fix up a bunch of filtering-by-decl-access-path.
[33mc92fa28[m Have ImportDecl vend a separate "module path" and "decl path".
[33m911c46e[m Error on "import var x" and similar (decl import with no module name).
[33m984266c[m SILGen: Refactor pattern dispatch to allow switch-like dispatch.
[33m99b626e[m Fix indentation
[33ma970160[m Fix indentation
[33mdf86c54[m [IDE] Rename test/CodeCompletion -> test/IDE
[33m21bca84[m [IDE] Move auxiliary files for test/CodeCompletion/complete_multiple_files.swift in the Inputs directory.
[33md5642c4[m [IDE] Add 'complete_' prefix in some of the code-completion tests.
[33mdf96177[m [IDE] Add hasText() convenience method in the code-completion chunk.
[33md7a72b9[m Add ref_to_unowned and unowned_to_ref bitcast instructions.
[33m4938934[m [IDE] Introduce the "syntax-coloring" action.
[33m99512e4[m When printing SourceRanges, add an option to not print the text as well.
[33mcff4cf4[m [IDE] Add CodeCompletionResult::getKind().
[33m7e81b49[m [IDE] Rename "code_completion" namespace to "ide"
[33mf9a446b[m Added the option to override Clang's resource directory when constructing a ClangImporter. This is for lldb, which keeps Clang's resource directory inside its own framework bundle.
[33md180139[m Code completion: add tests for completion in a return stmt
[33m29d2d8f[m [SIL]  Add memory behavior bit to SIL instruction definition.
[33m8c4699f[m Code completion: after delaying a top-level decl, skip the rest of the file to prevent the parser from constructing the AST for it.  Forward references are not allowed at the top level.
[33m34cbef8[m REPL code completion: unbreak REPL completion after r6818 and finally add tests (now we can test it!) so that I don't break it again.
[33m2c7dc9e[m SourceManager::setCodeCompletionPoint(): allow setting code completion point multiple times. This is required to do multiple completions in the REPL.
[33m00a940a[m Rename weak_retain to unowned_retain and change it to require the correct [unowned] type as an argument.
[33m18b2949[m Parse [weak] and [unowned] types in SIL modes.
[33ma731671[m Code completion: add a test for rdar://14585132 (Code completion does not resolve function parameters if function body is missing the right brace) Seems like r6818 fixed it.
[33m7684d6d[m Add a good diagnostic for a hashbang line when it is not allowed
[33m5cea4eb[m Code completion: put CodeCompletionOffset on SourceManager instead of passing around everywhere
[33mae94c8c[m [DCE] Propagate BB arguments when simplifying a conditional branch into unconditional one
[33m2c529eb[m [SILParser] Parse basic block arguments in branch instructions
[33mc12b826[m [SILParser] Run SILVerifier after parsing SIL.
[33mc3d42b5[m Removing the demangleType() API and the --type flag to swift-demangle Types now have proper mangled names of the form _Tt<...> so they don't need any special treatment
[33me1c4ae3[m Wrap llvm::SourceMgr in swift::SourceManager so that we can add new members to the source manager.
[33m37ca2c3[m Debug info: Emit all imports into the IR.
[33m2332517[m Debug info: Fix an invalid pointer deref.
[33madfdd7e[m typo.
[33m68bba56[m Lexer tests: simplify helper function: no need to pass down a SourceMgr
[33mbea606f[m CodeCompletionString: replace CallParameter*Annotation chunks with an "IsAnnotation" flag on the Chunk.  This flag is also set on the TypeAnnotation chunk.
[33m827c516[m Demangler: Include protocol context when it comes from a substitution.
[33mae14cb0[m update location information more precisely in this pass.  Nothing uses this, I just noticed this by inspection.
[33m3503ffe[m IRGen: Set up LinkEntities for protocol witness tables.
[33m9b021c9[m Oops, a ProtocolConformance can still have a null conforming decl.
[33mf4eed42[m Store the Module of a ProtocolConformance rather than the decl.
[33m28c53db[m SILGen: Mark address-only missing returns unreachable too.
[33m015cea6[m Move hashbang line detection to the Lexer implementation, instead of requiring the Lexer client to skip it before constructing the Lexer.
[33m68d5fbc[m Don't drop .o files from tests.
[33mb6d49ea[m Give some dynamic behavior to TypeLowering and lay out some groundwork for more customization.
[33m9f6e2bf[m Permit Patterns in SILLocation as well.
[33mf1f1b12[m Be sure to set the type of both artificial 'this' patterns.
[33m170fb49[m Prettify the stack trace when crashing in SIL-gen.
[33mf46ffb3[m Shorten "TypeLoweringInfo" to "TypeLowering".
[33me98ab3d[m swift::parseCompletionContextExpr() is dead code now, remove it.
[33mba77436[m SIL: Have SILModules track their SILStage.
[33m9856263[m Revert r6789 based on a review comment
[33mfb3e2be[m REPL: bind ESC to code completion.  This is consistent with Xcode.
[33mf92237b[m tools/swift: Refactor REPLEnvironment so that it uses libFrontend to create the TranslationUnit
[33maec4951[m Carry noreturn-ness of LLVM intrinsics to Swift builtins.
[33m757cf98[m Add Parse and AST support for the new import syntax.
[33m5179d44[m The FuncExpr hierarchy got refactored, remove this dead function.
[33m43e9cd7[m LangRef: Update union grammar and code examples.
[33m674a03b[m Replace "oneof" with "union"...everywhere.
[33m4322494[m SILGen: Emit a single epilog block for returns.
[33m3727c55[m Import.rst: Fix a couple of typos.
[33m2dc2182[m Code completion: add an API to sort code completion results and use it in REPL
[33m3313f8a[m Debug info: emit command line options.
[33m5abfdb7[m Debug Info: Handle metatypes a little better.
[33m13d4360[m Debug info: Correct Bits vs Byte and add the bitsize to the testcases.
[33maecfb85[m Wire clang::TargetInfo into swift::IRGenDebugInfo so we have access to the target size of types, which may be different from the LLVM storage size.
[33m5295671[m typo
[33mb62ebbb[m fix build on case-sensitive fs
[33m88f3714[m SILGen: Always emit materialized destruction as destroy_addr.
[33m1e31a93[m SILGen: Don't leak ignored address-only arguments.
[33m09cdd40[m Revise import design per 2013-07-30 meeting.
[33mfa49d75[m Add bool, int8, and float vectors of size 2 definitions and some supported operations.
[33m62535fb[m [serialization] Serialize ObjC bit, [iboutlet], [ibaction], [class_protocol].
[33m00f9b00[m [DCE] Add dead instruction removal stage.
[33m930b95c[m [SIL] Add SILInstruction::mayHaveSideEffects helper.
[33mcb60bda[m [DCE] Remove redundancies in the test
[33m9d83256[m Move REPL code completion wrapper to libIDE so that it can be reused and we can add tests for it
[33m6d51700[m Move "RECENT CHANGES" after "GETTING STARTED" in the release email.
[33m0dbdd58[m Clean up wording of the implicit-conformance diagnostics. It still feels too wordy
[33mceaa5e0[m Suggest explicit protocol conformance via Fix-Its.
[33m8aa302c[m Oops, wrong year.
[33m296c90a[m Mention modules and explicit protocol conformance in release notes.
[33m38652f5[m Simplify code with the new Token::isKeyword() function
[33mcc45633[m SIL: Don't print instruction labels for value-less instructions.
[33m507c41d[m Reformat comment so it stops spewing -Wdocumentation warnings.
[33me8a894b[m Simplify code per review comment
[33m26c00fd[m SIL: Add a switch_int instruction.
[33m3e7eef5[m Kill [stdlib] attribute.
[33m21785c8[m Call Type::print(), instead of TypeBase::print(); the former includes the null check.
[33md6c1352[m [serialization] Be defensive in preserving the deserialization cursor's offset.
[33m001cbb1[m Code completion: handle ParenPatterns in function parameters when completing a function call
[33mbe3ba26[m Debug info: Emit the human-readable name of a constructor as "constructor". rdar://problem/14583186
[33m334c90d[m Add a disabled failing testcase for rdar://14585108
[33m9f6d987[m Code completion: add a workaround for rdar://14592634
[33m158e8bc[m Use llvm::MemoryBuffer::getBufferIdentifier(). Thanks, Jordan!
[33m2c2ec20[m Debug Info: Push the current location before we create a new function, because we often emit functions while in the middle of another function.
[33m8c4fafe[m Add a disabled failing testcase for rdar://14592634
[33mad9faee[m add a test for handling byref calls properly, while promoting values around them.
[33mbb82314[m teach stacktossa to completely remove alloc_stacks when it can.
[33m85bcc23[m trim sil-opt linkage dependencies.  It doesn't use the repl, so it doesn't need libedit or CF.
[33m9f3a0f3[m fix -Wdocumentation warning.
[33m70dbbc80[m Store type, protocol, and conforming decl in ProtocolConformances.
[33m2306563[m Debug info: emit the module name for types declare in a swiftmodule.
[33mb3050b1[m Use SWIFT_FALLTHROUGH macro.
[33m3fcbb1c[m Revert unintended changes to demo-tool
[33m647dff9[m Code completion: don't add results that reference operators with function call syntax when we complete after module name
[33m736c6d2[m Don't crash on "var x = { x() }".
[33m3ca6768[m Using a variable within its own initializer is an error.
[33m5186d82[m Move the comment to the beginning of the logic that does what is explained in the comment.
[33m8f83ca6[m Parsing postfix exprs: if we have '.<keyword><code_complete>', try to recover by creating an identifier with the same spelling as the keyword.
[33m81a5a41[m Move test for inheritance.
[33m4c7381c[m Remove implicit conformance to protocols.
[33m5aef7a6[m Fix REPL code completion after r6714
[33m6fb008f[m SIL: Verify against upcasts and super_methods to same type.
[33mb11169b[m Sema: Coerce SuperRefExprs by changing the type directly.
[33mb7a6cbc[m fix the makefiles to only include swiftBasic in this.
[33mbec5e3e[m swift::tokenize: create the Lexer on the stack
[33m72ae1fd[m swift::tokenize: don't include tok::eof, per feedback from Argyrios
[33m70a0cff[m silence warning
[33m5b5ba6d[m Name mangling: Add a "_Tt" prefix to all type names that are output in the debug info, to aid the debugger in figuring out the implementation language of a given type in multi-language environments. FYI, where applicable, we also emit the DW_AT_APPLE_runtime_class(DW_AT_lang_Swift) attribute. The demangler accepts type names with the "_Tt" prefix without the --type switch.
[33m6469318[m [DCE] Add a very primitive dead code elimination pass
[33mfd52b19[m [SIL.rst] Minor edit to the Intro.
[33m0acc4d5[m [SIL] Pass type instead of String to the diagnostic machinery
[33m7dab958[m Require the superclass to be first in the inheritance clause.
[33m5142210[m Code completion: delay parsing of top-level var decls This allows us to do code completion inside top-lever var initializers.
[33m64e0cbe[m Diagnose duplicate inheritance from a protocol.
[33m4aa4887[m Rework and centralize checking of inheritance clauses.
[33m6e00dbf[m Remove the Swift version of the demangler.
[33m50ac51b[m Autoconf: Fix dependencies for sil-opt and swift-demangle.
[33m239f5ae[m IRGen: Include associated types in witness table layout.
[33mecc47ba[m Frontend no longer depends on ClangImporter. Weakly link the entry point.
[33macce376[m Introduce Module::forAllVisibleModules, and use it where useful.
[33m501b0e9[m Implement getReexportedModules for Clang modules.
[33m0b75d86[m Remove now-unused "LoadedClangModules" hack.
[33m45bad83[m Add a protected LoadedModule::getOwner to simplify r6519.
[33md9b7c8a[m Move ClangModule into the ClangImporter library.
[33ma779b65[m Don't dereference the text of tok::eof, because it is usually empty.  Use string comparison instead.
[33mc75fe92[m Moving the Swift demangler from libSIL to libBasic Plus, a couple of minor cosmetic changes that I had held off for a couple days now
[33mb9476cf[m Advertise underscore separators in release notes and whitepaper.
[33m5d1920e[m The demangler doesn't actually require the serialization library.
[33m50bd6cb[m SILPrinter: Handle bound generic types as SILConstant context.
[33m0842fb5[m Rename "base class" to "superclass" and "derived class" to "subclass".
[33mcfe9e0a[m [Module format] Don't serialize 'inherited' types of any declaration.
[33ma0dc08c[m [Clang importer] Never set the 'inherited' fields of type declarations.
[33m243d2f0[m Zap a stray use of TypeAliasDecl::getInherited().
[33m3d0c2e2[m Record the protocols and superclass for generic parameters.
[33m69d3392[m Accept underscore separators in numeric literals.
[33m3c03a8c[m SIL: Patch up float_literal bit handling.
[33md46bdbe[m SIL: Reorder float_literal printing to be a bit clearer.
[33m3e6092d[m SIL.rst: Fill in details about how function context is consumed.
[33m24dc1cf[m SIL: Remove the redundant associated_metatype instruction.
[33m1300efb[m SIL: Represent float_literal values with bitwise representations.
[33ma75e266[m Don't store element offsets in individual RValues.
[33ma7b8254[m More Makefile support for swift-demangle.
[33mabf9c1f[m [SIL.rst] Document an extra check we now perform on noreturn.
[33me5c3a7e[m [SIL] Make sure SILBasicBlock destructor gets called.
[33mdde5e15[m [SIL] Cleanup, remove redundant initializers.
[33m098f197[m [SIL] Add convenience SILBasicBlock successor iterators.
[33m618508f[m Set protocols and conformances on associated types.
[33m7b5653a[m IRGen: Remove not-constant-null assertion for known function data.
[33m1759210[m (De-)Serialize the protocols from which a protocol inherits.
[33me444a4c[m Switch a bunch of ::getInherited() over to ::getProtocols().
[33md1d584a[m Using an attribute builder to is more efficient than adding attributes one by one.
[33m11ce744[m SILPrinter: Comment sil decls and function_refs with demangled names.
[33mb16e83e[m Update comment
[33m709882c[m Capture complete associated type substitution information in the AST.
[33m27cbda9[m docs/contents.rst: Fix broken toctree reference
[33m60d440e[m SIL.rst: Give an example of uncurried decl refs.
[33m51063b9[m Fix Makefile build: swift now depends on libswiftIDE.
[33m7a1009f[m IRGen: Remove value witnesses from protocol witness tables.
[33m532dd64[m Use "witness" rather than "value witness" to mean a non-type witness in the AST/type checker.
[33md0f60ab[m Introduce some encapsulation into ProtocolConformance.
[33mbec894f[m Code completion: split top-level tests into a separate file
[33mc8f46ae[m SIL.rst: ReST syntax fixup
[33ma25143e[m Rename tests under test/CodeCompletion to have a (more or less) common naming convention
[33m628937e[m SIL.rst: stop using ReST line-block directives for grammar rules
[33md20039b[m SIL.rst: At Joe's request, change "class reference" to "class value" everywhere
[33m4ed4370[m Factor ProtocolConformance into its own header.
[33mc2e05bf[m REPL: use new code completion engine from libIDE
[33ma0cd8e9[m Lexer: don't consume the first token before we apply all code completion settings
[33m1f3c026[m Relax the assertion in Lexer to allow it to save state at tok::eof. This enables us to do code completion at EOF.
[33m6beee6a[m Code completion: implement delayed parsing and code completion for TopLevelCodeDecls
[33m497ec93[m Code completion: generate a tok::code_complete token during the first pass of parsing
[33m8363bc3[m Remove unused function Lexer::stateRangeHasCodeCompletionToken()
[33mf9fa6aa[m Code completion: insert a zero character into the buffer to mark the code completion token
[33mea24dbd[m SIL.rst: Fix mis-merge
[33maaa2295[m SIL.rst: Editorial fixes, part I
[33m320d330[m [docs] Add noreturn attribute documentation to the LangRef
[33m360eed6[m [docs] Document ApplicableFunction constraint.
[33mbf6c0e2[m Better way of type checking ApplyExpr in presence of attributes.
[33mb5ebb34[m Emit an error on returning from a 'noreturn' function.
[33m535f97f[m tools/swift/Completion.h: include Basic/LLVM.h and cleanup unneeded llvm:: qualifications
[33m464df1c[m Lexer: make tok::eof length equal to 0
[33m8879974[m Code completion: don't crash while code completing (actually, while delaying parsing of) a function that does not have a right brace before EOF.
[33m553b445[m SIL.rst: Clarify the syntax of apply instructions.
[33m72c531b[m Make CodeCompletionString::Chunk class a public member of CodeCompletionString
[33m8056358[m SIL.rst: Clarify UB semantics of project_existential insns.
[33mf43aa1f[m SIL.rst: Remove needless reference to type canonicalization.
[33m91f8bc5[m SIL.rst: Briefly discuss the cdecl and objc conventions.
[33mf3d943f[m SIL.rst: Elaborate on how exactly function types get transformed.
[33ma78aed7[m Cache the "existential conforms to self" bit in ProtocolDecl.
[33md273682[m Sink the bits for ProtocolDecl's "requires class" cache into the Decl bits.
[33mac50a32[m SIL.rst: Remove absurd grammar example.
[33me850d82[m Use ProtocolDecl::getProtocols() rather than ::getInherited().
[33maae8e3e[m [Protocol conformances] Check when an existential type conforms to its protocol.
[33m3d1f75f[m Changing enum names to have an uppercase initial Adding a comment to describe the purpose of SubstitutionWithProtocol
[33mcbd8fc1[m SIL.rst: Make more explicit that 'coerce' has no runtime effect.
[33me673b0c[m SIL.rst: Update in response to DaveA comments.
[33m51bd267[m Don't use a reserved identifier for the include guard macro
[33m6a6f1f6[m Demangler: clean up includes and extra llvm:: prefixes
[33m5699820[m Delayed function body parsing: replace two error handling code paths with asserts This should just never happen.
[33m258d4fd[m SIL.rst: Rename values in an example to avoid confusion.
[33mf866e5a[m Revert "IRGen: Pass existentials as generic parameters by unwrapping the container."
[33m9fc4047[m SIL.rst: Terminators never produce values.
[33m16d68f6[m SIL.rst: Update with feedback from ChrisL and Fariborz.
[33mc34eaf1[m Fix langref specification of call syntax.
[33meec7e70[m [Constraint application] Handle materialization for implicit byrefs.
[33m1e597f5[m [Parser] When delay-parsing a function body, make sure the closing brace is included.
[33mde1f926[m SILGen: Propagate function thin-ness through specializations.
[33m5199010[m If the parser needs priming, let the parser handle it.
[33m1f41239[m Add a code-completion test with multiple input filenames.
[33m2f2eb83[m Fix comments.
[33m9d157e7[m [Parser] Record the end location of a function body when we skip it.
[33m803ba0e[m [Parser] Introduce PersistentParserState::ParserPos to encapsulate a Parser/Lexer independent info for restoring parsing from a certain token location.
[33mcfd3e09[m [Parser] Make PersistentParserState parameter optional and remove it from the constructor that accepts a StringRef fragment.
[33m91a25ed[m Change an include to a forward reference.
[33m9d093f3[m updates: increase some of the description of compiler flow, change some minor wording and fix some syntactic issues.
[33m740f8b8[m SIL verifier: protocol and archetype method instructions can refer to polymorphic functions.
[33m21ab734[m When forming a reference to a generic member of an existential or archetype value, specialize the result.
[33mce79d72[m Fix build on case sensitive fs
[33mdbb1c23[m Rename functions and variables from "Delay[...]Parsing" to "Delayed[...]Parsing" for consistency
[33m8e6ae64[m DelayedParsingCallbacks.h: include headers for types that it uses
[33m11f5b48[m Fix a -Wdocumentation warning, and hack out NoFramePointerElimNonLeaf to fix the build.  This isn't a proper fix (we should start putting out new attributes on llvm::Function's, but getting the build working again seems important.
[33mcb4304f[m Clarify comment
[33m1433bd7[m fix pasto
[33me3241cf[m One space is enough: _TMdC3foo3bar should read "direct type metadata for foo.bar" instead of "direct  type"...
[33m66d1e51[m Refactor how multiple parsing passes and delayed parsing works.
[33m694ab2c[m Remove 'Flags' from FunctionBodyParserState, it's not getting used.
[33mde4a2db[m [Parser] Abstract a bit access to Parser's ScopeInfo.
[33m2c99f64[m rename this to avoid the prefix number which doesn't mean anything anymore.
[33m511ddc4[m Debug Info: Set the debug location for the function prologue to the decl of the function. rdar://problem/14536357
[33mb85ba36[m SIL.rst: Update SIL comment syntax.
[33ma6ff8a4[m SIL.rst: Update the calling convention section.
[33m144ecb0[m The previous implementation of the demangler treated allocating vs. initializing constructors in a way that is highly inconvenient from a debugger perspective. The user-specified constructor() and destructor() were marked with an extra attribute (initializing and destroying) for classes, vs. the allocating and deallocating destructors which had no extra cruft (but hardly anyone would care about them since they are system-provided)
[33m213f2e8[m SIL.rst: Cleanups.
[33me98dfb5[m SIL.rst: Call things out as UB instead of being vague.
[33mb150094[m SIL.rst: More words about addresses and generic function types.
[33mc0096e9[m ASTDumper: don't crash when printing an integer literal that has ErrorType
[33m7ec6a47[m Move class ParserTokenRange to namespace swift
[33mb0a6a97[m Remove an unused typedef TopLevelCodeDecl::ExprOrStmt
[33m96b0f31[m removeCodeCompletionTokens(): return a 0-based offset of the code completion token
[33maf2ffca[m SIL.rst: Elaborate on the restrictions on SIL address types.
[33m6850f66[m SIL.rst: Missing grammar rule.
[33m6b779cc[m SIL: Spell all non-SILFunction Swift decl references with '#'.
[33m668f387[m SIL.rst: Cleanups.
[33m872e781[m SIL.rst: Document sil function linkage specifiers.
[33m777c1fd[m SIL.rst: Fix section reference.
[33m398cbba[m Rename SILConstant to SILDeclRef.
[33md11585f[m [serialization] Include generic protocol witness substitutions.
[33mcf2f43b[m [serialization] Use canonical conformance records for substitutions...
[33md8b9ddc[m SIL.rst: Discuss undefined behavior.
[33m77ee3c7[m SIL.rst: Reference type values need to be used with an owning strong refcount.
[33m30c0d47[m SIL.rst: Define "runtime failure".
[33m6f58ebe[m Set SWIFT_DEMANGLE in the buildbot's environment.
[33m320106c[m SIL.rst: Provide some high-level discussion of dataflow errors.
[33me4a6c93[m SIL.rst: Discuss some additional categories of type.
[33m28ebf89[m Add documentation comment for FuncExpr::hasBody()
[33m936a1f0[m SIL.rst: Touch-ups.
[33mefcd17f[m This commit implements the Demangler API in C++ and de facto deprecates the existing Demangle.swift
[33m2809edc[m remove obsolete new.
[33m325b86b[m Prepare SIL type lowering to create more expressive type-infos.
[33m676de04[m SIL.rst: ReST syntax.
[33m12df09d[m Add a release note about overflow checking arithmetic.
[33m15c0895[m Make release email 78-column-clean again.
[33m6aa9738[m Split buildbot-release-notes.txt into its own file.
[33m8a0c143[m Fix a misuse of llvm::sys::path::append() and simplify string handling.
[33m82d1091[m SIL.rst: Update docs for terminators.
[33m5ca3f92[m fix typos
[33mb211526[m SIL.rst: Update docs for index_addr/index_raw_pointer.
[33ma919bc1[m SIL.rst: Remove out-of-date "examples" section.
[33m08723dd[m SIL.rst: Update docs for checked cast instructions.
[33m2341903[m [Makefiles] Convert autoconf build to use modules.
[33mf8ea72c[m Turn on module building by default in CMake.
[33m4df7c9d[m Adjust the mechanics of type lowering to avoid double-caching.
[33mac5cefd[m SIL.rst: Update docs for unchecked conversion instructions.
[33m611a8bd[m Revert "Debug Info: Add support for enum-style oneof types."
[33m63f1254[m [debug info] Fix null-terminated string issue with the fallback filename.
[33m8e08136[m Basic implementation of lookupVisibleDecls() for serialized modules.
[33m0d3e410[m [serialization] Look past one typealias when looking for a nominal decl.
[33m837a845[m [serialization] Properly record protocol conformances in the ASTContext.
[33mbeda297[m [ClangImporter] Don't assume forward declarations are never filled in.
[33m3087e8d[m Add the notion of "re-exported" modules, and use that where it makes sense.
[33m110d644[m Provide a skeleton for re-exports from serialized modules...
[33mf12f3c2[m Reuse "LookupCache" pointer for a LoadedModule’s owner.
[33m3e60601[m [serialization] Silence an unused variable warning in Release builds.
[33m6547b97[m [serialization] Allow references to Clang-imported values.
[33m3613847[m [serialization] Fix another cursor-clobbering mistake.
[33mb619a12[m [serialization] Make sure accessors are correctly associated with a subscript.
[33mbe6c5b3[m [serialization] Preserve the implicit bit for patterns.
[33m5689d1a[m [serialization] Set the type of the FuncExpr in a FuncDecl.
[33m54a1912[m [serialization] Actually serialize asmnames, instead of just ignoring them.
[33mff75959[m Added a paragraph about debugger support.
[33m3c9bb55[m Debug Info: Emit the qualified names for many more ObjC-derived types. This should get rid of most <null>-types in the DWARF output.
[33m8117a59[m Debug Info: Change the default behavior for unhandled types to emit named types instead of empty types.
[33m06f0eb3[m SIL: Remove stale leading name from doc comment.
[33m6850fd3[m Fix typo in comment
[33m6560f17[m Revert "Rename ObjectiveC.swift to avoid a very subtle name clash with the system module."
[33m0f71e6e[m Rename ObjectiveC.swift to avoid a very subtle name clash with the system module.
[33mdcd26e8[m Code completion: implement completion of imported Clang declarations by first importing them
[33mfd9b983[m Micro-optimize SILType::isAddressOnly.
[33me7ce17b[m Permit some micro-optimizations when querying canonical types.
[33mb9ae368[m use the new filecheck CHECK-LABEL feature to make these tests more robust.
[33m3e9fa26[m Extract some helper functions for l-values.
[33m51d7e56[m SIL.rst: Update docs for protocol type instructions.
[33m8fa2419[m SIL.rst: Wording.
[33m5536e61[m [Frontend] Keep a list of input files in CompilerInvocation and create input buffer IDs as part of CompilerInstance::setup().
[33m200e64d[m [Frontend] Refactor CompilerInvocation to be a pure settings object.
[33m8d92add[m Don't needlessly materialize logical l-values before loading them.
[33m8442060[m Remove unnecessary SGFContext parameter from Decl/Stmt visitation.
[33m7b193e1[m Make SILGenFunction's Expr visitation private; there are multiple meaningful ways to visit Exprs.
[33me668ff9[m Add parsing and IR-gen for weak_retain and weak_release.
[33ma9c8ad3[m SIL.rst: Update docs for reference counting instructions.
[33ma245dfa[m SIL.rst: Update docs for load/store-ish instructions.
[33ma83cdb7[m teach silparser to parse the unreachable instruction
[33me903fae[m update this to reflect the current direction in SIL optzn passes.
[33mb9ab10d[m SIL.rst: Update docs for aggregate construct/extract insts.
[33mff4b9ce[m SIL.rst: Put the 'module' instruction in with the literal insts.
[33m2bec387[m SIL.rst: Update docs for metatype instructions.
[33mdffe597[m SIL.rst: Update docs for function application instructions.
[33mb55d0c7[m SIL.rst: Update documentation for dynamic method instructions.
[33m1a75f7c[m more renaming to make things consistent-er
[33m37b3911[m SIL.rst: Update documentation for literal instructions.
[33m6e41858[m SIL.rst: Update syntax and description of alloc/dealloc instructions.
[33m26e6833[m Make the generic parameters of structs and oneofs available within their inheritance clauses.
[33m778e6fa[m [CMake] Utilize the SWIFT_MODULE_CACHE_PATH variable as the default value for a clang::CompilerInvocation.
[33me9f9636[m rename AllocBoxPromotion -> AllocBoxToStack.cpp to be more similar in name to the StackToSSA.cpp pass.
[33ma4b73c4[m use a typedef+decltype to clean up an ugly type signature. pass vectors by const& instead of using std::move on a mutable reference.
[33me37d1ff[m switch lit config variable to have an underscore for SIL_OPT, add it to the buildbot.
[33mef75f4f[m tidy this up.
[33m9093528[m Code completion: recognize and print the correct signature for implicitly curried functions
[33me0dbcc4[m split memorypromotion into two different passes, split its testcases in half, and switch them to use sil-opt to test with.
[33m446fb1f[m rename MemoryPromotion.cpp -> AllocBoxPromotion.cpp
[33me0f19cf[m Feedback from Dmitri
[33m29496e3[m Fix CMake build
[33me54f9bc[m Debug Info: Add support for enum-style oneof types.
[33m988e3b1[m Add a new sil-opt tool, which will be the SIL analog to the LLVM 'opt' tool.
[33m2f94493[m pass a variety of things by reference instead of by value in the invocation's setters.
[33m03e6c36[m Code completion: correctly do name lookup into extensions
[33m9339eb4[m Ban "2.0.0", which is pretty silly.
[33mc0b03b4[m SIL.rst: Reorder instructions consistent with SILNodes.def.
[33m5ee3d31[m Allow referencing ".0" on a scalar.
[33mdf96702[m Implement a first hack at (limited) alloc_stack to register promotion.  This pass is destined to be somewhat different than LLVM's mem2reg pass:  - Because we can't break debug information, this won't remove    alloc_stack (and the stores to it) for allocations with location info.  - Because this gates other dataflow diagnostics, we don't want a value    being pinned to the stack to prevent promotion.  Instead, we promote    all loads that we can, even if some end up being blocked by a [byref]    "may" store.
[33m109cb0d[m Parse 'static' more permissively, but complain if it isn't used.
[33mf003454[m SIL.rst: ReST syntax.
[33m81b3fa2[m Use BUILTIN_TYPE to distinguish builtin types in the type checker.
[33m1776881[m LangRef: Update tuple keyword argument syntax.
[33m36e02ab[m Allow user-defined conversions on archetypes.
[33m59535bc[m Use the correct locator when converting an expression to its contextual type.
[33m500d909[m Change the sentinel used by the parser to represent unprimed state to be something the lexer can't produce.
[33m7e985f1[m Fix the lexer to produce an error in every case it produces a tok::unknown token, it was silently swallowing # and @.  This fixes rdar://14418336
[33ma0b1ec6[m When printing an integer literal, use the text form when the type contains a type variable.
[33m3277112[m Allow explicit specification of generic arguments to provide fewer arguments than there are generic parameters.
[33m7147491[m More diagnostic specialization.
[33me2a38c1[m Customize diagnostic for mismatched number of generic parameters a bit using "too many" or "too few" appropriately.
[33mdeca9a7[m Parse class inheritance clause within the context of the class itself.
[33m81da0c6[m Remove includes that should never be necessary.
[33me4708b1[m build on Joe's new "emitDestroyAddress" helper to emit a "load + release" pair instead of destroy_address when possible.
[33m63d2d16[m Building on Joe's refactoring of TypeLoweringInfo, teach memorypromotion to not insert destroy_addr instructions when a type is trivial.  This also works around its other limitation (not handling multiple final releases), allowing it to promote 73 more boxes.
[33mdbd820c[m teach memorypromotion about ProjectExistentialInst.  Mention ARC optimization in SIL.rst.
[33m0d6f684[m tuple_element_addr doesn't cause a pointer to escape unless the result of the tuple_element_addr escapes.  This allows the pass to promote 50 more alloc_box's in the stdlib.
[33mc1e6a4c[m the indirect return result of an apply doesn't capture a pointer.
[33mb700735[m byref arguments to apply and partial_apply do not capture their result, so allow alloc_box to be promoted to alloc_stack in such cases.
[33m8ac1bda[m SIL: Move retain/release/destroy helpers onto SILBuilder.
[33m1984cf4[m SIL: Rename SILFunction::getMangledName to SILFunction::getName.
[33m59c7fa8[m SIL: Refactor TypeLoweringInfo to be keyed on SILType.
[33m733c2dd[m LangRef: Remove outdated section about metatype expressions.
[33m099f0cf[m simplify the construction of SILFunctionTypeInfo, inlining some singly-called helper functions.
[33mb79c5aa[m Move SILFunctionTypeInfo logic into SILType.cpp out of SILModule.cpp, no functionality change.
[33mc7373c5[m add regular convenience methods to SIL IR objects for getting parent containers. Add a getOperand(n) method to SILInstruction.
[33meccf04f[m struct_element_addr doesn't cause an alloc_box to escape if the result of the struct_element_addr doesn't escape.
[33m211f295[m generalize getLastRelease to handle the "exciting" case when we have multiple releases of a box, potentially spread all across the CFG.
[33m4617eaf[m Teach alloc_box promotion to insert a destroy_addr and dealloc_stack instruction at the end of a variables lifetime.  Right now, this is only handles the most simple case, but it should be conservatively correct now.
[33ma9e92a2[m Expose basic post-dominance information.
[33m99874c0[m SIL.rst: Wording.
[33m2b05858[m SIL.rst: Rework the "Syntax" section.
[33mbb65bcd[m SIL.rst: Add a section about the SIL pipeline in the compiler.
[33me847983[m SIL.rst: Fill out the abstract.
[33m751da69[m LangRef: Remove some stale references to 'following' tokens.
[33m9d8a4ae[m initialize_var doesn't cause alloc_box to escape.
[33m496446c[m Make all SIL objects that are print()-able, also raw_ostream insertable with <<.  Use this to implement a DEBUG() dump in MemoryPromotion.cpp
[33m0c3322d[m TypeChecker: Handle generic methods looking up protocol members.
[33m8638600[m simplify a SILBuilder constructor.
[33m61bedf8[m implement a trivial SIL-level "escape analysis" pass that promotes alloc_box to alloc_stack.
[33mf8c8eb1[m add some helper methods for IR passes to use.
[33m1c02bad[m change this test to -emit-silgen, as a basic parser test, it should not run cleanup passes.
[33md528b49[m make getElementType() methods on SIL allocation instructions return a SILType.
[33m66e5258[m Replace test/methods.swift with test/name_lookup.swift, which tests how name lookup works in member functions in non-static and static contexts
[33m2af2fe2[m IRGen: Update calling convention for generic witnesses.
[33m0261c05[m Sema: Save substitutions for generic witnesses.
[33m10f290a[m AST: Add slot for substitutions for generic witnesses.
[33m400cf80[m Debug Info: Implemented Tuples(!), Builtin*Pointer, BoundGenericClassType. As a side effect compiling swift.swift with -g now works again.
[33m295a263[m Remove a stale comment
[33mbc67a82[m lookupVisibleDecls(): use correct abstractions of lookup kinds
[33m7d7e47a[m Remove the common Pitfalls document as it has been moved to the wiki.
[33m80061e0[m Perform attribute checking on the type attributes for AnyFunctionDecl.
[33md84a075[m Type check noreturn attribute.
[33mb90fd7f[m Remove redundant code. As per Doug’s review of r6356.
[33mbac0d84[m Code completion: don't include instance variables and instance functions in code completion results inside static functions
[33mcccf26b[m rename [de]alloc_var -> [de]alloc_stack in the printed and parsed sil syntax.
[33m40c4565[m rename [de]alloc_var -> [de]alloc_stack in the printed and parsed sil syntax.
[33md52e6ed[m Update a comment in Parser::parseDeclFunc(): static functions have an implicit 'this' parameter.
[33m601c695[m Remove roadmap from this repository. It doesn't belong here.
[33m23ca444[m Remove debug dump.
[33m7ca6ac6[m Debug Info: Implement a whole bunch of stubs for types that were not handled before. + Several bug fixes for problems uncovered by the debug info verifier.
[33me4b999f[m [docs] PitfallsWhenPortingFromObjC.rst: fix title underline lengths
[33m47dd7a4[m rename SIL internals for AllocVar and DeallocVar to [De]AllocStack. No syntax change yet.
[33m44b4b38[m Use nullptr instead of '0'
[33m16229f8[m Eliminate IsTypeLookup parameter in the implementation of lookupVisibleDecls() It is not used at all.
[33m71e8cf2[m Fix compilation issue with top-of-tree LLVM
[33m69b64a0[m More canonical type preserving.
[33m4b4e7d0[m Eliminate SIL and IR-gen's TypeVisitor specializations in favor of a new AST-level one, and exploit it.
[33m6b6427e[m TypeVariableType and ErrorType are canonical, even if they're unchecked, and they should have Can* variants.
[33m1708689[m UnboundGenericType is now an UNCHECKED_TYPE.
[33md710c0f[m Use the type-in-context in the ExtensionDecl for a generic type.
[33m1ae5699[m Code completion: don't add 'This' and typealiases to code completion results for protocols when code completing outside the protocol's DeclContext on a protocol's instance
[33m11e5550[m Debug Info: Emit the fully-qualified, mangled name for nominal types.
[33m0fc469e[m lookupVisibleDecls(): now we don't find references to generic types outside of the containing DeclContext
[33mff07227[m Use CanType in the Mangler API.
[33mc4b121a[m Integrate type checking of default arguments into the type checking of the function/constructor body.
[33m2fd4c63[m Sema: Open witness types so we can type-check generic requirements.
[33m99220a0[m Fix this file to compile on a case sensitive file system.
[33me4b44a6[m Add a 'current module' parameter to lookupVisibleDecls() so that it can do what is documented: look up members of a type that are visible from a specific module.  It does not matter much now, but when we have access control, it will.
[33m1606386[m Preserve type canonicality with isa/cast/dyn_cast.
[33md4b37c2[m TupleTypeElt::getWithType was missing some information.
[33m3df60fc[m [SIL diagnostics] Teach "missing return" warning about noreturn attribute
[33m74bc6f0[m Add "noreturn" attribute : stage 1 - Add the attribute to AnyFunctionType::ExtInfo. - Propagate the attributes from DeclAttributes to AnyFunctionType for   FuncDecls in TypeCheckDecl.cpp. - Make sure the new attribute is serialized.
[33m92e07c6[m Use ExtInfo struct to pass around call related info in FunctionType and PolymorphicFunctionType getters.
[33me78c025[m IRGen: Raise "not implemented" errors for non-fixed-layout ivars.
[33macdff12[m Unique tuple types that have initializers.
[33md2b324c[m Code completion: code complete after module names (for example, "swift.#^A^#")
[33m722cc29[m Factor out DeclContext::getParentModule().  This cleans up a few places where similar loops were duplicated.
[33m5fe164d[m IRGen: Pass existentials as generic parameters by unwrapping the container.
[33mad1a9ac[m Eliminate default argument expressions from the type system.
[33m457f27c[m SIL Parser: parse archetype_metatype, associated_metatype, class_metatype and protocol_metatype.
[33mbe7d4ae[m Code completion: fix a few crashes while code completing expressions that have generic parameter lists
[33m9023d15[m SIL Parser: parse global_addr.
[33m6804b23[m Teach scalar-to-tuple conversions to use the resilient entry points for default arguments.
[33maf4e485[m 14443393 stdlib fails to build with different -o option
[33md02ac70[m [CMake] Pass "-isysroot ${MODULES_SDK}" for building stdlib/runtime.
[33m341962c[m [CMake] Introduce add_swift_compiler_flags() and add_swift_optimization_flags() to reduce copy-pasting.
[33m5082f37[m Print a vararg in a pattern as written, without the array slice notation.
[33m9917e5f[m SIL: Assert that bridged types actually exist.
[33m76c9a84[m SIL Parser: parse index_addr and index_raw_pointer.
[33mb8262ea[m SIL Parser: parse string_literal and float_literal.
[33m2534aff[m Clang importer: don't assert when a mapped type can not be resolved in the standard library modules because the user did not import the module.
[33m406ca18[m SIL Parser: parse is_nonnull.
[33mcfad136[m swift-ide-test: added support for specifying custom module search path
[33ma980cdd[m Revise release announcement to point to un-chrooted path on matte.
[33maeb227b[m Update a comment, not functionality change.
[33mc22ac1d[m lookupVisibleDecls() should operate on a canonical type so that it does not need to unwrap the type sugar.
[33m0791041[m Revert the API change of r5893
[33m8e56e45[m SIL: Define a switch_oneof instruction.
[33m015c1a8[m Refactor Parser methods to return TypeReprs directly, instead of modifying TypeLocs.
[33m7476762[m Remove IdentifierType from the type system.
[33mf616eee[m Utilize TypeReprs for type checking.
[33m0d0e0d1[m Abstract out sub-interfaces for [unowned] and [weak] TypeInfos.
[33mfc4f03e[m Test case for [unowned] swift-class references.
[33m5db410b[m Fix latent bugs with ReferenceStorageType fields.
[33m7b86817[m Basic value structure for [weak] and [unowned] references.
[33mfea08cb[m Code completion: add function arguments (including implicit 'this') and generic arguments to expr-postfix code completion results
[33m104705c[m Handle ProtocolCompositionType in lookupVisibleDecls()
[33mee8e504[m SIL Parser: parse ref_element_addr.
[33mde44cc9[m Fix a typo in comment
[33m04c1468[m SIL Parser: parse tuple_element_addr and tuple_extract.
[33m90889c3[m Handle ParenPattern in function arguments
[33m858ce26[m Code complete expressions that type check to ArchetypeTypes
[33m36dd7bf[m SIL Parser: parse builtin_zero, struct, struct_element_addr, and struct_extract.
[33mb17a231[m Revert "Update for LLVM change to raw_fd_ostream's option flags."
[33m0a6d9df[m Update for LLVM change to raw_fd_ostream's option flags.
[33m87689d1[m [serialization] Handle references to generic parameters.
[33m9156e80[m Don't crash when looking for imports in a loaded module.
[33mc15653f[m [serialization] Add support for asmname.
[33m6e4f36c[m [serialization] Handle cross-module references to values in extensions.
[33m213829f[m Adapted to a changed enum in llvm to make the build work again.
[33m423abc5[m Codify the default argument hack for __FILE__/__LINE__/__COLUMN__.
[33mca7c9cb[m Debug Info: Represent function parameters as argument variables instead of local variables.
[33m39cef65[m Create parameter types with their actual size and alignment parameters instead of hardcoded values.
[33meeff2b2[m [SIL] Mangler::mangleType should be mangling canonical types.
[33m78692b7[m Use default argument generators to create default argument values.
[33mb9444e5[m SIL Parser: parse initialize_var.
[33m0a19b8e[m SIL Parser: parse project_existential_ref.
[33mdd80693[m Cleanup testing case.
[33m2382f6c[m Add the document describing common pitfalls while porting from ObjC
[33ma984d9b[m Move the SIL diagnostic emission entrypoint from SILGen to the top level swift.cpp driver
[33m6aa7b63[m Remove unintended fallthrough in CompletionLookup::foundDecl
[33m7f86bd2[m IRGen: Remove catch-all for unimplemented instructions.
[33mbed6190[m Code completion: produce results that refer to TypeAliasDecls
[33mc00ccc2[m Rename dataflow diagnostics file and remove the redundant visitor.
[33m4d2e985[m Cleanup: Forward declare SourceLoc instead of including it
[33m98d180c[m Pack AnyFunctionType’s extra info inside a separate class stored inside the TypeBits.
[33mf6d1ec4[m [SIL] Refactor SILLocation not to derive from PointerUnion3 but to include it as a member
[33m7823c53[m Code completion: produce results that refer to NominalTypeDecls from expr-postfix that can be resolved
[33m0325fdb[m Emit a diagnostic if a type name refers to a decl in the local scope that is not a type, instead of crashing.
[33m68ed84f[m Allow TypeLocs as parameters to diagnostics.
[33mb8babd4[m Code completion: produce completion results which refer to NominalTypeDecls
[33m844465d[m Resolve and type-check OneOfElementPatterns.
[33md52750a[m Match default arguments to the function or constructor declaration they came from.
[33me650f2f[m Implement basic code completion at the beginning of the expr-postfix
[33mdb81e18[m Followup for r6272: pass const ASTContext whenever possible
[33maa46064[m Pass a const ASTContext and const DeclContext whenever possible.  This makes it possible to use lookupVisibleDecls() with a const DeclContext.
[33m37dc84e[m Remove VarargBaseType from TuplePatternElt and introduce a bit in TuplePattern to indicate if there is a vararg.
[33m189ffc4[m Code completion: don't crash on functions with selector-style arguments
[33m1d507f2[m SIL Parser: parse copy_addr and upcast_existential.
[33m960141e[m [serialization] Don't keep a ModuleFile around when missing dependencies.
[33m075539b[m Generate runtime functions from an xmacro database.
[33m6a0c6f4[m Code completion: use 'Void' instead of '()' in type annotations
[33m98aaf3b[m Add code completion for expr-super: 'super#^A^#' and 'super.#^A^#'
[33ma12d30d[m Emit entrypoints for the default argument generator functions.
[33ma696592[m Unbreak autoconf build
[33m12872e5[m remove the allocation kind enum from alloc_var/dealloc_var/alloc_ref.  There is only one kind now: stack.  alloc_var is just for stack memory now.
[33mc5a2ac7[m push some incremental work  to the tree.  This isn't useful by itself, but I want to detangle it from other cleanups happening.
[33m5322275[m remove the 'heap' form of alloc_var.  It is not used, and the imagined possible use cases are far enough away that we shouldn't worry about them now.
[33m5c13200[m remove the "pseudo" class of alloc_var.  It is not used.
[33mba4c644[m Have -emit-sil[gen] print a couple of import options.  This is a hack (the right answer is to print all referenced decls at the start of a .sil file), but it is a useful hack.
[33mee24d47[m IRGen: Add a missing bitcast for generic tuple alloc_box operations.
[33m653ff95[m Add two files I forgot to 'svn add', hopefully unbreaking the b0t.
[33m1277ac7[m Carve out a new lib/SIL/Passes directory to hold future SIL optimizations and dataflow warnings.  Add a skeletal MemoryPromotion entrypoint as the first exemplar.
[33mdaf333b[m Add missing case when setting errors on a pattern.
[33m4376b1a[m [serialization] Serialize protocols alongside conformances.
[33mc01b7fb[m [serialization] Fix another scary use of stack memory.
[33mcf9b8a3[m Remove the notion of 'unresolved' types entirely.
[33md42e385[m Remove UnstructuredUnresolvedType.
[33m66d3027[m Stop building UnstructuredUnresolvedTypes.
[33m3b21e6a[m Add a OneOfElementPattern AST node type.
[33m00bdd44[m Misc. SIL document tidying.
[33md2be2b4[m Use nullptr instead of '0'.
[33mfee0e66[m [serialization] Update the field of TupleTypeEltLayout.
[33me67b4e6[m [Parser] Use TuplePattern::createSimple instead of duplicating it in the parser.
[33me3ee2f7[m SILParser: parse an optional volatile attribute for DynamicMethodInst.
[33m1712ee6[m [serialization] Handle overloaded decls.
[33mf19de08[m Add code completion results for expressions that have function types Fixes rdar://14431044
[33m9a180ea[m [serialization] Relax assertions to allow reentrant deserialization.
[33m4db68ed[m [serialization] Record nominal types in the module table ASAP.
[33mc8cb4d8[m ... and get rid of a bunch of dashes.
[33mdc04f7b[m [serialization] Don't copy the record buffer when reading with BCRecordLayout.
[33m241ccc5[m s/@/\\/g
[33m3a0dd1d[m Debug info: Function types now include the types of the function parameters.
[33mef84ad0[m Add support for the "block" attribute.
[33mb5f5a2a[m FuncExprs are no longer expressions; sink the checking down into TypeCheckDecl.
[33mb7817e4[m Remove VarargBaseTy field from TupleTypeElt.
[33m61d547a[m SIL Parser: handle SIL functions with generic params and parse archetype_method.
[33m481a51a[m Move lib/Sema/ArchetypeBuilder.h to include/swift/AST/.
[33me89b90e[m Produce correct type annotations for '.metatype' completion strings
[33m7b93a74[m Code completion: add type annotations to ".metatype" completion strings
[33m034c9e3[m dump() output should go to errs().  Thanks, Jordan!
[33mc80697e[m Add FIXMEs to code completion code.
[33mbdf8768[m Don't track prefix while doing a code completion lookup.
[33mf28d4a0[m Refactor CodeCompletionString and CodeCompletionResult stringification functions to use raw_ostream like the rest of clang and swift.  Also add a comment that these functions are intended for debugging only.
[33md956fdb[m Update 'oneof' syntax.
[33ma932805[m Remove a random include inside ParseExpr.cpp
[33m80ffd6e[m Parse generic parameters in SIL function definition.
[33mda676a7[m Get ready to expose ArchetypeBuilder to SIL parser.
[33m3a7f5df[m Don't add SubscriptDecls to code completion results for a metatype base expression.
[33m9b3ce25[m Add code completion for constructors
[33mc4f33c8[m Add code completion for subscript operators
[33m02084ef[m Implement code completion for some function calls and member variable accesses in expr-dot and expr-postfix that can be typechecked without typechecking the beginning of the function body.
[33m1853997[m SILGen: Reenable 'fallthrough'.
[33me693344[m Zap unintentional commit
[33m9ba865e[m Diagnose ambiguity type-checks by pointing to candidates.
[33m887dc78[m Debug Info: Prepare everything for emitting he calling convention.
[33mef60e04[m SILGen: Don't rescope cases unless they actually bind variables in a specialization.
[33m910cbb2[m Fix a 'requires' that got away.
[33mc699b84[m [serialization] Add support for destructors.
[33me0301b6[m [serialization] Add support for UnboundGenericTypes.
[33m37d9ae4[m [serialization] Add support for extensions.
[33md1163af[m [serialization] Add support for [conversion] methods.
[33m02c6098[m LangRef: Update keyword list.
[33m070ee26[m Replace 'requires' keyword with 'where'.
[33m932d508[m Don't substitute shell arguments into our release announcements.
[33m0a14c11[m [serialization] Fix "not implemented" check for cross-refs to extensions.
[33m0afaa86[m [serialization] Add support for subscript decls.
[33m40a8694[m Fix some mis-uses of CurExplosionLevel.
[33m0040e5c[m Capitalize some field names.
[33m8f65923[m Rename newLowered* to setLowered*.
[33m127a0e6[m Privatize IRGenSILFunction.
[33m9b7ae1a[m [serialization] Handle archetypes unified by a constraint.
[33mceb3495[m DebugInfo: Add support for the [objc] attribute for classes.
[33me3999dd[m [serialization] Handle absent protocol conformances.
[33mbb2046c[m (De-)serialized ProtocolConformance::DefaultedDefinitions.
[33mb9aca28[m REPL: Outdent 'case' labels on entry.
[33mf430dcc[m Properly specify dependencies for libAST and libParse
[33m5639fa8[m Remove the initializer for NamedTypeRepr; types don't have default values.
[33m378ebaa[m Advertise 'switch' in next week's release notes.
[33mdd1208c[m LangRef: Update 'switch' statement description.
[33mb62b376[m LangRef: Clean up some grammar and phrasing.
[33m61060ba[m Eliminate the type-checking pass that resolves default arguments in tuple types.
[33m50d6fd0[m Lock down on the use of default values in patterns and types.
[33m4078785[m Turn SILLocation out of typedef and into a class.
[33m2e4170e[m Add the first SIL-based waring - "missing return"
[33mc315b35[m Add SILLocation to the SILFunction and to the UnreachableInst, which represents falling off the end of the function.
[33m85ff034[m Move isVoid() helper from SILGen to Types.
[33m3df3878[m [AST/TypeRepr] Address feedback by Doug.
[33m8992c68[m Diagnose the use of a module as a type reference, instead of crashing.
[33md5dd3ed[m LangRef: Describe the magic default argument behavior of __LINE__ etc.
[33mb2d8226[m LangRef: Describe the new pattern forms.
[33m44541c8[m IRGen: Lower SILBasicBlock address arguments to LLVM PHI nodes.
[33m1080533[m SILGen: Emit case bodies in their appropriate scopes.
[33ma4967ee[m Debug Info: Represent classes as structure_types with their runtime language set to "Swift".
[33m0e63c4a[m Extract a ReferenceTypeInfo subinterface for refcount operations.
[33m9e7e805[m Builtin.ObjCPointer has reference semantics.
[33mb537d4e[m Fix grammar: remove a reference to the non-existent expr-func
[33mc0924c2[m Correct the grammar for magic literals
[33m7dcbba7[m Silence an "unused variable" warning in NDEBUG build
[33m3b35451[m Add a test for auto-casting 'nil'.
[33mca6f081[m [serialization] Add support for oneofs.
[33m1564fa7[m [serialization] Fix potential fall-off-the-end issues.
[33mb4fe4f0[m [serialization] Handle computed properties with a getter /and/ setter.
[33m9a67bc5[m [serialization] Add support for classes.
[33mf24add3[m SIL: Give Unreachable instructions SILLocation info.
[33mdeab9bb[m Typo in LangRef anchor link.
[33mf65aed2[m Add a %swift-ide-test variable to tests and ensure that it is set on the buildbot
[33ma40fdbf[m Make 'in' a real keyword.
[33m3c5b12f[m Code completion: add a lot of infrastructure code
[33m4bbf608[m SILGen: Implement variable bindings.
[33mb061349[m Add a CMake option to control whether we build examples (on by default).
[33mee2fc97[m Remove spurious object file
[33m6e79ed4[m Per review, there's currently no need to reserve space for future expansion in this.
[33me62a251[m Move PrintingDiagnosticConsumer to libFrontend so that it can be resued in swift-ide-test.
[33m85231a5[m Remove || closures.
[33m99cc28c[m Remove object file from test directory
[33m78a011d[m Fix typo in new release notes.
[33mc0fc97a[m Update release package e-mail with the new closure syntax, 'nil' behavior.
[33me99a617[m Switch tests and the standard library over to the new closure syntax.
[33m43061a7[m Move NullablePtr from llvm into Swift.
[33ma70eff6[m Introduce TypeRepr and related subclasses, that is a representation of a type as written in source.
[33mf4f164c[m Add deserialization and stable encodings for ReferenceStorageType.
[33m87ef920[m Rewrite the storage type of a [weak] or [unowned] variable.
[33mdac2e60[m Improve the verification failure for arg/param mismatches.
[33md209863[m Rename Type::hasOwnership to allowsOwnership.
[33mfc0d478[m Inline buildSingleTranslationUnit() into its only caller
[33m63ff231[m Implement another new closure syntax.
[33mcb98234[m Allow the parser to persist after parseIntoTranslationUnit() returns
[33mad9875c[m [serialization] Add support for ArrayTypes.
[33me7aad15[m [serialization] Add block info for REFERENCE_STORAGE_TYPE.
[33m9443394[m [serialization] Mark some transient types as llvm_unreachable.
[33mb92a157[m Remove the llvm::MemoryBuffer member from Parser, it is not used anywhere.
[33m92523fb[m Silence unused variable warnings in NDEBUG builds
[33m7d3f33b[m [ASTDumper] Dump patterns as a tree, and more details from them (e.g. any Expr that may contain).
[33m5f9ff68[m Revert r5949: "SIL: Null-terminate literal instruction string data."
[33m378d2b3[m SILGen: Emit case block BBs as part of dispatch.
[33m18a9290[m Add ReferenceStorageType.
[33m3ea0fbf[m Basic. 1d 1i Add basic parsing and validation for the weak and unowned attributes.
[33m553f8c8[m Revise weak design per discussion.
[33m1bd300d[m SILGen: Get "fallthrough" back under test coverage.
[33mf7ad75f[m AST: Remove unneeded implicit subject var from SwitchStmts.
[33mfdd5b36[m [serialization] Handle fixity and assignment function attributes.
[33maa23023[m [serialization] Remove "isNeverLValue" flag.
[33mf0d783f[m 'var' comma syntax must not mix with get/set syntax
[33mda241e6[m SILGen: Eliminate PatternConstructor intermediate representation.
[33mbec3b0a[m [serialization] Add support for infix operators.
[33m2b0e969[m [serialization] Use lookupDirect to resolve cross-references to members.
[33m929d86b[m [serialization] Add support for prefix and postfix operators.
[33mb31e79e[m Sink InfixOperatorDecl's InfixData into Decl's bitfields.
[33m773153c[m Don't allow generic parameters to be found via qualified name lookup.
[33ma396406[m In Parser::parseTypeIdentifier don't treat ".(" specially.
[33m4de26b0[m Fix newly-introduced NL_Default.
[33mfc1c256[m Allow references to deduced associated types.
[33m5be7592[m Make buildSingleTranslationUnit() an implementation detail of libFrontend
[33m7e7409a[m Use nullptr instead of '0'.
[33m78d9045[m Organize existing SIL tests into SIL/SILGen subdir.
[33m6d0b858[m [serialization] Restructure function template to work around ToT Clang bug.
[33m184db64[m Don't create a lexical block file for empty filenames.
[33m1c0233e[m Move lib/Parse/{Parser.h, Scope.h} -> include/swift/Parse/
[33m6d4d0ee[m SILGen: Fix typo.
[33m03f7c3e[m [serialization] Add support for slice types and variadic functions.
[33m20e85d4[m SIL Parser: parse class_method.
[33m666be0f[m SILGen: Match 'is' patterns.
[33m945a481[m Debug Info: Forge a name getters and setters using their parent declaration. Fixes rdar://problem/14346129.
[33ma63c78b[m SIL Parser: parse protocol_method.
[33m19de83b[m When unqualified name lookup finds a type within a base class, substitute the generic arguments used for the base.
[33mdc0c502[m Add a comment about how to emit the size of basic types.
[33m09e64a0[m Resolve unbound generic type references within their definitions.
[33m39e9365[m Implement support for parsing operands that reference alloc_box results (and other instructions that produce multiple results).
[33mdd60511[m use parseValueName to simplify code.
[33m063b1da[m Apply Manman's patch to add lexer support for SIL # and ! tokens.
[33mdf9ae62[m parse the alloc_box instruction.
[33m2a4dfc1[m Rename swift-index-test -> swift-ide-test per Doug's suggestion
[33mc742121[m Factor out logic that creates and configures all objects required for compilation into a 'Frontend' library.
[33m2d2b5c8[m Unbreak unittests/Parse autoconf build
[33m08dc2c8[m Add a makefile for swift-index-test
[33m303cef8[m Allow for line tables to switch to a different file in the middle of a lexical scope. This is not yet a proper inlined scope.
[33m6f526e3[m Make the line table more contiguous by reusing the last location if have no line information but are still in the same scope.
[33maa2d1b2[m [serialization] Handle PolymorphicFunctionTypes more carefully.
[33md8414ee[m Remove suspicious assertion in SIL/TypeLowering.cpp.
[33meb9a1fe[m [serialization] Handle oneof and class types (but not decls).
[33m637c4e8[m Fold Interpreter and Interpreter/SIL tests.
[33ma5a64fc[m SILGen: Elide rows prior to a pattern ctor's first specialization.
[33m3dae5b3[m Explicitly checking conformance to a protocol erases any negative results.
[33m5240e9a[m Remove Vec4b/Vec4f. They can be added back when someone gives them more thought.
[33mdc7ab3e[m Clean up remaining ReST errors in our documentation
[33m05eeba9[m Turn on ReST error checking in CMake documentation builds
[33m2c49592[m Mangle declarations imported from Clang with the context SC.
[33m2f03310[m Don't prepend the current directory to an absolute path in the compile unit.
[33mb9dfab2[m Rename a driver test to something sane
[33mf7a03bb[m Fix CMakeLists for Parse unittests
[33m5488dc6[m Add test case missing from r6014.
[33mb418fb2[m [Type validation] Lock down on the use of unbound generic types.
[33me147e1a[m Initialize the DebugInfo field in the default constructor of Options.
[33mf394af8[m Reluctantly move the DWARF language identifier for Swift into the low range again (0xf).
[33m4a73ec1[m Address a bunch of review comments. Thanks Joe & Chris!
[33mb676295[m Add a comment for r6001
[33m16d8ddc[m Revert wrong changes, did not intend to commit all that
[33mb1b1c63[m Add a comment for r6001
[33m6e7d049[m Allow optionally to produce comment tokens when lexing and add a tokenize() utility function.
[33mfe8d9bb[m [Lexer] Make the order of parameters of the protected constructor significantly different than the public one.
[33m207a085[m [Parser] Mark an implicit constructor as such.
[33ma94819d[m Add ExtensionDecl::getBraces() member function.
[33ma789733[m [tests] Add a test for -dump-parse, now that its demise was averted.
[33m1406566[m If just doing non-type-checking parse, no need to auto import libraries.
[33maa19b42[m frontend: Perform capture analysis before SILGen in -i mode.
[33m889d3bf[m Build on case-sensitive fs
[33m7bc8d17[m Sema: Type-check 'is' pattern cast kinds.
[33m156d533[m Sema: Always resolve tuples as patterns.
[33mea20a3b[m SILGen: Match ExprPatterns.
[33m86d6e4b[m rework this test again to not rely on relative paths.  This should unbreak the bot.
[33me0afea9[m Sema: Build a full ApplyExpr for ExprPattern ~= operators.
[33m4cc4629[m move a helper file for a test into an Inputs/ subdirectory at Jordan's request.
[33m336a3c2[m SILGen: Match switches with tuples, wildcard patterns, and guards.
[33mce9c5c1[m [serialization] Add support for generic structs (and constructors).
[33m820c5a1[m [serialization] Serialize conformances for typealiases and protocols too.
[33m0054e58[m [serialization] Serialize protocol conformances instead of ignoring them.
[33mbcab0b4[m [serialization] Add support for substituted types and nested archetypes.
[33m5394643[m Fix a copy-paste error in SubstitutedType::getOriginal().
[33m197b696[m [serialization] Add support for generic requirements.
[33m61efdb5[m [serialization] Add support for generic functions.
[33me662ec5[m Re-export libobjc from swift_stdlib_core
[33m17827e9[m Disable debug information by default when in REPL mode.
[33m0c34b57[m Debug Info: Add basic support for global and stack-allocated variables and             their types. - DebugTypeInfo holds all type info we need to emit debug information. - Type info is limited to name, location, and storage size. - As a side-effect: verbose LLVM IR allocas in debug builds!
[33m3bc4e26[m Add a (currently empty) swift-index-test utility
[33m2ad6f72[m fix -dump-parse to not run type checking in the single translation unit case.
[33m23fbb42[m Rewrite validation of identifier types.
[33m7e466d8[m Rename HAVE_MODULES_SDK to HAVE_DARWIN_MODULES_SDK
[33m70246e8[m Move swift::buildSingleTranslationUnit to a new library, libFrontend
[33m5d175ef[m Don't try to get a StringRef from an empty identifier.
[33m90ddbfd[m Complain if we can't dlopen() a library in immediate mode
[33m4239e3d[m Mangle all Clang module contexts as "5__C__".
[33m293b3ad[m Remove executable property from a Makefile
[33mf428683[m Remove unused 'Body' parameter in FuncExpr::create()
[33m2311e4e[m Don't try to do delayed body parsing for a function that does not have a body.
[33m45fc367[m [serialization] Add support for protocol compositions.
[33mcc92da3[m [serialization] Add support for protocols.
[33m03074dc[m StringLiteralExpr: always include a good source range
[33mf478157[m Revert "Print source ranges of the AST nodes when dumping the AST."
[33m0a3fc1b[m Print source ranges of the AST nodes when dumping the AST.
[33m65342ac[m Change %swift.refcounted to correctly model HeapObject as of r5873.
[33m9026343[m Fix for case-sensitive filesystems.
[33m764dff4[m [serialization] Add the HasBuiltinModuleAccess hack to fallback modules too.
[33m1668a11[m Pack bitfields in Expr.  Pack FuncExpr::{Body, BodyTokenRange} in a union.
[33m0fdfc02[m IRGen: Trap on SIL 'unreachable' instruction.
[33m0b8f72b[m Introduce an artificial EOF in the Lexer
[33m0ac8c2b[m SIL: Null-terminate literal instruction string data.
[33m096ffc6[m Silence warnings in the release build
[33m6ab06fe[m Pull IdentifierType validation out into its own static function.
[33m1441258[m [serialization] Use member initializers for Serializer.
[33mcb45063[m [serialization] Don't special-case builtin types.
[33m1528454[m Zap unused diagnostic.
[33m612e03a[m Small ReST formatting correction
[33m8080661[m [docs] Printf.rst and printf.swift: a Text Formatting Proposal
[33m4277cfa[m Add tests for assertion routines
[33mdc702b2[m implement sil parser support for the rest of the unchecked conversion instructions.
[33mfefbe83[m Eliminate the unnecessary fallback to Slice#Type; generic Slice<T> works.
[33mbcf41bb[m Move the resolution of extension types, operator declarations, and superclasses into the type checker.
[33mf67ca6a[m [cmake] Enable LLVM_ENABLE_WARNINGS for standalone configuration.
[33me31bfa9[m Fix some -Wnon-virtual-dtor warnings.
[33m120ce20[m [cmake] Add 'Swift' prefix to unit test targets to avoid conflicts from clang targets.
[33m6283507[m Propagate const-ness from FuncDecl::getBody().
[33m8df5ab7[m stdlib/core/Assert*: prevent recursive assertions
[33m4a8a00c[m add parsing support for the rest of the checked conversions.  No testcases, poo poo.
[33m77848da[m Don't rely on overload resolution to find the right printing logic, just make things explicit.  No functionality change.
[33m6228e22[m Sketch out an improved 'import' syntax.
[33me51b88c[m add silparser support for checked cast instructions, with downcast as an exemplar.
[33m6b4d262[m silprint the type of the operand to checked conversions, improving parsability.
[33m4159190[m Change the syntax of SIL cast instructions to use the 'to' keyword. This is better for uniformity with store and also is less of a punctuation soup, making things easier to read.
[33m40fb0e7[m Introduce a simplified entry point for looking up a member type.
[33mcd5c533[m add silparser support for upcast.
[33m6c4b37f[m make class_method and protocol_method print the type of the object value being referenced, a step towards parsability.
[33med28231[m Have the type checker explicitly set the list of protocols
[33mfec44b2[m silence signed comparison warnings.
[33md237ece[m Move NameLookupOptions t Module.h.
[33m1239757[m [Name lookup] Move ASTContext::lookup to Module::lookupQualified, where it belongs.
[33m22c52c3[m Sema: Type-check ExprPatterns using ~= overload resolution.
[33m03aa558[m implement alloc_ref and ref_to_object_pointer
[33mefaf4f6[m make the conversion instructions print the type of both the source and destination, so we can parse them.
[33m9f5145b[m silparser support for project_existential and destroy_addr.
[33m76e15b8[m make the SIL parser put basic blocks in the order that they are defined, not the order they are referenced.  Fix a testcase to use control flow instead of producing invalid SSA to test forward refs of values, fixing a FIXME.
[33m5ac61b6[m add testcase for unconditional branch, which exposes a bug: the wrong mneumonic was used.
[33m9e5e077[m implement the "when expanded from a default argument context, use the location of the call, not the magic identifier" semantics, completing rdar://14315674
[33m5ef2ad7[m rearrange this so the optimizer will jump thread it.
[33m2fe98e1[m implement basic __FILE__, __LINE__, and __COLUMN__ magic identifiers.
[33m8d6eb93[m autogenerate our lexer identifier table from our perfectly good .def file we already have.
[33m6f07fee[m Fix warning about bool-to-pointer conversion.
[33me529af8[m Minor cleanups to comments, simplify code in the parser by merging some if's into a switch.
[33mb13c501[m implement proper name binding and resolution of global sil function names, including diagnosing redefinitions, use of undefined values, handling forward references, etc.
[33mce5eb80[m Parse: Case blocks matching multiple patterns can't bind variables.
[33m20229fb[m Introduce infrastructure for maintaining per-translation unit SIL parser state across invocations of the parser.
[33me64e305[m more minor cleanups, no functionality change.
[33m5197571[m clean up the top level parser loop a bit: there are two scenarios here that were (incorrectly) folded on top of each other: 1) multiple file mode, and 2) parser pumping mode.  These modes were incompatible with each other (and don't make sense together) so have the compiler reject attempts to make use of them, and detangle the two cases from each other so that the flow is more clear.
[33m1c0a1c4[m Every client that does type checking also does name binding.  Doug wants to pull the later into the former anyway, so simplify the clients by not exposing name binding to them.
[33mdad8895[m Sema: Re-enable 'fallthrough' statements within switches.
[33mfd473a8[m Sema: Type-check switch subjects, case patterns, guards, and bodies.
[33mbec6388[m Sema: Resolve tuple patterns.
[33mf6d1999[m Parse: Introduce pattern vars into case scopes.
[33mdff8813[m Parse bare identifiers in 'var' patterns as new variables.
[33m4e982aa[m Quiet warnings about TreeScopedHashTable forward-declared as a class.
[33m260ac15[m stdlib: split the Process class into a POSIX-dependent (EnvironmentVariables) and POSIX-independent (CommandLineArguments) parts
[33m8cc8ca9[m Fix a warning: declare TreeScopedHashTableScopeImpl as a struct consistently
[33m8b7b85f[m stdlib/POSIX: add getopt() bindings
[33m0e26015[m Splitting the standard library: move POSIX declarations from stdlib/core/Misc.swift to stdlib/POSIX
[33m6dcaaa9[m Splitting the standard library: rename IS_STDLIB -> IS_STDLIB_CORE to reflect the reality
[33ma99df7a[m [Name lookup] Eliminate MemberLookup in favor of ASTContext::lookup().
[33mea43c46[m Splitting the standard library: move runtime -> stdlib/runtime
[33mf73d866[m Implement delayed parsing for function bodies
[33m149ebb0[m Debug Info: Associate the remaining artificial functions with their debug scopes.
[33m77e43c2[m Splitting the standard library: move objc -> stdlib/objc
[33m187f80c[m [Name lookup] Introduce ASTContext::lookup() for name lookup into a type.
[33m2d92338[m Splitting the standard library: rename swift_stdlib.dylib -> swift_stdlib_core.dylib according to the directory name.
[33ma4589b1[m Splitting the standard library: push the build system down to stdlib/{core,POSIX}
[33m43137f1[m Fix warning: use an unused variable
[33m2994801[m [Name lookup] Eliminate ConstructorLookup, inlining its behavior
[33mae9bd93[m Debug Info: Generate scope information for many more builtin/artificial functions.
[33me767497[m Basic runtime support for weak references
[33m4554961[m [Name lookup] Introduce a lookup table into each nominal type declaration.
[33m8b2cf98[m SIL Parser: parse branch and condbranch.
[33mcd78798[m switch some tests off of -dump-parse, which I'm going to remove.
[33mc103a61[m Use multiple argument form of sys::path::append()
[33m90d0cf0[m [Name lookup] Make MemberLookup stop filtering out static methods when looking into a type.
[33ma4acfaf[m Splitting the standard library: build the POSIX library separately
[33m387f08b[m Splitting the standard library: move stdlib/core/POSIX/ -> stdlib/POSIX/
[33mbc2d7e6[m Splitting the standard library: move stdlib/core/{Makefile,CMakeLists.txt} -> stdlib/{Makefile,CMakeLists.txt}
[33m4bc9ac4[m Splitting the standard library: add stdlib/Makefile, stdlib/CMakeLists.txt
[33m29cebdf[m Splitting the standard library: step 1: move stdlib -> stdlib/core
[33mceb32c2[m Debug Info: Attach (some of the) functions without sources to their scopes. Various cleanups.
[33m05452e0[m Replace MemberLookup with TypeChecker::lookupMember() throughout the type checker.
[33mce77714[m SILGen: Raise an error when cast*ObjectPointer are used incorrectly.
[33mc375617[m Address a couple of Joe's comments.
[33m9b1fa47[m SIL: include function name in verifier failures.
[33m8287a50[m ABI: Update with mangling for Builtin.Vec* types.
[33m9d43283[m Mangle: Always mangle decl contexts.
[33mcb8a9f9[m Fix handling of unmatched right parens in the REPL
[33me10ca4c[m Verify SourceRanges on Patterns and fix bugs uncovered by this
[33mc03d445[m implement support for a new [stdlib] attribute that can be slapped on an import decl.
[33m5ffcdae[m [stdlib] Replace String storage with a reference-counted buffer with capacity
[33m2e0ff6e[m [stdlib] Add HeapBuffer: a reference-counted buffer of dynamic size
[33m4723c7b[m some more typographical changes.
[33mefd1cf4[m Parse patterns in expression position as UnboundPatternExprs.
[33maf78ddb[m fix some rst formatting issues.
[33m675de63[m Parse matching pattern specific productions at top level.
[33m9efaf1d[m [Constraint solver] Limit the search for type variable bindings based on conformance constraints.
[33m5347041[m Revise the weak design in response to comments.
[33m3e2194a[m IRGen: Quell initialization order warning.
[33m45a6915[m Parse: Parse switch statements (again).
[33m2cfd14b[m Parse: Stub out parsing of matching patterns using expr parser.
[33m10f136f[m Parse: Remove 'OtherThanAssignment' from 'parseStmt'.
[33mc18abe1[m add newline
[33ma63a840[m Use nonstatic member initializers in ScopeInfo.
[33ma4e22e7[m Actually initialize ScopeInfo::ResolvableDepth.  Everything just happens to work because only the relative value matters -- we only increment, decrement, and compare it with old copies of itself.
[33mde32b20[m Debug Info: Add support for subprograms. This means that single-stepping in lldb actually works now!
[33m756822f[m Remove unneeded reference from template function type.
[33mb5d6103[m AST: Add an UnresolvedPatternExpr to parse patterns in expr position.
[33m53221db[m AST: Add 'VarPattern' node.
[33m3cfe492[m Make Scope class more opaque; it is just a helper object for ScopeInfo.
[33mefffe5c[m Don't add names to non-resolvable scopes
[33mc293dca[m Parse: Make some code more LLVM-ish.
[33m9a5c96a[m Introduce basic support for LLVM vectors as builtins.
[33m59e803e[m ClangImporter,SIL: Bridge ObjCBool to Bool.
[33m5bc7242[m Followup to 5815: rename ParserState to ParserPosition.  Missed a function and a variable that used the word 'State'.
[33m6eedf59[m Rename ParserState to ParserPosition.  A facility to restore parser *state* (for example, the scope stack) will be added soon.
[33m27abcf4[m Don't use PathV1.h in swift!  It is gone in LLVM now.
[33m647421a[m ClangImporter: Rename 'BridgedTypes' to 'MappedTypes'.
[33ma7db082[m Parse: Re-allow '_' in foreach statement patterns.
[33m5c661f3[m push global reference parsing forward a bit, diagnosing a type error.
[33m71be5c9[m fallthrough is a control flow transfer too.
[33m1259e32[m - Update LangRef to mention stmt-break/continue/fallthrough.  Factor the stmt   grammar description in LangRef and the parser to expose a new stmt-control-transfer. - remove obsolete comment in ParseStmt.cpp talking about stmt-brace.
[33me460a01[m Remove the 'UnresolvedCallPattern' I stubbed out.
[33m27009ac[m rework handling of -parse-stdlib to make it orthogonal from the mode we're in, with the specific goal of making it work with -i.
[33mba5d752[m Parse: Reserve '_' as a keyword.
[33m2db1765[m Debug Info: Wire up the CU's main file to point to the the first input file passed on the command line.
[33m25c1a26[m IRGen: Use local type metadata for generic downcasts.
[33m511bb60[m Fix compile error with ToT clang
[33m9e465bd[m test: add the Builtin test back, now that REPL can use the Builtin module
[33mcace751[m Eliminate DeducibleGenericParamType.
[33m58d405e[m [Protocol conformance] Infer associated type definitions from other witnesses.
[33md6780df[m [serialization] Add cross-module decl references.
[33m0e4f6c6[m [serialization] Record dependencies on other modules.
[33m8deec52[m Rework AST representation of CaseStmts.
[33m5cf5772[m Debug Info: Wire up more compile unit metadata and clean up the code a bit.
[33mb9557b4[m Add a missing case to getSourceRange() and the testcase that triggered it.
[33m748732f[m [Protocol conformance] Establish a constraint system for matching a witness to a requirement.
[33mcbc09b7[m Zap unused field of TypeChecker that should never exist.
[33m693f8ee[m [Protocol conformance] Don't require the witnesses for an [objc] protocol to be [objc].
[33mf4c60bb[m [Protocol conformance] Parameter names are significant for Objective-C requirements.
[33m05203f7[m ClangImporter: Use ConstDeclVisitor and constify Clang's decls throughout the importer
[33ma719bbc[m Initialize struct to zero the C++11 way. Thanks, Jordan.
[33m53b2bbb[m [Protocol conformance] Reimplement matching of witnesses to non-type requirements.
[33m4f069b5[m ClangImporter: handle the new DecayedType type node correctly
[33mfb7e2c0[m Remove superfluous virtual keyword as pointed out by Joe's review.
[33m41f55c4[m CMake: Realized that -fcolor-diagnostics for Ninja is already being added by HandleLLVMOptions.cmake; removing this redundant definition again.
[33m5a83193[m Remove dead code from ASTWalker.cpp.
[33ma49dbfc[m Remove soon-to-be-obsolete 'switch' tests.
[33m7ba95cf[m Add AST nodes for refutable patterns.
[33m1040bfe[m In the REPL, allow access to the Builtin module if explicitly imported, there is no reason to deny it and it could be theoretically useful.
[33mf4a4fad[m [Protocol conformance] Test protocol conformance testing of function requirements.
[33m6bd8754[m Don't allow the global search of imported modules to include the Builtin module, wrapping up rdar://11187080
[33m85030ae[m Remove a stray selector-args production from the expr-super grammar
[33md7f74cc[m silence a -Wreorder warning.
[33m68e1df4[m Fix a couple more glitches that were uncovered by assertions.
[33m05976c9[m Fix a typo that I would have caught with an asserts build..
[33m0f7533d[m Debug Info! Add basic support for line tables, compilation units, files, and lexical scopes, which can be enabled through the new -g option. When -g is enabled, line tables and scopes compile all the way down to DWARF.
[33m1963817[m Add support for color diagnostics when using cmake/ninja.
[33mc7b3390[m Move the dumping visitors (PrintDecl/PrintStmt/PrintExpr) into one separate source file, so that they can easily share code, colors, and internal details.
[33m353b9f2[m Remove forward reference that is in the wrong namespace.
[33m20a8868[m [cmake] Support a not-standalone (in-tree) cmake configuration.
[33m95163ff[m introduce a new TranslationUnit kind for .sil files, and use this to guard access to the Builtin module (on one path), reducing the number of ways non-stdlib and non-sil files have access to the builtin module.
[33mfbc87d7[m Add a const and non-const variants of DeclContext::getASTContext(), so that the const one propagates constness to the returned reference.  Thanks, Argyrios!
[33m5b86d10[m Costify DeclContext::getASTContext()
[33mf4d6053[m Fix typo in 'getStateForBeginnigOfToken'
[33mc2a7b64[m buildbot: Always enable assertions in LLVM.
[33ma2ddd4e[m Refactor lexer backtracking.  Introduce opaque types that encapsulate lexer and parser state.  Backtracking will be used a lot when we implement delayed parsing for function bodies, and we don't want to leak lexer and parser state details to AST classes when we store the state for the first and last token for the function body.
[33m90f8483[m A two-arg constructor need not be explicit.
[33m46895cd[m Revert "CMake: Make sure RelWithDebInfo builds have asserts enabled."
[33m14467ee[m CMake: Make sure RelWithDebInfo builds have asserts enabled.
[33m1f57eb8[m [constraint-checker] On Doug's behalf, check in a fix for crashing on failure to look up Slice
[33mfad5c78[m Remove expr-func from the syntax of the language.
[33mcc3f228[m rework how autoimport happens.  Instead of being driven by what the source file imports in the first few lines, drive it based on the TU mode.
[33ma63dddf[m [serialization] Include BLOCKINFO block even in Release builds.
[33m3bd556a[m [constraint-checker] Fix an assertion
[33m6a629c9[m Add -parse-stdlib to CMake as well.
[33md6801fe[m [serialization] Fix a recursive-dependency bug caught by previous commit.
[33m5e0d3f1[m Add some serialization debug guards.
[33mc957a28[m [serialization] Add support for lvalue types and pattern binding decls.
[33mb57c8c4[m [serialization] Add support for metatype types and constructor arguments.
[33m3b07d4e[m Make Pattern (more) const-correct.
[33m2300d7a[m [serialization] Add support for function arguments.
[33mae2053b[m rename TU_Kind -> TUKind
[33me8bf1dd[m expand the TranslationUnit kind to handle "standard library", and plumb it through the compiler a bit.  This simplifies some code in the driver, but should not induce any behavior change (yet).
[33mbc903a5[m Add a new -parse-stdlib command line option to better model autoimport of swift vs builtin module (moving towards rdar://11187080).  When swift ultimately has "project files", this bit will come from there, until then it is best to come from the command line.
[33m8fde18e[m Don't allow [objc] protocols to refine non-[objc] protocols.
[33mf072c48[m Refactor cast representation in AST and SIL, and implement 'is'.
[33mbe0f7b4[m Wire up initial support for function_ref, allowing us to SILParse the code for "return 4".
[33m8d53e68[m switch function_ref/builtin_function_ref/global_addr to print their referenced symbol with the name, followed by a colon, followed by the type instead of the type first (following local value references).  For example, instead of:
[33ma5c7c65[m Move around the logic for handling autoimport of the swift standard library.  We use the same (somewhat broken heuristics), they are just implemented in another way.
[33mdf230cd[m SIL: Add verifier checks that function conversions preserve cc.
[33ma56be72[m SILGen: Set [volatile] attribute on ObjC method dispatches.
[33m8c39959[m Add infrastructure to easily map C types to swift stdlib types when they are binary compatible.
[33m706ceff[m generalize call parsing to also handle partial_apply
[33m0339b75[m REPL: Fix printing of containers embedded in structs.
[33m9cf535b[m after parsing an applyinst, actually create it!  We can now silparse the sil for this function:
[33m2c1bbdb[m REPL: Substitute type parameters from outer generic structs.
[33m88e8f02[m Start parsing SIL apply instructions.  Right now, they are dropped on the floor because I have to run.
[33m42be459[m IRGen: Protocol types are always Fixed-size.
[33me822788[m docs: new document: Swift Coding Standards
[33ma6e8802[m Dump the 'in' pattern of a ForEachStmt.
[33m5688886[m CMake: rebuild sources in 'objc' directory whenever stdlib changes rdar://14163811
[33m4aa4f66[m rename this test so we can generalize it.
[33med088d8[m remove a dead variable
[33m8852bb4[m Parse: Don't artificially require parens around function type arguments.
[33mb057585[m IRGen: Treat class archetypes and protocols Fixed for layout purposes.
[33m6033517[m Add tests for floating point -> int bitcast builtins
[33m93be189[m [serialization] Add support for niladic function decls.
[33ma3cd729[m [serialization] Add support for FunctionType.
[33md08d4a6[m Remove the release build caveat about protocols.
[33m96d3869[m Sema: Reject generic-to-concrete casts that can't succeed.
[33m37c36cf[m SILGen: Annotate naked intentional fallthrough.
[33m111d3af[m Enable missing-newline-at-end-of-file warnings in Xcode builds.
[33m9442b7f[m runtime: Fix unintended fallthroughs in swift_dynamicCastIndirect.
[33m589ff56[m Add interpreter test for archetype and existential casts.
[33m062fbf7[m Don't crash mangling single-protocol<T> types.
[33m470cb9e[m IRGen: Implement opaque archetype/existential casts.
[33mdbf4154[m [serialization] Add support for TupleTypes.
[33mce84b18[m [serialization] Add support for ParenType.
[33m89c343d[m runtime: Add dynamicCastIndirect* runtime functions.
[33me129ad2[m Recursively consider ObjC protocol conformances.
[33m49e7efa[m Sema: Don't crash checking null conformance if ObjC conformance fails.
[33m54898bf[m IRGen: Leave inherited ObjC protocols out of protocol witness tables.
[33m4db5b84[m Oops, 'requiresClassExistential' -> 'isClassExistential'.
[33ma55f246[m Remove the controversial "bounded" from "class-bounded".
[33m665cbf5[m IRGen: Implement conversions between class protocol types.
[33mf5101dd[m Stop trusting the inliner to handle trivial 'size()' method calls.
[33mdffab88[m IRGen: Put other contexts' objc conformances in extension categories.
[33ma206b32[m add support for Builtin.bitcast converting between fp and integer builtin types. This implements rdar://14193818
[33ma093212[m SILGen: Emit thunks if an ObjC extension conforms w/ non-ObjC methods.
[33m0019e96[m REPL: Fix REPL printing via ".className()".
[33ma3e3ad5[m Simplify AST when referencing a member of an existential.
[33mc776112[m Don't permit implicit protocol conformance for archetypes or existentials.
[33m254bc26[m SIL: Allow cast/bridge builtins to be used with class archetypes.
[33m514d659[m IRGen: Emit categories for extensions that conform to ObjC protocols.
[33m8943253[m Make most of the standard library types Hashable.
[33m6fa2efa[m stlib: Introduce a LifetimeManager -- a class to emulate precise lifetime. This is needed to ensure that the objects are not deallocated when they are passed as UnsafePointers to C APIs.
[33m1deb3a9[m Sema: Propagate ObjC-ness of protocol mappings at type-checking time.
[33mbec09c3[m SILGen: Emit ObjC thunks for methods conforming to ObjC protocols.
[33m287da56[m [Constraint solver] Explore types that conform to each required protocol.
[33meafc671[m Fix documentation comment
[33m21fa392[m enable -Wdocumentation by default in the makefile build.
[33m56a4220[m IRGen: Use superclass repr and refcount for superclass archetypes.
[33m8a5cec7[m ClangImporter: Enable import of objc protocol types.
[33m70a9639[m IRGen: Fix off-by-one in class-bounded existential metadata size.
[33meb8657f[m [serialization] Unique identifiers and serialize them into a blob table.
[33m255f027[m stdlib: Char: simplify implementation, expose the value as UInt32 instead of Builtin.Int32, add tests
[33m96f819c[m [Constraint solver] Don't guess at type variable bindings that are guaranteed to be fully bound by other constraints.
[33mdd2dfeb[m AST: Save ProtocolConformances in TypeDecls and ExtensionDecls.
[33mad757cd[m [docs] More clarifications
[33mff5f41b[m Archetypes with superclass bounds are class-bounded.
[33mc97bab0[m General documentation corrections
[33mec12ee1[m [Constraint solver] Dump failures as part of --debug-constraints.
[33m500a027[m REPL printing for dictionaries
[33mf399ccb[m SILGen: Deinit existential after concrete value is cast out of it.
[33mad7c3ee[m SILGen: Calls to opaque existentials don't consume 'this'.
[33mdcc4140[m IRGen: Lower SIL DeinitExistentialInst.
[33m4ff8cd2[m IRGen: Abstract out an "unknown refcounted" concept.
[33m49fa673[m Remove CPointer<T>, it was almost equivalent to UnsafePointer<T>, but implemented pointer arithmetic.  Enhanced UnsafePointer<T> to do pointer arithmetic.
[33m543684d[m Clean up comments per review from Dmitri.
[33mc3e2afd[m IRGen: Implement class-bounded generic dynamic casts.
[33mc7f86f1[m SILGen: Emit generic dynamic casts.
[33m7420089[m SIL: Add instructions to represent generic dynamic casts.
[33mf2500d7[m Sema: Allow dynamic casts from generics to concrete types.
[33m34dc946[m IRGen: Get objc protocol erasure working.
[33maa075ad[m Sema: Match static-ness when checking protocol conformance.
[33mb2742a2[m Remove dead "invalid_implicit_protocol_conformance" diagnostic.
[33m8dc8a44[m Skip diags if checking class_protocol conformance for type-checking purposes.
[33ma491a3f[m ClangImporter: Emit metadata for imported protocol types.
[33me9cd5b2[m ClangImporter: Conditionally reenable import of ObjC protocol types.
[33mdd5626a[m Actually initialize the resulting dictionary when converting from a literal.
[33m61292d7[m IRGen: Leave ObjC protocols out of existential type layout.
[33m101522b[m Don't generate offensive words in our value witness mangling.
[33m54c6cb3[m IRGen: Emit ObjC archetype/protocol method calls.
[33m23ae370[m SILGen: Emit objc protocol method calls with ObjC conventions.
[33mc20eda7[m SILGen: Remove dead emit{Archetype,Protocol}Method helper methods.
[33m24acecc[m IRGen: Fix uninitialized "needs metatype" flag in WitnessTableBuilder.
[33m1adf43c[m SIL: Fix failures introduced by r5593.
[33md4f9579[m IRGen: Class-bounded generics don't need extra metatype data.
[33m044d40f[m Fix the build after Clang r183989: now clangDriver depends on LLVMOption.
[33mb1aff68[m Allow [class_protocol] protocols to be [objc].
[33m491de4f[m [Overload resolution] +1 for binding a literal expression to its default literal type.
[33m5711d09[m Associate locators with each of the type variables.
[33m7bf6d30[m Disambiguate imported functions and structs that have the same name.
[33m20bc09f[m Fix the build after Clang r183989: now clangDriver depends on LLVMOption
[33m731782d[m [Overload resolution] Penalize user-defined conversions at -2.
[33m12331f6[m [Overload resolution] Separate the scores for the systems being compared.
[33mf678700[m IRGen: Implement class-bounded existential containers.
[33mf7cc014[m Explicitly include PathV1.h where it is used
[33mf7cde83[m Improve overload resolution with a simplistic scoring system.
[33m720cb93[m LLVM's PathV2.h has become Path.h. Update includes appropriately
[33m5c8c9f9[m IRGen: Tweak witness 'This' binding to allow class-bounded archetypes.
[33mcb2e800[m LangRef: Update stale language about cast operator syntax.
[33m00f9494[m IRGen: Remove dead variable from getCallEmissionForLoweredValue.
[33m310bbdc[m Non-class types *cannot* conform to class-bounded protocols.
[33m087803f[m IRGen: Implement type info for class-bounded archetypes.
[33m7d322fc[m "class-bound" -> "class-bounded"
[33m05508d1[m Add FIXME.
[33m3341e11[m Initialize a variable to make the analyzer happy.
[33mee99254[m Add llvm_unreachable() to silence uninitialized variable warning from the analyzer.
[33ma6a3cb5[m Remove unused variable 'isNamed'.  Not sure if this is still needed, but it wasn't used.
[33m8876da8[m Remove essentially unused variable.
[33m14c333a[m Add test case for serialized diagnostics.
[33m5358806[m LangRef: Note that '=' expr has void result.
[33m4479062[m LangRef: Update assign/cast operator descriptions.
[33m3de47b3[m LangRef: Remove outdated lparen/lsquare whitespace sensitivity talk.
[33me1b70c8[m SILGen: Method calls on class-bound existentials.
[33me1746bd[m SILGen: Use class-bound instructions to emit class-bound ErasureExprs.
[33m2ce2d33[m SIL: Add instructions for class-bound archetype/existential operations.
[33m2d2ee38[m Class-bound archetypes and existentials are reference types.
[33m27a4d0e[m Sema: Type-check class-bound protocols.
[33m952028c[m Parse [class_protocol] attribute on protocols.
[33mdfad177[m Document and demangle '_Tnk_' protocol witness thunks.
[33m87f6b96[m Mangle: Fix archetype depth calculation.
[33mfdb1033[m Fix protocol type mangling harder.
[33m32af869[m Demangler: Demangle protocol types and polymorphic types.
[33m075e003[m Fix mangling of single-protocol types.
[33mfbd041f[m ABI.rst: Fix inaccuracy in protocol list description.
[33m5e4db6f[m Remove useless dyn_cast
[33mf00baaf[m Add serialized diagnostic support for FixIts and Notes.
[33mc2cbd9e[m Add 'override' to member functions of ClangImporter
[33m44cde3a[m [serialization] Serialize DeclContexts, VarDecls, and StructTypes.
[33m8bd38ab[m [serialization] Blaze a straight-line path for no-arg constructors.
[33m413b2ae[m [serialization] Sketch out struct serialization.
[33mc8958a2[m Replace PointerIntUnion with a PointerUnion-compatible Fixnum type.
[33me4e1d63[m fix couple fixme's by having the SILParser make SILTypes directly instead of going through TypeConverter.
[33m2f6a59b[m Demangle: Demangle more types.
[33maeda419[m Fix indentation
[33mfdb470f[m Replace a stale function name in comment with \brief
[33m85f32c5[m Prepend the magic "\01" to asm names of Clang declarations.
[33mb86828f[m Implement basic overload resolution.
[33m01c80eb[m Produce a "diff" of type bindings and overload choices in a set of viable solutions.
[33m07b9ca7[m Remove workaround in SIL test module for <rdar://problem/13992215>.
[33mb4e68f1[m Head Clang's AsmLabelAttr when mangling the name for the Clang declaration.
[33m09b4b95[m Get serialized diagnostics breathing.
[33m8512777[m Parse 'as' and 'is' as sequence exprs.
[33m4dae2eb[m Remove Float{16,128}
[33m3e44152[m Replace Unsequenced* placeholders with partial AssignExpr/IfExpr nodes.
[33m6dcf8ae[m Parse assignments as part of expr-sequence.
[33m51c239e[m Hack-and-slash porting parts of Clang's serialized diagnostic printer over to Swift.
[33m63fdb43[m Wire up driver support for -serialized-diagnostics and make the consumer implementation private.
[33m05215ff[m Sema: Remove lingering uses of typeCheckAssignment.
[33mf0f8be9[m Sema: Typecheck AssignExprs within the constraint system.
[33mb4ef714[m Update stale comment.
[33me35aaec[m Wire up DiagnosticEngine to work with a chain of DiagnosticConsumers.
[33m746cbd6[m Start wiring up boilerplate for serialized diagnostics.
[33mcb1f81d[m Make assignment an expression.
[33m2606b7c[m Simplify handling of ternaries in SequenceExprs.
[33m78f7225[m Fix weird spacing
[33m452f956[m [Clang importer] Only import prototyped functions.
[33m68bcae9[m Match prefix/postfix attributes when matching witnesses to requirements in protocol conformance checking.
[33mdda2647[m If we have any "unavoidable" failures, diagnose them immediately.
[33mbd8e8b6[m Remove the last remnants of LiteralKind; it's no longer useful.
[33mac54740[m Remove literal constraints entirely; we use formal protocols now.
[33mad8d86b[m Switch dictionary literals over to the formal protocol DictionaryLiteralConvertible.
[33m331495e[m Switch array literals over to the formal protocol ArrayLiteralConvertible.
[33mdb62826[m Improve protocol conformance checking for generic types.
[33m8c88a49[m Make type validation slightly more robust by caching the result.
[33m70e1535[m When checking explicit conformance for a generic type, use the type as declared in its context.
[33m4350b9a[m Fix the builtin type from which integer and floating literals are created.
[33ma3f937a[m [stdlib] Never break the Makefile build again!
[33ma9a2bff[m SIL: Print index_addr operands with types.
[33mb1ef4f4[m Update description of generic type disambiguation in Generics.rst.
[33mb22fd22[m SILGen: Handle Builtin.gep as a SIL builtin.
[33med6b5ad[m SIL: Made index_addr index operand dynamic.
[33mb8a2426[m Introduce the formal protocol IntegerLiteralConvertible for integer literals.
[33m3e3e571[m Set proper DeclContext for ImplicitClosureExprs.
[33mae56951[m IRGen: Emit specialized partial_apply thunks.
[33m625f059[m Fix a few typos in documentation
[33m109290c[m Introduce the StringLiteralConvertible formal protocol for string literals.
[33mdbc314c[m Add a -use-malloc switch for memory debugging.
[33m0249a6d[m Identifiers only need two tag bits available.
[33m49dfa58[m REPL: Create a new MemoryBuffer for each input.
[33mb393311[m Unbreak Makefile build
[33m0cb8adb[m SIL: Force all SILInstruction allocations through SILModule.
[33mf4b2a59[m Introduce a formal protocol, CharacterLiteralConvertible, for character literals.
[33mb7b3e0b[m [stdlib] Add policies for Callable things as a workaround for <rdar://problem/13251236>
[33mc5da3b6[m [stdlib] Add Indexable protocol and adapters
[33m1c0dea7[m [stdlib] Add Ranges of Forward and Bidirectional values
[33m17e788e[m Open literal types as binding types, to provide [] sugar for arrays.
[33mb8bf08f[m Suppress warning in release mode
[33m87965ac[m When the index types of an Objective-C class's subscript getter and setter mismatch, don't build thunks for either.
[33m0959d96[m Sema: Pass DeclContexts down into expression type-checking.
[33mccc28d3[m Add some more DEBUG() noise to -i mode.
[33m6ea8add[m SILGen: Forward archetypes into local function contexts (take 2).
[33mb94f3bf[m Use conforms-to constraints to capture protocol conformance.
[33m0c9f506[m Switch string literal interpolation over to a conformance requirement.
[33m7497d86[m Introduce TypeChecker::getDefaultType() for "arbitrary" protocols.
[33m7de743d[m Revert "SILGen: Forward archetypes into local function contexts."
[33mf20d16a[m SILGen: Forward archetypes into local function contexts.
[33mcf0dd17[m Zap unused TypeChecker::getDefaultLiteralExpr(Expr*)
[33mb99375f[m Switch type checking of float literals over to the formal protocol.
[33m7a6e1df[m Introduce conformance constraints into the constraint system for float literals.
[33m94fa0d7[m Initial weak-reference design document.
[33m0bedc1a[m Move ctor archetype forwarding from TypeChecker to SILGen.
[33meb66514[m Consider ':' a separating character when lexing operators.
[33m56e8397[m SILGen: Avoid unneeded copy in address-only writeback.
[33mac20b61[m Migrate floating-point literals over to a formal protocol.
[33mdea2ad1[m Zap OverloadedSubscriptExpr.
[33m03196dd[m [Constrant solver] If a type binding to an implicit lvalue type fails, fall back to trying its object type.
[33mf191b24[m Remove unused enumeration type
[33mb98772f[m SILGen: Don't reevaluate subscript parameters on writeback.
[33m60c9ef6[m SILGen: Introduce writeback scopes for calls.
[33m8af1635[m Remove the old type checker.
[33m4e74c34[m Provide TypeChecker::convertToType(), based on the new type checker.
[33md0a80f1[m Sink isSubtypeOf and variants down into TypeCheckCoercion.cpp.
[33m0c27a9e[m Move TypeChecker::isLiteralCompatibleType() out of the coercion code.
[33m029d742[m Eliminate TypeChecker::buildMemberRefExpr().
[33m759ed9b[m Move still-useful routines out of TypeCheckOverload.cpp.
[33m12628a9[m Sink more routines and support classes into the "old" type checker files.
[33mf817094[m SILGen: Introduce writeback scopes.
[33m198e807[m Sink more TypeChecker routines into TypeCheckOverload.cpp.
[33m77b6ca8[m Sink several TypeChcker routines into TypeCheckOverload.cpp
[33me5cee91[m Zap TypeChecker::semaUnresolvedDotExpr().
[33m94b0e51[m Zap SemaExpressionTree.
[33m1333e81[m Factor sequence folding out of SemaExpressionTree.
[33m6743d9b[m SILGen: Route all lvalue expr emission through SILGenLValue.
[33m45bae16[m Eliminate TypeChecker::recheckTypes().
[33m0698ace[m Introduce "shallow" type checking for expressions.
[33m4f6ec0f[m Introduce TypeChecker::callWitness() to invoke a specific witness, and use it for the for-each loop.
[33m2f37121[m Zap unused callNullaryMethodOf() variant.
[33md5539ed[m Zap TypeChecker::semaSubscriptExpr().
[33m488733f[m Zap TypeChecker::resolveUnresolvedLiterals.
[33mf2df587[m Zap most of the type checker points with "Old" in the name, along with the statics they directly depend on.
[33me06f542[m Zap ExplicitClosureExpr; it was only used in the old type checker.
[33mc038ab9[m Remove -no-constraint-checker/-constraint-checker and the corresponding language option.
[33mfc382c9[m A one-tuple can be a trivial subtype of a scalar, but prevent tuple <-> scalar type matches when the source has a name that the target does not.
[33m31e19f0[m Constraint generation rewrites some already-type-checked expression nodes; make those rewrites stick.
[33m12c5999[m Strip out -no-nsstring-is-string flag and associated LangOptions bit.
[33mdcae46e[m Tighten up the checking of whether a user-defined type is a literal type.
[33mc0772ea[m When an expression fails to type-check, clean up the types in that expression.
[33m5e26198[m Tighten up the semantics of unchecked downcasts (x as! T).
[33m24c8e9b[m IRGen: Get correct type metadata address for empty tuple.
[33mdb5ab01[m Allow ASTWalkers to replace statements and expressions without visiting their children first.
[33mb50eb85[m Flip the -nsstring-is-string switch and update tests.
[33m66d4e68[m Disable ObjC property thunks for function-type properties.
[33mcdd709d[m Foundation: Add a String-to-NSString-bridging block shim.
[33m6b1915b[m Don't permit derived-to-base conversions to archetype types.
[33m0158f71[m When opening up the context type for a member, open up all levels of archetypes.
[33m51d2ca1[m When comparison between the parent types of two bound generic types fails, fall back to checking for conversions.
[33m2fa35b7[m [Constraint solver] Revert r5360, "Prefer type variable bindings to non-existentials."
[33m814ccd6[m Add Interpreter test using NSString bridging.
[33m11c7a3a[m ClangImporter: Bridge NSString objc properties to String properties.
[33m72e5305[m IRGen: Build method/property encodings based on bridged type.
[33m2bc0c70[m [Constraint solver] Prefer type variable bindings to non-existentials.
[33m9a8ff43[m runtime: Stub out metadata for Bool.
[33mdedb986[m SILGen: Map String to NSString in ObjC method thunks.
[33m07ea8a4[m print function calls with the type of the callee at the end.  Putting the type of the callee at the end is unusual but makes it easier to read the call.  We now get something like this, which makes it obvious what is the callee value and what are the arguments:
[33m5350849[m Parser support for retain/release/retain_autoreleased.
[33m3b82c89[m implement parsing support for the metatype instruction.
[33m8693c5e[m SIL: Emit String-to-NSString conversions.
[33me052f3c[m change the sil printer to print the type of the destination operand, producing something like:
[33m63557b5[m parse basic block argument lists.
[33m91140d8[m rename SILParserFunctionState to SILParser, no functionality change.
[33mdfef589[m implement generic support for parsing the [thin] attribute on function types. Switch SILType parsing to parse type annotations. This allows us to use thin functions in .sil files.
[33m56ded64[m - Implement parsing of load, alloc_var, and dealloc_var. - Fix SIL Type parsing of address types. - Remove dead siltype parsing logic for attributes like sil_sret   and sil_uncurry.
[33mc08a0e8[m remove dead code.
[33ma34f4ef[m parse integer_literal.  Parse and print tuple instructions with named elements in a way that we can not lose information.
[33m479cbd2[m don't require the basic block name to be present.  It is particularly annoying when hand writing tests for the entry block.
[33m686efc4[m allow naming local values in .sil files something meaningful, like %a.
[33mc801ea6[m diagnose use of undefined values.
[33m718eb46[m Initially, only record unavoidable failures when solving constraint systems.
[33m2e69c61[m Implement more reasonable local value name lookup:   - Allow forward references.   - Diagnose redefinitions.   - Diagnose cases where the use/def of a value mismatch type.
[33m7383d09[m add a new SILType::getAsString() method, to be used in diagnostics when printing SILTypes.  Bias the values in ValueToIDMap in SILPrinter so that uses of invalid operands will print as %-1.
[33m3db9fff[m implement SILValue::replaceAllUsesWith, fix a linked list manipulation bug in removeFromCurrent.  Clearly I would fail an interview manipulating linked lists :-)
[33mf10be3c[m Separate unavoidable failures from failures that occur under some set of assumptions.
[33m1e90f0f[m Make the "should we record failures?" question a parameter of constraint solving.
[33m2fb9d83[m Clean up the ConstraintSystem interface a bit.
[33m32ffdf7[m Migrate ConstraintSystem::SavedBindings into SolverState.
[33me320f4c[m Eliminate ConstraintSystem::State; it's no longer useful.
[33m221180d[m Factor the solving loop that attempts type bindings out of the main solver.
[33m44cdd1d[m parse and build tuple and return instructions.  Add a terrible hack at local name lookup.
[33m22a14d7[m simplify the ctor for SILBuilder
[33ma651436[m Port test/expressions.swift over to the new type checker.
[33m8f845b6[m Fix doc comment typo.
[33m878cc5f[m Hack: ignore loaded modules in immediate mode SILGen/IRGen.
[33m7a13e58[m [serialization] Hook up basic name lookup for imported modules.
[33m76b19d5[m [serialization] Deserialize typealiases and builtin types.
[33m9b712a2[m [serialization] Remove skeleton for sharing module decl/type IDs.
[33m4f2b0bb[m [serialization] Replace hand-rolled PointerUnion with simple wrapper.
[33m965035d[m [serialization] Load the decl and type offset arrays from the module.
[33mfc1cbf0[m [serialization] Serialize builtin types and typealiases.
[33mb81adff[m update for mainline llvm change, hopefully fixing the buildbot.
[33mbb82dac[m generalize parseToken to take an arbitrary argument list for the diagnostic when it fails.
[33m5743a12[m Allow for early type-checking that produces DotSyntaxBaseIgnoreExprs.
[33m5a94511[m When performing name lookup into a metatype, filter out instance-only members.
[33mbd217c9[m extend the general form of parseIdentifier to optionally return a SourceLoc, and use this throughout the parser.
[33m0f2853b[m this went with r5310.
[33mce314e5[m - introduce a form of Parser::parseIdentifier that captures a token location, requiring us to make the variadic templates a bit more specific.
[33m5d434c5[m move sil function parsing logic into the SILParserFunctionState class.
[33me39e446[m [Constraint solver] Don't allow access to existential members that involve associated types.
[33m455f581[m [Constraint application] Look through parentheses to see if there's a tuple expression we can munge.
[33mc419286[m [Constraint application] Don't build broken subscript expressions.
[33m1395d62[m [Constraint applications] handle user-defined conversions in string interpolations.
[33mbaab591[m [stdlib] Dictionary uses Optional<String> instead of relying on String nullability
[33m6dbab32[m [stdlib] Implement (and test) Vector<T>.takeArray()
[33m0dc5c66[m SIL: Move SILFunctionTypeInfo into a side table.
[33me3269a3[m Pick one name for 'getAbstractCC'.
[33m5e2779b[m SIL: Uncurry function types within the Swift type system.
[33m9d34624[m [Constraint solver] Don't attempt obviously-wrong tuple-to-tuple conversions when scalar-to-tuple might work.
[33m255b1f6[m [Constraint solver] Handle member references to variables of module type.
[33mca2b242[m Don't consider protocol types to be "always canonical".
[33m656083d[m Turn off debugging dumps when we're parsing imported sources.
[33m792af79[m Type check the condition of ternary expressions separately.
[33m4c0a0a2[m Turn off the fallback to the old type checker when importing swift.swift.
[33mf2b6008[m Collapse ConstraintSystem::SharedState; it's all shared now.
[33m3c3c56a[m [Constraint solver] Remove code unused in the current solver.
[33m2757544[m [Constraint solver] Use the new constraint solver, start deleting the old one.
[33mf05f4cb[m Tweak solution comparison logic to consider conversions as well as subtyping.
[33m6e1859e[m [Constraint solver] Introduce a workaround to avoid processing the same constraint twice during simplification.
[33m39d0d13[m Diagnose SIL BB redefinition errors, add a testcase to check error conditions.
[33m3fb5bcf[m implement name binding mechanics for SILBasicBlock's.
[33m0ad6fac[m Remove the basic block name field from SILBasicBlock.  The name is currently ignored and is going to be a private detail of the SILParser.
[33m8f4f906[m move the order of .swift files.  This order crashes the compiler.
[33mb2b4bf9[m [stdlib] Incorporate CodePoints; split tests out accordingly
[33m00c8099[m [Constraint solver] Initial work on a less horrible solver.
[33m55fe340[m optimize this to use std::next
[33ma1f4369[m switch a bunch of instructions (e.g. load) to print types for their operand. These are the instructions that don't require testsuite updates :-)
[33m02f02fc[m [overpedantic] Get plurality right in the # users comment, printing:
[33maacbf8f[m print the type of the operand to return and autorelease_return, print the element types of struct.
[33m1bdf645[m code cleanup:  - use interleave a bit more  - Inline printAsOperand() away.  - Introduce a "getIDAndType" method that prints both ID and type in the standard form.
[33mde0ab04[m change tuple instructions to print as "tuple (%0 : $Int, %1 : $Float)" so they can be parsed.  Drop the comman in struct instructions so they print as "struct $foostruct (%0, %1, %2)"
[33m38f19fe[m de-indent classes in this file and fit 80 columns.  No functionality change.
[33md2de474[m Add a public raw_stream inserter for SILType.  Change SILType printing to always prefix a printed SILType with a $.  Update SILPrinter to use this instead of manually adding $ everywhere.
[33m0c29450[m add a "container" version of interleave, use it in SILPrinter a bit more. No behavior change.
[33m98d708d[m In a SIL function body, lex %42 as a new sil_local_name token.
[33m12c7d01[m SIL: Write a function for uncurrying function types within the Swift type system.
[33meeb05ae[m Start working towards SIL parser support for basic blocks and instructions.
[33med2c094[m change the SIL printer to print return statements without parens around their operand.
[33mfc502b6[m Rename isPostfixExpr -> isExprPostfix and improve Doxygen comment.
[33mc10b1ce[m Allow trailing closures without pipes wherever we don't expect curly braces.
[33mbef989d[m [Constraint application] Convert the base of a member access base to the type containing that member.
[33m6130074[m Fix capitalization of llvm/Config/config.h.
[33mb2bd4d4[m Make IRGen and the runtime agree on the name swift_getFunctionTypeMetadata.
[33m826835e[m Kill outdated fixme.
[33m8993ed7[m Split 'C' and 'ObjCMethod' calling conventions.
[33me0527c8[m simplify resolveIdentifierType() in two ways: 1) a DeclContext doesn't need to be passed in, now that IdentifierType tracks it. 2) factor the code that sets Components to ErrorType out of the clients.
[33m8c85a49[m with the groundwork out of the way, we can now namebind types referenced by the SIL parser.  Add a test that covers both local types, and types that require looking through an import decl (Int, from the stdlib).
[33mefea0bc[m Simplify the Parser ctors to just take the TranslationUnit being parsed into, save this as an ivar.
[33m6a33a4d[m actually invoke filecheck in this test, ahem.
[33mf2e3af3[m Eliminate the "global" list of unresolved identifier types maintained by TranslationUnit.  This list existed solely to allow name lookup of an unbound IdentifierType to know its DeclContext.  Instead of indirecting through this list, just store the DeclContext in the IdentifierType in its uninitialized state.
[33md770cc3[m remove the isFirstPass argument from coerceToType, which is dynamically dead now.
[33m1fde9f6[m remove the diag::tuple_global_missing_type diagnostic, which printed as "a tuple type specifying the type of a global must explicitly state the type of each tuple element".
[33mb4eee19[m Switch the SIL parse to parse the file in a model similar to "immediate" mode for normal .swift files.  We basically parse batches of non-sil function decls, type check them as a batch, then process any SIL functions.  This allows us to have mutually recursive types and other things that are fully sema'd and that are referenced by SIL functions, without involving SIL functions too intimately with type checking.
[33m22610d5[m substantially improve error recovery for erroneous character and string literals. Before we'd emit multiple diagnostics and confuse the lexer in some really common cases (e.g. malformed escapes).
[33ma697922[m fix a logic error in parseList where it could drive off the end of the file and infinitely loop because it didn't realize that skipUntil doesn't always consume something.
[33m8707fa7[m [serialization] Add BCGenericRecordLayout, for shared layouts.
[33m6a0609d[m Use .swiftmodule instead of .sm for serialized modules.
[33mea0d503[m [serialization] Codify the bringup hack with a special note in the module file.
[33mb9b0789[m [serialization] Sketch out high-level decl/type serialization.
[33mcaf9d71[m another early return to reduce indentation, no functionality change.
[33ma790341[m Parse: Parse cc attribute on function types.
[33mb34a665[m Fix Optional assignment bugs.
[33m3b149ef[m factor out some code into helper functions to reduce the size of a huge loop.
[33mb4e7ab4[m use TypeLowering to produce SILTypes that make sense now that aggregates have been simplified.  This still isn't ideal, but is a lot better than what we had, and is waiting for SILFunctionTypeInfo to stop containing SILTypes.
[33m53338b0[m use early return to reduce indentation.
[33ma38747b[m remove parsing logic for SILType calling convention attribute, this is hoisted up to Type now.
[33mfcd7b06[m IRGen: Disregard uncurry level of property accessors when mangling.
[33mcbb3c2d[m TinyPtrVector is better than SmallVector for the expected case (no shadowing).
[33m7b58d0d[m Note that we should be resolving extensions earlier, but can't.
[33m94b651f[m Parse: Parse 'func +*/<T>(x:T)' w/o requiring a space.
[33m1641477[m Eliminate lookupExtensions() and the extension cache.
[33me203383[m Switch visible-declaration lookup to walking extension lists.
[33m8114ce1[m Use the list of extensions of a nominal type for name lookup into that type.
[33ma4ce448[m Move cc attribute from SILType to AnyFunctionType.
[33mdbdc9db[m Keep track of the extensions associated with a nominal type declaration.
[33maf3f2d2[m cache the (recursive) computation of SILType::isAddressOnly in SILModule to avoid expensive cases in extreme situations.
[33mc1a7c7e[m flip the sense of the isLoadable predicate to check for isAddressOnly at Joe's request.
[33m1f971f8[m Remove the IsLoadable flag from SILType, and the isInvalid() state for SILType. This frees up an extra bit in SILType, which we can expose to LLVM through PointerLikeTypeTraits.  Use this bit in a PointerUnion, which allows simplifying ValueBase, which happened to be the last use of the isInvalid() state.
[33m650fafb[m Switch "loadable" from being a bit in SILType to being a predicate function.  For now I'm not caching the result at all, and the old bit still stays around until other dependencies can get untangled.
[33m0b17473[m Remove SILCompoundTypeInfo now that we don't need it.
[33m409655e[m SIL: Split tuple/struct field accessor insns.
[33m2171b2f[m remove an inconvenient assertion (loadability will require a module to determine) which happened to be written incorrectly anyway.
[33m9a9acb1[m SILType::isLoadable is going to soon require a SILModule argument. Add it, and propagate this through other APIs that call it (like isAddressOnly and isTrivial).  No functionality change.
[33mca27f8e[m ... and the compiler accepted it ;)
[33m4d60bb7[m Implement trailing closure syntax.
[33m10ecccc[m Make Type's bool conversion explicit.
[33mb7f1601[m IRGen: Remove calling convention special-case in GenObjC call emission.
[33m19b9ad9[m SILGen: Use 'isObjC' bit on SILConstant.
[33m093f803[m IRGen: Remove now unneeded SILType::getSwiftType calls from GenTuple.
[33m59ef7ca[m Don't use source location information to distinguish single-expression closures.
[33m2138dc9[m Update LangRef with a discussion of the Ruby-inspired closures.
[33mfab984a[m Test and improve parser error recovery for closures.
[33m6e64ca6[m Treat '|' as a delimiter while parsing the signature of a closure.
[33mfd398e3[m add a public way to get a primitive SILType.  SILFunctionTypeInfo and SILCompoundTypeInfo already have public construction functions that unique in the SILModule.
[33m86d9c43[m Simplify the control flow in makeTypeLoweringInfo by handling lvalue types up front, eliminating the isAddress bool and stuff using it.
[33me40f09a[m remove a dead method, and move const to the "right" place per prevalent coding standard.
[33me4ccec4[m rename SILBAse.h -> SILAllocated.h and SILBase.cpp -> SILModule.cpp to reflect their contents.
[33mfa9adc7[m merge SILBase into SILModule, the only class that derives from it.
[33mf018610[m some obsessive formatting changes, 80 column fixes, etc. no functionality change.
[33m087d4c8[m Implement the parsing logic for SIL types (the SILType specific attributes). All of it is still dropped on the floor.
[33mbabc1ea[m change printing of SILType to make it more regular and parsable.  As usual, the hard part is updating the testsuite.
[33m6abe889[m IRGen: Push SILType through a couple layers of partial application.
[33m611a3a9[m Parse sil linkage types, and actually create the SILFunction parsed. This gets us prototypes parsing and printing, though types aren't correct at all yet.
[33mc431741[m IRGen: Use SILType in functions used for existential container insts.
[33m4b8f53e[m allow random clients to 'new' SILFunctions.
[33m285031c[m IRGen: Use SILTypes for utility functions used by conversion insns.
[33m3d2cd72[m IRGen: Push SILTypes into emitClassAllocation.
[33ma8a7e16[m IRGen: requiresExternal{ByvalArgument,IndirectResult} can use SILType now.
[33mea85e8f[m IRGen: Remove ObjCMethodSignature.
[33m63e2a60[m rename Module:: and Function::getContext to ::getASTContext()
[33m21a3b9d[m remove two helper forwarding methods from SILFunction one is dead, the other isn't helpful enough to persist.
[33m3facf74[m move SILFunction implementation goop out into SILFunction.cpp and make the SILFunction ctor public since SIL is an optimization IR, not just a transient by product of IRGen. :)
[33m2e7a6c0[m switch the specialize instruction to print its substitution list after a comma, and restore testcases to check the list.
[33m193e7c3[m IRGen: Kill CanType version of projectPhysicalClassMemberAddress.
[33m8303add[m IRGen: Get ObjC thunks from SIL.
[33mbde8f75[m wire up minimal sil function parsing (still not validating or creating a SIL function).  This introduces contextual lexing state for SIL function bodies for SIL-specific lexing rules.
[33m1f2eb7e[m switch the SIL printer to use // as its comment character instead of using ;
[33m192475a[m carve out a new file for the sil parser logic.
[33m42aa102[m Replace accidental compound literal syntax in assertion.
[33mf9c4046[m [serialization] Validate the control block -- is the module too new?
[33m3109d8c[m [serialization] Pull bitstream processing of modules into its own file.
[33mec1e47c[m Thread operator lookup through Module to ModuleLoader...
[33m803aa24[m Switch getGetObjectClassFn to use getRuntimeFn.
[33md5eb080[m Revert r5035 force_inline implementation.
[33mde60776[m rearrange how getRuntimeFunction works.  Instead of using a creation method to handle function attributes, just pass in a list of function attributes.  Among other things, things that were formerly calling createReadnoneRuntimeFunction to get nounwond, now make it explicit.
[33mce3fe3a[m Implement Ruby-inspired closure syntax.
[33md578430[m SILGen: Emit objc_msgSend-able thunks in SIL.
[33mca498e0[m More -Wdocumentation cleanup.
[33mc4c8887[m CMake: provide an option to use modules for the standard libraries.
[33mebcff96[m [serialization] Hook up a module loader that just builds a TranslationUnit.
[33m8372f46[m Factor parsing of pattern-tuple-element into its own routine.
[33m656892b[m Rename *Constraints functions to their natural name, and make the old versions "Old".
[33m42a4807[m Move convertToRValue into the new type checker.
[33m4d04095[m Implement convertToMaterializable in the new type checker.
[33me6d73bf[m Move isSameType() out of TypeChecker.
[33mee0cb9b[m Generalize our handling of known protocols.
[33meca8f48[m Move isCoercibleToType out of TypeChecker; only the old type checker uses it.
[33md8152fe[m [Constraint application] Handle substitution/conformance computation for member access directly.
[33mb439e49[m IRGen: Use SILTypes in field projection functions.
[33mcdf95e6[m IRGen: Use SILTypes when dispatching archetype/existential methods.
[33md2e18f7[m SIL: ArchetypeMethodInst doesn't need a value operand.
[33mb867592[m [Constraint application] Handle generic subscripts directly.
[33m667ef5d[m IRGen: Look up metatypes and class methods using SIL types.
[33m217cdb6[m [Constraint application] Handle existential and archetype subscripts directly.
[33m1ea5b4d[m [Constraint application] Start weaning us from semaSubscriptExpr().
[33m197c3e6[m IRGen: Strip unneeded parameters from IRGenFunction constructor.
[33mc012c2e[m IRGen: Add 'Callee::forKnownFunction' for SIL types.
[33m87d2a58[m Use the ArrayBound protocol for type-checking array bounds.
[33mafcb70e[m IRGen: Kill dead code for dealing with indirect callees.
[33m7cc9371[m Introduce the ArrayBound protocol for types that can be used as array bounds.
[33m223d025[m IRGen: Add getFragileTypeInfo and getFunctionType for SIL types.
[33md6ca87b[m [Constraint checker] Implement typeCheckCondition() with a constraint system.
[33md2233ab[m Remove unintended object file.
[33m757c0ae[m Track whether a type is POD and whether it uses inline or allocated storage in a flags word in the value witness table.  Pack the alignment into only 16 bits of this word.  Optimize tuple value witnesses based on whether they're POD and inline.
[33m462c960[m Demote emitLoadOfValueWitness from being API.
[33md8cdb01[m Switch IR-generation to generally traffic in alignment masks rather than raw alignments.
[33mf5eaf12[m SIL: Print function types with SIL representation.
[33mb8cf349[m [serialization] Change file signature to something non-ASCII.
[33m1d2dfdb[m [serialization] Push record layout info into a private header.
[33m566e9c9[m [serialization] Don't repeat the record code after the layout declaration.
[33m30068c6[m [Constraint application] Port convertToRvalue -> coerceToRvalue().
[33m25e67b2[m FunctionConversionExpr supports arbitrary conversions, not just subtyping.
[33m543c1d3[m Use the constraint system to determine subtyping relationships.
[33mf6822e8[m Fix -Wdocumentation issues.
[33m73b6269[m [serialization] Add a trivial Swift module loader.
[33md778303[m [Constraint application] Coerce object arguments without falling back to the old type checker.
[33m51329b6[m Remove XFAIL filed as <rdar://problem/13850286>.
[33m749f966[m Remove XFAIL filed as <rdar://problem/13850249>.
[33ma67e524[m Zap stdlib2; it's been XFAIL'd for a few weeks and isn't being used for anything now.
[33m2296bae[m Zap a few more XFAILs.
[33mfdb1197[m Remove very old demo example.
[33mb8a1e0a[m Remove interpolation parser recovery test; filed <rdar://problem/13850073>.
[33ma9c5ba9[m Remove XFAIL'd tests for which we have radars.
[33m1db6dcd[m [Constraint application] Remove the now-unused isAssignment flag.
[33m4112688[m [Constraint application] Disable the fallback to the old type coercion.
[33me1c8389[m Revert "Remove [objc_block] attribute from Swift type system."
[33m1e1b78e[m XFAIL'd testcases are uninteresting, especially when they take a long time to crash.
[33md50c91b[m [Constraint application] Push the explicit uses of the old type checker further into the shadows.
[33mf0fac9a[m Type-check string interpolations with the StringInterpolationConvertible protocol.
[33m5be5607[m [serialization] Write a BLOCKINFO block so llvm-bcanalyzer is useful.
[33m476c4d4[m [serialization] -emit-module: write out input file paths.
[33mc8ecd0b[m [serialization] Add a metaprogramming system for bitcode record layout.
[33m5e5172f[m Add a skeleton for the Serialization library and -emit-module driver action.
[33m0af7ae0[m CMake: add a group for top-level header files.
[33m5349f9e[m [Constraint application] Thread more locators through constraint application.
[33m0d42b78[m [proposals] Inplace.rst: fix ReST errors
[33m24af189[m [stdlib] Generators and Adaptors
[33mf1c2e50[m [Constraint application] Coerce via conversion functions.
[33mc1039b3[m [Constraint application] Move coerceToType() into ExprRewriter.
[33m3760891[m [Constraint application] Thread locators through coercions.
[33m7bea410[m Introduce a LoadedModule base class for ClangModule and SerializedModule.
[33m77ce3f3[m Add a DeclContextKind for Swift modules.
[33mbcf510e[m SIL: Remove 'getPreLoweredType' from SILType.
[33mccae995[m Use a list of module loaders instead of a single Clang importer.
[33m22859a1[m [Constraint checker] A solution should know about the constraint system it solves.
[33m38f13e5[m Remove [objc_block] attribute from Swift type system.
[33m044df29[m [Constraint application] Coerce function types.
[33mcac0ab1[m [Constraint checker] Eliminate one copy of the tuple shuffle computation code.
[33me114abe[m [Constraint application] Coerce tuples to tuples.
[33m70c486f[m Sema: Oh hey types can be found in non-type contexts too.
[33mc7f579e[m Add nounwind to most of the runtime functions.
[33mc75e1bb[m Sema: Correctly set parent type of local types looked up in context.
[33mc0a44f7[m IRGen: Reify SpecializeInst thunks.
[33m4d29236[m [Constraint application] Coerce scalars to tuples, conservatively.
[33m26b6be8[m SILGen: Calculate ownership for specialized types.
[33ma793099[m Add Zip.swift to the stdlib Makefile
[33m78cb201[m Add Zip2, which zips two Enumerables
[33m3f7bb97[m Sema: Use FloatLiteralType as sugar type of int literals used as floats
[33m036287d[m [Constraint application] Coerce values to auto-closure function types.
[33mc4b7c0b[m [Constraint application] Coerce to existential types.
[33m12b4a3c[m [Constraint application] Handle subclass-to-superclass coercions directly.
[33mfcb6af2[m actually remove this file.
[33m6c9c6c4[m revert r5028, re-eliminating Scope since its caching behavior is better handled by the LLVM IR optimizer.  Tuple metadata refs are now largely readnone, function metadata refs are already readnone.  There may be some left that are not, but they can be handled later.
[33mca0091a[m add a few "optimized" runtime entrypoints for swift_getTupleTypeMetadata that handle the 2/3 element cases specially.  These are not actually optimized at the moment (they just call into swift_getTupleTypeMetadata) but this could be done at some point.
[33ma7ae6e2[m Parse: Fix logic inversion in speculative type parsing.
[33m8abdeb7[m [Constraint application] Handle loads and requalifications directly.
[33m7b03a4d[m Move the constraint checker's type-coercion logic into Solution.
[33m86cb75c[m IRGen: Don't put opaque types inside struct layouts.
[33mc78b777[m Inability to check a type containing a type variable against for protocol conformance does not imply that the constraint system is unsolvable.
[33m401cbf4[m Add Optional.swift to the list of stdlib sources in the makefile.
[33mbc2fd84[m When creating substituted type for a SpecializeExpr, validate the type.
[33mfecf19c[m SILGen: Fix dominance bug in ternary codegen.
[33m82ef1ee[m Remove an over-eager assertion when setting the value witness table for an archetype.
[33m35993a9[m SIL: Actually verify instruction dominance.
[33m01e1240[m [Clang Importer] Map NSString* function parameters/results to String.
[33md313a4e[m IRGen: Remove debug dumps.
[33m8ac393d[m IRGen: Initialize protocol pointer in FindStructWitnessTableIndex.
[33m9a70c0e[m [Clang Importer] Refactor the handling of type import contexts.
[33m1706f91[m IRGen: Consider bound generic archetypes from substitutions rather than params.
[33md3a7903[m Fix merge regression.
[33mb56aa75[m Sema: Only add primary archetypes as BoundGenericType parameters.
[33mfce4c42[m Don't default-initialize properties; they have no storage anyway.
[33m6e2a99f[m Remove unnecessary commentary
[33m6337523[m Compute captures from the leaves up to the root.
[33m1a1d08a[m Use a comma-separated list for dumping captures.
[33m7c2f86d[m Prohibit capture of [byref] parameters.
[33m57002ac[m Remove byref(heap).
[33mf79e939[m SIL: Sever load-bearing links to the AST.
[33m63e73bf[m SILGen: Dumb typos.
[33mb818405[m Replace direct use of [[clang::fallthrough]] with a macro.
[33mdaa971d[m SILGen: Detangle 'makeConstantType'.
[33m635b84a[m Sema: Get metatypes for type member constraints inside addTypeMemberConstraint.
[33m253e24b[m SILGen: Factor out return expr evaluation.
[33m40f4ea1[m Update install-test-script for coercion syntax change.
[33m3d0616d[m SILGen: Don't emit cleanups if block is terminated.
[33me40d2f6[m SILGen: Implement basic force-inlining.
[33m2eb4ac5[m Parse [force_inline] attribute.
[33mef522f7[m IRGen: Fix inaccurate assert in PolymorphicConvention.
[33m15f4006[m remove stmt-brace.  If you need something like it for scoping purposes, you can always use "if true {}".
[33md91f785[m IRGen: Implement protocol typeof.
[33m0f6b7a9[m Rework our handling of "external" definitions created by the Clang importer.
[33mdf059d0[m IRGen: Revive scoped metadata caching, at BB level.
[33me6b2598[m SILGen: Fix SIL emission for protocol static methods.
[33m14cef05[m IRGen: Kill scoped metadata caching.
[33m2be26b3[m Make the deallocating destructor actually deallocate.
[33m24d44b0[m Have destroying destructors return 'this' back to the deallocator.
[33m16a640e[m runtime: Guard against recursive destruction in swift_release.
[33m1594d6c[m runtime: Work around GNU 'typeof' extension.
[33m9e0ecdd[m stdlib: add Optional<T>
[33ma2341a4[m Add Unicode symbol characters to operator charset.
[33m3725b4f[m Remove 'x.metatype' expression syntax.
[33m4be8d7c[m stdlib: Add 'typeof' as a stdlib function.
[33m2f27b10[m IRGen: Hack in abstraction remapping for trivial metatypes.
[33m08b6f87[m Add 'typeof' to value witness tables.
[33mcd179b5[m remove a dead function.
[33ma87df3d[m Robustness: parse incomplete hex in char escapes
[33mebecd59[m Fix weird spacing. No functionality change
[33m2f3e948[m Remove the ".(foo:1 bar:2)" message-send syntax.
[33m2c85604[m Remove the T(x)-as-coercion syntax from the type checker.
[33m6133119[m Add a Builtin.typeof function.
[33m7ed3285[m LangRef: Another small tweak.
[33mdedbc6d[m Update LangRef.
[33m02d6a04[m Remove 'new' syntax for class constructors.
[33mf3bb94c[m Clang importer: look through macros that simply expand to another macro.
[33me27deb1[m Remove the least liked of the message-send syntaxes, e.g.,
[33m4ee6c25[m Allow classes to be constructed without 'new' keyword in the old type checker.
[33mac7a1a5[m Respond to Chris's comments.
[33m7595d85[m a few more missing :'s
[33mc31773e[m some hopefully non-controversial edits.
[33m1b85d2d[m More revisions per brief conversation with Joe.
[33mccea002[m Allow classes to be constructed without 'new' keyword.
[33m80b7001[m Implement support for member initializers.
[33m5b4c31d[m reland r4968, with a bugfix to avoid breaking the lexer measuring token lengths. Original message: SIL Parsing: add plumbing to know when we're parsing a .sil file Enhance the lexer to lex "sil" as a keyword in sil mode.
[33mbd88397[m Update the pattern-matching proposal after thinking it over for a few months.  Discuss some of the stuff that we've currently got implemented as 'switch'.
[33m7f2c152[m Don't crash if no input filename was specified.
[33mbb0eada[m Inplace.rst: words about compiler features
[33me3f4d26[m Default-initialize instance variables at the beginning of each constructor.
[33mf026e44[m Integrate ternary parsing with precedence parsing.
[33mda64785[m Default-initialization should never fail at this point.
[33m443d94c[m Zap unused code for implicit default constructors
[33me8936de[m Don't suppress the ASTs generated via default initialization of builtin types.
[33mfde45ac[m Default-initialize variables that don't have initializers.
[33md94bb26[m Introduce implicit constructors for imported structs in the type checker.
[33maafe3bd[m revert r4968, it apparently breaks the world.  I'll recommit it when I have time to investigate.
[33mb503206[m SIL Parsing: add plumbing to know when we're parsing a .sil file Enhance the lexer to lex "sil" as a keyword in sil mode.
[33m7bf40e2[m Project a non-fixed-size initial element using a bitcast instead of a GEP.
[33m1013781[m Parse: Allow Unicode identifier characters.
[33m7b305c7[m SILGen: Fix crash when taking an address-only tuple argument.
[33md2a8cff[m remove an unneeded #include and some llvm:: qualifiers
[33m5b4519d[m Mangle operator fixity and tuple variadicity.
[33m0566088[m Move name mangling into SIL.
[33m2b220bc[m ClangImporter: Work around reentrancy bug importing enum constants.
[33m35f81da[m ClangImporter: Suppress importing no-argument constructors besides 'init'.
[33m0f01483[m Parse: Stop parsing ':' as line continuation char.
[33m69131c2[m Parse: Fix parsing of nested ternaries.
[33m2760b9c[m WIP: CodePoints range with access to first() element
[33m8edac12[m String: Regression test for <rdar://problem/13755786> Unicode boom
[33m3b39ac7[m Mark two .rst files as known to be missing tests
[33mb5c42d9[m SILGen: Consume address-only arguments in-place.
[33m268eb42[m Fix a bug with the SIL-generation of generic tuples.
[33mce0d0ae[m Use the same module cache directory as Clang
[33m1fec73a[m Untested support for tuples with generically-sized elements.
[33m8d793d3[m Tweak header comment in FixedTypeInfo.h.  FixedTypeInfo is part of the TypeInfo API.
[33mc74ad61[m Extract functions to work with value witnesses into their own file.
[33m13fbec4[m Extend IGF's emitMemCpy API to handle memcpy's of an unknown size.
[33m77b6255[m Add a pretty stack trace entry for a type (and a newline to the generic source-location printer).
[33m5cd2af7[m Add a newline after the pretty stack trace for a SILFunction.
[33m24c5553[m Promote emitTypeMetadataRef to being "top-level" IGF API.
[33m54e101c[m SIL: Give BuiltinFunctionRef its own instruction.
[33me1ddd5c[m Inplace.rst: COW
[33m503b627[m Inplace.rst: Review review
[33mac1a7b3[m IRGen: Walk local decls independent of SILFunctions
[33m0c59f06[m Inplace.rst: Review
[33md1f0d94[m docs/Inplace.rst: first draft
[33mf3b6f9c[m SILGen: Don't emit super_method for non-dynamic super calls.
[33m0f0dd62[m SILGen: Hook up emission of ZeroValueExprs.
[33me14ed81[m String-vs-NSString: Fix HTML and drop NS_AVAILABLE() noise.
[33m70e5ea5[m Document NSString methods that do not map to Swift strings
[33md04492b[m String-vs-NSString: Document why String does not have Range arguments
[33m8bdccdd[m IRGen: Clear up dtor special cases in SIL-IRGen.
[33md0e0911[m SIL: Add builtin_zero instruction.
[33m618d35a[m Ignore deprecated NSString APIs
[33m434e0e9[m Add a status column to track String progress
[33mace9586[m Reinstate the use of enable_if within SIL's UnaryInstructionBase using class templates rather than constexpr.
[33m65fc2b7[m Basics of dynamic struct layout.
[33ma23349c[m Add IGF::emitByteOffsetGEP to conveniently create a pointer at a dynamic offset.
[33m03c04d0[m Prepare StructLayout and StructLayoutBuilder for non-fixed layouts.
[33m80a82b6[m Abstract ElementLayout to work with non-fixed layouts.
[33mba54c97[m Move IsPOD_t and IsFixedSize_t into the IR-gen global header.
[33mc3eae4a[m Make it convenient to generate an undef address.
[33mea36e8c[m remove loadUnmanaged, it is now identical to loadAsTake.
[33ma91941b[m Introduce assignments into the implicitly-defined default constructor body.
[33m790248d[m Diagnostics: use builder pattern instead of streaming for ranges/fix-its.
[33m291380a[m Remove unnecessary wrapper for InFlightDiagnostic.
[33mc3b0320[m Only define the implicit default constructor if all instance variables are default-initializable.
[33me6cade2[m Make the definition of implicit default constructors lazy.
[33mee9ca63[m SIL: Add linkage and calling conv to SILFunctions.
[33ma2f8702[m Pattern Matching.rst: Formatting fixes
[33mcaeffd2[m Eliminate unused local variables
[33m36b02ac[m SILGen: Stub out implicit default ctor codegen.
[33m5ce1c78[m AST: Fix SourceRange assert for implicit default ctor
[33m1b21fdc[m Generate reference-style links when translating NS-HTML to .rst
[33m95f1f5b[m add scripts/ns-html2rst: converts Cocoa HTML doc into clean ReStructuredText
[33mb9561e0[m Introduce an empty, implicit default constructor into structs.
[33mf1e65b0[m Only introduce the implicit memberwise constructor when there are no user-declared constructors.
[33m80cfdf7[m Remove std::enable_if magic from UnaryInstructionBase. The current production Clang can't handle it.
[33mbcb49ce[m SIL: Key functions directly without SILConstant.
[33m82e84f4[m Start a document/plan for Strings and NSString interop
[33md764059[m SILGen: Do 'emit into' optimization of calls.
[33mb761bad[m SILGen: Lower some builtins to SIL.
[33m50b4b94[m IRGen: Emit objc super.ctor using msgSendSuper (again).
[33md50134d[m IRGen: Fix crash when returning protocol value.
[33m2b99cb9[m Fix crash calling a super.method on an ObjC class.
[33m11109a9[m SILGen: Implement switch statements.
[33m5633e65[m Sema: Fix assertion failure in switch sema.
[33m262baea[m AST: Use lambdas instead of ^blocks in Verifier.
[33me7f7df3[m Implement 'x is T' in SILGen.
[33mf211c1d[m SIL: Factor out boilerplate from unary insns.
[33md420672[m use early exits to reduce indentation, no functionality change.
[33m43bd016[m Tidy up IGF a bit, changing some ivars to be arguments to emitProlog, removing dead methods, and moving emitInvoke to CallInvocation.
[33mebf230e[m CMake: Install swift.swift, not its sources.
[33m2b6902b[m eliminate the "manage" operation on TypeInfo, which is now a (complicated!) noop.
[33m1abcd11[m inline enterScalarCleanup now that it is trivial.
[33m5664431[m remove Cleanup.h and references to the Cleanup class, along with some dead logic in IRGenFunction.
[33m85663f6[m simplify Explosion by eliminating (now) copies of existing methods.
[33m9ae0cf3[m inline Initialization::emitLocalAllocation into each of its callers and eliminate the Initialization class and GenInit.h.  GenInit.cpp will stay around, as it has some other random stuff in it.
[33md523932[m remove InitializedObject.
[33m0be7bbd[m remove ManagedValue.
[33m510042f[m removed the registration logic from Initialization and Depth from Scope.
[33me8686c9[m remove Cleanups from IGF, simplify Initialization a bit.
[33m6e50329[m remove the cleanups list from CallEmission and ManagedValue, along with the machinery for adding Cleanups.
[33me3d6a48[m remove the Cleanup subclasses.
[33mef79e16[m remove CleanupControl and supporting logic.
[33m19baff9[m remove some code now that Cleanups are never "used".
[33m1c3dc82[m Now that Joe moved ObjC cleanup emission up to SILGen, start zapping cleanups. First step is some of the emission deatils.
[33m916ae36[m Don't reemit globals from previous repl entries.
[33me506892[m SILGen: Handle ObjC ownership conventions of calls
[33m6ad8dfd[m <rdar://problem/13698402> Use raw_ostream::has_colors rather than is_displayed to determine whether we should display colors.
[33m298496c[m CMake: Fix the zillions of warnings from my last tweak.
[33m0512179[m Revert unintended partial commit
[33m19750ac[m Eliminate unused variable
[33m1a5446e[m Unbork Xcode CMake Release and RelWithDebInfo builds.
[33m519fa98[m remove some more little bits of stuff.  Move the last method remaining in GenLValue.cpp to GenType.cpp where it belongs, and zap GenLValue.cpp
[33m6470b87[m remove this testcase.  It is xfailed with a radar, and takes 74s to run on my machine.
[33m13b2af4[m remove getAddrForParameter and some other dead logic.
[33ma124da9[m remove the dead "Locals" map and supporting logic.
[33me2f1803[m fix the build.  It isn't valid to call isa<>/cast<> etc on a Type, only on a TypeBase*.
[33mce75e47[m SIL: Add instructions for RetainAutoreleased and AutoreleaseReturn.
[33m80565c6[m fix an IRGen crash on multiple local decls.  Noticed by inspection.
[33mb5a848e[m <rdar://problem/11926374> Only introduce the implicit, memberwise struct constructor when there is no similar constructor within the struct declaration.
[33m35edbcd[m prune some minor dead Stmt stuff.
[33mb6c1ff4[m All the rest of the easy fix-its.
[33mf2d4a6a[m Fix typo in diagnostic name.
[33m3486446[m Add fix-its for stray NUL characters.
[33m9db3e07[m Add fix-its for unterminated comments and missing EOF newlines.
[33m5be9883[m SILGen: Be less cavalier with ownership near function applications.
[33m15b1b4e[m SILGen: Fix order of operations with ApplyExprs.
[33mabee79b[m remove some Expr stuff.
[33m6315bb2[m remove a few random remnants.
[33m6a6601e[m remove the Expr version of prepareObjCMethodCall and the code that is keeps alive.
[33mf60b1b6[m remove some dead initialization logic.
[33md1a04c9[m IRGen: Kill dead emitSupertoArchetype overload.
[33m38b34b7[m Pass #1 at localizing assumptions about fixed layout and handling non-fixed layouts.
[33m4d617d8[m Add API for copying values of unknown size given only a metadata pointer.  This is suitable for use in a value-witness table.
[33m4636927[m Witness-table functions take Metadata pointers, not VWT pointers.
[33medee9a5[m remove some dead protocol logic.
[33mfa168e1[m remove emitRValueAsUnsubstituted and some related logic.  Once I get this deep, it seems that this is not a good idea, because it seems statically live from the SIL SuperToArchetypeInst.  However, apparently nothing in the testsuite exercises this code, so I'll need to discuss and a testcase to know how much logic needs to be ressurrected from SVN.  rdar://13681541
[33ma7748f6[m remove emitRValue, which is dead, at least dynamically according to our testsuite.
[33m1abf1d0[m remove RValueEmitter and some implementation logic for it, as well as FullExpr.  Scope is kept alive by one dangling thread, rdar://13681467
[33m6a4ab4d[m remove GenClosure.{h,cpp}
[33mdc0454e[m remove GenArray.{h,cpp} as they are handled by SILGen.  Remove getAddrOfLocalFunction.
[33ma8ed1a1[m remove CallSite and emitRValueForFunction
[33m9459ee1[m remove CalleeSource, SpecializedCallEmission, and derived classes.
[33m03394a2[m remove prepareCall and some various array handling logic now handled by SILGen.
[33m47e508c[m remove LValue, PathComponent, and LValue.h as a whole.
[33m20a712a[m remove emitAddressLValue and PhysicalPathComponent.
[33mac6dbfb[m remove some protocol stuff, which is the last user of emitFakeLValue. Remove emitFakeLValue, the last user of emitAddressLValue.
[33mf7cd3a6[m Add fix-its for missing and spurious separators.
[33m19c900b[m Standardize on the term "fix-its" (not "fixits").
[33m5d66f94[m IRGen: Sever projectPhysicalClassMemberAddress from LValue.
[33md0266e3[m SILGen: Don't emit calls to objc super destructors
[33m447ceab[m remove JumpDest class and JumpDest.h, it is now a SILGen concept.
[33m477bdbd[m remove emitConstructorBody and GenConstructor.cpp now that Joe implemented implicit struct constructors in r4776.
[33meb70c35[m Bitcast before turning the parameter into an Address in order to placate an assert.
[33m116a242[m These arguments aren't cast;  don't use the asserting routine.
[33m8fe4246[m Hide StorageSize/Alignment behind accessors in preparation for moving them to a subclass.
[33mb9bb84c[m SILGen: Emit implicit constructors.
[33mdc1fe2f[m Recursively SILGen modules before irgenning them.
[33m180873a[m IRGen: Fix build.
[33mffe3388[m remove the dead logic form GenTuple, RValueInitEmitter, and some erasure/protocol expr logic.
[33mfc9b9b2[m remove IRGen support for byref(heap), part of rdar://11247831.
[33m01a3686[m Remove LogicalPathComponent, emitLoad, emitAssign, emitLValueAsScalar, and supporting logic.
[33m091652f[m remove GetterSetter.h and implementation logic, now that this is handled by SILGen
[33m12a9c88[m zap GenLValue.h and supporting logic.
[33made66c8[m Remove the emitIgnored, emitLValue, and tryEmitAsAddress mechanics and supporting logic.
[33mdace3e9[m remove local decl emission and local pattern binding emission.
[33m0701489[m remove Condition.
[33mec6d194[m remove the old IRGen path for statements.
[33ma217fe6[m remove the old codepaths for emiting builtin and known calls.
[33mb09994d[m remove the last thing obviously checking for the presence of a sil module.
[33me3e2c12[m remove CurriedData, which is now dead.
[33m22321ff[m next pass deleting now-dead code.  Default ctors are keeping a bunch of stuff alive (tracked by rdar://13670607)
[33mea4eca3[m now that SILGen is on all the time, start removing dead code.
[33m2144140[m really use SIL IRGen for all recursive compilations as well, this exposes a symbol redefinition (or linkage type) bug that causes two tests to fail.  I filed rdar://13670581 to track this and am plowing forward, since they seem minor.
[33mad1c305[m Remove -no-sil-irgen option.
[33m45acdfa[m Clean up IRGen tests for SIL-IRGen.
[33m6aef6be[m CMake build: swift object files should depend on the swift executable
[33m2aa41b7[m SILGen: Emit fixed-lifetime local vars to stack.
[33mf5bfb87[m Make -sil-irgen default for stdlib too.
[33m660f5c2[m Runtime: Fix off-by-one in tuple_getValueWitnesses
[33mded5883[m SILGen: Fix infinite destructor loop.
[33m519c9ae[m Thread fix-its all the way through the diagnostics machinery.
[33m49c43d8[m Allow diagnostics to take either a char range or a token range (SourceRange).
[33m76331b2[m Make -sil-irgen default everywhere (except libs).
[33m7588b99[m add a pre-mangled name to the top level function, some more minor style changes to fit in 80 columns etc.  No useful behavior change.
[33m7dde07c[m IRGen: Lower SIL ArchetypeToSuper (and v.v.).
[33m2e4f1f1[m Cmake build: improve build comment for module source files
[33m9f63662[m Cmake build bugfix: be sure a directory exists for the generated module source file
[33m5a3a99e[m remove a dead "CurConstant" ivar, simplify some code to make it fit in 80 columns.
[33m2037e03[m extend LinkEntity to be able to refer to a SILFunction.
[33mc217d69[m IRGen: Fix ArchetypeMethodInst for static funcs.
[33m16ecdcb[m CMake build: eliminate special cases and restore the creation of swift.swift
[33m1e07f46[m Compile swift.swift sources all at once, but not from catenated file
[33mc669338[m Reverting "Report stdlib compilation errors in the original source file, not in swift.swift"
[33mfd71cbe[m Improve "bad module name" diagnostic
[33ma90338b[m IRGen: Compile builtin calls from SIL.
[33m2dea0de[m SILGen: Box 'this' in constructors and destructors
[33m88d5192[m SILGen: Don't crash if FuncDecls lack bodies.
[33m9ff03ec[m SILGen: Stub out support for oneof elements.
[33m1fcf223[m SILGen: Emit global variable initializers.
[33m50312c8[m Add interpreter test for writeback behavior.
[33m8ee0fb4[m SILGen: Zero-initialize structs in constructors.
[33m700615e[m SIL: Don't leak byref(heap) into closure types.
[33m7406986[m SILGen: Class constructors need to return modified self.
[33m9641984[m IRGen/constructor.swift is an interpreter test.
[33m69fb051[m IRGen: Lower SIL BridgeToBlockInst.
[33m4cdcdba[m SIL: Add BridgeToBlockInst.
[33m6ed98ac[m Parse [objc_block] attribute on function types.
[33m6786b66[m SILGen: Emit unapplied DeclRefs at curry level 0.
[33mf6c7288[m SILGen: Emit curried function calls.
[33m887cb4f[m SIL: ThinToThickFunction can't alter uncurry level
[33m5724427[m Assert dominance in the verifier.
[33mdd4f26c[m It does seem to make non-generic assumptions about the node type, though;  I had to define a WriteAsOperand function and add a front() method to SILFunction to get this to work. Rip out my dominators implementation and replace it with LLVM's.  I'd forgotten that LLVM's was actually generic.
[33meae9dd9[m IRGen: Fix PartialApply forwarder w/empty context.
[33m6e8ec92[m SILGen: Emit curry thunks for standalone functions
[33m089bad0[m Solution application: eliminate redundant name lookup when transforming a nUnresolvedMemberExpr.
[33mbc2abab[m SIL: Add SILValue::dumpInContext.
[33m3274de9[m Add a simple dominance analysis based on Cooper, Harvey, and Kennedy (2001).
[33mc6f42a0[m Don't use assert directly in the SIL verifier;  use a different routine which tries to print some extra context before triggering an assert.
[33m8dca52a[m Enhance the verifier to verify some basic properties of uses.
[33mf59026e[m SILGen: Fix double-free of exploded tuple elts.
[33m88ada37[m IRGen: Don't emit ConstantRefs to empty globals.
[33m65933e7[m SILGen: Add globals to module when we see VarDecls
[33m7e15f0a[m Make SIL-visiting not have a default implementation, make classof take a const ValueBase* instead of a SILValue, implement SILArgument cases for a few visitors and opt others out explicitly, and assert that classes in the SIL value hierarchy override their superclass's classof.
[33me46bb06[m Add ASSERT_IMPLEMENTS_STATIC for overrides of static methods.
[33mf9226a8[m Add a getAllOperands() method to SILInstructions.
[33m9fb7a07[m Add AssertImplements.h, for asserting that a class overrides a method.
[33mbbb0791[m SILGen: Emit all global variables as addresses.
[33m01a1461[m IRGen: Emit StringLiteralInst w/o size correctly.
[33m950ca1c[m SIL: Print type of string_literal insns.
[33m3233178[m Solution application: cope with T(x) as a coercion, where T is a class.
[33m5524dba[m Report stdlib compilation errors in the original source file, not in swift.swift
[33md0ed3bf[m IRGen: We can get BoundGenericStruct fields too.
[33me534558[m Solution application: handle constructions of oneofs directly.
[33m03610fa[m SILGen: Emit DeclRefExprs using the expr type.
[33m6a51636[m SIL: Verify TupleInst elements.
[33mc6cead8[m Solution application for constructions: Handle bound generic structs, too.
[33m2df1aac[m Solution application: handle construction of struct types.
[33m9ff6e65[m IRGen: Lower SIL ArchetypeMethodInst.
[33m3a9d7b4[m Solution application: handle tuple 'constructions' directly.
[33me09ae2c[m Specialize polymorphic function types when applying overloaded declaration references.
[33ma33ab2e[m SIL: Verify DowncastInsts harder.
[33m44eaa29[m SILGen: Forward archetypes from alloc to init ctor
[33mc057b21[m Ban the use of construction syntax T(x) for coercions and unchecked downcasts.
[33m7f13910[m revert r4673: respecializing SILConstant for ValueDecl instead of Decl.
[33m8602107[m Fix a think-o with the last commit
[33m698c02e[m '0123' is decimal, not octal
[33mf4dfaed[m generalize SILConstant to hold a Decl*, not just a ValueDecl*.
[33m873a0f0[m IRGen: Fix assert when applying Specialize.
[33mae3fc2e[m Solution application: start typing function applications directly.
[33mb95e64a[m Fix test/Interpreter/repl.swift.
[33mfd14aa4[m SILGen: Consistently handle stores and assigns.
[33maa5a195[m Fix the repl when stdout is redirected.
[33maf3b55c[m Further reinforce TopLevelCodeDecl as the container for top level code.
[33m7a0d879[m SILGen: Handle tuple explosions systematically.
[33m86beb2a[m Solution application: build constructor references.
[33m1ee0bed[m Clean up Parser::parseBraceItemList even more:
[33mec8df11[m Constraint application: migrate array/dictionary literals to buildMemberRef.
[33ma00464d[m refactor the logic that determines whether newly parsed top-level decls need to be immediately run by the REPL to live in one simple place, out of the braceitem parsing loop.
[33mb2203d5[m Eliminate unnecessary TypeChecker::recheckTypes() call.
[33m949a5fb[m Zap the last use of TypeChecker::buildMemberRefExpr() during solution application.
[33m4d0746a[m Move convertLiteral() into the solution application class.
[33m4a2d5d2[m Constraint application: zap another use of the old type checker's member-expression builder.
[33mb4b353b[m Solution application: one less dependency on the old type checker.
[33ma0ea069[m Solution application: handle more of member references.
[33me480954[m Solution application for instance variable references.
[33m63dff92[m Teach solution application how to build member references into generic types.
[33mbfd2f85[m Parse 'fallthrough' statements.
[33m6df319a[m Update PointerIntPairs to use enum class members.
[33m64ea9af[m Solution application: build archetype member references directly.
[33ma1b8479[m Build existential member references directly, without using the old type checker.
[33m34b8fbd[m Delete long comments and commented-out code; a FIXME suffices here.
[33ma4c2c3c[m Pull ExprRewriter rewriter out into an anonymous namespace.
[33meccb25a[m docs/Generics.rst: disable the currently-failing test
[33m4a3426c[m docs/CMakeLists.txt: Add missing dependency
[33m1a5408f[m Make it possible to build docs standalone
[33mf2c5488[m Whitespace fixups
[33m901fa9b[m Teach solution application how to convert literals.
[33m9b4757b[m Minor formatting cleanups.
[33m34d6fc9[m Fix 80-column violation.
[33me3fef24[m Note that we want consistent blocks use throughout the SDK
[33m1c06a92[m Poke the (argc, argv) parameters to Swift's generated main() into the stdlib's (C_ARGC, C_ARGV) variables
[33md39ee86[m Sema: Check func operator arity syntactically.
[33m18655c7[m stdlib: Fix unary - for floats.
[33m38b4bcb[m Sema: Require [prefix] or [postfix] on unary ops.
[33macc1b26[m Clear out module cache in its new location.
[33m54f8cde[m Consolidate list parsing and error recovery boilerplate
[33m8c1ef9b[m Simplify parseMatchingToken()
[33mac23437[m Replace infix attributes with operator decl lookup
[33m9a98f93[m SILGen: Remove hack to convert toplevel code type.
[33mad12dd6[m Style fix: Use prevailing const& placement
[33m28774bf[m Come full circle on TopLevelCodeDecl, making top level stmts and exprs each get their own TLCD.  This is important to preserve the ordering of stmt and expr w.r.t. PatternBindingDecls that initialize the decls.
[33mcb210d9[m Now that we're not abusing the initializer of a PatternBindingDecl in the REPL, it is easy to handle things like "var x : Int".  Previously we refused to print things, now we get expected/consistent behavior:
[33mf314a83[m fix the last (known to me) sin being committed by the REPL logic.  Previously for a repl declaration like:
[33m8cd771a[m remove the now-dead "repl result" bit on VarDecl.
[33mdb522fe[m thoroughly rework how the REPL synthesizes code to print values.  This centralizes the logic in Sema (previously, some of it was in tools/Swift/Frontend.cpp) and eliminates redundancy between expr and pattern printing.  This also eliminates most of the invalid ASTs that the repl was producing (there is still one left).
[33md41f51d[m refactor a bit of code that is used to print out the pattern in the repl.
[33m40ca34b[m Prepare LLVM-level access to argc, argv
[33mf890168[m Add argc, argv to the signature of swift's generated main()
[33m3ec813c[m Explicitly pass an argv to LLVM's execution engine
[33mb4fd6dd[m Change TopLevelCodeDecl to allow it to hold a sequence of different exprs and statements in one unit, wrapping them into a BraceStmt.  This makes it more similar to other decls (e.g. funcdecl, ctor decls, etc) and will be useful for future sil work.
[33m442a51e[m SIL: Fix Verifier.
[33m9fbd9f1[m Runtime: Clean up swift_allocBox a bit.
[33mf529845[m SIL-IRGen can compile code using slices now!
[33m217eb22[m SILGen: Visit extension decls.
[33m6582b40[m IRGen: Fix reference invalidation bug in SIL SpecializedValue.
[33m328b788[m IRGen: Fix ReemitAsUnsubstituted for leaf types.
[33m14355a8[m Runtime: Add swift_allocBox.
[33mbb1f516[m IRGen: Lower SIL SpecializeInsts.
[33maeeda4e[m Parser: Parse operator decls.
[33m965242a[m rename SILBBArgument.h -> SILArgument.h to match the class name. I'm done with renaming for now, boy do my fingers hurt.
[33ma71bc3a[m rename Value -> SILValue, BasicBlock -> SILBasicBlock, BBArgument -> SILArgument.
[33mfe23727[m rename Value.h -> SILValue.h, missed it in the last pass.
[33m1beebda[m move Instruction/BasicBlock/BBArgument files to have SIL prefixes.
[33m65cd2b2[m rename swift::Function to swift::SILFunction to be more explicit.
[33m05dcf38[m move SIL/Function.h to SILFunction.h in preparation to renaming the class.
[33m8caf747[m Put alignas(N) on classes with strict alignment.
[33m05fbef4[m give SIL Function a mangled name field, which is currently unused.
[33m85c7c49[m Wire up the most trivial support for sil parsing, which allows us to write a (trivial, empty) sil parser testcase.  The parser is still not SIL aware though.
[33m4923acc[m Use C++11 alignof(T) instead of llvm::AlignOf<T>.
[33m3a9100f[m SIL: Clean up SILType interface for functions.
[33m106a7f9[m Random doc updates with new keyword ':' syntax
[33m9f7fa8a[m Keyword args now require ':'
[33m7f234bc[m just use forward decls of these types from LLVM.h
[33m83d4b6d[m SIL: Separate TypeLowering from SILGen.
[33m47cf184[m Feedback from Chris: use LLVM ADTs
[33mef6d330[m Mark fallthroughs with [[clang::fallthrough]].
[33m88d4284[m Parser: Relax whitespace rules for ( and [.
[33m90f8078[m Compile multiple files as one translation unit
[33me6a6447[m remove an attribute.
[33mb96818f[m Line up all comments (predecessors, users) in column 50 instead of being so tab ragged. Print sil function bodies as "sil" declarations, not func_decl. Print an @ before the sil declaration name for consistency with uses.
[33m09d1eb8[m some minor stylistic changes to sil printing - add braces around function bodies.
[33m3f6a40b[m Add swift-level argv access
[33m19a5906[m Add a "--" option that allows arguments to be passed to scripts
[33md2a985d[m SIL: Fix use chains better.
[33m88cae3e[m SILGen: Fix conditions that jump in both branches.
[33mc724d1f[m IRGen: Emit SIL class metatypes as Swift or ObjC.
[33m79b36f7[m SIL: Fix use chains.
[33me0aa78f[m SIL: Print uses when printing instructions.
[33m0034475[m IRGen: Map SIL metatypes back to ObjC classes.
[33md6b30f7[m IRGen: Fix SIL MetatypeInst lowering.
[33m02de4d8[m IRGen: Handle ownership conventions from SIL apply
[33m0f017fc[m ABI: NonTypeMetadata_First value for MetadataKind.
[33ma1eaeb7[m IRGen: Disable SIL destructors for ObjC classes.
[33m7e29184[m IRGen: Map SIL rets to indirect returns.
[33mbc7afba[m SILGen: Visit ClangImporter external definitions.
[33m0e4c0a5[m IRGen: Start adding ObjC call support through SIL.
[33m0dcb4d7[m Stop running LiterateTests as part of ALL
[33mbc68a7a[m Add missing dependency on CMake binary
[33m7dae6b6[m Rename a .rst file so regular Unix make won't barf on it
[33mbb39a65[m Fix build system for LitRe tests
[33maee590a[m IRGen: Enable C function calls from SIL.
[33m4366f25[m Makefiles: Fix a race in creating lib/swift.
[33m1f5bdda[m SIL: Add insns for archetype/protocol metatypes.
[33m045d7e4[m Fix the unittests suite.
[33m38d1f83[m Runtime: #if-guard some debugging noise.
[33m4397944[m Runtime: Fix swift_dynamicCast.
[33m3f81dfe[m IRGen: Implement 'x is T' for archetype T.
[33md53efbb[m fix character escape comments.
[33m1a8b35d[m REPL: Support -sil-irgen.
[33m25e370f[m Frontend: Pass down -O level in -i mode.
[33m35c85c5[m Implement 'x is T' runtime type checks.
[33m6a7d513[m Remove unused litre_config.py file
[33ma2cc84e[m Generics.rst: explanatory comment for LitRe @ignore directive
[33m60dc2cb[m Generics.rst: add missing declarations to example
[33m424df11[m Generics.rst: test C++ code with whatever compiler CMake finds
[33m01cd7ed[m Don't add a literate testing subdirectory for documents on which LitRe fails
[33m50835b8[m Use LitRe's new default_compiler option
[33m30d9e88[m *.rst: Use litre.TestsAreMissing exceptions
[33md357f8d[m Generics.rst: add some initial LitRe testing
[33m257ee68[m Specify litre config file
[33m96cc492[m docs/CMakeLists.txt: documentation
[33m0abc1da[m Initial integration of LitRe testing into the documentation build process
[33m62b0362[m LangRef: Describe cast expressions.
[33m9667bda[m Implement 'as' syntax for coercions and casts.
[33mdbaf034[m Sync up with IRReader change on mainline LLVM
[33m7ab7882[m Sync up with Clang API changes when accessing macros.
[33mb105e02[m IRGen: Lower SIL bb arguments to LLVM phi nodes.
[33m43fe40b[m SILGen: Start implementing 'emit into' behavior.
[33m9a1899c[m SILGen: Clean up 'Initialization' implementation.
[33m89e1b7e[m Parser: Give IfExpr traditional ternary syntax.
[33mca67394[m SILGen: Tidy up ManagedValue.
[33m90edf84[m SIL: Verify func args, branch args, and returns.
[33md156b62[m SILGen: Lower conditional expressions.
[33m59d418d[m SIL: Add arguments to branch instructions.
[33m16e231b[m ValueSemantics.rst: elaboration, clarification, cleanup
[33m76e982f[m ValueSemantics.rst: Example corrections and elaboration
[33me8b66bc[m SIL: Rename implicit_convert to convert_function.
[33mb3ae290[m IRGen: Codegen SIL 'extract' from rvalue struct.
[33m08d06e8[m IRGen: Emit top-level globals from SIL.
[33m7934842[m SILGen: Handle globals in top-level code.
[33mfab787a[m IRGen: Linkage for anonymous SIL functions.
[33m557100a[m SILGen: Keep [thin] through FunctionConversionExpr
[33mcda12bc[m SILGen: Fix lowering of ClosureExprs w/o captures.
[33m73de77c[m SILGen: Remove bad assert from Condition.
[33m1043890[m Remove GetMetatypeExpr.
[33m98f5867[m IRGen: Handle function values from SIL correctly.
[33med6f218[m SIL: "Thicken" function refs when necessary.
[33m3984b93[m Update ValueSemantics.rst with improved example
[33m1a8d624[m Rename the SIL 'closure' instruction to 'partial_apply'.
[33m15d606b[m IRGen: Lower SIL class_method for native classes.
[33m6fdb9ce[m 2nd Edition of Clonable.rst with additional exposition
[33mfa3eaf3[m Fix spelling of "Clonable.rst"
[33m3c7df2d[m Waste time during SIL-generation keeping a lot of information that we're not even using.
[33m2bf56a3[m Add a Range type which just bundles two iterators together and lets you iterate that.
[33m05c91bd[m Use the header-guard idiom properly.
[33m0c19577[m Doug wants to used nested anonymous types;  don't complain in Makefile builds.
[33mf43ecce[m <rdar://problem/13037793> Remove the "ObjectiveC" module name hack now that Clang doesn't need it (per Clang r177621).
[33me07609c[m SIL: Add ClassMetatypeInst.
[33m774b454[m Fake a source location to pass to Clang when asking it to load a module
[33maaa8583[m IRGen: Lower SIL super_method for native classes.
[33mc090f65[m IRGen: Update lowering for SIL protocol_method.
[33ma993192[m valref.rst: Add post-presentation TODOs
[33m92c81b7[m IRGen: Update lowering of SIL closure insts.
[33m6668cc7[m IRGen: Fix SIL constant_ref to destructor.
[33m61077a6[m IRGen: Lower SIL function args in right order.
[33mac73865[m IRGen: Update lowering of SIL applications.
[33meb779e6[m valref.rst: Nullable sugar.
[33m98fd615[m SIL: Keep SIL argument counts for each curry level
[33m3460d82[m valref.rst: Apply Dave Z's suggested edits
[33mbe66b45[m Split the constraint-based type checker into five parts.
[33m8844dda[m valref.rst: Why we're better than C#
[33m54e712e[m valref.rst: oneofs and Objective-C
[33mf07fdde[m Attempt to clarify XPair example
[33m3ee7828[m valref.rst: How This Design Beats Rust/C++/etc.
[33mfead087[m valref.rst: How This Design Improves Swift
[33ma7bae85[m valref.rst: s/box/zone/
[33md5f0892[m valref.rst: breadcrumb for Joe
[33m169571f[m valref.rst: (Im)Mutability
[33m186e2ce[m valref.rst: Teachability
[33m8d9bab9[m valref.rst: exposition on Generics
[33md2d82ee[m valref.rst: delete obsolete note
[33m8c75650[m valref.rst: revert "delete an obsolete section on Joe's behalf"
[33ma39d5dd[m valref.rst: introduction
[33m481e784[m valref.rst: tiny edit
[33m35fb03a[m SILGen: Adopt thin function types.
[33m4bb8e8a[m valref.rst: first draft of [byref] discussion on Joe's behalf
[33m07b1e5b[m valref.rst: clean up the BikeShed
[33m7e75ef6[m valref.rst: Minor linguistic and formatting cleanups
[33mfb61586[m valref.rst: hyperlink to BikeShed
[33m0868b47[m valref.rst: align comments
[33m14f750e[m valref.rst: delete an obsolete section on Joe's behalf
[33m17f5afe[m valref.rst: fix typos (thanks, Joe!)
[33mdd55eae[m valref.rst: rewrite section on extracting a ref from a class val
[33mda8f130[m valref.rst: rewrite section on structs with reference semantics
[33m63f48f8[m valref.rst: language tweak
[33mb2eb796[m valref.rst: elaboration on array syntax
[33m12abc4d[m valref.rst: separate out section on standalone types
[33m24811dd[m valref.rst: whitespace cleanup
[33m3b1a811[m valref.rst: syntax for standalone types
[33m6a5f2af[m valref.rst: Add new section
[33maa6c506[m Add '[thin]' attribute to function types.
[33m7251fa2[m valref.rst: WIP
[33mbd21770[m valref.rst: Embedded some task assignments
[33m2e755d2[m valref.rst: updated array type syntax
[33m9da0f89[m SIL: Add address_to_pointer instruction.
[33m9bfd111[m valref.rst: Some words about ObjC interop.
[33mf3bf84c[m SILGen: Fix generic method of nongeneric class.
[33m3eb2b13[m LangRef: Describe 'if' expressions.
[33m4c09ef6[m Add conditional expressions.
[33mb53d7a2[m SILGen: Catch up with new Expr nodes.
[33m205dc1f[m valref.rst: WIP
[33mcefcec7[m valref.rst: WIP
[33ma9a791e[m valref.rst: WIP
[33m21ba93e[m valref.rst: WIP
[33m0826d70[m valref.rst: WIP
[33m39d18da[m valref.rst: updates on non-copyability
[33m1468ecb[m Re-add Cloneable proposal
[33m40c330c[m valref.rst: WIP
[33m3feb306[m valref.rst: WIP
[33m2e2e2d5[m WIP on comprehensive value semantics proposal
[33mef10a7d[m Reverting commits that should have gone in the value-semantics branch
[33m460ba9e[m SILGen: Fix some constructor issues.
[33mc51edd7[m WIP on comprehensive value semantics proposal
[33mb7367cf[m Add Cloneable proposal
[33m05dd6b0[m SIL: Fix uncurry level of local capturing props.
[33mb07560e[m SILGen: Fix failing test.
[33m305e3db[m Make Solution move-only for performance reasons.
[33m9a6bd09[m Decouple the solution to a constraint system from the constraint system itself.
[33md1386b0[m SILGen: Uncurry property accessors.
[33mc157420[m SILGen: Admit archetype metatypes.
[33m935e15c[m buildbot: Limit make to -j8.
[33me1bb6c0[m SILGen: Implement specialization with uncurrying.
[33m891801d[m Add note about marking Cocoa APIs that take references to objects but don't retain them.
[33m7c359cc[m SILGen: Uncurry protocol type methods.
[33mb2c1a83[m SILGen: Uncurry function applications.
[33m19e5f45[m Track overload sets with constraint locators rather than constraints or expressions.
[33mb11b655[m Introduce another calling syntax for selectors.
[33m9804e8d[m Add test for consecutive-statements-on-a-line diagnostics.
[33mbd61ca5[m Diagnose multiple statements/declarations on the same line that are not separated by a semicolon.
[33m08bb233[m LangRef: Describe 'switch'.
[33mb6ca367[m Provide diagnostics for several more constraint-checker failure kinds.
[33mb6b53b6[m Basic simplification of locators, which maps diagnostics to the most specific expression.
[33m062ad26[m Value-only switch statements.
[33m00f1c0f[m Simplify Optional.h.
[33m026045c[m Only set the generated overloaded sets along "simple" paths.
[33m8c503e2[m Start tracking (uniqued) failures that occur while solving a constraint system.
[33m7db15ab[m Use backtrackToToken() to remove the CForLoopHack
[33m340cc73[m SIL: Track uncurry levels of SILConstants.
[33m638d04e[m Start tracking the how individual constraints map back to source expressions in the constraint solver.
[33m678b42f[m We don't need the "new bugs" component for now
[33m84d2d8a[m Unbreak the 'make' build
[33m4437c65[m SIL: Add uncurry level to SILType.
[33m56752ae[m SILGen: Avoid copy if arg is already temporary.
[33m292f44a[m SILGen: Make address-only calling conv caller-copy
[33m8966bd2[m SILGen: Initialization::zeroInitialize -> defaultInitialize
[33m556de46[m Ensure that selector parsing keeps going after errors
[33mc4259e0[m Make literal parsing more robust
[33m8711264[m buildbot: missing escape.
[33m3712507[m - convert a memmove to a memcpy (even though they're the same on darwin). - Switch LiteralChecks to hold a CanType to declare that it is canonicalized. - Switch LiteralChecks from std::map to DenseMap.
[33mcae50dc[m buildbot: Change announcement address over.
[33ma0dde7a[m trivial space optimization: pack Literal and Kind together, to save a word (now 5 instead of 6).
[33mcd9c270[m Change TypeBase::getTypeVariables to return its results in a SmallVectorImpl (fixing an abstraction leak of the constraint checker into details of constraint gathering).  One upside of this is that it avoids constructing SetVector, which defaults to using a std::vector to back it.
[33mb74a2e2[m rename TypeBase::hasTypeVariable to TypeBase::getTypeVariables since noone cares about the boolean return, they all care about the set returned.
[33md105ff1[m fix some minor typos, switch from DenseMap to SmallDenseMap to save some heap allocations (a simple 3% speedup in debug build on swift.swift)
[33mddb1c58[m buildbot: 78-column-ize so sendmail is happy.
[33m9703629[m SIL.rst: Clean up some language.
[33mb2f21d7[m Add some known issues to the release e-mail
[33m4d4357f[m IRGenSIL: Don't use anonymous struct.
[33m8fb9a46[m AST: Wrap super.ctor calls in a RebindThis node.
[33m6217565[m buildbot: Update package email link instructions.
[33m2a4ef42[m buildbot: Typo in install-test-script.sh.
[33meb65ed9[m buildbot: Test that package libs link w/ -isysroot
[33me2dd397[m CMake: Put Swift libraries in lib/swift.
[33ma44af3d[m SIL.rst: Describe some additional needed insns.
[33m0db0081[m SIL: Replace ZeroAddr/ZeroValue with InitializeVar
[33m5e831ec[m SIL.rst: Describe intended 'zero_addr' behavior.
[33m465453e[m buildbot: 'if' -> 'when'
[33ma5cf4d1[m buildbot: "Getting started" directions for email.
[33m4aa6abd[m Extend message-send syntax to new expressions and super.constructor expressions.
[33m6c763f4[m Add test missing from r4311.
[33madcd9d9[m Implement selector argument syntax for method calls.
[33m09d05dc[m buildbot: Change email more.
[33m9e38985[m buildbot: Flesh out release notice email.
[33m24a092b[m IRGen: Use 'generic' cpu target.
[33m8da204e[m IRGenSIL: Improve Explosion handling.
[33mddc2b11[m Check for declaration overrides within extensions as well as within classes.
[33mc9c0d7e[m Sema: Set an 'isSuper' flag on ApplyExprs.
[33m2a74aa7[m Move test/SIL/IRGen to test/Interpreter/SIL.
[33md191946[m buildbot: Tweak release announcement email.
[33m810e935[m buildbot: Typo in install-test-script.sh
[33m2d939a6[m buildbot: Kill module caches when testing package.
[33m01f404e[m Dump constraints when we are unable to solve a constraint system.
[33m599d761[m Remove "-constraint-checker" everywhere, since it is now the default.
[33me27279c[m Turn on the constraint-based type checker by default <rdar://problem/13324871>.
[33m2e15d99[m CMake: Install Clang headers.
[33m452cebf[m Remove one more unnecessary use of the old type checker.
[33m9793c33[m Remove some places where we unnecessarily turn off the constraint-based type checker.
[33m3c8a120[m Allow the constraint-based type checker to cope with partially-type-checked expressions in more places.
[33m31547a4[m buildbot: Typo in script.
[33m561a1fa[m buildbot: Test and announce release packages.
[33m0951927[m Fix typos ("- >" becomes "->")
[33m1167ec1[m Add smoke-test scripts for install packages.
[33m0132f27[m IRGen: ObjC super dispatch for super.constructor.
[33mfdcd04c[m ClangImporter: Update constructor import comments.
[33mf489f2a[m Clean up AST representation of 'super'.
[33m0b06ffa[m Keyword args should support operators
[33m1794f82[m Sema: Keep type sugar through tuple shuffles.
[33mfa0b046[m Finish generalizing operators in TupleExprs
[33me56e2fb[m Sema: Favor coercing literals to default type.
[33m84e757b[m Allow operators in TupleExprs, not just ParenExprs
[33m6588b83[m Parser: Parse '(<op>)' as a DeclRef of an operator
[33mda2e599[m buildbot: Change package delivery path.
[33mfa66410[m buildbot: Fix bug in package delivery script.
[33m1187498[m Xcode plugin: Make installable by CMake.
[33mb4600aa[m buildbot: Use /usr for the package install prefix.
[33m18df5de[m REPL: Reset colors on process exit.
[33m0f2f031[m Typo
[33m68c6d4c[m 13324820 Change tuple accessor syntax to 'tuple.0'
[33mf78b090[m IRGen: Fix for llvm::Attributes API change.
[33m7c2371d[m CMake: Don't spew Sphinx warnings.
[33m96c58a1[m buildbot: Deliver built packages.
[33m1021b07[m buildbot-script: Add a -release mode.
[33mf5d4c60[m CMake: Configure CPack.
[33ma2cb749[m CMake: Add docs; install LangRef, whitepaper.
[33m23cd391[m Do not allow embedded ASCII control characters in string/char literals
[33m9d777df[m Revert \a, \b, \f
[33mec69165[m CMake: Only install swift module dylibs.
[33m7f0459c[m CMake: Set the install_name directory for dylibs.
[33m5f038b5[m CMake: Fix build-install path for .swift files.
[33m1164aba[m CMake: Install .swift files for swift libraries.
[33m218dd03[m CMakeLists: Normalize redundant SWIFTLIB_DIR setup
[33mf52a766[m Sema: Propagate sugar types through function calls
[33m3f83f18[m Add Interpreter/SDK test blocked on 13319547.
[33ma7d1d7e[m Add SDK-dependent Interpreter tests.
[33m990c136[m IRGen: Fix stupid typo in ObjC JIT extensions.
[33m52ab572[m Fix English grammar
[33m470ad60[m IRGen: Emit properties for ivars of ObjC classes.
[33m7e51087[m REPL: Don't crash if there is no module loader.
[33m6c64753[m REPL: automatically run replApplicationMain() the first time it becomes available.
[33ma253bd0[m Import the Swift modules that corresponding to any re-exported Clang module.
[33maefdb8a[m REPL: Try to reset color when quitting or crashing
[33m6af18ef[m IRGen: Use ObjC vwtable for ObjC classes.
[33m82fa152[m runtime: Optionally overwrite freed objects.
[33m37e7bc3[m Note that we'll need to mark designated initializers in ObjectiveC
[33mc4aeffd[m REPL: Don't bold inputs after entry.
[33m0afc1d4[m REPL: Make :autoindent switchable.
[33ma82ad13[m REPL: Poke 'metatype' into qualified completion sets.
[33m0bdbcef[m REPL: Fix output artifact with line continuations.
[33m021e10d[m REPL: Colorize inputs and responses.
[33mc3a7b13[m REPL: Crop some useless completions.
[33m3622441[m Remove debug output.
[33m9337e66[m Sema: Allow type extensions through typealiases.
[33m54bf40e[m IRGen: Fix crashing objc_subclass test.
[33mbe3f4ae[m IRGen: Emit ObjC methods for properties.
[33m5f1344c[m REPL: Don't keep stale ASTs if typechecking fails.
[33mdc28ebb[m REPL: Don't replPrint metatype w/ instance func.
[33m321af9f[m Some frontend cleanup.
[33m4bdd201[m REPL: Print the referenced name of a lone DeclRef.
[33m687c61a[m REPL: Bind top-level expressions to result vars.
[33m14d9ed8[m runtime: Make Metadata not publicly copyable.
[33mfd0c5d6[m IRGen: Fix name of swift_getTupleTypeMetadata.
[33mffd6b50[m runtime: Don't copy tuple metadata to a local var.
[33m1e80a25[m Automatically link against imported Clang modules in the JIT <rdar://problem/13191437>.
[33m315451e[m Implement parsing, AST, semantic analysis, and IRgen for dictionary literals.
[33mb61ea41[m Refactor array-literal parsing to make way for dictionary literals.
[33mf90a57c[m Fix implicit line continuation regression
[33mf043cdc[m Revert "wipUnifyFormToken"
[33m06d3c09[m wipUnifyFormToken
[33m56ecce2[m REPL: getwc() returns WEOF, not EOF
[33m2d8719a[m Unbreak 'make' on OSX 10.9
[33m9f755c1[m REPL: Adjust some comments.
[33m17c8bbb[m Unfinished infix expressions imply line continuation
[33me6ea597[m Empty lines must not prematurely end the continuation prompt
[33m9b1a46c[m Treat zero length files as an empty line
[33m23aaa56[m IRGen: Emit type metadata for Clang structs.
[33m6774897[m ClangImporter: Value ctors for imported structs.
[33m4bac316[m IRGen: Retain value type elts in objc stub.
[33m38a8b1f[m REPL: Don't call global_ctors before each entry.
[33m827cbfe[m IRGen: Dynamic init for repl ObjC extensions.
[33ma9f747e[m IRGen: Emit categories for ObjC class extensions.
[33m5365745[m Default array literals to T[] rather than Slice<T>; it looks nicer.
[33m23ccf8d[m Unbreak the REPL when printing slices <rdar://problem/13270655>.
[33ma8986af[m Print slices like array literals <rdar://problem/13251154>..
[33m469e1b2[m make logs more descriptive
[33mbb32be9[m Update the Makefile build to link CoreFoundation.
[33ma952532[m Collapse the three array-literal test cases back into one.
[33m856b463[m Array literals default to Slice<T>.
[33mf1922d4[m buildbot-script: Typo.
[33m2aef160[m buildbot-script: Scrub the module cache harder.
[33md78d95b[m stdlib: Add a 'replExit' hook.
[33m3658d8b[m Teach the constraint checker that it's okay to pick a type involving type variables as a bound.
[33m5e03926[m Revert r4125; it's not going where I want it to.
[33m585a3b2[m REPL: Add a -repl-run-loop mode.
[33m5c1bb23[m Keep track of upper/lower type variable bounds on-line, rather than computing them en masse.
[33m5dcff47[m Factor the representation of the containin of saved type variable bindings.
[33m0d9c1b9[m REPL: More refactoring.
[33md1c34dc[m REPL: Separate the interface and response code.
[33mbabf125[m REPL: Port to editline's wchar_t interface.
[33m499ac52[m Some roadmap tweaks based on comments
[33m6597c60[m buildbot: Make sure module cache is scrubbed.
[33mc581684[m Remove dead code; this is handled by lookup now.
[33ma6b5ee4[m buildbot: Set SWIFT_MODULE_CACHE_PATH.
[33m89664dc[m CMake: Add a SWIFT_MODULE_CACHE_PATH option.
[33m2b45f0a[m Utils: Add basic pygments lexer
[33m23a617f[m When matching generic arguments fails, fall back to looking for conversions rather than assuming the expression type-checks <rdar://problem/13251168>.
[33mb94771f[m Fix another crasher with "definitive" type variable bindings <rdar://problem/13251188>.
[33mfc870aa[m Fix constraint checker bug triggered by closures with too-few arguments <rdar://problem/13249222>.
[33m4717c65[m REPL: Default-print class instances w/dynamic type
[33m6adc44d[m Fix for Clang r175585
[33m9b41590[m Remove outdated demangler test.
[33m8392d21[m IRGen: Update ObjC mangling not to depend on attr.
[33m102c561[m Allow the use of 'super' in methods in extensions of classes.
[33mc593301[m stdlib: Start updating the demangler.
[33mf262964[m ABI: Fix some inaccuracies.
[33m56815fd[m Add a stub Swift module for AppKit.
[33m7cc1b63[m Map 64-bit anonymous enums and their enumerators to Int.
[33me688081[m Map NS(U)Integer to Int in the module importer.
[33m93983dc[m some random cruft for a randomly crufty document.
[33m72a2f87[m Propagate -constraint-checker to imported modules *except* swift.swift (for performance reasons).
[33m40f97d4[m Unbreak the 'make' build system on 10.9
[33m74589d7[m Make ObjC-ness implicit to ObjC-inherited classes.
[33m076e035[m add a wishlist to the roadmap, fix a typo in Generics.rst
[33m22c3f0f[m REPL: Scan balanced brackets for context.
[33m7ff6df6[m Remove unused variable
[33m8ffd2d4[m Always rely on Clang lookups, not Swift lookups, to establish method overrides for imported methods.
[33ma74f357[m REPL: Default-print generic struct types.
[33m6d30e0b[m ClangImporter: Kludge submodule imports.
[33mddb7ead[m REPL: Contextual completions.
[33mf47984e[m Roadmap: Pile on some feature requests.
[33mbd59da3[m REPL: Find completions from Clang modules.
[33mdeb3127[m Parse: Parse 'eof' after '>' as a type list.
[33m2d6c726[m Completion: Complete operators.
[33m577367e[m REPL: Trim completions to actual terminal size.
[33m7a7e3d5[m REPL: Hook up completions to name lookup.
[33mc3917ad[m LangRef: Tweak generics language.
[33mdf9cf24[m LangRef: Document generic parameter parsing.
[33m7afd5f0[m Remove the "no Swift bit" hack entirely.
[33md97bc08[m ClangImporter: Map void*/opaque* to COpaquePointer
[33m7ebbec8[m Add tests for <rdar://problem/13212959>.
[33m72703f8[m Sema: Typecheck UnresolvedSpecializeExprs.
[33ma8b5a2e[m AST: Add UnresolvedSpecializeExpr.
[33m8307e73[m remove some extraneous ;'s
[33mdc016b8[m Parse: Fake parsing type parameters in expressions
[33m6986210[m typo fix.
[33m177e243[m Tokens should not be named after their use
[33m5c26e6c[m Make sure that the output stream gets flushed before forming the result of getObjCSelector().
[33m93d734e[m REPL: Outdent 'ident:' labels and 'set(...):'.
[33mb660580[m Don't permit calling static methods on an instance <rdar://problem/13206762>.
[33mce03b19[m REPL: Don't outdent '}' if not at start of line.
[33m42fae3b[m REPL: Iterate on the parseable prompt.
[33mec18a22[m REPL: Comment out result replies.
[33m9490670[m Don't import 'true' or 'false' from Clang modules <rdar://problem/13187570>.
[33m5b92dae[m Make '=' consistent with the assignment operators
[33mf0c46ac[m ascii'ify
[33m4792c60[m IRGen: Implement super method calls.
[33m750374f[m Sema: Typecheck super.method expressions.
[33m56ea1e8[m If Swift is configured with a modules SDK, have it automatically use that SDK.
[33mb68b1b2[m Emit [ibaction] methods as if they were [objc].
[33m93dc358[m Remove the hack preventing the "Swift bit" from being used on 10.9.
[33m45e5909[m IRGen: Export objc methods w/ NSRect return/args.
[33m81c1a77[m add a comment for something that was non-obvious to me.
[33me996c39[m TypeChecker: Allow [objc] decls to "overload".
[33mbbc8ebf[m ClangImporter: Temporarily import id<Proto> as id.
[33mfa897b7[m Xcode plugin: Have install script create dest dir.
[33maa75885[m IRGen: Fix C funcs with big struct return and arg.
[33m86d1e1d[m REPL: Have ^W delete word, ^_ undo.
[33m7ad898b[m IRGen: Fudged big struct support for C functions.
[33md047248[m Completions: style
[33m9c022d5[m IRGen: Fudge passing large ObjC structs as byvals.
[33m0dee611[m fix a couple of bugs flagged by clang warnings, and use SmallVector in insertStringRef instead of a VLA since C++ doesn't have VLAs.
[33mbf3c98a[m Revert \v from r3968
[33ma282c35[m Make floating-point number parsing more strict
[33m67eaa1a[m Silence -Wunused-variable warnings.
[33mb44f38e[m Emit ObjC method types for getters that return (class) objects.
[33m14cbc7f[m Allow methods from Objective-C categories to be overridden.
[33mf92e4bf[m [Hack] Fix NSObject === to not leak the arguments.
[33m14f5ab6[m REPL: Indent source in-buffer for :dump_source.
[33m55997e2[m ClangImporter: Update for Clang options change.
[33m283a17c[m REPL: Groundwork for completions.
[33mdc73148[m Fix the buildbot failure
[33m1ca414e[m Part two of r3968
[33m189bda0[m REPL: Indent when tab is pressed at start of line.
[33m9ec417e[m REPL: Remove debug crumb.
[33m2e1c039[m REPL: Outdent when the user types '}'.
[33m0a2410e[m REPL: Make the prompts parseable. Change our PS1 to /*swift*/ and PS2 to /* ... */.
[33m6917073[m REPL: Emit escapes in "literal mode" for editline.
[33mf6a80ae[m Tweaks for the buildbot script.
[33me8df5ad[m Sema: Diagnose unsupported features in old TC.
[33m9ad1e4c[m C/C++/ObjC Interop: string/char escapes
[33m4828269[m Add a buildbot script.
[33md2ba334[m Simplify parseMatchingToken()
[33m8a56780[m Subscription should implicitly tuple the key/index
[33m6820467[m CMakeLists: Don't clobber user's CMAKE_CXX_FLAGS.
[33m32855fa[m Handle negation in imported constants, for both macros and enumerators.
[33mb5a642c[m Don't mangle Clang globals.
[33ma9a90fd[m Track the Clang macros that were used to generate Swift constants.
[33m3917fa6[m Take three: both __objc_classlist and __objc_nlclslist are necessary.
[33mb1fa6a2[m Switch the macro-importer over to the createConstant() interface used by enums.
[33m5e71ffc[m Use __objc_nlclslist to force Swift classes to be registered with ObjC.
[33m47041d0[m Minor tweaks
[33m6885f94[m Add a Swift "roadmap", which is mainly just an unorganized heap of features, engineering tasks, and related tools.
[33mb5bc022[m Incomplete support for array literal expressions.
[33m105ae86[m Sema: Add FIXMEs re: r3936.
[33mf028cd2[m Call +load on all classes to register them with the Objective-C runtime.
[33m5a32a9d[m Tests: keep the "swift-metadata-bit" feature in sync with the CMake option.
[33m13bbc9a[m [objc] Fix closure->block conversion to handle closures with context.
[33m3a91cfd[m attributes should work with behave consistently with comma separated var decls
[33m89865a0[m Warn when missing a newline at EOF
[33m03b1689[m Import C enumerations into usable struct types in Swift.
[33md739501[m AST: Update printer for new property syntax.
[33m77fc671[m ClangImporter: Groundwork for importing #defines.
[33m081787c[m Lexer: Lex C99-style hexadecimal float literals.
[33m804b423[m Basic vim highlighting for Swift.
[33ma0ad52a[m Constraints: Don't bail on generic conversions.
[33mf946737[m IRGen: Collect/emit nested generic substitutions.
[33m176567f[m ABI.rst: Describe how mangling substitutions work.
[33mca5d9d0[m IRGen: Fix generic member of generic type mangling
[33m0bb9f88[m Map user/library-level redefinitions of id, Class, and SEL in Objective-C to their built-in equivalents.
[33m299df79[m Import Objective-C protocols properly, by introducing and using the This type
[33m647912c[m "Inherit" constructors from imported Objective-C classes.
[33mef1395d[m IRGen: Add an 'addressof' builtin.
[33m272059e[m Import init methods from protocols as constructors in classes that conform to those protocols.
[33mba2ac25[m ClangImporter: Import array types as tuples.
[33m8b5c6b1[m ASTPrinter: Print struct fields from Clang imports The ClangImporter doesn't synthesize PatternBindingDecls around imported struct fields, but the ASTPrinter assumes that a non-property VarDecl will later show up in a PatternBindingDecl. In the ASTPrinter, don't skip VarDecls that originated from Clang.
[33m90afff0[m Typo in comment
[33m9e3724b[m REPL: Factor out 'print-or-dump' logic.
[33m7350051[m REPL: Print original decl along with a typealias.
[33mee648a1[m Runtime: More robust NSStringToString_slow.
[33md17b175[m When importing an Objective-C class, category, or extension that explicitly conforms to protocols, mirror any protocol methods that aren't also declared in the class/category/extension within the extension. Among other things, this makes sure that "-hash" and "-isKindOfClass:" are available on NSObject (they come from the NSObject protocol).
[33mb67dc39[m Add a CMake option SWIFT_OBJC_SUPPORTS_SWIFT_BIT to state whether the target Objective-C library supports the Swift bit on class data. It still defaults the same way, but can be tweaked from there.
[33m0a16e6e[m Sema: super.constructor in the constraint checker.
[33mbe09b16[m Sema: Allow returns from constructors/destructors.
[33mcd3f31f[m Formalize "starting" vs "following" token generation
[33mc83b0d4[m ClangImporter: Quell warning about OCLEvent types.
[33mb3dda15[m Use -isKindOfClass: when casting to an Objective-C type.
[33m1066341[m Don't use _objc_empty_vtable in JIT mode.
[33mf1d7337[m Update for LLVM changes to make llvm::AttributeSet an opaque type.
[33mcf0d186[m IRGen: Undo r3904. It fixed a symptom, not a problem. The actual problem is fixed in r3905.
[33me591db9[m IRGen: Fix protocol constraint fulfillments. Witness table fulfillments for protocol types were being ignored because we didn't record them with the proper key--we were just dropping the protocol on the floor and recording null. Fixing this fixes <rdar://problem/12965934> and obviates r3904.
[33mac2d549[m IRGen: Forward wtables from alloc to init ctor.
[33m23279d2[m IRGen: Remove useless 'default'.
[33m7a1db6c[m Sema: Don't BridgeToBlock if already a block. If a value is already of a block type, we can't re-bridge it.
[33ma81cc38[m ClangImporter: Run imported types thru TypeChecker
[33m6cca088[m IRGen: Hack in calls to block converter funcs. Add a mangling for 'block converter' functions and for [objc_block] function types. [objc_block] types also need their own HeapTypeInfo representation that uses ObjC retain/release. When we see a BridgeToBlockExpr, feed the function pointer and context from the Swift closure to the external conversion function and hope we get a block back.
[33me7b4225[m ClangImporter: Import blocks as [objc_block] types Tag the function types generated for block APIs with the [objc_block] attribute.
[33m53dd87d[m Sema: Coercion from (A)->B to [objc_block] (A)->B. Provide a BridgeToBlockExpr AST node as a temporary representation of func-to-block conversions. In Sema, when we see an [objc_block] type, insert a BridgeToBlock node and coerce the subexpression to the non-block func type.
[33m7c3c570[m Parse: Update inaccurate comment Bit of debris from implementing super.constructor. 'expr-super' isn't an expr-unary.
[33m30e715f[m AST: Hack in an '[objc_block]' FunctionType attr. For the demo we'll import block types as [objc_block] (A) -> B types in Swift and rely on the type attribute to handle bridging Swift closures to ObjC blocks.
[33mff8bd17[m Sort the reserved keyword list
[33mb366782[m Rename l_(paren|square)_(call|subscript)
[33m8b8396f[m IRGen: Fix logic inversion in building objc ivars.
[33m18fa300[m IRGen: Use correct func decl to emit virtual calls When looking for the least-derived override to index into a vtable, we now have to stop when we see an ObjC decl.
[33m95a6e4d[m IRGen: Don't emit ObjC methods into vtables. ObjC methods always need to be invoked through objc_msgSend, so they shouldn't have vtable slots, and Swift subclasses that override ObjC methods should always insert override slots into their vtables.
[33m4186e0e[m IRGen: Emit SIL UpcastExistentialInsts. This covers the special case in classic IRGen for ErasureExprs from protocol to protocol type.
[33m2ccfbdc[m SIL: Add an UpcastExistentialInst. Converting from a protocol type to a more general protocol type is different at the implementation level from converting a concrete type to a protocol type, since the witness tables and concrete value can be copied directly from the original existential container to the new without adding another indirection. This instruction represents that operation.
[33ma076d54[m Small fix to the last commit
[33m2ef751d[m Record our current and various generics syntax thoughts
[33m5fe85d7[m Formalize unary prefix '&' to mean "make ref"
[33m93a81f1[m Fix unresolved member versus field access ambiguity
[33mba8abb9[m Apply r3879 to SIL (fix "continue" in do/while)
[33ma2435e1[m Fix "continue" in do/while loops
[33md7cc4b4[m Reclaim "in" as an identifier
[33m6cfcb41[m SILGen: Support super.constructor. Match SuperConstructorRefCallExpr and emit a ConstantRef to the initializing constructor. Remove some now-redundant code in TypeLowering to fake up the type of the initializing entry point.
[33mb98844a[m Fix a test I missed
[33md994ef2[m SILGen: Fix bug in downcast memory mgmt. The downcast ManagedValue wasn't carrying the cleanup from the original value, so even when the downcast value was consumed, the original value cleanup still fired and redundantly released the value.
[33m7b0ef23[m IRGen: Bitcast dtor arguments to RefCountedPtr. In the SIL for a destructor I emit a call to the base class destructor. Although destructors show up in SIL as their decl type T -> (), internally, they all share an LLVM function type void (%swift.refcounted). If an ApplyInst applies to a destructor, bitcast its argument.
[33m6865891[m IRGen: Scrub cleanups from ApplyInst explosions. It looks like CallEmission::emitToExplosion sets up cleanups on its outputs, and I didn't see an immediately apparent way to do so, so this is just a quick hack to scrub those cleanups so they don't interfere with SIL-IRGen.
[33me822b95[m IRGen: Lowering for SIL UpcastInst.
[33m8b1c38b[m SIL: Add an 'upcast' instruction.
[33m2443ec8[m Reserve "non-literal" use of various characters for now
[33mcd952bf[m Pass nil through dynamic casts
[33mf0e2454[m Sema: Overload resolution for super.constructor. Implement overload resolution for SuperConstructorRefExprs when a base class has multiple constructors.
[33m73c3176[m The ++/-- hack doesn't exist anymore.
[33mb2173ef[m LangRef: add float commentary / question
[33m5dee8a5[m Missed a spot.
[33m0bf66da[m IRGen: Separate allocating and initializing ctors. Emit separate entry points for the allocating and initializing constructors. 'super.constructor' now works for the small subset of cases for which I've implemented sema support.
[33m4f73bd5[m ClangImporter: Initializer type for imported ctors Update the Clang importer to setInitializerType on the ConstructorDecls it creates.
[33m008c296[m IRGen: Don't emit poly args for static methods. Static methods and constructors receive class metadata from which they can derive their polymorphic parameters, so adding additional metatype arguments to the function is redundant.
[33m01f7030[m LangRef: Grammar and description of super exprs.
[33mdd717e2[m Update LangRef list of keywords and sort them
[33mf40dfce[m IRGen: Implement SuperConstructorRefCallExprs. Recognize super.constructor calls in IRGen and generate them as calls to the superclass initializing constructor. Note that super.constructor code still won't execute just yet because classic IRGen doesn't generate initializing constructors.
[33m1dcfff8[m 'this' and 'This' are keywords
[33meb5bb20[m Remove unnecessary use of isAnyLParen()
[33m60eb51b[m Document that unary '&' is reserved
[33m057f1b6[m Sema: Type check non-overloaded super.constructor. Implement base class constructor lookup to resolve the function reference for SuperConstructorRefCallExprs.
[33m4789ba7[m HACK: implement === for NSObject using a runtime function.
[33m64719e0[m [HACK] Fix r3837's test for 10.9 vs. 10.8 systems.
[33m14c68e9[m Lexer: Special-case 'super' and 'constructor'. Dave noted that he's trying to scrub the parser codebase of wishy-washy 'isAnyLParen' and 'isAnyLBrace' calls by consistently lexing opening bracket tokens correctly to begin with. Since currently only 'super' and 'constructor' need to be lexed like identifiers for expression syntax (and, in the future, 'this' and 'This' when those become keywords), mark them as a special kind of 'identifier keyword' in Tokens.def and roll back some of the changes I made to make parsing other decls support either token.
[33me6d3c3e[m Parser: Parse 'super' expressions. Set up AST nodes for 'super.<identifier>', 'super.constructor', and 'super[<expr>]' expressions, and implement parsing for them without any sema or backend support.
[33m8af835e[m Lexer: '[' and '(' after a keyword is non-literal. Opening brackets after a keyword have to lex as l_paren_call or l_square_subscript in order for expressions like 'super.constructor()' or 'super[i]' to parse. While we're here, let's move the keyword and punctuator list to a metaprogrammable Tokens.def header too. Update decl and stmt parsers to use 'isAnyLParen' so that, e.g., 'constructor(' and 'constructor (' both work as before.
[33m82eec79[m Relax [assignment] on operators
[33m5be0d3d[m Add missing prefix attribute
[33m7654aad[m llvm::Twine can only be used as a temporary.
[33m5f2f5e1[m Selector data symbols should be prefixed with "\01L".
[33m735294a[m Make the lexing of '(', '[', and '.' consistent
[33m0d0b4af[m HACK: Don't set the Swift bit in class metadata on 10.9.
[33m7a7e14a[m IRGen: Emit SIL destructors. Emit the SIL destructor as a destroying destructor, then emit a deallocating destructor shim that calls into it and then returns the heap size. (The actual deallocation still happens in swift_release--I talked to John about that and I'll fix it later.) This gets the broken SIL/IRGen class tests passing again.
[33m5be34d6[m IRGen: Fix type of initing ctor, destroying dtor IRGen was generating the exact same signature for the initializing/allocating constructors and destroying/deallocating destructors. Make it do the right thing by typing the initializing constructor as Swift T -> (...) -> T and the destroying destructor as LLVM void(%swift.refcounted*). (This will later change to '%swift.refcounted*(%swift.refcounted*)' pending some irgen/runtime cleanup.)
[33m9e971af[m SILGen: Make initializing ctors return this back. John recommended this because it has a number of benefits: - It avoids a retain/release cycle, because 'this' can be passed to the initializer at +1 and just received back at +1. - The allocating constructor can thus tail call the initializing constructor. - If we end up needing to support rogue ObjC initializers that change self, we're set up to do so.
[33m68049a2[m Fix ObjC Makefile to match previous rename to ObjectiveC.
[33m2c86130[m Remove ScriptingBridge compiler hack, tests, and adapter library.
[33m2d51225[m Misc cleanup
[33mac4592f[m Part 2 of 2: make "for (;;)" work
[33m041e91d[m Part 1 of 2: make "for (;;)" work
[33m0ea22a8[m Make pattern parsing match LangRef
[33m523c4bc[m Disable operators in nonglobal scopes other than protocols
[33m5852448[m IRGen: Generate SIL ctor and property decls. Remove the filter that only irgenned SIL functions for FuncDecls so that we emit functions for all SIL decls, and disable the old paths for properties, constructors, and destructors when a SIL module is present. Unfortunately this breaks class constructors because SIL and IRGen don't agree on how initializing constructors should work. I need to sync with John to figure out how to fix that.
[33mae396e3[m IRGen: SIL AllocRefInst. Implement AllocRefInst so that SIL-emitted constructors can be irgenned. Factor the code for allocating a class instance from GenClass's emitClassConstructor function.
[33m32889de[m SILGen: Make destructor a "destroying" destructor. IRGen can handle synthesizing the deallocating destructor in terms of the destroying destructor, and SIL will likely never have to refer to a deallocating destructor directly, so generate the body of the destroying destructor only and consider a SILConstant::Destructor to be a destroying destructor in IRGen terms.
[33m2f31759[m Remove SemiStmt class
[33m8c48a3a[m IRGen: Map SIL allocating/initializing ctors. Now that John's implemented allocating and initializing constructors in irgen, map SIL's representation to irgen's.
[33m9eb53f3[m 12641063 Fix the double-indent problem with properties
[33mc806392[m Function declarations must have bodies
[33m19d65fe[m IRGen: Visit all SIL Functions in a SILModule. Make the SIL visitor path a bit less hacky by more cleanly separating the AST walk to find types to codegen from the SIL module walk to find functions to codegen. This way, local functions and other such entry points from SIL actually get generated, and the closures test works.
[33m572f768[m Minor attribute parsing cleanup
[33mc9d6a35[m IRGen: SIL ClosureInsts (almost). Implement lowering of SIL ClosureInsts by packing the partial arguments into a heap allocation and emitting a thunk to unpack them and apply the closure function, similar to curried entry points. The test doesn't work quite yet because nested FuncDecls don't get visited anymore. I need to replace my hacked SIL path with a proper walk of the SIL module to generate functions and the AST to generate types.
[33ma17a812[m IRGen: Add 'retain' and 'release' to TypeInfos. These let SILGen retain and release arbitrary Explosions without having to work around cleanups. Also remove 'transfer' because I'm dumb and didn't realize 'reexplode' already does the same thing.
[33mb7c0362[m SIL: Properly type closure constants and insns. I was being lazy by not mangling the context arguments onto the types of closure SIL constants and then having ClosureInst pass the type of its callee through T -> T. Now closure functions get emitted with the right types, ClosureInst properly partially applies the type, and the SIL Verifier properly checks that the argument types all line up correctly.
[33m3713b6a[m Add a framework for distinguishing between deallocating and non-deallocating destructors and allocating/non-allocating constructors.
[33m7eb4fbd[m Mangle the <context> of an ObjC class as 'So'.
[33m86fd484[m Clean up var decl parsing
[33mcd5eac5[m Adopt a consistent comma parsing style
[33m18cde6e[m ObjC method records have selector data pointers, not selector ref pointers.
[33mb43d054[m Emit class definitions for classes marked [objc].
[33m0877541[m Given selector-data arrays a more semantic name.
[33m2d03621[m Fill in _objc_empty_cache and _objc_empty_vtable.
[33m5674cfd[m IRGen: SIL literals and zero initialization. Pick up the remaining low-hanging fruit by implementing irgen for FloatLiteralInst, ZeroValueInst, and ZeroAddrInst.
[33mff6138f[m asmparser now depends on bitreader (CMake edition)
[33m8e4e57e[m Apparently the LLVM asm reader now depends on the bitcode reader.
[33m9b8cbfc[m Use the type mangler for IR type names.
[33mf166686[m Permit invoking the mangler with either a buffer or a stream.
[33m9a4984b[m Use mangled type names for classes unless exporting them as [objc].
[33m9ab2596[m Move everything into the main switch in LinkEntity::mangle.
[33m6c6d4df[m IRGen: Implement SIL protocol method calls. Factor out the parts of GenProto's prepareExistentialMemberRefCall necessary to map to SIL's ProtocolMethodInst. Similar to ConstantRefInst, we map the ProtocolMethodInst to an incomplete CallEmission and emit the call when all curry levels have been applied.
[33m0422897[m Expose %swift.opaque as a builtin type. Archetypes and projected existentials have the type %swift.opaque* and not i8*, so I need a corresponding SIL type to be able to model the ProjectExistential operation. We might also end up needing the builtin type for other low-level things down the line.
[33m8f09556[m Update the module importer for Clang r172665.
[33m3f9a9b0[m Put the ObjectiveC module in /usr/include/objc in the tests.
[33ma0c019e[m HACK: Search for modules in /usr/include/objc/ to find the ObjectiveC module.
[33m2058d04[m s/ObjC/ObjectiveC/g in tests, too.
[33m02c3c87[m Collect references to non-generic classes in __DATA,__objc_classlist.
[33md2c91a2[m IRGen: SIL protocol type value support. Factor out the witness table initialization and projection logic from GenProto so that IRGenSIL can use it to implement the ProjectExistential and InitExistential instructions. Also map the CopyAddr and DestroyAddr instructions to value witness table calls so that value semantics on protocol values (and other address-only values) work. The added test compiles but doesn't run yet because invoking methods on a protocol value still requires implementing the ProtocolMethod instruction.
[33mc2096a4[m SIL: Include conformances in InitExistentialInst. IRGen needs the conformances to be able to initialize an existential container.
[33mfa197bf[m The latest OSX 10.9 SDKs have changed name of the ObjC module to ObjectiveC.
[33m1459512[m IRGen: SIL tuple helper instructions. Implement ElementAddrInst for lvalue tuples, and implement the AllocArray, IndexAddr, and IntegerValue insts used to lower variadic tuples. (Actually compiling code that uses variadic tuples still requires support for SpecializeInst and generic functions.)
[33mc303ef1[m SIL.rst: update ref_element_addr description.
[33m312e487[m IRGen: SIL class accessors. Implement IRGen for RefElementAddr so that class accessors work. Add a loadUnmanaged method to TypeInfo classes so that we can populate Explosions without accruing unwanted cleanups.
[33m521b937[m SIL: Make RefElement take VarDecl instead of index This is inconsistent with ElementAddr and Extract, but allows all the hairy logic of accessing class fields in IRGen to stand without a bunch of pointless refactoring.
[33m197b9e9[m SILGen: Emit param patterns in reverse order. Conform to IRGen's curried calling convention by emitting param patterns in reverse order, with the indirect return argument (if any) coming first.
[33m7e57041[m IRGen: SIL struct manipulation. Implement ElementRefInst so that struct accessors work. Also extend SILConstant lowering to support constant_refs to constructors, destructors, and property accessors so that constructor and property accessor references work. (Constructors don't yet get visited by IRGenSIL, though.)
[33mb6ba399[m Mark invalid decls as erroneous and improve error location reporting
[33md0a0d1b[m Remove fixed FIXME
[33m6504d35[m Catch more invalid ctor/dtor/subscript decls during parsing
[33m5a2d5cc[m IRGen: Switch IRGenSIL to use DenseMap. DenseMap in LLVM now has a move-insert method, so std::map isn't needed to hold noncopyable Explosions and CallEmissions in the IRGenSILFunction object anymore.
[33m30a5493[m IRGen: Lower SIL retain instruction. Oops, I did release but not retain. Like 'release' it currently just does emitRetainCall without checking if the type in question requires ObjC or some other future kind of memory management.
[33mafa65ef[m IRGen: SIL function arguments and return values. Lower arguments and value returns instead of assuming all functions are () -> ().
[33m9b27270[m IRGen: Add a 'transfer' method to TypeInfo. Transfers values from one Explosion to another similar to 'copy' by transferring ownership instead of copying the values/cleanups.
[33m8320df8[m IRGen: SIL branching and variable allocation. Implement SIL-to-IR lowering for allocation, deallocation, load, store, and branching instructions so that local variables and branching control flow can be used. Add a Fibonacci loop test to exercise the new instructions.
[33mbd29e1c[m runtime/Stubs: Fix name of Bool.getLogicValue stub The Bool.getLogicValue stub was mangled incorrectly, but nobody noticed because irgen special-cases away calls to getLogicValue. SIL-irgen however is still naive enough to expect a real getLogicValue entry point.
[33mee8fd2f[m ABI.rst: Fix formatting of preformatted blocks.
[33m33b9f24[m Cleanup: Move Range logic out of Enumeration
[33m3b1aef5[m Fix an unused variable build warning
[33m7c13671[m Fix a build warning (missing newline at EOF)
[33m0970a18[m IRGen: Compile the toplevel through SIL. If IRGenModule has a SILModule, use its toplevel Function to emit the top-level code instead of re-walking TopLevelCodeDecls itself.
[33mc39e922[m Quell warning about the new 'Half' IITDescriptor.
[33m9259c0d[m IRGen: Get "hello world" to compile through SIL. Add a path through IRGenModule to optionally codegen FuncDecls using their corresponding SIL Functions when constructed with a SILModule. Jury-rig an IRGenSILFunction subclass of IRGenFunction that does the bare minimum necessary to compile "hello world" from SIL. There are some impedance mismatches between irgen and SIL that need to be smoothed out, particularly the AST-dependent way irgen currently handles function calls. Nonetheless, `swift -sil-i hello.swift` works!
[33m4239b2e[m SIL: Make Value::operator bool() explicit. Implicit conversions to integer are bad news.
[33m662afea[m Add '-sil-i' option to driver. Will allow immediate execution through SIL-irgen when SIL-irgen actually exists. Also add NeedsOutput_{First,Last} symbols to the ActionType enum so that the insidious enum ordering significance there is more obvious.
[33m9232d33[m Add formal Word and UWord types
[33m3fc716c[m Introduce (and disable): Complex<T>
[33md22dcc9[m Fix copy-and-paste extension parsing error message
[33med5de91[m Fix build warnings
[33mbb51760[m SIL.rst: Describe calling convention for tuples. Tuples recursively destructure, and the destructured elements then follow the normal calling convention.
[33m45ed2ef[m Emit correct ivar bounds and offsets.
[33md4f80a3[m Introduce a ClassLayoutBuilder and use it to build layouts.
[33m288210e[m Refactor StructLayout into a builder pattern.
[33m61dd264[m Add a flag (always true) for whether to support ObjC interop.
[33mf683865[m Use SwiftObject as an implicit super class on swift root classes.
[33m8c0a464[m Just one implementation of hasKnownSwiftImplementation.
[33mb3aa330[m [objc] doesn't make a class ObjC refcounted.
[33m2e0070e[m Emit metaclass stub objects for swift classes.
[33mf6c2e0a[m Support for emitting references to ObjC metaclasses.
[33maba47a6[m Add a '-sil-emit-llvm' option to the driver. It doesn't do anything but crash yet. Also add an entry point fo SILGen to Subsystems so that it can be invoked without dependency on SIL or SILGen.
[33mbfa017d[m For now, don't import properties in protocols at all (for real this time).
[33m6f11e39[m Xcode support: add SWIFT_INCLUDE_PATHS and SWIFT_OTHER_FLAGS.
[33m31cdecb[m For now, don't import properties in protocols at all.
[33mc320fe1[m SILGen: Implement variadics in argument tuples. Bring variadic support back to tuples in argument contexts. Since the variadic part of a tuple is never going to be destructured, we can evaluate it all eagerly and reuse the code in emitTupleShuffle that was already there.
[33m740e7d9[m SIL: Use SILLocation in SILBuilder methods. Update some laggards in SILBuilder that still were demanding Expr*s of some form rather than SILLocations.
[33mae7fe7b[m TypeCheckCoercion: Use TupleShuffleExpr constants. -1 == TupleShuffleExpr::DefaultInitialize -2 == TupleShuffleExpr::FirstVariadic
[33mb4c1ea8[m SILGen: Recursively destructure tuple arguments. Fully and consistently destructure tuples when in a function argument context, and require that ApplyInst always take destructured arguments corresponding to the lowered argument types as its inputs. This eliminates a ton of finicky special-case code all over the place and also has the nice fringe benefit of avoiding a bunch of useless TupleInsts that were being emitted before. Currently this breaks variadic tuple fields and argument writeback. I'll fix variadic tuple fields soon. The argument writeback sucked anyway and I'll do it right later.
[33md9db6d8[m SIL: Make (Archetype|Protocol)Method with pre-formed types. Deriving the instruction type of these nodes needs to go through SILGenModule so that their SILTypes have SILFunctionTypeInfo properly associated with them.
[33m2858bc4[m SIL: Replace '-dump-sil-verbose' hack with DEBUG()
[33mf390ee6[m SIL: Fix bug in SILFunctionTypeInfo. The SILFunctionTypeInfo constructor wasn't initializing the inputTypeCount. How it even seemed to work at all is a mystery.
[33mac07134[m SILVisitor: Visit basic blocks and bb arguments. Handle overridden visitFunction and visitBasicBlock methods, and in the default implementation of visitBasicBlock, recur into the block's arguments in addition to its instructions.
[33m22a54a2[m AST: Don't use magic values in TupleShuffleExpr. Call the special "-1" and "-2" values in a TupleShuffleExpr's shuffle mapping "DefaultInitialize" and "FirstVariadic".
[33m339c18c[m Don't replace a Swift module with a Clang one in the list of loaded modules.
[33m355dc02[m Fix import for SB(Typed)ElementArray.
[33m3e53322[m Forward -I option on to the module importer.
[33mf8ddd7c[m Add SBTypedElementArray as a typed variant of SBElementArray.
[33m92d87de[m Build warning fix: missing newline at EOF
[33m2bed090[m SILGen: Oops, left some debug dumps in.
[33mb406e56[m SILGen: Generate type info for function types. Record the destructured input types, result type, and indirect-return-ness of function types so that they are available for IRGen.
[33m4dffe60[m SILGen: TypeLoweringInfo.{h,cpp} -> TypeLowering The module itself performs type lowering, it doesn't just house TypeLoweringInfo.
[33mcb03dbd[m SIL: Associate SILTypeInfo with the SILModule. For some types, there is lowering info that is useful to IRGen, such as the SIL-level calling convention for functions or the element layout of aggregates, that can't fit in a SILType pointer but still should be associated with the module. Add a SILTypeInfo hierarchy, add a mapping of SILTypes to infos to SILModule, and rename the SILGen-specific TypeInfo to TypeLoweringInfo. Move the derived layout information for compound types from TypeLoweringInfo to SILTypeInfo so that IRGen will be able to use it.
[33m10924e2[m SIL.rst: Tidy up existential container description Consistently use "existential container" to refer to the protocol-typed container object and "concrete value" to refer to the subobject owned by the existential container. Simplify the example a bit by removing the extraneous function call.
[33m49521d6[m SIL: Rename instructions. ExistentialMethod -> ProtocolMethod for better specificity. [De]AllocExistential -> [De]InitExistential because it doesn't necessarily allocate anything.
[33mda356c6[m SIL.rst: Existential terminology Change the name of the implementation detail underlying protocol and protocol composition types to "existential container" while replacing references to "existential type" with "protocol or protocol composition type".
[33m0bf47aa[m SILGen: Count base class fields for field offsets. Derived class fields were being given offsets from zero even if the base class has fragile fields.
[33mede0fc2[m rework r3701 a bit to pull the uncommon cases out of the hot path of the operator lexer loop.
[33mb4e73a4[m Eliminate my ill-fated renaming of parameters in performSelector:withObject:withObject:.
[33m2127037[m Robustness: clean up handling of '.'
[33m7a25fe6[m Robustness: tighten up ".42" float literal lexing
[33m1af9c2b[m Robustness: better comment detection
[33mb58a87c[m do an inttoptr/ptrtoint dance to enable atomics on Builtin.RawPointer, implementing: rdar://12939803 - ER: support atomic cmpxchg/xchg with pointers
[33m9f5ba42[m Update for SMRange becoming half-open instead of inclusive.
[33m35c2b30[m Small doc fix after the Float/Double typealias shuffle
[33m3454762[m UTF8 validation: don't let reserved values slip through
[33mb15b306[m Emit ObjC metadata and swift-as-ObjC thunks for methods.
[33m4ecd464[m Abstract out a type for storing an OwnershipConventions object.
[33m8a542a1[m Build method entries "online" rather than collecting methods first.
[33m1ac5ced[m When performing name lookup into a member of an archetype, substitute the 'This' type through. Fixes <rdar://problem/12959759>.
[33m5749e90[m SIL.rst: Catch up with the current state of SIL.
[33m2ffe9f8[m SILGen: Fix detection of address-only generics. BoundGenericTypes aren't NominalTypes, so TypeInfo wasn't correctly walking generic StructDecls and propagating address-only-ness for generic struct types.
[33m7f0663f[m didn't mean to commit this.
[33ma3b61a6[m SILGen: Fix dtor of class with generic base. emitDestructor wasn't properly SpecializeInst-ing the base class destructor constant before calling it.
[33m481f012[m SILGen: Refactor "epilog" code for ctors and dtors Constructors and destructors both set up an epilog block so that 'return' within the decl body has a place to branch to without skipping all the implicit behavior. Factor out the common code to branch to and emit the epilog basic branch, and throw in a peephole optimization to fuse the BB when it has no predecessors (as it currently always does because of rdar://problem/12950817/).
[33mc378beb[m Fix rdar://12951176 - rejecting */, instead of parsing it as an operator.
[33m08399cf[m SILGen: Emit allocating/initializing class ctors. Add a new SILConstant kind to refer to the initializer of a ConstructorDecl. Emit class constructors as separate allocating and initializing functions named SILConstant(CD) and SILConstant(CD, Initializer) so that derived classes will be able to invoke their superclass constructor.
[33m14b0cda[m XFAIL: warn C programmers about f(x = y) bugs
[33m9b2a906[m Include Intrinsics.gen at its actual location.
[33m8e0a421[m XFAIL: constraint checker vs static funcs in protocols
[33m78785c9[m Char: add NUL literal and unit tests
[33m480c1b8[m Split Char and StringByte out of String.swift
[33mc205840[m Add Float16 and Float128 but only typecheck them
[33m2ed2aaa[m Add Float80 and limit it to x86/x86_64 with a build system hack
[33m33076b5[m Split FloatingPoint.swift into Float32.swift and Float64.swift
[33m718126b[m SILGen: Emit implicit destructors. Add a new "kind" to SILConstant so that SIL can reference destructors without decls. Generate a destructor for classes even if they don't have an explicit destructor. If a class has a base class, call the base class destructor instead of dealloc_ref-ing the current instance.
[33m984f1da[m SILGen: Generate explicit constructors. Generate ConstructorDecl bodies, sandwiched between code to allocate an instance before running the body and code to return the initialized value afterward. Still need to: - handle the implicit constructor for structs - divide the class constructor into allocating and initializing entry points - chain a call to the base class initializer entry point from the derived class initializer
[33m05adc65[m SIL: Add AllocRefInst. Represents a raw allocation of a reference type instance. This lets us implement constructors for reference types.
[33m5ffbcc9[m Make Float/Double be typealiases to Float32/Float64
[33m2249308[m Build/install Swift ObjC module.
[33m6de1444[m Build/install the Swift ObjC module.
[33mdd53919[m LangRef: for-each now uses formal protocols
[33m3959f6f[m LangRef: '//', '/*', and '*/' are not overloadable
[33m7b2c1a3[m SILGen: A first pass at generating destructors. Generate explicit destructors by emitting their bodies then emitting release sequences for the class's members. Eventually we'll need to also emit implicit destructors for classes without explicit destructors and to chain a call to the base class destructor, which will require adding a new linkable entity flag onto SILConstant for destructors, similar to getter/setters.
[33m6f90929[m Map the Objective-C SEL to a library-defined ObjCSel type.
[33ma6ca4ce[m Rename "objc" module to "ObjC", to match what we're doing in the SDK.
[33mf40f990[m Improve our logic to emit all of the thunks generated by the Clang importer.
[33m89ff73f[m Break up the ObjC integration layer by frameworks.
[33mef7c502[m Move policy out of Misc.swift into Policy.swift
[33ma9ccf33[m XFAIL: assignment operator in protocol doesn't detect byref argument
[33m4f31120[m Fix a build warning in Release builds
[33me224c49[m Using numbering of parameters to cope with Objective-C selector identifiers.
[33ma6f634c[m SILGen: Generate SuperToArchetypeExprs. Use SuperToArchetypeInst to handle super-to-archetype downcasts.
[33me7fc1d0[m SIL: Add SuperToArchetypeInst. Add an instruction to represent super-to-archetype downcasts. Since archetypes are address-only, it needs to take a reference to the destination archetype as a parameter.
[33m394172a[m Import Objective-C protocols as Swift [objc] protocols.
[33m661f6d8[m SIL: Destruct Instructions when they're erased. Invoke the leaf destructor for the Instruction when it's eraseFromParent-ed, so that the SILSuccessors of BranchInsts get updated when branches are removed. This un-breaks the peepholing of breaks out of else blocks.
[33md61a561[m Isolate the missing return value bug from the topic of default return values.
[33m47dbc40[m update for mainline LLVM header file moves.
[33me002576[m XFAIL: default return values
[33m58722d6[m Commit XFAIL test for default construction
[33mba7f0b0[m Enable '==' and '!=' for class references
[33mc446a32[m this doc isn't about the memory model.
[33m5c126a8[m fix some typos in the REPL :help command's output.
[33mbb38918[m move the LLVM IR intrinsics namespace from Builtin.x to Builtin.int_x (e.g. Builtin.int_trap instead of Builtin.trap) to avoid conflicts between IR instructions and intrinsics (e.g. trunc and llvm.trunc).
[33m854880b[m simplify some code by using the new implicit TupleTypeElt ctor.
[33mdb63db1[m expose the llvm atomicrmw instruction through the builtin module to swift code, wrapping up rdar://12939282.
[33m53baaaf[m implement support for generating the fence instruction through Builtin.fence_*, part of rdar://12939282
[33mfd2a449[m expose the llvm cmpxchg instruction featureset through to the swift Builtin module, first part of rdar://12939282.
[33m1326914[m allow a default identifier when constructing tuple elements.  Many are anonymous, and having to specify Identifier() explicitly is a nuisance.
[33m1fd5d9c[m clean up Builtins.def:  - Don't require "OverloadedBuiltinKind::" to be in the invocation    of a bunch of builtins for their specification of overload info.    Eliminating this makes the file fit in 80 columns.  - Eliminate a bunch of classifications that only classify one thing,    in favor of a "BUILTIN_MISC_OPERATION" dumping ground for all the    custom stuff.  This eliminates a bunch of boilerplate.
[33m41433f2[m Improve diagnostic for use of unknown protocol member, make the base case diagnostic strip of lvalue wrappers, make the base diagnostic mention the member name, and add a radar number for a really terrible diagnostic that needs to be solved in another way (12939553)
[33mc532e24[m improve diagnostic on use of a type field when referencing the metatype.
[33m3cf9b8f[m improve diagnostic for use of invalid tuple element.
[33m01440c4[m improve another shameful diagnostic from:   base type 'X.metatype' has no valid '.' expression for this field to:   metatype 'X' has no member named 'z'
[33ma2150be[m improve a diagnostic from:   base type 'module<swift>' has no valid '.' expression for this field var error = swift.nonexistent_member" to:   module 'swift' has no member named 'nonexistent_member'
[33m3487cde[m fix a pedantic warning.
[33md9bce8b[m check in some stuff that is in flight that I've been carrying around for awhile, this is not actually sensible yet.
[33mb19f4ff[m fix typo in regex.
[33m7351a1a[m IRGen: Update for llvm changes. llvm::Attribute::AttrVal was renamed to llvm::Attribute::AttrKind.
[33maee8fc3[m Start the "stdlib2" subproject as a test
[33m93ca0d3[m SILGen: Remove broken Condition::exitFalse merging We never actually invoke destructors on SIL Instructors, so the nice SILSuccessor RAII thingy in BranchInsts never kicks in to fix up predecessor lists when we erase BranchInsts. Disable the code in Condition::exitFalse that tries to merge terminated else blocks and triggers an assert because of stale predecessor info. After the break I'll look into making Instruction::eraseFromParent actually perform some sort of instruction-specific cleanup.
[33mc8d7cd1[m SIL: Clean up some stray dumps.
[33m725bcd9[m SILGen: Fix DenseMap abuse in TypeConverter. Passing around internal references to a hashed container--not the best idea. Allocate TypeInfos from a bump allocator so they have fixed addresses and stash the pointers in the type map. While we're here, simplify the FragileElement interface a bit by making it take ValueDecls directly as keys instead of identifiers.
[33m619cfde[m SILGen: Handle GenericMemberRef of associated type Associated types still (correctly) manifest as GenericMemberRefs of the metatype. Use the new AssociatedMetatypeInst to represent getting an associated metatype from a generic.
[33m1892f51[m SIL: Add AssociatedMetatypeInst. Represents getting an associated type metatype from a generic metatype.
[33m4eeb8ea[m SIL: Fix ApplyInst verifier bug. If a function has an address-only return and a single non-tuple argument, then it's valid to have a two-argument call where the first argument matches the function input type and the second matches the result type. This occurs for instance if you try to call Builtin.load, with type Builtin.RawPointer -> T, for an address-only T.
[33mb75c948[m SILGen: Fix address-only return in curried decl. Checking the result type of the FunctionType for address-only-ness doesn't work for a curried func decl, whose result type is a function type. Pass down the result type from the func decl to emitProlog instead of letting emitProlog derive it from the expr type.
[33m0c15148[m SILGen: Reimplement var tuple initialization. Provide a temporary lame implementation of tuple initialization in emitExprInto so we can reenable the decls tests and fix up some other things before fully implementing in-place initialization.
[33m275324f[m Don't indent every decl/stmt when we print it; rather, make it up to the container to do so.
[33ma677583[m Add pretty-printing for statements.
[33m27d314c[m Print -> rather than : for the element type of a subscript
[33mc9ff336[m Add :print_decl <name> option to the REPL.
[33m7241c3d[m Fix CMake rule for installing objc.swift and Foundation.swift.
[33md980831[m SILGen: Add a context argument to SILGenFunction. Add some private per-recursion-level info that will let SILGen track emit-into initializations, materializing into a load, and other peephole optimizations. We'll also need context to be able to distinguish argument tuples from tuple values, which need to lower differently when they contain address-only elements.
[33m554b8f4[m AST: Fix up ASTVisitor's argument support. Missed a few places where the extra args needed to be forwarded.
[33mfd87d78[m SIL: Fix some verifier bugs. ArchetypeMethodInst was still trying to cast to LValueType rather than checking the address-ness of the SIL type, and ApplyInst was failing for an address-only byref argument. This makes the last disabled expressions test pass again.
[33mb7b8c4a[m SILGen: Use Initialization for indirect returns. Indirect return values can be initialized in-place using emitExprInto, like vars and arguments.
[33m975e8dd[m SILGen: Improve initialization implementation. Prepare to do variable and return value initialization the smart way, by allocating the buffer first and then emitting the expression result directly into the buffer rather than by evaluating the expression then allocating and initializing the buffer. Create an Initialization class hierarchy that represents an uninitialized buffer or tuple of uninitialized buffers, and rewrite the argument and pattern binding logic to allocate and build up an Initialization first then emit the expression into it. The "emit into" part still needs to be implemented, as does tuple pattern binding ('var (a,b,c) = ...'). Disable some decls test that do tuple binding for now.
[33m21dcefd[m SIL: Add DeallocRefInst. Needed to represent deallocating an uninitialized box.
[33m621ab37[m SILGen: Let addr-only vals into lvalue MemberRefs. Address-only values are supported well enough now as assignment and function arguments that SILGenLValue::visit*MemberRefExpr doesn't need to weed them out anymore. This lets us re-enable some more checks in the expressions and properties tests.
[33mf8cd913[m SIL: typo in comment
[33m860f02b[m SILGen: Remove GenericMemberRef to metatype hack. Doug fixed the AST representation of type variable metatypes in r3532, so we don't need to check for bugged-out GenericMemberRef-to-metatype nodes anymore.
[33m6378e43[m AST: Allow ASTVisitors to add visit() args. Allow an ASTVisitor subtype to have additional arguments to visit(T *, Args...) forwarded down to its instance methods.
[33me5434f8[m Respond to a change in LLVM trunk.
[33m2fd24f8[m Language workaround to produce prettier callers.
[33m0c0ac93[m SILGen: Update Erasure- and ArchetypeToSuperExpr. Now that we can represent address-only values, SILGen can correctly generate these operations in terms of archetype/existential addresses instead of impossible values. archetype_to_super is slightly tricky since we can forward ownership from the address-only derived value to the loadable base value, which is normally prevented by the ManagedValue interface, so I wrote some special-case logic directly into visitArchetypeToSuperExpr to handle forwarding the cleanup. Reenable some disabled checks in the expressions test for things that work again.
[33mc2f9b19[m SIL: Add DeallocExistentialInst. Needed to represent deinitializing a partially-initialized existential in which the value witness table has been populated by alloc_existential but the value has not been initialized yet.
[33m662861f[m Implement runtime checking for super-to-archetype casts, finishing <rdar://problem/12768631>.
[33mc8c8601[m SIL: Update ApplyInst verifier harder. The result of an address-only returning ApplyInst is going to be empty tuple, not the address-only type. Oops. Rearrange the logic so that it checks that an empty-returning ApplyInst for a non-empty-returning function actually has an address-only indirect return argument.
[33m5a85729[m Rename swift_dynamicCast to swift_dynamicCastClass.
[33m0821ad9[m SILGen: Fix type of global variable accessors. Emit global accessors as type '() -> [byref] T' instead of '() -> [byref(heap)] T' so that the SIL verifier doesn't stumble on unequal LValueTypes.
[33m6d8216b[m SIL: Update Verifier's visitApplyInst. Update the Verifier for ApplyInsts to take into account indirect arguments and returns.
[33mf45c1c9[m Fix dynamic casts to Objective-C-compiled classes.
[33m2b2b2cf[m Replace the constructor 'alllocates_this' attribute with an 'allocate-this' expression.
[33mdc5d615[m SILGen: Implement address-only assignment. Refactor the assignment implementation a bit so that the FullExpr scope for the assignment lasts long enough that we can pass the ManagedValue from the right-hand side down into the visitor for the left-hand side. A physical assignment of an address-only temporary can take the temporary, but a logical assignment involving a setter call does not, so hand the ManagedValue down through emitAssignToLValue and LValue LogicalComponent::storeRValue so forward-ing can do its thing where appropriate.
[33m587537b[m SILGen: Fix lowering of address-only LValueTypes. The "loadable" flag was getting set on SILTypes derived from LValueTypes of address-only types. Fix that.
[33m4a7f84f[m Use NSUInteger, even in our little tests.
[33mb9667e7[m Perform runtime checking of downcasts, aborting if they fail <rdar://problem/12768631>.
[33m2a28e77[m SILGen: Implement calls with address-only arg/ret. Handle address-only arguments and return values from the caller's end. The callee does not assume ownership of address-only arguments, so don't forward their ManagedValues to the apply. If the return type is address-only, allocate a local temporary, pass the address to the function, then give ownership of the cleanup to a ManagedValue referencing the address.
[33m7d8f04a[m SIL: Make SILType independent of Type. Move SILType to its own header, and make it its own container type consisting of a Type with an "isAddress" bit for representing address types. Move the "isAddressOnly" information from SILGen's TypeInfo onto SILType as a second bit, because address-only-ness is extremely useful for verification outside of SILGen. Instead of mangling function types during type lowering, rely on the fact that SILType is no longer a Type to force us to mangle argument and return types when we see them. (We may eventually need SILFunctionType and SILTupleType things to represent lowered SIL function and tuple types containing addresses, but for now we can lower function and tuple components as needed.)
[33m699d3e7[m AST: typo in comment
[33m8d6506f[m SILGen: Temporary hack for address-only tuples. Tuple values are currently abused by SILGen for handling function arguments, and dealing with indirect tuples will complicate that logic. Punt on classifying tuples as address-only till we can fix up function handling logic.
[33mdd69776[m SILGen: "Materialize" address-only values. Address-only values are already in memory, so when we materialize one, just transfer ownership of the value in the buffer from the ManagedValue rvalue to the Materialize temporary lvalue.
[33m3f19098[m Emit importer-generated thunks as linkonce_odr hidden into every translation unit that imports the corresponding module.
[33mc028c79[m Emit excessive instance-variable offset global variables.
[33m69c352e[m Fix the mangling of VarDecls in generic contexts.
[33m84e6944[m Fix and test resilient-offset class field access.
[33mf44ff7b[m Add offsets in class metadata for fields of generic classes.
[33md01b272[m Untested infrastructure for emitting non-constant field accesses.
[33maab2997[m SIL: Print SIL type when dumping Functions.
[33m0d34838[m SILGen: Handle address-only arguments and returns. Use copy_addr to copy argument addresses into local boxes and to store to the return value address when working with address-only types. Add a bit to ManagedValue so that it knows when it's referencing an address-only value (as opposed to just an address) so it can require that forwarded address-only values be forwardInto-ed a memory location.
[33m0ecddea[m Implement IR generation for super-to-archetype casts.
[33m6ad32a2[m SIL: Use SILType and lower types where needed. Change over SIL Values and Instructions to work in terms of SILTypes, and update SILGen to lower types where needed. Add LValueType logic to SILType lowering to get rid of those annoying lvalue qualifiers so we can ignore RequalifyExprs. Tighten up the XFAILs in the SIL tests and disable the checks that currently crash.
[33m59ab9d1[m Split superclass-to-archetype downcasts into their own expression node.
[33maaea6d9[m Import Objective-C properties annotated with 'iboutletcollection' as typed collections.
[33m75c8591[m When lookup finds a generic parameter, treat it like a local declaration, not a member declaration.
[33md2c40ee[m Move the ObjCBool type into the 'objc' module.
[33md4980b6[m When naming a Swift type from the Clang importer, also provide a module to look in.
[33mbfcd827[m Every Swift file is a module; let name lookup find the name of the current module.
[33m342742e[m Add cases for builtin OpenCL types that we don't care to import into Swift
[33m89b9247[m Switch default location of the modules SDK to not include the 'M', since Cab13A335 has all we need.
[33mdc1af6a[m SILGen: Implement address-only type lowering. Add a getLoweredType() method to SILGen's TypeInfo and logic to convert function signatures and address-only types to their SIL-level representations. Drive a (currently weak) type wedge between lowered and unlowered types by making a SILType subclass of CanType. Make SILConstants take on their lowered function types. This breaks a bunch of SIL test cases, which I've temporarily XFAILed until proper address-only type support can propagate through the rest of SILGen.
[33mc825deb[m Cleanup Enumeration
[33m601f1d3[m SIL: Move SILModule::getConstantType to TypeInfo. Determining constant types requires help from SILGen because of address-only types, and the type of a constant after SILGen should always be readily available from the ConstantRefInst. Initialize SIL Function objects with their lowered type as well so that it's available to IRGen and SIL passes.
[33m7f3939f[m SIL.rst: Describe calling convention. Loadable types are passed and returned at +1. Address-only arguments are passed by reference and callee-copied. Address-only return values are passed as an implicit argument to caller-owned uninitialized memory and are callee-initialized.
[33m57ad36d[m SIL.rst: Call addresses *T instead of Address<T>.
[33me75c019[m SIL.rst: Add descriptions for newly-added insns. Also repaint the "existential" bikeshed since there's a loud preference for talking about existentials as existentials within the implementation.
[33m113faab[m Fix warning during RELEASE builds and fix -Wnewline-eof bugs
[33m90b3f31[m SILGen: implement ArchetypeToSuperExpr. Add an ArchetypeToSuperInst to represent archetype-to-base-constraint-type conversions. Use it to emit ArchetypeToSuperExprs.
[33medbc00b[m SILGen: Implement MetatypeConversionExpr. Handle MetatypeConversionExpr by emitting a MetatypeInst for the destination metatype.
[33mdd71511[m SILGen: Make DeclRef of metatype emit MetatypeInst If a DeclRef references a metatype, it should emit a MetatypeInst instead of a ConstantRefInst.
[33m24a358a[m Use Doxygen formatting in a doc comment.
[33m5ea8de9[m Match {}, (), and [] during parse recovery (skipUntil*).
[33m2dbbb79[m When parsing in script mode, the file name may not be a valid identifier.
[33m5385bc8[m Test: property load/store optimizations
[33m1fa8ac0[m SILGen: Implement DerivedToBaseExpr. Represent it as an implicit_convert instruction since it has no runtime representation effect. Factor out the common implicit conversion code among the other ImplicitConversionExpr subtypes.
[33m45c675d[m SILGen: Half-implement ErasureExprs. Proper handling of existentials requires address-only types. For now, we can implement proper initialization of an existential in memory then "load" it as a hack so we can move on with other nodes.
[33m03dd05c[m SIL: Add ProjectExistential and AllocExistential. ProjectExistential derives the value pointer from an existential, and AllocExistential initializes an existential's witness tables and allocates its value. Tweak SILGen's handling of ExistentialMemberRefExprs to emit a project_existential between querying the method and applying it.
[33m59fb775[m SILGen: Implement existential method references. Handle ExistentialMemberRef for methods by emitting ExistentialMethodInst, similar to ArchetypeMemberRef. Properties still need to be implemented.
[33m6d77ef4[m SIL: Add ExistentialMethodInst. Like ArchetypeMethodInst for existential types. Factor out a common WitnessTableMethodInst for both insns.
[33m112d0e1[m SIL: Clean up extra dumps in verifier.
[33m6b7405e[m SILGen: Fix associated types in archetype methods. Pass down the AST type from the ArchetypeMemberRefExpr, which has the right locally-bound archetypes, rather than derive the method type from the decl.
[33m92a5e69[m SILGen: Implement archetype method references. Use ArchetypeMethodInst to implement ArchetypeMemberRefExprs that reference methods. Properties are not yet handled. Fix up ArchetypeInst implementation a bit to substitute the "This" type in the method type and to accept archetype-metatypes in addition to archetype addresses.
[33m5d405e5[m SIL: Add ArchetypeMethodInst. Add an instruction to get a method implementation from an archetype's protocol witness table.
[33m4de1cee[m SILGen: Fix GetMetatypeExpr. Implicit type-to-metatype conversion is not a no-op but should fetch the appropriate metatype.
[33md2030f9[m SILGen: Fix bug with generic member lvalues. LValue components can't derive their member types from the type decl because a generic type decl has unbound type vars. Get the type for the MemberRef lvalue component from the expr. Add a RequalifyComponent type because we don't fake the right LValueType qualifiers anymore.
[33mcad196c[m SILGen: Fix subscript index type is type variable. When deriving the specialized subscript accessor type from a generic subscript, we can't get the index type from the decl, because its type variables will be unbound. Get the type from the index expression node instead.
[33mb2692db[m SILGen: Implement InterpolatedStringLiteralExpr. Generate InterpolatedStringLiteralExprs by visiting their semantic exprs.
[33m704d0ca[m SILGen: Kludge type variable GenericMemberRefExprs According to John, the AST representation of type variable values, which currently appear as GenericMemberRefExprs on the generic metatype, might be wrong. For now, I'll handle these by emitting metatype instructions on the type variable type, which should work because the method already has a local type variable representing the same variable.
[33m9474a81[m SIL: Generalize MetatypeInst. Allow MetatypeInst to be constructed with any expr of metatype type, not just MetatypeExpr nodes.
[33m9f7b89b[m Add a -dump-sil-verbose option. Since I can't seem to help myself from committing my local debug dumps.
[33m99c3100[m SILGen: Back out debug dumps again. Sorry.
[33me96dc2d[m SILGen: Implement GenericSubscriptExpr. Subscript accessors of generics also need to be specialized before being applied, like member properties.
[33m3e14d97[m SILGen: Specialize generic property accessors. Generic accessors need to have a specialize instruction applied to them to get the concrete accessor before applying them.
[33m62e4e71[m SILGen: Implement CoerceExpr and DowncastExpr. Use the new CoerceInst and DowncastInst instructions to handle Coerce and Downcast expressions.
[33mb335710[m SIL: Add CoerceInst and DowncastInst insns. Add instructions to represent type coercion and downcast conversion operations. Factor out a common ConversionInst base class for Convert and these instructions, and rename ConvertInst to ImplicitConvertInst to distinguish it from these new explicit conversion instructions.
[33m13631e1[m Not every imported generic is called CPointer
[33m8e81b94[m Implement IR generation for archetype-to-super conversions.
[33m71a7408[m Teach name lookup to remove overridden methods in extensions from its results.
[33m0348213[m Use proper 'this' parameter types for Objective-C getter/setter thunks.
[33m7142b34[m SIL: Make SpecializeInst own its Substitutions. Have SpecializeInst own its Substitution array so that a SpecializeInst can be instantiated independently of a backing SpecializeExpr in the AST.
[33m0401a24[m SIL: Fix typing of generic property accessors. Getters and setters of generic types have polymorphic function type '<T...> This<T...> -> A -> R', not a bound function type.
[33m0aec96e[m SILGen: Delete debugging dump deluge.
[33m6b64e6c[m SILGen: Implement generic member access. Add visitors for GenericMemberRefExpr so that accessors to generic physical members with monomorphic types work. Access to members with generic types still requires proper archetype support. Access to logical properties currently breaks because of a bug in the generation of property method types.
[33mb90adfa[m Add linking support for field-offset variables.
[33me225e4f8[m Implement subclass data layout in the maximally-fragile case.
[33m6c2b8a2[m Easy case of superclass references in class metadata.
[33m86f4aac[m Basic infrastructure for emitting class_ro_t structures.
[33md09d59d[m Add a convenient way to query whether a type is POD.
[33m86b46ca[m Add a file for some ObjC class ABI constants.
[33m894bcee[m Add a visitor for the members of a nominal type.
[33m8a5cf15[m SILGen: Fix Apply(ScalarToTuple) special case. If a ScalarToTupleExpr is building a multiple-element tuple with default arguments, it's not valid for an apply expression to peek through it to directly generate its argument. Check that a ScalarToTupleExpr result actually has a single element before applying the special case.
[33m4325479[m SIL: add print() and dump() methods to SILConstant Expose the static printSILConstant function in SILPrinter.cpp as a method on SILConstant.
[33mf4ef00c[m SILGen: Support qualified module paths. Add a visitor method for DotSyntaxIgnoredBaseExpr so that things like 'Builtin.Int1' and 'swift.true' work.
[33m27cbe8f[m SIL: suppress warning in release builds.
[33m521f074[m Account for types that explode to sizes != 1 when computing the consumed arguments of a method.
[33m97ea8e6[m Split the Objective-C types in the standard library into a separate file.
[33m96583a7[m Introduce ArchetypeToSuperExpr for implicit archetype-to-superclass conversions.
[33me182e73[m SILGen: Fix assign for nontrivial-type properties. Properties don't need to do the load/retain/store/release dance of physical elements; the setter handles all of that. Rename emitStoreToLValue to emitAssignToLValue, and push the physical reassignment logic into emitAssignToLValue. Dump the old emitAssign since emitAssignToLValue now does everything it used to do. Add a FullExpr scope to the left-hand side of AssignStmts so their temporaries have better-fitting lifetimes.
[33m6dce1c9[m SILGen: Let any reftype expression root an lvalue. In the SILGenLValue visitor, stop when we see a subexpression that has a reference type and use the result of that expression to root the lvalue expression. This allows rvalue reference type expressions like `foo().bar = bas` to work.
[33mbe915b9[m Implement semantic analysis for inherits-from constraints.
[33mb3fe45b[m SILGen: Consume materializes used for writeback. Split CleanupMaterialize into CleanupMaterializeAlloc and CleanupMaterializeValue. Have emitMaterialize, emitGetProperty, and other methods that create materialize buffers return a new Materialize type, which has a consume() method to disable the CleanupMaterializeValue cleanup, load the value, and return it as a ManagedValue for the caller to consume.
[33m220adf7[m SILGen: Retain reftype property arg in lvalue. When calling a property accessor as part of a logical lvalue chain, retain the this argument if it is of a reference type.
[33mfb99320[m SILGen: Don't load trivial materializes on cleanup emitReleaseRValue is smart enough to do nothing with trivial types, but a useless load instruction was still being generated for cleaning up materializes. Don't do that.
[33m5bb6e4d[m Update CMake build system for recent assert() changes.
[33m5bc7a01[m SILGen: Implement setting subscripts. Fix up GetterSetterComponent's logic for applying subscript arguments, and wire up SILGenLValue to handle SubscriptExprs.
[33md3d617c[m SILGen: Implement getting subscripts. Subscripts are just another kind of property. Refactor some logic from ApplyExpr codegen to visit index arguments consistently with apply arguments. Also move the logic for determining SIL constant types onto SILModule because it's too hairy to calculate on the fly.
[33meeaa120[m SILGen: Visit methods in types. Generate SIL for methods inside NominalTypeDecls.
[33me43761c[m AST: add print() and dump() methods to Pattern. Expose the PrintPattern visitor implementation in AST/Decl.cpp through methods on Pattern, as is done with the other AST node types.
[33m8ade2ed[m Fix a build warning in release builds
[33m36fc6a0[m Make assert() work correctly in debug and release builds respectively
[33mec86ae9[m SILGen: Implement reftype elements and properties. Generalize a bunch of code that assumed address-of-value-type for the "this" side of properties to accept reftypes as well. Use RefElementAddrInst to extract physical elements of reference types. Fix an off-by-one in the writeback logic in emitStoreToLValue so that writeback chains properly terminate at the deepest value type component below a reference type component.
[33m13bb47d[m SIL: Add RefElementAddrInst instruction. Like ElementAddrInst for reference type instances. Takes an rvalue reference type and gives the address of an element in the instance.
[33m8797929[m SILGen: Small writeback bug. Any reference type component of a logical lvalue resets the writeback chain, not just a logical reference type component.
[33mc3cd84e[m Initial version of Swift.xcplugin, plus a convenient install script.
[33m44497bf[m SILGen: Handle byref arguments as logical lvalues. Visit ApplyExpr arguments with SILGenLValue. If the resulting path is purely physical, pass it through to the function. If the path has logical components, materialize the logical property and write it back after applying the function.
[33m0f34144[m SILBuilder: r/r of constant_ref is a no-op. Retaining or releasing a constant_ref can be trivially elided in SILBuilder.
[33m60545db[m SILGen: Fixed leaked retain of lvalue get/set. SILGenFunction::emitConstantRef was returning a retained reference to local closures, but SILGenLValue saves off the reference and retains it as needed, leading to an extra retain that was never cleaned up. Add a SILGenFunction::emitUnmanagedConstantRef that returns a local or global constant value without retaining a local constant.
[33ma99c455[m SILGen: Implement logical lvalues. Steal the 'LValue' type from irgen, which describes a logical lvalue as a path through physical and logical accessor expressions, such as member ref, tuple element, and subscript operations. Implement a SILGenLValue visitor that builds logical lvalues for lvalue contexts. Implement assignment using SILGenLValue to visit the left-hand side of assignment statements. Still to be implemented: subscript expressions and byref function arguments.
[33m675204b[m Don't map Objective-C methods in the 'new' family to Swift constructors.
[33m263cf27[m Use the pretty-printer to render imported declarations for diagnostics.
[33m8fba78f[m Import [ibaction] and [iboutlet] attributes from Clang.
[33m387ef69[m SIL.rst: `ref_element_addr` and `generalize` insns Describe a `ref_element_addr` instruction for extracting elements from reference types and a `generalize` instruction for representation conversion of generic values.
[33mf3857df[m Implement an AST pretty-printer for declarations, under -print-ast.
[33mb4ca0f1[m Rename llvm::AttrListPtr -> llvm::AttributeSet to sync with LLVM mainline.
[33m26b5a37[m Fix include paths for CMake build, and move the new ObCBridge.h into swift/Runtime.
[33ma260ca3[m Prepare to make Dictionary generic
[33m4b246bc[m Implement the ObjC ownership conventions, using ARC-in-clang's method annotations when possible.
[33mce46c72[m Fix and test metadata-to-class mapping.
[33mc637409[m Add support for messaging Objective-C classes.
[33m59d4677[m Implement metatype references to ObjC classes.
[33m46c4bd4[m SILGen: Handle capture of local properties. Add GetterSetter and Getter capture modes that capture the getter and/or setter closures when a local property is closed over.
[33mc16fa57[m SILGen: Handle getting local properties. Build closures for local getter and setter decls, and load the get closure when the property is referenced in a normal expression context.
[33m427be94[m Add the [iboutlet] and [ibaction] attributes.
[33me0b9794[m Fix some comments.
[33m26344c7[m SILGen: Implement getting properties. - Steal some bits from SILConstant::id to reference getter and setter definitions, and normalize SILConstant references to property FuncDecls to be SILConstant references to the ValueDecl getter/setter instead. - In normal expression context, handle getting properties by calling the getter and materializing the return value. Setting lvalues is not implemented yet; that will require borrowing the LValue and GenLValue machinery from irgen to construct logical lvalue paths in assignment and byref contexts.
[33m319a100[m Allow diagnostics to accept declarations in lieu of source locations.
[33m2e802a3[m Fix some build failures introduced by r3397
[33m48ac908[m Map the Objective-C BOOL type to a new ObjCBool Swift type.
[33m60aecc4[m Provide more bogus source information for synthesized ASTs.
[33m3c7d9d0[m Don't import inline Clang functions; they won't work.
[33mdc43d34[m SILGen: Support MemberRefExpr on loadable structs. Have TypeConverter generate a field-to-index mapping for physical fields of loadable structs. Use the resulting TypeInfo mapping to generate element_addrs for physical MemberRefExprs, borrowing the logic from TupleElementExpr.
[33m608b2d8[m Allow a Swift and a Clang module to have the same name, and load both.
[33m1722411[m When we're referring to the SEL type in IRGen, use a names alias for i8*.
[33m07be3f3[m Use the Objective-C runtime to unique selectors in JIT'd code.
[33m1e689a9[m Load the SwiftFoundation dylib when the corresponding Swift module is used.
[33mb19f91d[m Update makefile-based build system for the NSString bridging movement.
[33m777acff[m Move NSString bridging code into swiftFoundation.
[33m4a591b8[m Move the last runtime header into include/swift/Runtime.
[33mf30b9f8[m Move the Swift runtime headers into include/swift/Runtime.
[33mc15bd22[m Sema: Fix typo in comment.
[33maecd8d4[m When accessing a member of a tuple rvalue, materialize the tuple.
[33m9ea984c[m SILGen: Fix a bug in destructuring assignment. The type of an Extract from the right-hand side is an rvalue type, not the lvalue type of the corresponding tuple assignment destination.
[33m4c71d73[m Implement getter/setter thunks for imported Objective-C properties.
[33m374aff6[m SILGen: Use ElementAddr for lvalue TupleElements. If the operand of a TupleElementExpr is an lvalue, derive the address of the element from the operand rather than try to extract a value from it as the code was doing before.
[33m6a67ad7[m SIL: Add ElementAddrInst. Derives the address of a member from the address of a fragile value type. SIL extract : SIL element_addr :: LLVM extractvalue : LLVM getelementptr. Also add SILVerifier checks for ExtractInst and ElementAddrInst that they deal only in values and addresses, respectively.
[33m752da92[m SILGen: Move Explosion.h to ManagedValue.h Rename the header and remove the "Explosion" class from it since we didn't end up using it.
[33m0b825c4[m SILGen: Treat global vars as accessor functions. Instead of considering `constant_ref @var` to give the address of `var` directly, consider it to be a `() -> [byref] T` function that returns the address, presumably after running the initializer for the global if necessary. Generate a DeclRef to a global var as a constant_ref to get the function followed by an apply to get the address. Actually generating the global accessor is still to be implemented.
[33m370f3b1[m SILGen: Prepare emitFunction to handle curries. Change the signature of emitFunction to take just a decl (and leave it up to the implementation to create the SILConstant) because emitFunction may produce functions for multiple SILConstants from a single FuncExpr.
[33m26e63ab[m SILGen: Add doc comments to some SILGen* methods.
[33m91960e4[m Support keyed subscripting for Objective-C classes as Swift subscripting.
[33maabff2b[m Create a getter thunk for Objective-C subscripts.
[33m9f55b4f[m Backed out 8286a73, which fails if the hacked SDK is not present.
[33m5bd1e92[m The subscripting setter thunk is *not* an imported Clang declaration.
[33maa89f91[m Generate the required AST-level thunk for subscript setters.
[33md3f6890[m Promote the clonePattern() static to Pattern::clone(), since this is common.
[33mba4abb2[m Improve tracking of which external definitions have been type-checked and IRgen'd.
[33mbeaed00[m SIL.rst: Note insns that are unimplemented. Also clarify the language for `string_literal`.
[33m9d4806a[m SIL.rst: More precisely list address-only types. Instead of speaking vaguely about "concrete representation", list the categories of type that are loadable and that are address-only.
[33me4c2d71[m Import Objective-C indexed subscripting methods as Swift subscript declarations.
[33mce47e97[m SILGen: Support ClosureExprs. ClosureExprs mostly share the same logic as FuncExprs, but need a bit extra help to handle the implicit return from the body expression. Genericize some FuncExpr code to work with an arbitrary CapturingExpr or to accept body and param patterns separately so they can be passed the components of FuncExprs or ClosureExprs.
[33m33671da[m Give constructors synthesized as part of loading a Clang module internal linkage.
[33mc5c5fa9[m Be more selective about creating constructors for Objective-C new/init methods.
[33m9a04002[m SILGen: Generate anonymous FuncExprs. Reuse the closure-building code from local FuncDecls to also produce closures for local anonymous FuncExprs.
[33ma593076[m SIL: Introduce a SILConstant type. We need something more general than ValueDecl to be able to talk about anonymous functions, curried entry points, etc. as SIL constants. SILConstant is a (ValueDecl | CapturingExpr) union with an additional index for discriminating multiple instances or entry points derived from the same AST entity. Update ConstantInst and SILModule's function table to be keyed by SILConstant rather than ValueDecl.
[33m1f45f28[m Emit the constructors synthesized by the Clang importer for ObjC init/new methods.
[33m45c980c[m SILGen: Capture local constants by value. Local constants (such as local FuncDecls) are never modifiable so can be captured by value. Give the local constant value to the closure when visiting a local FuncDecl, and in the function body, register the corresponding closure context argument as a local constant for that context.
[33mb045361[m SILGen: Generate closure for FuncDecl once. Associate the closure object for a local FuncDecl with the FuncDecl rather than with the DeclRefExpr. Move the closure creation code into SILGenFunction::visitFuncDecl, and add a LocalConstants map to SILGenFunction to store closures generated from local decls. Add a constructor to ConstantRefInst to allow it to be associated directly with ValueDecls in addition to DeclRefExprs.
[33m9904844[m Move 'external definitions' vector into the Clang module; it only makes sense there.
[33m85f690d[m Type-check the constructors synthesized for Objective-C init/new methods.
[33m1bc5c1b[m Walk the base of OverloadedMemberRefExpr as part of a traversal.
[33m0611972[m SILGen: Implement capture of byref arguments.
[33mac40cb5[m AST: Dump getter/setter link for FuncDecls.
[33ma6abe14[m Refactored Makefiles to use top-level definition MODULES_HACKED_SDK.
[33m11c48c2[m SILGen: Generate closures for local FuncDecls.
[33mba25bb7[m SIL: Add a ClosureInst instruction type. ClosureInst represents construction of a closure by partial application of a function reference.
[33m519091c[m Synthesize a body for Swift constructors that map down to alloc/init* or new invocations.
[33m909f8db[m SILGen: Emit local function decls. Generate local functions with captured variables as arguments to the entry block. Still need to implement the closure construction sequence when local functions are referenced.
[33m96bba4e[m AST: Dump captures in AST dump for CapturingExpr.
[33m703bd9f[m SIL: Add bits to distinguish get/set in SILModule. SIL needs a way to generate and reference getters and setters, which share a decl. Change SILModule to key its component Functions on a (ValueDecl, flags) pair rather than just on ValueDecl.
[33ma221a69[m Rename the "allocating" attribute to "allocates_this".
[33md04db69[m Retain the first selector piece when importing init/new methods as constructors.
[33m0702436[m describe some goals in error handling.
[33mc4a573f[m add SIL.rst and Error Handling to the TOC, several other dox are dangling references still though.
[33mb949713[m SIL.rst: "existential" -> "protocol"
[33m70482aa[m SIL.rst: Describe instructions for existentials. We'll need some additional instructions to describe initialization of existentials and existential method calls: `alloc_existential` to initialize an existential's witness and substitution table(s) and provide access to its storage, and `existential_method_ref`/`project_existential` to obtain a method handle from an existential and the opaque reference to hand down to the method.
[33m08c9b5c[m Allocating constructors are expected to allocate and assign 'this' on their own.
[33m445193a[m SILGen: Style cleanup. Fix some code style violations brought up by John.
[33maaf68c3[m start hacking out a stance on error handling.  Kill the old doc that was poorly and confusingly written and conflates gc vs arc into the discussion on error handling.
[33m9c6343a[m SILGen: Fix goof in DeclRefExpr codegen.
[33m759f18a[m Consume trailing semicolons at top level. Instead of writing in an awkward special case for SemiStmt in ParseStmt, apply the existing semicolon-eating syntax in ParseDecl for types to the toplevel. Suggested by Jordan re: r3336.
[33m98cc055[m Import Objective-C methods in the 'init' and 'new' family as Swift constructors.
[33m7b5e8c8[m SILGen: Gen VarDecls as locals for toplevel code. If the TranslationUnit being silgenned is a Main or Repl unit, generate globals like locals. Generating toplevel functions as closures still needs to be done.
[33m683ef354[m Allow ';' in a top-level form.
[33m93b91e9[m Fix another typo in diagnostic message.
[33m814229f[m SILGen: Generate top-level code. Add a toplevel Function object to SILModule. When SILGenModule encounters TopLevelCodeDecls, pass their bodies on to SILGenFunction to emit SIL into the toplevel function
[33mde122ee[m Fix typo in diagnostic messages
[33m8f005fb[m Always provide Clang with a module cache path, so it doesn't end up in the working directory.
[33m21327d3[m C array types effectively have different behavior in different contexts; don't try to map them now.
[33m5071a17[m Import C pointers types as CPointer<T> specializations.
[33mec1e1ae[m SILModule: Use llvm::MapVector to store Functions. (instead of slumming with a DenseMap/vector pair) Re: r3322
[33mfdb8982[m Add doc-comments to SIL Function and SILModule. re: r3322
[33m79c7e82[m Don't <>-include llvm headers. In response to Chris' feedback on r3322.
[33md26c633[m Provide "C"-prefixed types in the Swift standard library and map the C types over to those types.
[33m3f9b2d0[m Add missing CTypes.swift, since I accidentally committed its use.
[33ma79f61a[m Add missing #include to fix compilation with mainline Clang
[33m1c21b9f[m SIL: Introduce a SILModule object. Create a SILModule type, and lift ownership of TU-global things like the bump allocator and type list uniquing from Function to SILModule. Move the ad-hoc SIL dumping logic out of main() into SILModule and into a new SILGenModule class.
[33ma47932f[m SILGen: Kill currently-unused TypeConverter field.
[33m880d120[m SILGen: Rename 'SILGen' class to 'SILGenFunction'. Differentiate it from the inevitable SILGenModule class.
[33m148609d[m SILGen: Allow global variable accesses. If an lvalue DeclRefExpr doesn't have a local VarLocs entry in the current SILGen function, assume it's a global variable and generate a constant_ref to get at its address. Eventually there should be a SILGenModule with which we can check that the global access is valid. Either ConstantRef should be renamed or a new GlobalVarRef instruction should be added as well.
[33m273642d[m Document the [objc], [IBOutlet], and [IBAction] attributes.
[33mfedad62[m Support both uppercase and lowercase printed hex
[33m583ad13[m SILGen: Remove AllocTmp, add AllocVar stack attr Remove the AllocTmp instruction and represent MaterializeExpr allocations using 'alloc_var stack'/'dealloc_var stack' instructions. Rename Dealloc to DeallocVar, and add an AllocKind attribute to AllocVar and DeallocVar. Update MaterializeExpr SILGen to generate an AllocVar with a DeallocVar cleanup instead of AllocTmp. Tweak SILPrinter's presentation of AllocVar and DeallocVar to be in line with what SIL.rst claims.
[33m3a1540f[m Add Makefile support for SwiftFoundation and NSStringDemo.
[33m65db193[m Make metatype layout compatible with struct objc_class.
[33m3d27336[m SIL: rename TupleElementInst -> ExtractInst Now that it's being used on both tuples and structs, the current name doesn't make much sense. SIL.rst specifies a unified set of extract/insert/gep instructions that operate on either tuples or nominal fragile structs.
[33m42039ec[m SILGen: Implement r/r of fragile aggregates. Stick a ReferenceTypeElements array in the SIL TypeInfo that gives a path to every reference type within a fragile aggregate. Since this now makes TypeInfo nontrivial to compute, steal some of the TypeConverter infrastructure from IRGen to manage TypeInfos for the current SILGen context. Use the reference type elements to determine triviality and to generate retain/release sequences for nontrivial loadable types.
[33m5e7b992[m Move Range out of Misc.swift into Range.swift
[33m168177d[m Fix an unused variable warning under release builds
[33mcfa7a48[m SILGen: Prune now-unused memory management helpers Argument lifetime is now handled adequately by ManagedValue, so the special-case emitRetainArgument/DestroyArgument helpers aren't needed.
[33mac4ddce[m Move CString out and extend
[33m25e83e4[m Move Slice<T> and UnsafePointer<T> out of Misc.swift
[33ma97f5da[m SILGen: Use ManagedValue to manage temporaries. Steal IRGen's ManagedValue abstraction to handle the generation and consumption of rvalues. ManagedValue is a (Value, Cleanup?) pair that supports "forward"-ing ownership of a value and disabling its cleanup, which allows temporary values to be generated, retained, and either consumed by an ownership-taking operation such as a function call or aggregate initialization or released if unused.
[33m0453f5d[m SIL.rst: "dealloc_ref" shouldn't clean up values. After discussion with John, we decided that we need to be able to deallocate a partially-initialized box during initializer execution, in case an initializer expression ends up unwinding before a value is fully initialized. When optimizing reference type allocations, it would also better to expose the destructor call and release operations directly instead of hiding them inside an instruction.
[33m6e3c947[m Import 'const char *' as Swift's CString.
[33m777e3ce[m Introduce a simple demo program that uses Clang-imported Objective-C modules.
[33mf80ff2c[m Make sure that generated selector symbols actually get uniqued.
[33m6c62db4[m Fix up the Clang resource directory path for autoconf builds.
[33md774de0[m Any method marked [objc] should be called via objc_msgSend*.
[33m5d39960[m SILGen: Retain function arguments Add an `emitApply` method to SILGen that retains arguments and then applies a function. Change B.createApply calls to use emitApply instead.
[33m9c013ef[m SIL: Avoid tupling one-argument function arguments SILGenExpr has special case logic to avoid constructing a SIL tuple for function arguments, but this logic failed to cover single-argument functions, in which the argument AST goes through a ScalarToTupleExpr node rather than a TupleExpr node. This patch adds similar logic to the ScalarToTupleExpr case so that single function arguments don't go through a SIL tuple instruction.
[33mdc7dcc7[m Implement explicit (unchecked!) downcasting for class types.
[33mb632ef6[m Introduce an abstract ExplicitCastExpr, for explicit type casts.
[33m9fd5749[m Add a ":dump_decl <name>" command to the REPL, for debugging purposes.
[33m0be7dba[m Set Clang's resource directory appropriately, so it can find its headers.
[33mb79d71d[m SILGen: Emit cleanups for return statements. Clean up arguments and temporaries after any return statement, not only when we fall off the end of the function.
[33m5a5c388[m SILGen: Do the assignment dance Use the emitCopy method from r3265 to generate an appropriate retain/load/store/release sequence for assignment statements.
[33m0af8040[m Optimize memory allocation for the Clang-imported extension cache, somewhat.
[33me15f75f[m Support importing multiple Clang modules into Swift.
[33mf8a2de9[m Sync up with today's earlier SIL insn changes.
[33m253e953[m SIL: Release arguments and retain stores to boxes. Build some infrastructure for handling retain/release/copy/destroy of values. Use this to retain values when storing them into boxes and to clean up reference type arguments on function exit. Right now this just stupidly assumes "value type is trivial, reference type is retained/released", but it eventually needs to handle address-only types using the indirect copy_addr/destroy_addr instructions and to handle loadable value types with reference members by retaining the proper members. Passing arguments to function calls, reassignment, and cleanup of full expression temporaries all still need implementation.
[33me469366[m SILGen: support void return statements Generate '%1 = tuple (); return %1" for a void return statement instead of crashing.
[33m92ddeb8[m Steal IRGen TypeVisitor for SILGen.
[33me9849d7[m SIL.rst: remove "destroy" instruction Value types should not require destruction beyond `release`-ing their reference type members. `release` for reference types and `destroy_addr` for address-only types should cover all cleanup needs.
[33mabc1724[m SILBuilder: use SILLocation in createR/R methods Update createRetain, createRelease, etc. to use SILLocation instead of Expr * arguments to be in line with Chris's update in r3249.
[33m629b066[m Import Objective-C categories and extensions as Swift extensions.
[33m8b22cb0[m Don't reference ClangModule in the general ModuleLoader
[33ma1250b0[m Map Objective-C's 'id' to Swift's NSObject.
[33mf591851[m Change integer_literal and friends to take a comma for consistency with other operations.  Make a few more tweaks to the printer to match SIL.rst.
[33md734b4e[m change the SIL printer for a few instructions to follow SIL.rst
[33m6d8d9da[m rename DestroyInst -> DestroyAddr to conform to SIL.rst.  The non-addr form of destroy will be added later.
[33m9750e36[m rename Copy -> CopyAddr to follow SIL.rst
[33m311520a[m Implement support for calling Objective-C instance methods imported from Clang.
[33ma33b91c[m Rename testcase to not match the module name
[33m0e264ae[m prune some forward decls.
[33m2c00921[m rework a bunch of instructions to have a single constructor (and builder) form that takes a generic SILLocation... instead of having duplicated constructors.
[33m813db54[m Add a simple test to make sure a two-parameter function works properly.
[33m83f2874[m Implement support for calling imported C functions from Swift.
[33md726b36[m Don't import function pointers or member function pointers to Swift.
[33me41a89a[m Record overridden Objective-C properties in the Swift AST.
[33mf5e4474[m fix build with mainline llvm.
[33m8527126[m Import Objective-C properties as Swift variables.
[33mf5eae6a[m Import Objective-C class methods into Swift.
[33m7a56536[m Actually compute NumValueDeclBits correctly.
[33ma5157ca[m SILGen: generate alloc_box/release for PatternDecl Update codegen for local variables and arguments to use the new alloc_box instruction to allocate retainable storage for the variables and to release the boxes when the variables go out of scope. Update tests to check for alloc_box and release sequences instead of alloc_var.
[33mce3dc11[m SIL.rst: proofread
[33m9d299f8[m Import Objective-C instance methods into Swift.
[33mc3801ab[m Import Objective-C classes into Swift.
[33m1ed3e7b[m Put in stubs for Clang declaration kinds that won't be imported.
[33m037ad84[m Import Clang global variables as Swift global variables.
[33m3fcbfdd[m Import C structs and C++ classes as Swift structs.
[33mb26bc36[m Improve CMake diagnostics when SWIFT_PATH_TO_CLANG_* is not properly defined.
[33ma9abb47[m rip out the 'is initialization' bit from StoreInst per SIL.rst.  The AssignStmt lowering code needs to emit the retain/release dance, but I'll leave that to Joe :)
[33m39e1ba0[m SIL: get IntLiteral/FloatLiteral values from AST It would be better in the long term to copy the getText() from the AST into the instructions so they can stand independent of any AST node, but this is convenient for now.
[33maad1b3c[m remove the 'take' flag from LoadInst
[33m2ddc716[m rename TypeConversion to Convert to follow SIL.rst
[33m6d58ee2[m SIL: rip out redundant CharacterLiteralInst
[33m30c50c2[m minor tweaks to SILPrint to follow SIL.rst, e.g. "store ... to".
[33m3d6748b[m clangRewrite is now two libs In a freshly built clang, clangRewriteCore and clangRewriteFrontend are now separate libs.
[33m3da2526[m Fix cmake rules for combined llvm/clang build dir Allow SWIFT_PATH_TO_CLANG_BUILD to point to a build dir used to build llvm and clang together.
[33m8c0513f[m rename index_lvalue instruction to index_addr to follow SIL.rst.
[33m0e02c3c[m 80 columns
[33m8ad5ba2[m introduce an alloc_box instruction.  Also, normalize alloc_array to follow the syntax in SIL.rst.
[33mef2b8c0[m add SILBase.cpp
[33md7d9fd4[m When ordinary name lookup into a Clang module fails, try tag name lookup.
[33m1c6c67a[m Implement support for importing Clang enumeration types as Swift oneofs.
[33mfadda48[m Switch the alloc_array instruction to return two results instead of a tuple.
[33mc9831b0[m fix some SILPrinter bugs handling results with multiple values.
[33md92ccc0[m remove the incorrect V->getType() method, forcing clients to specify a result# they want (e.g. V->getType(0)), or, better yet, to use V.getType() which includes the result # implicitly.
[33ma2d60a1[m switch V->getType() uses (which are unsafe if V points to something with multiple results) to V.getType() which returns the type of the value being referenced.
[33m6ab2a17[m make ValueBase::getType() take a result number, right now default it to zero in the base class, which is wrong.  Add shadowing versions that do allow no argument in derived classes where it is right.
[33m5fcca3d[m Build out the infrastructure for importing declarations.
[33m0afad51[m Factor the declaration-importing code into its own file.
[33m519a9f6[m Import the parameter names from a Clang function declaration.
[33mb0d4242[m Implement a proper Clang -> Swift type importer.
[33made9e33[m SIL.rst: Update per discussion with Chris and John - Tighten up terminology, for instance, define what a "box" actually is - Describe how operands can have zero, one, or many values - Describe that only %operands are valid operands and loading constants, ints, and other literals requires distinct insns - Make releasing a reftype and destroying a value distinct - Describe how stack allocation of boxes and reftypes work - Name address-only type operations `destroy_addr` and `copy_addr` to avoid confusion with rvalue operations - Describe the full set of aggregate manipulation functions - Clean up instruction notation to avoid ambiguities - Throw in notes about things we need to design at some point
[33m09a0566[m start getting crazy: store and control flow instructions now have no result.
[33m4962f35[m teach SILPrinter to print out %3#1 when referencing an instruction with multiple results.
[33m06ead2d[m just some comment fixes.
[33md87f65f[m Land a pretty big conceptual/API change to pave the way for multiple return values.  Now the base class of the value hierarchy is "ValueBase" instead of "Value", and "Value" is now a PointerIntPair indicating the ValueBase (e.g. an instruction) being referenced along with what result value is being referenced.
[33m4e18932[m switch the storage representation of Value::Type to be a PointerUnion<Type,TypeList*> handling the 0/1/N cases of types.  Still only form the "1" case though.
[33m84eee6b[m Factor the implementation of the Clang importer into its own header.
[33m4643edc[m initial support for uniquing SIL type lists, not used yet.
[33mb27c6d9[m Implement global, unqualified name lookup into Clang modules.
[33ma0562f6[m Remove unused code to steal resources from a Clang compiler instance
[33m26a23c8[m Zap an unused member of swift::Module
[33mbeba495[m Fix makefile build for Clang module imports.
[33mbb26f52[m Initial support for loading Clang modules into Swift.
[33mb1c3995[m SILGen: implement emitBranchAndCleanups Emit the proper cleanups when generating a break or continue branch. Un-XFAIL SIL/statements.swift test.
[33m56cc695[m Add a hack to make swift work with llvm trunk.
[33m9967769[m SILGen: Steal stupid cleanup support from IRGen Port over the basic machinery to push and pop cleanups from IRGen, and implement simple straight-line cleanup emission. Add a basic cleanup for VarDecls as a proof of concept. More sophisticated handling of outflows, dormant/alive/dead states, etc. still needs to be carried over. Breaks test/SIL/statements.swift due to lack of support for cleanups through branches.
[33mb70534f[m SIL: implement verifier for retain/release/destroy
[33m7fcaed6[m IRGen: fix typo in comment
[33m439e86c[m Silly micro-optimization for matching obviously-equivalent types.
[33mcdd48aa[m Don't immediately canonicalize types in the constraint solver.
[33m19c1fdd[m SIL.rst: list convert insn's supported conversions
[33m312bd65[m SIL.rst: resilient type example
[33mcb6d12d[m Revert "WIP" Not ready for prime time, sorry.
[33m52e163f[m SIL.rst: a couple examples
[33m9d08711[m WIP
[33m2568c1b[m getSelector -> getObjCSelector per Doug's review.
[33m85c6508[m SIL.rst: clean up notation
[33ma8f1801[m SIL.rst: 80 columns
[33m3c053a7[m In preparation for shifting the metadata layout, widen the metadata kind field to a full word.
[33m23651be[m Don't distinguish between generic and non-generic types in the metadata kind.
[33m1dd68ef[m Remove an unused field.
[33m5eb3618[m Teach IR-gen how to emit metatypes for metatypes.
[33mdda2704[m Add a runtime entrypoint to map up a level of metatype.
[33m7d69b0e[m Metatypes of (metatypes of)* class types have a non-trivial representation.
[33m8b2221a[m Put TypeVariableTypes in the constraint checker arena.
[33m26011a0[m Remove unused instance variable in the type variable type implementation
[33m2183b57[m Introduce a special memory arena in ASTContext for the type checker.
[33m048b50f[m SIL.rst: Describe the rest of the instructions Also give some initial description of how functions and basic blocks work.
[33mb23db00[m Comparable implies Equality
[33mfa5c235[m Move crude input shims to InputStream.swift
[33m5e485a9[m Move I/O logic out of Misc.swift
[33mac5abd9[m [CMake] Automagically add private headers in Xcode as well as public headers.
[33m8639a5d[m SIL.rst: Describe more instructions
[33m0c4ab94[m Sketch out a SIL.rst Describe type categorizations and memory management operations first because those were the hot topics of discussion today.
[33me9d2c11[m Workaround lack of modules: fake 'errno'
[33mddb44b4[m Completeless: add UInt128 to mirror Int128
[33m3d34680[m Add headers to lib/SIL/SILGen/CMakeLists.txt so that they show up in generated Xcode project.
[33m73f8799[m SIL: add instruction types for ARC and lvalues Add RetainInst, ReleaseInst, DeallocInst for managing object lifetimes, and CopyInst and DestroyInst for indirectly managing resilient types and other non-materializable types.
[33ma1fdada[m Introduce an RAII object for re-instating/removing type variable bindings.
[33m0852a6e[m Switch the member-lookup cache to a DenseMap for a tiny speeup.
[33m9173da7[m Move shared data members from ConstraintSystem into a separate pointer.
[33m2242ae5[m Zap now-unused utility function
[33m810e965[m Replace getAs<> with dyn_cast<> on TypeVariableTypes.
[33mda26906[m Cache the 'literal-compatible type' check.
[33m14e4e12[m Cache member lookups within a type-checking problem.
[33m71ac078[m Replace the representative-or-fixed-type dense maps with storage in the type variables.
[33m83a98d4[m Build child constraint systems when needed, rather than eagerly.
[33m42d01dd[m Centralize the 'finalization' of a constraint system, so we don't have cleanup calls scattered as much in ConstraintSystem::solve().
[33md7eec86[m Eliminate the useless notion of a 'solved' system with free type variables.
[33ma2b2b9f[m Rework the inner constraint-solving loop to eliminate excess stack traffic.
[33mbcb0d9e[m Re-visit the parent systems whose children are a resolved overload, so that the non-viable children can get deleted early.
[33mcc8658f[m Don't keep a child constraint system around if it fails simplification as soon as it is created. When we try to handle diagnostics, we'll do it without keeping the child constraint systems around.
[33m064b2c5[m SILGen: ret () instead of unreachable If a ()-returning function falls off the end, generate a return instead of an unreachable. IRGenFunction::emitEpilogue has some more sophisticated logic that should be ported over, but this will handle the obvious T -> () case.
[33m83e1e91[m Update some inaccurate comments in IRGen
[33mb9110d5[m Clean up simplifyMemberConstraint type resolution Per Doug's suggestion, replace the getFixedType loop in simplifyMemberConstraint with a call to simplifyType.
[33m04f8a9b[m Stub SwiftObject root class to enable linking
[33m41a96b7[m Non-settable lvalue checks for TypeCheckConstraints rdar://11259972 Add a bit to LValueType representing NonSettable, and set it in the constraint- based checker where a property or subscript expression resolves to a decl without a setter or to a settable member of an unsettable value type. Tweak constraint rules for subscript, address-of, assignment, and implicit byref arguments to rule out operands that are not settable in a context that requires settability, such as assignment or pass-by-reference.
[33m091bf35[m rename SIL.h -> Function.h
[33m6cadce0[m rename the CFG type to "Function", since it is the SIL Function concept, which is separable from the SIL library.
[33m57eea53[m more random changes CFG -> SIL
[33m8eec098[m rename more references to CFGs to SIL.
[33m9eae974[m rename lib/SIL/CFG* to lib/SIL/SIL*
[33meab0962[m rename many references to CFG to SIL.
[33mc7cbc8e[m rename SILGen/CFG* to SILGen/SIL*
[33m93ae038[m rename the SIL/CFG*.h headers to SIL/SIL*.h
[33m3a559b4[m rename include/swift/CFG -> include/swift/SIL.
[33m3b83942[m rename CFGGen directory -> SILGen.
[33m818de63[m rename the CFG libraries to SIL
[33m9db8f97[m rename test/CFG to test/SIL
[33m61309f0[m rename lib/CFG to lib/SIL
[33m7733c19[m Make solutions to the constraint system independent of their parent.
[33mf9daef6[m Prune a non-solution when one of its peers led to a solution.
[33mae92b09[m Keep track of the number of supertype fallbacks.
[33m6d1e5c3[m Fix 'definitive type binding' heuristic to allow binding so long as we have a unique concrete type below the type variable.
[33mf03f445[m Merge the dense maps for the representative of a type variable and the fixed type bound to a type variable.
[33m7e6cc88[m Zap an unused local struct
[33madbc81b[m When definitively binding a type variable, visit its related constraints first.
[33medb448d[m Prefer solving the smallest unresolved overload sets.
[33m1ad9e47[m Cache the results of looking up a fixed type in the parent constraint system. Good for a 6.5% speedup on swift.swift with a Debug build.
[33m30f6fac[m When looking for a fixed type bound to a given type variable, tell recursive calls (in parent constraint systems) that they don't need to get the representative of the type variable again, since we already have it. Good for a 25% speedup in debug builds.
[33m3553134[m Revert r3107, the on-line tracking of type variable bounds.
[33m912d30a[m Keep type variable bounds on-line rather than computing them later.
[33m97b0764[m Minor tweak to prefer the type bounding a type variable from below to the type bounding the type variable above in cases where they are not equal. Very tiny improvement in the # of constraint systems explored (70, out of 18,980) and negligible time impact.
[33m258d7fc[m When solving a constraint system, first try to determine type bindings for any type variable that we can solve definitively, and bind those concrete types directly. Reduces the number of constraint systems visited in type-checking swift.swift by 8.9% and improves performance of the debug build by ~12%.
[33m001db5c[m When comparing types to determine whether one constraint system is better than another, remove any tuple element initializers from those types. The initializers cause us to consider two otherwise identical types to be mutually convertible, which makes the systems incomparable. Fixes <rdar://problem/12611844>.
[33mc1f5532[m Add missing file to CMakeLists.
[33m7c27700[m Implement basic objc_msgSend capabilities.
[33m3989da0[m Add a method for getting the selector string of a method.
[33m5e8e48d[m Oops, remove debug junk
[33mf243778[m Update some bogus-looking comment text in ParseDecl.cpp
[33m2fcacae[m Propagate ErrorType to callee of apply expr if args have ErrorType. rdar://10157547 This prevents a redundant "ambiguous type" error in an expression like `println(a)` with overloaded `println` undefined `a`, where the unresolved name and call expression both have ErrorType, but the type of the overloaded callee is left unresolved.
[33m267e78d[m Add "invalid" bit to Decl type. rdar://10157547 This just adds the bit to Decl. Actually making use of it looks like it'll require some type checker work, which should probably wait till the new checker settles down. Also add some xfail tests of the sorts of cascading diagnostic errors we should be able to prune using invalid bits on decls.
[33m6449655[m Implement selector-style function definition syntax.
[33mce7ddef[m Change value witnesses to take the metatype as 'self'.
[33m310268c[m Fix several bugs in the emission of metatype references.
[33mb62d47a[m Rewrite the way we build capture list so we don't miss capturing "this".  <rdar://problem/12583581>.
[33m5695162[m Record the decisions made at Monday's meeting about ObjC Interoperability.
[33m981e622[m Optimize our handling of referenced type variables slightly.
[33m7a95ef9[m Add code to generate the globals behind selectors. Untestable so far.
[33m07482e6[m If the root class in a hierarchy is marked with [objc], we have to use objc_retain/release.
[33m84f3b7f[m Unify the ObjC and Swift heap pointer TypeInfos.
[33mbdf2730[m Add an 'objc' method, which is currently only allowed on classes and methods.
[33m0a2d18d[m When collecting constraints associated with a given type variable, classify those constraints into above/below/other, and use that to simplify the use of those constraints. This doesn't really matter for performance now, but it's cleaner.
[33m7c8d02d[m Sink the decision to explore potential bindings into getNextSolutionStep(). No functionality change.
[33m3545e1e[m Track the number of type variable bindings that are considered non-definitive for decidedly lame reasons. This number should trend toward zero, as we get smarter about solving these.
[33mf6f9269[m When we find a definitive type binding, use it to simplify the current system immediately. This saves ~2500 constraint systems (1%) and 6% time type-checking swift.swift.
[33me5cf7d0[m Add a -print-stats option, along with a single statistic for the constraint solver.
[33m3cccb7a[m When associating constraints with specific type variables, keep track of whether the type variables are referenced from any constraints not directly represented as above/below relational constraints, archetype constraints, or literal constraints.
[33m89570c4[m Basic filesystem via the web traversal
[33m22dcdb5[m Factor out the act of selecting the next step toward solving a constraint system from actually taking that step, so that we have a single place where we can implement smarter strategies for ordering the search.
[33m79d6184[m Crude filesystem directory support
[33m314ea8d[m Eliminate the simplification phase that used the set of constraints that apply directly to a given type variable. It's work was mainly redundant: finding the simplification X < T and X < T ==> X == T, which will can be solved directly elsewhere, and dropping redundant constraints (which the solver should handle anyway).
[33md9b82f1[m When creating a derived constraint system that binds a type variable, perform the binding of the type variable as part of the constructor, rather than as a separate step. No functionality change.
[33m546584b[m When constructing a child constraint system that selects a particular overload from an overload set, allow it to choose any overload set (rather than just the first) and do all of the work of selecting that overload set within the constructor itself. No actual functionality change.
[33mb10920d[m Cope with DataLayout::getIntPtrType() change on mainline.
[33m57a4f49[m Docs: add a "Tradeoffs" section to Objective-C Interoperability.
[33m5961515[m Update "use cases" in Objective-C Interoperability
[33m7e8a16a[m Workaround 12202655 -- Rework type resolution
[33m0df7dcc[m Working towards open() to dynamic_cast to File / Directory logic
[33m18ec3de[m Partition POSIX shims and/or API
[33m24d819e[m Split BoundGenericType into BoundGeneric{Class,OneOf,Struct}Type. We'll want a superclass pointer on ClassType and BoundGenericClassType, and this also makes it easier to detect both kinds of class type.
[33mdacedaa[m CMake: match Clang's default lit test config
[33m1eec5db[m CMake: get unit tests working.
[33mdd90b4f[m Test case for r3049 (semicolons in structs)
[33mc8f53e3[m Add a MetatypeConversionExpr for doing derived-to-base conversions on metatypes;  at runtime it has no effect, since those conversions are always trivial.  Fix a number of bugs involving the conversion of metatypes, in both typecheckers.
[33m2f8f056[m Rename TypeOfExpr / TypeOfInst to MetatypeExpr / MetatypeInst. Introduce a '.metatype' form in the syntax and do some basic type-checking that I probably haven't done right.  Change IR-generation for that and GetMetatypeExpr to use code that actually honors the dynamic type of an expression.
[33ma6a2ab9[m Add a production to the type grammar for writing metatypes.
[33mcbf7216[m Swallow semicolons after decls when in a container.
[33m1026006[m CMake: fix regression tests.
[33m8999ff0[m Remember the metatype for This in a method on a generic struct so that we can re-use it in the function body, e.g. if we call another method on the type.
[33m0548cc7[m Cache local metadata in the scope in which we compute it, to avoid some obvious redundancies.  This also gives us a more general framework with which to exploit other ways in which metadata is known.
[33mb9177a3[m Fix CMake build for Dave's reorganization.
[33m4d8739f[m Accept limitations of LLVM build system
[33me8d5f08[m Fix/suppress some warnings arising in newer clangs as reported by Chris.
[33m078b6fb[m Introduce some make hackery to make the low-level runtime library build without manual makefile copying.
[33m8549008[m Make protocol thunks expect a metatype pointer (for This) as their last argument.  Pass it down correctly.
[33m3e0957a[m When emitting a polymorphic signature like <T,U> A<T,U>& -> (), pass A<T,U>.metatype instead of breaking apart the type. This is a WIP commit, because it breaks existentials quite badly.
[33md0f8897[m Various runtime cleanup
[33m6e4b614[m Add very basic use cases to ObjC interop doc.
[33m651676c[m Make httpd actually build with CMake/Ninja.
[33m797d9bc[m Fix CMake build of httpd.
[33m73e593d[m implement support for heap array allocations of variable size with 'new Int[n]'.  The major caveat is that we don't bother to initialize the elements of the array, but who would use them?
[33mf98fe89[m allow AllocArrayInst to take a dynamically computed number of elements.
[33m73d448a[m rejigger things to avoid creating a TupleInst of non-tuple-type, make the verifier enforce this invariant.
[33ma9f685d[m Fix my crazy swift.swift inlining hack so it doesn't pull in llvm.global_ctors.  <rdar://problem/12539597>.
[33m692cc1b[m fix sema to properly compute the varargs injection function for the ScalarToTuple that results from something like "var d : (Int, Int...) = 42".
[33m7c4030b[m Finish my sentences.
[33me6b0a86[m Add a doc tracking what we need for Objective-C interoperability.
[33m4494a98[m implement support for default arguments and varargs in ScalarToTupleExpr lowering.
[33mbfe4855[m Fix unused variable warning in release builds
[33m3e4562c[m refactor the body of visitTupleShuffleExpr out to a helper function that can be reused.  No functionality change.
[33maabb4cb[m reenable some verification
[33m2a2983f[m string literals were ok, the verifier was just too strict.  Allow passing in all arguments as a single value.
[33m1d711af[m add some verification logic that would have caught my previous bug.  This exposes a problem in StringLiterals.
[33m59df192[m one oversight in varargs production - make sure to pass in the array allocation size to the injection function.
[33mc49a21e[m finish implementation of varargs tuple literals now that we have generics.
[33mdb4db34[m remove ScalarToTupleInst, just use TupleInst for it instead.
[33mc9f4d56[m implement support for SpecializeExpr and, thus, generics.
[33m36b4ebb[m Change the representation of existential types to always store a type pointer;  in the case of protocol<>, this replaces the mandatory trivial witness table, and in all other cases it simply grows the representation by a pointer.  We've discussed shrinking the representation by making the witness-table lookup a (cached) lookup from the type metadata;  this needs more investigation.
[33m1b717d5[m Kill some dead code that's doing some awful and soon-to-be-incorrect stuff.
[33m6b3bcb2[m Bootstrapping httpd, but running into a weird error
[33mbafdd11[m comment typo
[33m0694ec6[m fix case-o
[33m5c289d66[m add support for byref arguments, much simpler than I was trying to make it out to be.
[33m8bd2742[m implement support for AddressOfExpr.
[33m17508a1[m don't print an empty predecessor list.
[33me61b645[m wire up initialization of argument variables with BBArguments that correspond to function arguments.  For example, we now lower:
[33mada04d6[m allow creating a TupleInst without a source location for implicit stuff.
[33mdcc46b6[m File name consistency
[33mb164937[m make the BBArgument ctor auto-update its parent basic block's argument list.
[33me475986[m adapt to mainline llvm API changes.
[33mce33027[m Add a variant of TypeBase::hasTypeVariable() that gathers all of the type variables mentioned in the type. This will be used by the constraint-based type checker in the near future.
[33m2353465[m Add an API for reemitting as a substituted type and change protocol witnesses over to the new API.  There's some badness that we're papering over here involving generic types, but this is a necessary first step.
[33m6dc1cc6[m Add basic support for emitting function argument variables. The initialization of these variables isn't wired up yet though.
[33m96c877b[m rearrange "constructCFG" interface.  This should eventually be generalized to work with any CapturingExpr, but getting the body from one is not straight-forward.
[33macde227[m Now that CFGNodes.def is straightened out, add a BBArgument class to represent basic block arguments.  Nothing generates them yet though.
[33m6a34b36[m Attempt to handle empty global variables correctly.  <rdar://problem/12490628>
[33m8b12ac1[m This went with the previous patch.
[33medbf3d8[m Rework CFGNodes.def to be able to model Value properly.  This required:  - Renaming a few macros like INST_RANGE to VALUE_RANGE.  - Changing "Kind" enums to include the "Inst" so we get ValueKind::FooInst instead of ValueKind ::Foo.  - Changes to CFGVisitor to match the new structure.
[33m89bf1a0[m Fix unused variable warnings with asserts disabled
[33m6730232[m implement AssignStmt to tuples, e.g. "(x, y) = (1,2)"
[33m6a4e898[m Teach CFGBuilder a simple peephole for tupleelement(tuple()) to just return the element of the tuple.  This is a common case because CFGGen shouldn't (and doesn't) try to worry about this sort of thing.  Before we'd get CFGIR like this:
[33m9d7ec71[m eliminate the CFGValue typedef, converting everything to use [const]Value*.
[33me2dbe26[m rename CFGValue.h -> Value.h
[33md981382[m Change CFGValue from being a PointerUnion<Instruction*,BBArg*> to being a base class of Instruction and Arg.  This allows us to more naturally use isa/dyn_cast and is the proper way to model this anyway.
[33ma052faf[m remove some implementations of classof that are now unneeded with mainline LLVM changes.
[33mdb2beef[m Start implementing support for varargs tuple shuffles (thus, support for varargs).  This is incomplete, but we can already lower this:
[33m6b72291[m implement support for FP, Character, and String literals.  Integers are exciting and all, but these are nice too.
[33m6a6dfed[m CFGGen non-varargs TupleShuffleExprs as an extract+insert sequence.
[33me298448[m Compensate for a trunk LLVM change.
[33meaae8b5[m Add a unit test suite, including a test for swift_getGenericMetadata.  Mostly ripped off clang's support for same.  I did not feel confident in pulling over the CMake equivalents, so someone else will need to.
[33me698e9a[m Fix a mistake where swift_getGenericMetadata was literally never uniquing things successfully because I can't use memcmp correctly.  Since nothing was relying on uniquing, and we didn't have tests which relied on different instantiations getting different metadata, this had no negative effects besides causing my O(n) search algorithm to make certain tests very, very slow.
[33m420485b[m add CFG support for for-each loops and for loops with variables defined within them.
[33m13e8052[m delete the VarRefInst class and instruction - variable references are now represented as uses of the lvalue that defines their location.
[33m454d82d[m implement the rest of pattern generation support.  Reimplement the entire pattern generation logic to simplify it.
[33m261731a[m Make a function for reemitting an unsubstituted explosion as a substituted one, which is critical for thunk emission.
[33m64c8346[m Promote reemitUnderSubstitutions to API and give it a better name that makes the direction of substitution clear.
[33m17944dd[m Rename emitRValueUnderSubstitutions to make clear the direction of substitution.
[33mfe7e744[m Handle the easy forms of tuple pattern initializations
[33mdc992af[m Add support for default initialized values with a new ZeroValue instruction.
[33mf4dd62d[m Metatypes for class types have non-trivial representation.
[33m98aa71f[m Move EmptyTypeInfo into GenType.cpp
[33m7a8349f[m several improvements to CFG printer. Finish implementing the basics of AllocVarInst Stub out support for (initialized) NamedPatterns.
[33m4135441[m update to build with mainline API changes.
[33md6e40e2[m start sketching out support for emitting PatternBindingDecls, so far we handle all the hard cases: parens, typed patterns, and any patterns.
[33ma0d7963[m split CFGGen of Exprs out to its own file.
[33mea15d7e[m split CFG generation of statements out to its own CFGGenStmt.cpp file.
[33m7c6e165[m sketch out the framework for handling local decls and implement support for TypeAliasDecl (gasp!)
[33mf0e3980[m now that constants are split out of DeclRefInst, it really isn't a reference to arbitrary decls, its purpose is clear: it refers to Variables.  Reflect this in it's naming by renaming it to VarRefInst.
[33ma9e3691[m per discussion on swift-dev, split the lvalue vs rvalue case of DeclRefExpr into two separate instructions (DeclRefInst vs ConstantRefInst) to strengthen invariants in the CFG.
[33ma510952[m implement CFG support for (rvalue) TupleElementExprs.
[33mae97837[m Make calls to non-static methods on classes use virtual dispatch.  Currently there is no possibility of override.
[33mdd299a3[m Fix for LLVM TargetData -> DataLayout rename.
[33mfd2ae98[m Add the ObjC selector proposal to the classes docs.
[33m428745e[m Add a bit more to the section on classes in LangRef, with some FIXMEs for more missing stuff, per Chris's request.
[33m67f701c[m Recover a bit better in the constraint-based type checker when given an erroneous expression.
[33m01ee812[m When performing the auto-closure conversion, allow that conversion to generate new constraints.
[33m11e06f4[m When we run out of supertypes in our fallback, allow a fallback to the default literal type. We need on-line type constraints for this to be efficient.
[33mc2dd934[m Turn on the constraint-based type checker for most of the executable tests. The few that remain either have problems (repl.swift, printf.swift) or just plain take too long.
[33mff6b7e5[m Kill an unnecessary semicolons
[33m408ff40[m Add a verifier for NewArrayExprs, which were the last holdout to get the constraint-based type checker building the Swift standard library.
[33m0f27e28[m In the REPL, it's fine now to run when we're type-checking with the constraint solver.
[33m7f3b884[m During application of a solved constraint system to an expression, actually visit NewArrayExprs so they get injection functions and element types.
[33m55a862d[m Don't skip out on type-checking expressions that appear to already have been type-checked.
[33m13d8eed[m Add a verifier for ReturnStmt.
[33m60fca40[m Write a conversion constraint as <c and a construction constraint as <C, rather than << and <<C.
[33m8764d65[m Improve debug output of the constraint-based type checker by showing already-solved constraints.
[33m2245341[m Finish the first full draft of the design document for the constraint-based type checker.
[33m37d024b[m bindGenericArchetypes is now just how we emit polymorphic functions on class types, so we can kill all that special code.
[33m472fc4a[m Add a short paragraph on default literal types
[33me748c5f[m Start documenting the constraint-based type checker. There is still quite a bit to right, but there's almost enough here to understand constraint generation and the simpler parts of constraint solving.
[33mb9279c7[m Remove some dead code from emitCondition: unlike clang, it is impossible for Swift's IRGen (or CFGGen) to get a constant folded condition when emitting a branch: this is because all constants are obfuscated behind function calls.  This is verified to never trigger on the testsuite.
[33mbd14851[m now that we have a type system, we can assert a trivial invariant in CFGGen: that Sema always produces Builtin.i1 for conditions.
[33m374de86[m declrefs are not always lvalues... more pondering needed.
[33me0eb2c7[m give Instruction (and CFGValue) a type.  Make the verifier enforce sanity and correctness for various invariants on these types.
[33m6e9a2aa[m Fix a conceptual bug in class metadata:  the parent pointer of a class is part of the class members section and is not global to the entire class metadata.  This is crucial for correct operation of functions expecting a base-class metadata object.
[33m526e2d7[m Flesh out some code to decide when we can avoid passing metadata and witness tables separately to polymorphic functions.
[33m02c3f33[m After discussion, it turns out that the AST notion of lvalueness can be exactly what the CFG needs for its pointer concept.  The lowering-to-CFG process can eliminate 100% of tuple types containing lvalue types ("carried" lvalues).
[33m76b1441[m CFGValue becomes a real class.
[33mc6cce15[m Introduce a new CFGType class for representing Swift types reflected in the CFG. It isn't used quite yet though.
[33mbb9886a[m add a new alloc_tmp instruction, stub out (not fully implemented) alloc_var. Remove the materialize instruction.  MaterializeExpr now evaluates its subexpression and initializes a temporary memory location with the result, returning the lvalue of the temporary.
[33me872c3b[m Make capture analysis handle assignments where the LHS is a tuple.  <rdar://problem/12425555>
[33mfb14836[m implement a new StoreInst and use it to implement (the scalar case of) AssignStmt.
[33m47a762a[m split test up and rename.
[33m1f5b775[m Use metatype pointers as generic type arguments.  Movements towards optimizing generic calls to derive things from the 'this' pointer, which is actually crucial for virtual dispatch (to get all methods to agree about how the implicit arguments are passed).  Fix a number of assorted bugs in metadata emission.  Lots of assorted enhancements.
[33m0012677[m The world demands a common generics header, and who am I to disagree with billions of other people?
[33m1224ff5[m Extend the constraint-based type checker to support assignment statements. The approach is fairly simple: generate constraints for both the destination and source expressions, then turn the destination type into a type containing only rvalues and convert the source expression to that type.
[33m19a8401[m When determining whether a call expression is actually a construction (because we're applying something of metatype type), use the simplified function type. This allows simplifications performed during constraint generation to factor into the "is it a metatype?" decision. This allows us to construct values of nested types.
[33m7891ba3[m As soon as we generate a constraint, attempt to simplify that constraint. This eliminates a lot of redundant looping over constraints, which can have a non-trivial performance impact: in an utterly unscientific test of a Debug build type-checking swift.swift, this minor tweak improves performance by 3x. It doesn't help with the ridiculously exponential issues, however.
[33mb6af1cc[m Implement support for calling operators declared in protocols when using archetypes so that, e.g., an archetype T that conforms to Ordered can be compared with <. Requires the introduction of 'archetype' constraints, so that we don't run amok and allow the use of operators in protocols for *any* type that meets the requirements of the protocol. This may change later, with default implementations, of course.
[33ma70eefa[m Rework the interface of openType() so that it takes a list of archetypes to open, rather than a generic parameter list. No functionality change.
[33m5140cc2[m Deconstruct DotSyntaxBaseIgnoredExpr nodes into overloaded member references, since the constraint-based type checker doesn't handle such already type-checked nodes.
[33mcf7bd9a[m Implement support for references to named tuple members in the constraint-based type checker. Additionally, resolve references to tuple members via an overload set, so that we can pick up the overload set when applying an unresolved dot syntax expression whose base is a tuple type.
[33m9927f76[m Improve debug dumping for overloaded expressions ever so slightly.
[33m591f276[m Tweak the representation of OverloadChoice to allow for more than four overload choice kinds. No functionality change.
[33m9f0bbc7[m When creating a member reference, use a conversion constraint rather than a subtyping constraint to relate the base type and the owner type. This is required when the owner type is a protocol, because the base type is something that conforms to that protocol (e.g., an archetype), and this relationship is a conversion rather than a subtype.
[33m51df1eb[m Make sure to type-check the outermost bound of a new array expression in the constraint-based type checker.
[33mc9058ca[m When simplifying a member constraint, always look through lvalue types.
[33m590ffa8[m Re-instate r2910, now that I've remembered why we need it: essentially, we need to make sure we don't open up declarations that don't actually have polymorphic function type, e.g., parameters. Along with trivial constraint-generation support for TypeOfExprs, this lets us type-check calls to the various polymorphic builtins, e.g., Builtin.destroy.
[33m97d3f5f[m We open all of the archetypes of a type at once, always; remove the extra hackery that only opened some archetypes.
[33mae01e76[m Teach the constraints-based type checker to cope with generic member references better. There are a number of aspects to this:   - Treat member references and generic member references the same   way, by creating proper (albeit trivial) overload sets for   them. This allows the specialization machinery to kick in when the   member referenced is a polymorphic function.   - "Sanitize" already type-checked expressions produced by an   over-eager TypeCheckExpr.cpp by removing implicit conversions and   turning DotSyntaxCallExprs into member references. This allows the   specialization machinery to properly handle the two-step   specialization implied by calling a polymoprhic method on an   instance of a polymorphic type.   - Factor out the construction of a member reference, along with   subsequent specialization of the result, so it can be re-used for   the various member reference expression forms.   - Handle coercion of the object argument of a DotSyntaxCallExpr.
[33mc10562e[m eliminate ignoreParens, it doesn't do anything useful anymore.
[33m2f4d41b[m Implement support for MaterializeExpr in the CFG, apparently it was the only thing missing to get all of our conditions in CFG.swift to work.
[33mbb5bc48[m start emitting the condition expression of branches as instructions, and require the condition of a CondBr to be non-null.
[33m6411c0a[m We can end up with MemberRefExprs as input to the constraint-based type checker, e.g., when we build them based on referencing 'this'.
[33mbd87948[m Introduce an rvalue-of constraint, which allows us to turn an lvalue into an rvalue as part of the constraint system. We use this to help break apart the function argument of a function application, which needs to have a type whose rvalue is a function type. Fixes <rdar://problem/12351208>.
[33mdc7c4d2[m Actually prefer the representative type variable with the lower ID number, like the comment has always said. No real functionality change here.
[33m3271aa3[m Move the 'parent' pointers for type variables out from the TypeVariableType's implementation to the constraint system, so that equivalences determined in one constraint system don't affect another constraint system. Yes it's amateur day.
[33m179e260[m Add an abstraction to encapsulate a Decl + explosion level + uncurrying level, which is something I find myself passing around quite a bit.  Make sure that it can propagate getter/setter references in the same way.
[33m3467e63[m Emit pointers to final overriders of member functions into the metadata objects for classes.  This is currently only done for methods defined in the main class body, and it's (naturally) totally fragile, and it's screwed up in a couple known ways w.r.t. generic classes:  there's no thunking when the overrider differs by abstraction from the overridden method, and methods on classes currently expect to get all the type arguments passed directly and thus will disagree in signature from members of non-generic classes.  Also, of course, we're not using any of this in the call infrastructure.  But it's progress.
[33ma07ecb1[m IR-gen version of previous commit.
[33m72c5c28[m Add the ability to propagate arbitrary other information around TypeVisitors.
[33m43c4cac[m When building tuple metadata, used the proposed witnesses when provided.
[33m40c5dbb[m Add a strawman dynamic_cast API
[33m8a2ede5[m Zap extra semicolon which clang warns about.
[33me621c8b[m Make the constraint checker support dot expressions with a module as the base.
[33m91ffa95[m Add very basic support for selecting the best solution when the constraint solver produces multiple solutions. The criteria for "best" are fairly simple: we compare the bindings for each type variable bound in both solutions:
[33mee012c0[m Make IR-gen use canonical types as the basic type currency. This is kindof a pain in a few places where the type system doesn't propagate canonicality.  Also, member initializations are always direct-initializations and so are allowed to use explicit constructors, which is a hole in our canonicality tracking.  But overall I like the idea of always working with canonical types.
[33m32cc48d[m More restructuring and start emitting struct metadata.
[33m2d03d84[m Move class metadata emission into GenMeta.cpp.  The main motivation for this is to re-use code involving generic nominal types.
[33mfe97523[m Extract out a header for doing class metadata layout. Also rename a bunch of things to say 'Class' in them in preparation for other refactoring.
[33mee6ab43[m Minor formatting fixes.
[33m77c0114[m Make sure TupleType::get never returns an invalid TupleType. Finishes off <rdar://problem/12337042>.
[33md8b84d6[m Add ScalarToTupleExpr to represent an implicit conversion from a scalar to a tuple.  Part of <rdar://problem/12337042>.
[33m919f63c[m Zap extra semicolons (which some versions of clang warn about).
[33mce334c0[m When dumping an overloaded declaration reference or member reference expression, just dump out the types of each of the options, rather than the full, recursive definitions.
[33md09688d[m When we don't have any useful upper or lower bounds on any type variables to pick as potential bindings, try the default literal types corresponding to literal constraints on a type variable.
[33m79fd4eb[m Do the isAssignment dance when updating function applications in the constraint-based type checker
[33m95830d4[m Clean up some type computations in the application of a constraint system to an expression, and fix a bogus check in the verifier.
[33m342bd9f[m When we've been asked to debug the constraint solver, dump debugging information to standard output (not standard error), so that we can separat it from -verify output. This makes it easier to run the constraint solver tests just once and check both the debug dumps and the actual results.
[33m7057642[m When transforming a function type, make sure that the input type is properly parenthesized, as we require in the grammar. Only the constraint-based type checker produces function types with unparenthesized input types, but it does so for good reason.
[33mfdcaf9e[m Inline the hideous fixupExpr() into its one caller, in a more benign form that only introduces unstructured types at the top level.
[33m2438509[m When applying a constraint system to an overloaded declaration reference, build a SpecializeExpr without falling back to the existing type coercion code.
[33m6dc8df8[m Factor the construction of SpecializeExpr into a separate routine; we'll need it again soon.
[33m3e7601b[m When we resolve an overload set to a particular choice with a particular type binding, record that type binding as part of the "resolved overloads" set. No functionality change, except that our debug dumps are now more accurate.
[33mf833c17[m Eliminate extraneous insertion into ResolvedOverloads; it's always handled elsewhere.
[33mc0904be[m Implement two more pieces to the application of a constraint system to an expression:   - For references to polymorphic functions, use the opened type to   produce substitutions and build the SpecializeExpr, rather than   falling back to the 'unresolved type' hack. This makes application   actually follow the results determined by the constraint solver so,   e.g., the ternary operator function works.   - For function expressions, fill in the determined (then simplified)   types for each of the named, untyped arguments.
[33ma695354[m Make heap metadata use the metadata scheme.
[33m34da6d1[m Implement grabbing an external value witness table.  I described this mangling in a previous commit, and the runtime is already using it for some standard tables.
[33m73540dc[m Extract out a header from Metadata.h to hold random shareable things.
[33m1fd0a85[m Implement constraint system application to subscript expressions.
[33m578ff66[m ColonLoc -> DotLoc, to reflect the current syntax for unresolved member expressions
[33m10298b6[m Implement constraint system application to UnresolvedMemberExpr nodes.
[33m14489d4[m Fix test.
[33m2c21ee7[m Add the compiler infrastructure for emitting references to tuple and function metadata.
[33m968ed02[m Add standard metadata for the empty tuple.  Add standard value witness tables for the empty tuple (useful for the previous and for empty types in general) and the trivial function type ()->() (useful for all function types).  Add metadata-fetching functions for tuple and function types.
[33m5b10c5d[m Move emitClassMetadataRef to GenMeta.cpp and make it work for an arbitrary metadata type.
[33mc4c8c5c[m Expose an API to fetch a class metadata pointer.
[33m77ac36c[m This hack is no longer necessary.  Thanks, Doug!
[33mb2b7a8e[m Add standard type metadata for some builtin types.
[33m02c2807[m Finish enumerating all of the expression cases for the application of a constraint system to an expression. Most of these are FIXMEs to be tackled later.
[33m462f733[m Fill in a number of easy cases when applying a solved constraint system to an expression.
[33m1fe5d9e[m When applying a constraint system to an overloaded declaration reference, just build a declaration reference to the selected declaration. Previously, this was falling through to the current type checker.
[33maf283dc[m Always create overload sets in the constraint solver when we've reduced an expression or lookup to a set of choices, even if there is only one choice. For that single-choice case, record the one option locally (as "resolved") rather than putting it into the unresolved bin. This simplifies our mapping of expressions involving overloads.
[33mb23f678[m Add missing CMake dependency: we need to rebuild the Swift lib whenever the swift compiler changes, just in case
[33m1529e0d[m Arrange for general mangling of type metadata.
[33md84d024[m Fix an uninitialized-memory bug.
[33m0243ab0[m Add a standard value-witness table for ObjC object pointers.
[33mab8677c[m Change the mangling of metadata objects to be more consistent.
[33m5d3e130[m Rename the fixed-size POD value-witness tables to pretend to be various integer sizes.
[33m6b16b75[m Work around a clang bug (fixed in trunk) where we fail to instantiate functions in a wierd situation.  Also fix some other compiler failures.
[33ma8fc835[m Commit to using C++ in the runtime headers for now.  Manually mangling stuff is obnoxious.  Also limit visibility of the internal symbols.
[33mda682bb[m Predefine some value witness tables for some builtin types.
[33m647f4d5[m Skeletal ABI documentation.  Just mangling for now.  Might be inaccurate in places.
[33m2655707[m Improve packing of OverloadSet
[33mf609ec6[m Track the mapping from an expression to the overload set it generates, so that we can then determine which overload was actually selected within the current constraint system. Use this information to provide a fully type-checked NewReferenceExpr with far less reliance on the existing type checker.
[33md3d8562[m Make the application of a constraint system to a new-array expression not depend on the current type checker. Remove the hack that supported the older behavior.
[33m1066498[m Add command line options to turn on the two LangOptions options for the constraint-based type checker:
[33mc13ef47[m Replace the REPL command :dump_constraints with a way to toggle the LangOptions bits for using the constraint solver and emitting its diagnostics.
[33mf059cfd[m Add a few more hacks to layer the application of a solved constraint system to an expression tree on the existing type checker.
[33m39b9f43[m Separate out the setting of the "debug constraints" from "use the constraint solver" option; we want these to be independent. No functionality change, yet.
[33m42b1ab6[m Introduce a LangOptions class to capture various type-checker-tweaking flags. For now, introduce bits to enable the constraint solver and to enable debugging of the constraint solver, and use those to eliminate the "useConstraintSolver" bit that was threaded through too much of the type checker.
[33m6933186[m Remove the "type checker cannot handle well-typed expressions" error, since we're now applying solved constraints to an expression to produce a well-typed expression. The resulting expressions are now returned and run through the verifier, so deal with some of the byref(implicit) fallout.
[33m5d0fdcd[m Factor out the hack that uses the existing type-coercion logic to convert an expression to a given type.
[33mb1624b7[m Make TypeChecker::typeCheckExpressionConstraints() more of a "real" implementation, which has a separate "produce debug output" flag we can more easily toggle. The testsuite changes are due to changes in the debugging output, not any actual functionality changes.
[33m3f91462[m Move the logic involved in type-checking with constraints into a new routine, TypeChecker::typeCheckExpressionConstraints(). No functionality change (yet).
[33mff52431[m Introduce a simplistic operation that applies a solved constraint system to a given expression, rewriting the types in the expression and performing conversions as necessary. Note that this is woefully incomplete, and relies heavily on the existing type-coercion code.
[33mfe75cc3[m Update the Pattern Matching whitepaper with some new thoughts. This isn't quite the design I mentioned on Tuesday;  I keep waffling, but right now I think ?x is a better match-pattern binder than var x.  Compare:   case .cons(?head, ?tail):   case .cons(var head, var tail):
[33m8499117[m The value witnesses for size/alignment/stride can just be size_t's. This requires us to potentially copy the value witness tables for generic struct types as part of computing layout, but that's not the end of the world (although it will rely on a future patch to split value witnesses out from protocol witness tables).
[33m298fa72[m implement RequalifyInst, allowing us to ++ a variable.
[33m5373978[m Introduce the unreachable instruction for the "fall off the end of function" case.
[33mf4a554b[m introduce a (trivial) abstraction for CFG Locations (which refer back to the AST). This obviously need to improve in a number of ways, but this sinks the important bits down to Instruction (instead of being in each instruction subclass) and unifies it in a place where it can be generalized later (when we have inlining).
[33maded9d0[m Change ReturnInst to always require a non-null return value.  This isn't the right modeling for falling off the end of the function, we should introduce an analog to the llvm "unrechable" instruction.
[33me90e91c[m remove dead ivars.
[33ma202df1[m getterize the rest of the instructions.
[33m117f971[m mark various CFGGen classes as hidden visibility, they are private implementation details.
[33m1a2869d[m introduce a new CleanupManager class, which contains the cleanup stack and assorted minutae for maintaining it, split out of CFGGen.
[33m74128c8[m correct scope processing for BraceStmt.
[33ma30e429[m wire up the basics of scope processing, no cleanups handled yet.
[33m081de32[m remove ThisApplyInst, it is just a special case of ApplyInst.
[33mdb722b9[m rename CallInst -> ApplyInst
[33m88000b0[m generalize CallExpr handling to handle all ApplyExprs, allowing us to handle < and friends (a BinaryExpr).
[33m7b63392[m implement (the start of) cfg generation for foreach and c-style for loops.
[33mb7daad7[m make insertion of a terminator automatically clear the insertion point, defining away a nasty class of cfg suboptimality.
[33m0260a70[m unify two copies of emitBlock into CFGBuilder.
[33m80fdfd2[m Check the bounds of new array expressions, even in the constraint-based type checker.
[33mc4f2e3f[m Fix a typo in a comment
[33m0a5e379[m Reorder the sources for swift.swift so they're in the same order for CMake and make. Workaround for a crasher (I'll file a radar).
[33meb9cdab[m Implement support for the new object expression (e.g., new Dictionary) in the constraint-based type checker.
[33m5dfd6e8[m Implement support for allocating a new array within the constraint-based type checker.
[33m9a7c777[m When expanding a constructor constraint, introduce an overload for the identity function T -> T (for base type T), which captures the conversion path. This eliminates the ugly hack of having to add a constructor(s : String) to String.
[33m832a86b[m The constraint between an interpolated string literal and its pieces is a construction constraint, not a conversion constraint, because we want the equivalent of
[33mbb5811e[m Carry tuple element initializers through type transformation, but don't (yet!) transform them. Allows us to switch the map/explicit closures example from a hacky toString() function over to the appropriate String() coercion.
[33m737a1ff[m Implement support in the constraint system for unresolved member expressions like ".none", which refer to a oneof member of unknown type. Such expressions are strange, because the expression ".foo" can either have the type T0 or the type T1 -> T0, where T0 is the oneof type (which is unknown) and T1 is a fresh type variable. The choice depends on whether the named member ends up having unit type or not, because the usage of the two varies:
[33m0418a48[m Unbreak CMake build
[33m31e7be1[m Introduce support for the type coercion syntax
[33mc7d8818[m Assignment operators have an initial [byref] parameter; for the purposes of type checking, make that [byref(implicit)].
[33mc5ffc14[m rename CFGLowering file and class to CFGGen.
[33mbd30f3e[m rename CFg/Lowering to CFG/CFGGen to follow IRGen's naming lead.
[33m5dc3752[m Some comments about address-of constraints
[33m029f732[m Re-introduce the notion of implicit lvalues, to be used within the constraint-based type checker. We now model the address-of operator with the constraint
[33mbd571b7[m Introduce a new kind of constraint that binds a type variable directly to a type, without removing the lvalueness of the replacement type. Keeping the lvalueness is important when referring to a declaration, because that reference might be an lvalue. Properties/subscripts are working better now.
[33mea6a203[m Type check the signature of func expressions while folding sequences prior to performing constraint-based type checking.
[33m6d514c1[m When type-checking explicit closure expressions within the constraint-based type checker, include the body of the explicit closure within the set of constraints. This allows type information to flow from the body expression, so that we can type-check, e.g.,
[33m81d8f27[m When dumping constraints via TypeChecker::typeCheckExpression(), don't rely at all on the existing type checker. Instead, just fold sequence expressions (which are effectively a delayed parsing phase) and then hand off the expression to the constraint solver.
[33m4b2866b[m When referring to a member of a specialized type, open up that type in the same context as we open the type of the member. This allows the constraint-based type checker to cope with members of generic classes.
[33m06c2976[m When replacing a type variable with its bound type in the constraint-based type checker, make sure to recursively simplify the replacement type.
[33m725fecd[m Allow the scalar -> tuple conversion as a trivial subtyping, rather than simply a subtyping. Add some basic tests for accessing members of a class.
[33m5f8d126[m Fix CMake build
[33mce88580[m clear the insertion point after emitting a conditional branch
[33m6b47f6e[m Rename Builder -> CFGLowering, split its class definition out to CFGLowering.h
[33mefd8d29[m rename Lowering.cpp -> CFGLowering.cpp
[33m37b87bc[m steal JumpDest from IRGen, it will eventually be a CFG Lowering only construct. Use it to implement break/continue.  Cleanups are just stubbed out for now.
[33m7055cfe[m move DiverseList and DiverseStack to swift/Basic, out of IRGen.
[33m5c6331a[m split CFGLowering out to its own sub-library of the CFG library. It's implementation is going to be a lot of code (certainly more than what makes sense to put in CFG.cpp) and wants multiple private headers and other stuff that makes sense to keep separate from the *manipulation of the CFG* logic in lib/CFG.
[33m223eb96[m remove verification of predecessor list for BranchInst - this should apply to all terminators, but is implicitly generated now, so it can't wander due to random compiler bugs.
[33m56bfea5[m rename UncondBranchInst to BranchInst.
[33m70e5832[m stub out CFG generation of while and do/while loops, the break/continue stack isn't implemented yet. isn't implemented yet. isn't implemented yet. isn't implemented yet.
[33mbbbeda1[m Finish implementing "Condition" for CFG Generation, including all the crazy optimizations that John has in IRGen (e.g. resplicing the condition block back to the true block in some cases, etc).  The only piece missing is constant folding of the condition, because I don't know how that will be modeled.
[33m2a8a6b0[m microoptimize IRGen's emitCondition a bit: instead of emitting a xor to invert a condition, just output an inverted conditional branch (swap the true/false dests).
[33mc52ab13[m Remove the last remanants of auto-inserting instruction forms, which also tolerated incompletely constructed operands.
[33me7b9c05[m remove the current strategy for lowering control flow statements.  We're switching to use the same model as IRGen, and it doesn't make sense to move incrementally.
[33m221c38a[m Start stealing Condition from IRGen.  It will (eventually) be a CFG concept only, not an IRGen concept.
[33mf89ce40[m update cmake.
[33m2dd05af[m Introduce a new CFGSuccessor class, which is responsible for managing the predecessor list of a basic block.  Now that the predecessor list is implicitly maintained, it can never get out of date with the IR.
[33mb4d07db[m remove currently unused graphtraits specializations.
[33md5821bd[m add non-inserting ctors, and CFBuilder methods for creating terminators. Nothing uses them yet though.
[33mf17bbb2[m fix this assertion.
[33mc7b1a99[m change verifier to use CFGVisitor, no behavior change.
[33m29629e6[m remove the badCFG bit and related logic from the Builder.  CFG building can (eventually) never fail for a syntactically valid AST.
[33m5aff4ac[m remove a fixme, I think Ted did this ;-)
[33m1ef6ffa[m move the non-terminator instructions over to CFGBuilder and change their ctors to just construct, not construct AND auto-insert.
[33mbd93fc3[m two conflated changes: 1) Sprinkle some ilist_traits magic in to have the ilist completely manage    the parent pointers of instructions in a block.  As an instruction is    added or removed from the list, the parent pointers are automatically    kept up to date. 2) Switch DeclRefInst over to CFGBuilder API for construction instead of    'new-style' api.
[33m942cbe6[m remove a mapping we don't need, at least so long as the swift AST doesn't become a DAG!
[33mb7d8e67[m start of a cfgbuilder class.
[33ma97ebb7[m rename CFGBuilder class, I want the name for something else.
[33m791b6bb[m resyntax many instructions.  Now the opcode is consistently lower case and matches the instruction name.  DeclRef's print their type, and the printing is more consistent.  Admittedly, some of this is personal taste.
[33mf328cff[m compute a whole-function numbering for ssa values, instead of a block local number.  Cache them for efficiency instead of recomputing.
[33mca6a113[m Don't print the successors of a block, they are always obvious from the terminator. Change the pred list of a block to print at the start of the block, along with the basic block number.  For example:
[33m57b6030[m change basic block id printing to allow more natural use of ostreams instead of printID.
[33m8ae6cab[m move the driver logic for -dump-cfg out to swift.cpp, make -dump-cfg write to stdout instead of stderr.
[33m3930680[m merge CFGPrintContext into CFGPrinter, zap a dead and incorrect << implementation.
[33mbf05c86[m remove some unnecessary deleted ctors.
[33m798685b[m more cleanups for the CFG printer, avoid exposing CFGPrintContext to CFG.h, it's an internal implementation detail of printing.  Give all CFG nodes a standard print(OS)/dump() api.
[33m916576f[m introduce a CFGVisitor class, switch the instruction printing logic in CFGPrinter over to use it.
[33m4832c9c[m Allow weakening of a failing type variable binding to a tuple with just a variadic element (e.g., (args : Int...)) to a single value of the base element type (Int).
[33m68da237[m introduce CFGNodes.def and switch Instruction.h to use it.
[33m747a543[m no really, return is a terminator.
[33m5e0a7ac[m If an assumption that binds a type variable to a class type fails, try binding to its superclass instead. This, plus a tiny hack to deal with our utter lack of meet/join computation, lets us define a ternary operator-like function as
[33m95f2223[m rename InstKind::IntegerLit to IntegerLiteral to match the class.
[33mea91c19[m If a type binding to an [auto_closure] function type fails, attempt to bind to the result type of that function type. The astute reader will note that this is a conversion constraint rather than a subtyping constraint, but that is intentional: we need to be able to consider conversion constraints. Later, we can track the initial constraint on which we're basing our assumptions, so we don't generate weaken via conversion when in fact we're only allowed to perform subtyping (for example).
[33m4708531[m Rework the way we create child constraint systems based on making assumptions on type variable bindings. Instead of creating the child systems directly, we queue up the potential bindings so that we have better control over when the child systems are created.
[33mdc00d2d[m Keep track of the number of active (potentially solvable) child constraint systems for a given constraint system. No functionality change yet.
[33ma5ec0af[m Rename 'BraceStmt::elements()' to 'getElements()' to match Swift naming style for accessors.
[33m04fb97c[m Fix overriding computation with generic base classes.
[33m0e65e5e[m tidy up the CFG class
[33mfc90e82[m clean up ivar names and accessors in BasicBlock.
[33ma8a0769[m rename members of Instruction class to follow naming convention of ivars in the swift codebase, make them private and add accessors.
[33m92756ad[m it's an invariant that all BB's have terminators, so remove the hasTerminator predicate, moving it to CFGBuilder (as a static function) where it belongs.
[33m50e21a8[m More semantic analysis for classes inheriting from generic classes.
[33md435799[m Split the verifier out to its own file. Run it on newly constructed CFGS. This exposes that Return wasn't being modeled as a terminator.  Fix it to be one.
[33m3f21c1e[m clean up some verification logic.
[33m94676c0[m canonicalize include guards.
[33m1f14fe4[m random cleanups, canonicalize #includes, no functionality change.
[33m4034ca2[m remove the "Invalid" instruction.  An invariant of the IR should be that it is always valid.
[33mfa474ee[m Implement simplification of conversion constraints for user-defined conversions. We limit the relationship between the result of the conversion and the actual expected type to a subtyping relationship, which effectively limits us to applying a single user-defined conversion function (rather than a chain of such conversions).
[33m8f85913[m Start of support for semantic analysis of generic base classes.
[33mda954c0[m Minor cleanup for type validation: a type only needs to be validated once, and type validation should never fail in a call to validateTypeSimple.
[33m8050b84[m Remove a few more already-addressed FIXMEs
[33m4a2b4f8[m Implement the obvious subtyping rule for metatypes of classes, but leave a FIXME for actually testing it. The constraint system can't currently express the test.
[33m6c8930e[m Remove two FIXMEs addressed by my prior commit
[33m8015fce[m Implement subtyping of classes in the constraint-based type checker.
[33m6d2bee2[m Introduce support for conversion to auto-closure function types within the constraint-based type checker.
[33me7b9ae4[m Defer to the value witness when moving an archetype.  This is really a deficiency in TypeInfo::initializeWithTake, which is now virtual and not implemented in TypeInfo anymore.  This fixes rdar://problem/12153619.
[33mab03f4f[m Separate out the scalar < one-tuple subtyping relation from the scalar << tuple-with-at-most-one-nondefault-element conversion relation. There's still more work to be done here.
[33mcc133b2[m Implement subtyping and conversion for existential types. The only difference is that a concrete type's conformance to an existential type is considered a conversion (but not a subtyping). Relationships between two existential types are (non-trivial) subtyping relationships.
[33m5999348[m When we're dumping constraints for an expression in the REPL, don't execute that expression.
[33m2583f41[m 'protocol<' does not start a declaration. Test case coming in a future patch.
[33mae7c990[m Fix use of uninitialized member.
[33mc392a5a[m With tuple subtyping, we allow names to be changed in the subtyping relation so long as no names actually conflict. This rule matches the conversion rule a bit more closely, but, alas, doesn't actually provide a subset of the matches allowed by the conversion rule.
[33mfd37448[m Implement tuple shuffling and variadic tuple semantics for tuple conversion constraints.
[33mc8bb5a9[m Actually pay attention to when a constraint failed, so that we don't foolishly consider an ill-formed constraint system as "solved".
[33m3c0da5e[m Fix my poor English in the literal-constraint debug dump.
[33mca8a3d5[m When we're making assumptions about type variables based on their bounds, only consider bounds that don't involve other type variables.
[33m3838267[m Add a simple test of the constraint-based type checker involving a generic identity function.
[33m031eace[m Rewrite the overriding resolution algorithm to reflect the actual rules we want for overriding.
[33m9e82c42[m Improve debug dump for the constraint solver slightly, to tell us whether we actually found a unique solution. Add another test for contextual overloading.
[33md7e0e15[m Add a helper function to determine whether a particular constraint system has been "solved", meaning that all type variables have been bound to concrete types or are completely free. Add the solvedness of a particular system to the debug output.
[33m9d315ae[m Keep track of whether a given type involves a type variable.
[33mea600fa[m Teach the constraint solver to make guesses about type variable bindings based on lower/upper bounds for that type variable. This is woefully inadequate, but it's enough to allow us to resolve
[33mc40f23b[m Factor out the collection of types above/below a given type variable, for later re-use. No functionality change.
[33ma14e8ca[m Factor out the resolution of an overload set (which builds child constraint systems for each potential choice). No functionality change.
[33m4519284[m When dumping out a constraint system that is not at the top level, print out the assumptions under which this constraint system was generated.
[33m1732704[m Implement ultra-simple "solving" of constraint systems by trying all of the possible overloads. We're now able to resolve this:
[33m5f8a2fb[m Add CFG support for do...while.
[33m9cc73b1[m Refactor some CFG-construction logic into helper methods.  No functionality change.
[33m7dd8bd4[m Add CFG support for 'continue'.
[33meb16897[m Delete isa, cast, and dyn_cast on Type.  Hopefully, this will lead to fewer stupid mistakes.
[33m6caeebe[m Fix unresolved computation for array slice types.
[33m308aa4e[m Add CFG support for while and break statements.
[33mb4c91a3[m Whether a canonical type has been constructed for a given type is not a reliable way to track whether a particular type has been validated. Instead, add some bits to the type to indicate which stage of checking it has received. I hate it, but it works and I don't know of a better way to ensure that types get validated. This subsystem will need to get rearchitected at some point (ugh).
[33m000c760[m During CFG construction, specially handle TupleExprs that bundle call arguments so we don't create an extra TupleInst in the CFG.
[33m8d51802[m Remove derelict getInst() method.
[33m919a475[m Add test case documenting current CFG progress.
[33m4028833[m Add CFG support for explicit and implicit returns.
[33m611ace1[m Wire up CFG support for 'if' statements with no 'else', and handle nested 'if' statements.
[33m5b64825[m Refine pretty-printing of CFG, fixing up printing of branches, and only emitting basic block prefix for instructions at their definitions.
[33mf026ea5[m Move constructor for CondBranchInst out-of-line and have the constructor auto-register a predecessor with a target block.
[33m8d583f4[m Add a verifier to check that bound generic types always have substitution information, but keep it turned off because it fails everywhere :(
[33m8e735ae[m Bind generic parameter witnesses when emitting a generic class destructor.
[33m20bfc9c[m Initial, untested support for uniquing generic class metadata, which is necessary to embed the value witnesses there.
[33me74432a[m More incremenetal progress on metadata layout.
[33m08bd9e3[m Add initial CFG support for 'if'.  It's broken in many ways still.  WIP.
[33m5e3e8d4[m Add CondBranchInst to model conditional branches in the CFG.
[33m881d1ec[m Start reworking our handling of overloading in the constraint system. Rather than creating child constraint systems during constraint generation (which is a terrible idea), simply create an overload set that has a bunch of choices. When the solver decides to explore the consequences of picking one of the overloads from the set, it will create the appropriate child system and inject the consrtaint into that system.
[33mf3b2730[m Move the fixed type assigned to a type variable out of the type variable itself, because such bindings may be local in nature.
[33mdcd2d54[m assert << fixes without test cases.
[33m80ede7f[m Don't deduce an lvalue type, ever
[33m61a1523[m Add some FIXMEs for simplifications we could perform, but can't really trigger now
[33m1831a4c[m Remove redundant literal constraints on a type variable.
[33m67d5d6b[m Track whether the simplification of constraints on a type variable has actually introduced any new constraints. If not, we may not have to go through the constraint list again.
[33me076b64[m Introduce the notion of a "trivially solved" constraint, which is simply verified but did not change the constraint system at all. Eliminating trivially-solved constraints doesn't require us to check constraints again.
[33m26c7d31[m Implement the simplification rule
[33m77623b4[m Fix IRGen of value witness tables for generic types.
[33m85f86f8[m Remove pointless operator delete
[33mc946ecc[m Collect all of the constraints that relate directly to a type variable T, e.g.,  T < Int or T << Int. Use this information to eliminate redundant constraints, such as "T << Int" in the above example (since subtyping is a stronger constraint than convertibility).
[33mf710002[m Refine CFG construction of CallInst to directly consult the payload of TupleInsts.
[33m951c4b4[m Add CFG support for TupleExprs.
[33m269ad27[m Change CFG construction to return a CFGValue from visits to Expr*s.
[33m1581246[m Add explicit instruction for Tuples.
[33m576138b[m Add CFG support for Loads.
[33mce8bad3[m Add doxygen comments for most the Instruction methods and classes.
[33m26f07ec[m Throw the switch to start using generic slices everywhere.  Out with the old, in with the new!
[33m4357852[m Introduce two new kinds of constraints: value members and type members. Both constraints have the form "T1 is a type with a member named N, such that a reference to N in T1 has type T2". Value member constraints reference N in an expression contents, based on a value of type T1, while type member constraints can only refer to types (duh) and return the declared type of the entity (rather than the type of its value). Type member constraints are currently used in a moderately hacky way for nested types of archetypes.
[33m2970604[m Switch the swift standard library over to the generic UnsafePointer.  Fix an IRGen bug that showed up when I did that.
[33m436ca3c[m Stack space is free
[33m30b74f4[m Fix the type of main(); make it return 0.  <rdar://problem/11986212>
[33ma16b188[m Encode the requirement that a particular type variable be a type that can be created from an integer literal as a new kind of "literal" constraint, rather than as a property of the type variable itself. This eliminates the problems associated with merging equivalence classes and propagating the literalness of the type to the representative (which is a problem when solving child constraint systems). Additionally, it gives us the ability to say that a type variable needs to support several different literal kinds, if we ever care.
[33m7f398bf[m Eliminate the list of protocol conformances on a type variable. Instead, just capture this information with a subtype constraint on the corresponding protocol composition type.
[33m157c786[m Eliminate the set of intersections of a given type variable. It's not used at all now, and I clearly don't know what I'm talking about.
[33mfda1ea5[m Introduce equivalence classes for type variables within the constraint system, using a simple union-find model. When we discover a that two type variables must be equivalent, merge their equivalence classes. When we determine a fixed type for a type variable, each of the types in that equivalence class gets the same fixed type.
[33mf586377[m Implement basic simplification of constraints by matching types (under same-type, (trivial) subtyping, or convertible-to criteria), destroying type constructors to break complex constraints into simpler ones.
[33mbef302d[m Initial attempt at implementing semantic analysis of overriding for classes. Still a lot of missing pieces, but it mostly works.
[33m1c64358[m Constraint generation: for each reference to a generic function, replace each archetype with a fresh type variable (that conforms to the same protocols as the archetype) and make the resulting function type monomorphic over those type variables. The resulting constraints provide deduction for the generic parameters, e.g.,
[33me85055e[m Factor the traverse-and-rebuild logic of the type substitution code into a separate routine TypeChecker::transformType(), that applies an arbitrary transformation. Build TypeChecker::substType() on top of this new routine. No functionality change.
[33m0186922[m Remove a bunch of redundant FIXMEs for which the answer is "yes". No functionality change.
[33m1324d50[m Good switch hygiene.
[33mfc630c7[m Inching towards a more useful idea of heap metadata. In particular, prepare for storing real v-table-like information in the heap metadata.  Give the metadata object proper linkage and emit it as part of emitting the class.
[33mbaecef7[m Work out a different way to meet access-control restrictions on the archetype wtable mapping.  Amp up the asserts, too.
[33mb821650[m Fix access-control bug in a slightly different way.
[33m096d6fc[m Add a FIXME, per discussion with Doug.
[33m0d7afbe[m Introduce an almost completely untested implementation of constraint generation from an expression that has not been type-checked. One can see the constraints introduced by an expression by using
[33m0a30594[m Access control fix for those using a bleeding-edge Clang.
[33mcfaedbf[m More miscellaneous fixes towards getting slice_test to work. Sadly, it doesn't yet --- some sort of unbound archetype.
[33m286a1a1[m Assert early when something tries to add null to an explosion.
[33me64342b[m Bugfixes with properties of generic types.
[33m17027b8[m Basic support for members of generic types.
[33m26ae164[m More restructuring in support of emitting getter/setter calls on different base types.
[33mfbafe28[m Progress towards making GetterSetterComponent more abstractable.
[33m88e0329[m Change the formal type of subscript declarations to always pass the index as a separate argument.  This makes it much easier to work with these things generically.
[33m2ae8e87[m Tidy up CFG pretty-printing to make it more readable, consistent, and indent properly.
[33m98162e9[m Re-introduce IntegerLiteralInst.  We won't go with constants for now, as keeping with instructions reduces the conceptually clutter.
[33m73c314f[m Introduce a CFGPrintContext object to aid in pretty-printing CFGs, Instructions, and BasicBlocks. No functionality change yet; just a refactoring to prepare for more changes.
[33ma49b790[m Move CFG/Instruction/BasicBlock pretty-printing to it's own .cpp file.
[33me244419[m Deal with unresolved base types in subscript epressions.
[33m6c0cc85[m [utils] Update demo-tool to execute Chris' transcript style text files.
[33m3b6ea74[m Despite the irrelevance of static types of Objective-C, we should still actually use the right ones.
[33m9e06964[m Make the TypeLoc constructor which takes just a type private, and expose a static method to call it, to make it more explicit what is happening.  Avoid using TypeLoc::withoutLoc for function definitions; instead, just use an empty TypeLoc.
[33m3771af1[m Move typeCheckIgnoredExpr back into TypeCheckStmt, where it belongs.
[33m8de64f6[m Move a bunch of code which isn't really related to statements from TypeCheckStmt.cpp to TypeChecker.cpp.
[33m7f29733[m Fix type lookup into base classes to work roughly correctly.
[33m14fd463[m Introduce CFGValue, a discriminated union over Instruction, CFGConstant, and BasicBlockArg. The idea is for CFGValues to be used as values consumed by Instructions.
[33me00c3bd[m Customize ilist_traits for Instruction and BasicBlock to allow them to be BumpPtrAllocated.
[33m6781f56[m Start of support for class inheritance.
[33m163f179[m Move DictionaryStringInt into its own file in the runtime, and merge in the getItems() method + supporting classes, renaming it to itemsAsArray() per the slides.
[33m7a490b5[m Move String's split() operation into the standard library.
[33m847f65e[m Move VectorString into the Swift library, to eventually be replaced with Vector<T>.
[33mb334039[m Add CFG instructions CallInst, DeclRefInst, ThisApplyInst, and TypeOfInst, and wire them up in the CFG.
[33m69b125d[m Remove dead code.
[33m20489ec[m Fix two use-after-free errors.
[33m479077e[m Remove individual element setters from BraceStmt, and just use MutableArrayRef and ArrayRef to access its elements.
[33m95cb2d6[m Add builtins to convert between arbitrary retainable pointers, Builtin.ObjectPointer, and Builtin.RawPointer.  I don't really like the way these builtins are defined (specifically, the part where messing up gives a mysterious IRGen error), but it's workable. <rdar://problem/11976323>.
[33m403d778[m Add more boilerplate for CFGBuilder, and introduce CFG support for BraceStmt.
[33m02c8131[m Add 'elements()' accessor to BraceStmt to provide easy iteration over a BraceStmt's elements.  The other accessors can probably go away.
[33m819d800[m Introduce new 'CFGBase' and 'CFGAllocated' classes so that we can have custom 'new' memory allocation using CFG's BumpPtrAllocator while having precise alignment information about the allocated object.
[33mf8bda54[m Organizational cleanups.  No functionality change.
[33m1dd8840[m Add IntegerLiteralInst to wrap IntegerLiteralExpr in the CFG.
[33mb01b27c[m A few misc tweaks to -ast-dump for decls.
[33m9efa0a1[m Revised version of classes doc.
[33m3c6cf4d[m [tests] Add a generic "generator" test I would like to work. :)
[33m011e9da[m When we're specializing, we need to know how many levels of generic parameters we're substituting. This is either "all levels" (when we're substituting a specific base type in a member access) or "the innermost level" (when we're substituting after deducing from a use or application of a polymorphic function).
[33m691874b[m a couple typos
[33m5184be4[m Finish off rdar://12017658 - func() expression should support type inference of argument types. This implements inference of return types, per the discussion today.
[33me58a7f5[m First draft of docs on classes.
[33m1b51012[m Factor the mangling of generic parameter lists (i.e., their archetypes) into a single place, and cope with outer parameter lists. Incrementally stepping toward IRgen support for nested generics.
[33m051a7df[m Make sure that class/struct/oneof types are canonical once they have been type-checked. The initialize constructed types are not (and cannot be) canonical because archetypes aren't assigned until the generic parameters in the current and outer contexts are type-checked.
[33m531583e[m Implement support for nested generics in the AST and type checker. There are a few related sets of changes here:
[33me4d1883[m Undo accidental change to makefile variable
[33m5b03ddf[m Fix diagnostic when we don't encounter a '(' after parsing 'constructor'.
[33m1f8c05d[m teach the destructor analysis to ignore stores to 'this' object, allowing us to delete trivial dtors like:
[33m4b05e12[m teach the destructor analysis code to ignore retains and releases of 'this'.  This allows us to zap the default class dtor when it is empty, e.g.:
[33mf603333[m split test in half.
[33m946b142[m rename DTorFn to DtorFn to be more consistent with other names. Teach the optimizer that readonly/readnone functions obviously have no side effect, so we don't even need to look at their bodies.
[33m461bf7b[m beef up the testcase  to show a trivial dtor being analyzed.  This is the dtor from maxtest in rdar://11542743 that is destroying the varargs array that is implicitly allocated.
[33m58d3ed7[m Hack around apparent CMake bug that wasn't rebuilding the swift_runtime dylib when either a Swift or assembler file changed.
[33m3139f3d[m Reenable the "store only object elimination" optimization, with a *very* simple metric to decide whether a dtor is side-effect free.  This will be improved later (to make it more aggressive), but is enough to get us to optimize away maxtest from rdar://11542743 again, thus resolving rdar://11939216
[33mb2292e4[m Add minElement and maxElement algorithms, now that they are working.
[33m1d59211[m Fix thunk emission for witnesses for protocol members returning an archetype.
[33m0ab188a[m Get generic min with the "<" operator working.
[33m996d891[m Make the mangler handle a couple of constructs which show up in slice_test.
[33m742f51f[m Some random fixes to avoid crashing on unimplemented IRGen codepaths.
[33mc9c542b[m Fix the computed type of getters/setters on generic types in IRGen.
[33m9f6d78e[m Remove unneeded 'llvm::' prefix by using 'swift/Basic/LLVM.h'
[33m5d8ae6f[m Shut-up unused variables warning on no-asserts build.
[33m219b7bd[m Move LLVM.h to libBasic.
[33m8629abb[m Make the targetBlock of UncondBranch mutable.
[33m2399036[m Devirtualize Instruction and its descendants.
[33mcd3f362[m revert r2364, which introduced the swift_allocClass entrypoint.  The optimization that it was trying to block has since been reverted, and I think there are other approachs that will work.
[33mad49ff7[m [demo] Update Obj-C version to match splitting on \n and \r.
[33m7d82cd4[m Flesh out UncondBranchInst a bit more, including arguments for target block. This is still an exploration of design.
[33mffbab56[m Add raw_ostream support for BasicBlock&.  Doesn't do much know, but gives us one place to change how we print out BasicBlocks in our pretty-printing.
[33mafde8b2[m add a sketch of some high level web page stuff with some basic sections. Nothing very serious here of course, and suggestions welcome.
[33m9ee5f90[m add a place to dump outcomes of random design discussions.
[33m6b56028[m When type inference fails to resolve all the types in a pattern for a funcexpr, resolve the pattern types to ErrorType to avoid bogus errors about ambiguous types in the body of the FuncExpr.  The types are not Unresolved if this happens, they are Erroneous.
[33m8821e6a[m Remove #include of GraphTraits.
[33ma62d468[m No need for an explicit entry block.
[33m981744c[m Remove 'CFG::deallocate()' until it is needed.
[33m8065ccf[m Remove stale undefs.
[33md3871db[m Make default construction of 'Instruction' private.
[33m748a2ee[m Make BasicBlock subclass llvm::ilist_node<BasicBlock>, and have the CFG represent the collection of BasicBlocks using an ilist.
[33m9106aa6[m Rewrite the function-call infrastructure.  This gets us a lot closer to successfully emitting the polymorphic-min-over-ranges example;  the main blocker right now seems to be that the witness for a static member function is not, in fact, a static member function at al, but a freestanding function.  That's legitimate, but it probably needs some shepherding through the witness system.
[33m0c92524[m Print the injection function of a NewArrayExpr when dumping it.
[33m7d05c03[m It in fact is okay to walk into an ImplicitClosureExpr; that just means the ImplicitClosureExpr had descendants of unresolved type.
[33m862c46d[m Make coercion correctly handle OpaqueValueExprs with a function type with a deducible argument type.  <rdar://problem/12023197>.
[33mb3f4547[m use contextual type information to infer the argument types for func exprs without fully typed patterns.  This is the first half of rdar://12017658, the second half is to infer return types.
[33md55662b[m fix a bug where FunctionType wasn't getting set as containing an Unresolved type in some cases. Fixing this causes a regression in generic argument deduction, presumably because something deep in the generics overload set pruning logic isn't handling function types with unresolved components.  For now, I'm disabling the tests that check for this, but I'd obviously appreciate it if someone could take a look.
[33m0bfcfbf[m Change the type of ConstructorDecls to be of the form metatype<T> -> () -> ().  Change a bunch of stuff to compensate.  Get rid of ConstructorRefExpr, which is no longer used.
[33mace4305[m fix an unused variable warning.
[33m1a4d38d[m fix rdar://12019415, a crash when type checking would form an implicit closure, then try to invalidly walk into it.
[33m5a0520a[m split closure tests out of expressions.swift
[33m51b4f35[m fix -parse-dump to not crash on pattern_binding_decls that don't have a type yet. This occurs in "var u8, u8_1 : StringByte"
[33m91c98c5[m comment update.
[33m40b9bb8[m Start addressing some of Chris's feedback about CFGs.
[33m3d0d23b[m Stop use OneOfElementDecls to represent constructors in structs.
[33m5327372[m Improve checking of protocol-conformance requirements for generic types in a few ways:   - Actually check the extra requirements placed on associated types,   e.g., "T.Element : Ordered"   - Actually encode/store the protocol conformance information for a   BoundGenericType in the same way that we do for SpecializeExpr,   GenericMemberRefExpr, and GenericSubscriptExpr. Yay, consistency.   - Move the storage for the protocol conformance information into a   DenseMap in the ASTContext indexed by canonical BoundGenericType, so   it doesn't require inline storage in BoundGenericType.
[33mbc9c78e[m Fix broken include
[33mce0575c[m Use OwningPtr.
[33mc0b0fb5[m doh, case insensitive filesytem.  You'd think that Clang would have a warning for this :)
[33m23c3753[m Forward declare raw_ostream instead of including it in the main header.
[33m26f0119[m Trim header includes a bit.
[33m6dbf5b9[m include the proper path to the header instead of a relative path.
[33m519a683[m Shuffle around code to avoid a crash after IRGen errors.
[33ma87d83b[m Work-in-progress towards getting generic new array expressions working.
[33m80d9613[m Fix build after r2504.
[33m3eed1fb[m Generalize the substitution of a "base type" into a reference to a member of a oneof/struct/class/extension to support types nested within generic classes, e.g., Vector<Int>.ElementRange.
[33m0e5ff44[m Add boilerplate for the *start* of Swift CFGs.  Nothing to look at yet.  Major WIP.
[33mc27229c[m [utils] Add a simple tool for running REPL demos.
[33mb6f6eec[m implement rdar://11935352 - accepting closures with no body expression (the closure just returns "()").
[33me27d65f[m Introduce a "parent' context into oneof, struct, and class types. The parent context encodes the generic arguments for outer generic types, so that X<Int>.Nested and X<Float>.Nested are distinct types.
[33mc1229e7[m Give the methods, constructors, and destructors of a nested type a polymorphic type when that type is nested within a generic type. The type-checker still isn't ready to use these declarations in a sane way.
[33m81169fc[m Reduce 'threading' of show colors logic through AST printer API, computing it in one central place.
[33mc03dce3[m Hack up some initial support for coloring -ast-dump to make this easier to read.
[33m76e6aa4[m Change the computed type for OneOfElementDecls in OneOfs: for an Optional<T>, the OneOfElementDecl for Some now has type <T>(metatype<Optional<T>>) -> (T) -> Optional<T>, and the OneOfElementDecl for None has type <T>(metatype<Optional<T>>) -> Optional<T>.
[33m758b154[m [demo] Tweak input file so output is stable, without bothering to compare lines with equivalent counts.
[33mec0a0a3[m Clean up CMake dependencies a bit.
[33m9289247[m Delay initialization of 'LastValidLineEnd', as it was unconditionally overwritten later.
[33mc836cf8[m Remove 'isInstanceFunc', as it is never read.  Not sure if this should actually do something, so it would be good for someone to review this.
[33m3618709[m Remove 'hasImplicitThis', as it is never read.  Not sure if this should actually do something, so it would be good for someone to look at this.
[33m4e12191[m Remove redundant assignment.  'Changed' is unconditional set a few lines later.
[33mbb7cdf5[m Add missing doc comment.
[33m84e858d[m Fix static member functions so a member of type T has type "metatype<T> -> () -> ()" instead of "() -> ()". This is much more convenient for IRGen, and gives us a reasonable representation for a static polymorphic function on a polymorphic type.
[33mbd6ff42[m A couple misc fixes for a testcase John and I were looking at (array new over a generic type).  Not committing the testcase because it's still broken.
[33m8e0f430[m [demo] Tweak Obj-C version of uniq.  - Use non-deprecated initWithContentsOfFile.  - Avoid initWithFormat which is more "fair" to Obj-C in that the code is    simpler (and much faster). Less fair in the sense that the Swift/Python    versions using printf are more general.  - Also, add a Python version just for comparison.
[33mf21d83a[m Fix the standard library to use uitofp instead of sitofp when turning integer constants into floating-point values. Teach IR-gen to fold stdlib convertFromIntegerLiteral and convertFromFloatLiteral calls. Update a bunch of tests.
[33m3e5666d[m Introduce a set of substitutions into generic subscript expressions. All accesses to members of generic types should now get appropriate specialization information.
[33mf66ca78[m Introduce a set of substitutions into GenericMemberRefExpr, so that we have a record of how the member is being specialized for the given context. To do this, I also had to patch up the DeclContext for template parameters.
[33m011df45[m Fix the emission of member functions on generic types.
[33m4e1b315[m Factor out the mapping of the temporary data structure for substitutions to the AST data structure for substitutions. No functionality change.
[33mf0900b8[m Make non-trivial elements of a generic one-of polymorphic functions.
[33m3173d17[m Generic class types, both bound and unbound, have reference semantics.
[33mf4f176d[m Give the static methods of a generic type polymorphic type, always. One step closer to representational sanity.
[33m40ae2b3[m Get rid of the now-unused "implicit this" coercion kind.
[33m531f855[m Re-use the new TypeChecker::substBaseForGenericTypeMember() when building a reference to an instance method of an object of bound generic type. This is cleaner and more widely applicable than the hack of coercing for the 'this' argument.
[33mea4cb39[m Destructors of generic class types have polymorphic function type. This has remarkably little effect on type checking, because the destructors themselves are never referenced by the AST after initially type-checking them.
[33mf4ced20[m Make the constructors of generic types polymorphic function types, including the weird implicit one-of element declarations that end up in struct types. Teach overload resolution and the type-checking of ConstructorRefExprs how to specialize these polymorphic function types.
[33mf5272b6[m [demo] Simplify Obj-C uniq.m using boxed numbers.
[33m9222fb3[m Fact out the little bit of code that opens up a polymorphic type. No functionality change.
[33m17422d5[m The type of an instance method in a generic class is actually a polymorphic function type. For example, given
[33md8931e9[m [demo] Add an Objective-C version of our uniq(1) for comparison purposes.
[33m03c689e[m [demo] Add a working version of uniq.
[33mcfa9f4c[m Fix thunk generation for abstract return types in witness tables.
[33m9e8633a[m Encode and pass all of the archetypes, including derived archetypes, in SpecializeExpr, so that we have complete substitution and protocol-conformance information. On the IR generation side, pass witness tables for all of the archetypes (again, including derived archetypes) into generic functions, so that we have witness tables for all of the associated types.
[33m0068d7b[m Introduce TypeChecker::buildSpecializeExpr() to eliminate a bunch of icky copy-and-paste. No functionality change.
[33m6e5cdea[m Fix a mangling ambiguity by ensuring that manglings never end in a digit.  This penalizes the manglings of things using builtin types but is kinder to the manglings of tuples.
[33m67c2354[m When building archetypes, gather all of the archetypes (both primary and derived) so they can be stored within the generic parameter list for use 'later'.
[33m5419c62[m Add missing Scope in logical &&/|| IRGen.  <rdar://problem/11959537>.
[33md076d5f[m Mangling for BoundGenericType.
[33m6881384[m Complete the implementation of a basic Vector<T>.
[33m04a10f0[m Fix the mangling of generic types, change the mangling of non-generic nominal types to encode the type kind, and add substitutions for certain very common standard types while we're at it.  Sorry, Howard.
[33mf7aca3f[m Progress towards generic types.
[33m9fa5a87[m Random fix for tuple handling in TypeCheckConversion.  <rdar://problem/11957642>.
[33me04b920[m When we find an operator in a protocol, only allow us to call that operator if the deduced 'This' type is an archetype. Unbreaks the algorithms test.
[33m83a29c9[m Fix a small FIXME related to static methods in witness tables.
[33m64130a8[m When checking protocol conformance for an operator requirement, perform global operator lookup and match those operators. We can now type-check a proper 'min' function that uses '<'.
[33m9d56f5c[m Tighten verifier restrictions on SpecializeExpr.
[33mea6348f[m Make NewReferenceExpr inherit from ApplyExpr; this lets us delete some redundant code.
[33mf6e42b3[m Get rid of a couple abuses of SpecializeExpr by using TypeOfExpr instead.
[33m511dbfe[m When applying an operator found in a protocol, compute the effetive base type (e.g., the archetype type, when we're in a generic function) used to refer to that operator as a member, e.g., given
[33m5b0b549[m Update AST dumping for recent change to FuncDecl representation.
[33m2834352[m Fix a bug emitting the definition of a generic constructor on a class.
[33m30d1f22[m Rewrite the representation of NewReferenceExpr to make it more friendly to generics. Generic constructors on classes should be working with this commit.
[33m235255c[m A couple minor tweaks to my last commit.
[33m72e69d5[m Teach each archetype type to keep track of its nested types, so that type substitution for a nested type reference (Foo.Bar.Wibble) whose substituted parent reference (Foo.Bar) yields an archetype can simply look for the appropriate nested type in the archetype.
[33m751c463[m Rewrite the way we represent construction of value types so that it looks more like a call.  This should be enough to get generic constructors working.
[33maef8110[m Switch archetype assignment for protocols over to the archetype builder. For this to work, the 'parameter' used to seed the archetype builder is the 'This' associated type, which implicitly conforms to the protocol. All other archetype assignments flow from that archetype.
[33m28d9744[m Fix mangling for local functions in a getter/setter.
[33m58247ec[m Fix IRGen bug with local functions.  <rdar://problem/11935459>.
[33m909f8b0[m Tighten up error checking slightly for SubscriptDecl.  <rdar://problem/11942571>.
[33mb822876[m Push TypeLocs through requires clauses.
[33m800c0f6[m Make sure we build the right AST for a member of a module.  <rdar://problem/11945253>.
[33m61f4b63[m Make sure we resolve unresolved literals in an assignment statement.  <rdar://problem/11942665>.
[33m57dcb9d[m Add a verifier for TupleShuffleExpr.  Fix expression type-checking so we perform the necessary conversions in the given testcase. <rdar://problem/11935346>.
[33m98f44f8[m Add minElement/maxElement/minMaxElement/lowerBound/upperBound algorithms, and fix a bug with name lookup finding multiple associated types of the same name (for which we implicitly require that those types be the same).
[33mb3eaae6[m Add some simply generic algorithm implementations.
[33m2d0e61e[m When substituting into a nested type reference, build an appropriate representation for the nested type:   - If the type is nested within a deducible generic parameter type,   build it as a nested type of that generic parameter type. (The   terminology is bogus)   - Otherwise, look for the member type of the given name and build a   reference to it.
[33m0f4d493[m Remove SourceLoc from ArraySliceType.
[33m4fa5e84[m Shuffle around the AssociatedTypeMap bits in ArchetypeBuilder so it doesn't cause random test failures.
[33m1db07ba[m More unbreaking of CMake build
[33md0d1cdd[m Fix CMake build
[33m1be602a[m The return type passed to the call emitter needs to be the substituted return type, not the original.  We were getting away with it as long as we had a final address, but we won't always have a final address, as in this test case, where we're ignoring the result.
[33m36b00fb[m Fix parsing for requires clauses on generic types.  <rdar://problem/11932940>.
[33mc07758e[m File input operational
[33mce1c30f[m Switch the representation of archetype types so that it encodes when an archetype is a nested type of another archetype. No functionality change (yet).
[33m577347d[m Fix test I forgot to change along with r2410.
[33m7073e08[m Fix a silly crash-on-invalid; <rdar://problem/11926406>.
[33ma70818d[m Clamp down on same-type requirements that end up equating two generic parameters together, e.g.,
[33mfec6ff2[m Disable performStoreOnlyObjectElimination because it's causing leaks (and the leaks are blocking Howard's work).
[33m7777cb2[m Clamp down on the types specified in requirements clauses a bit. The subject of a conformance constraint (e.g., T : Foo) and both types of a same-type constraint need to be generic parameters of nested types thereof. The latter actually prohibits code like, e.g.,
[33m1eeecdd[m Change Swift docs to use Sphinx.  - I've converted every document except the LangRef, which is more trouble to    convert because of the use of styling to embed notes.  - 'make html' with sphinx-build in your path to build the docs.
[33mb6b0943[m Eliminate the ridiculous string manipulation in the handling of potential archetypes, replacing it with a 'parent' pointer that allows a potential archetype to figure out its full name and its depth by walking the parent chain. No actual functionality change.
[33m4a42af1[m Teach the archetype builder about same-type constraints, using a simple set-union algorithm to merge sets of potential archetypes and produce a single archetype from the result.
[33mb405157[m Fix comment
[33mfe4b55a[m It is considered poor form to 'new' memory without 'delete'ing it.
[33m7426712[m Split out the cases for BoundGenericType, but keep punting for now.
[33m0eb93ab[m Add the ability to metaprogram nominal type declarations.
[33med38caa[m Support generic return types, as long as they don't differ by abstraction from the concrete return type.
[33m555aa80[m Dig into the formal type of a generic callee for the call sites, since that's what we want to target for substitution and witness-argument emission.
[33ma9b9c9c[m Collect CallSites in the CalleeSource.  Closing in actually getting a generic call to work.
[33mf16898b[m Extract the rvalue-under-substitutions code out into its own file.
[33m536ac7b[m Restructure differsByAbstraction to use SubstTypeVisitor.
[33m8350593[m Basic argument passing as long as re-mapping isn't required.
[33mbaae407[m New kind of visitor for visiting substituted types.
[33mf254c4a[m Add a little checker for whether something is a dependent type.
[33m39479b2[m Group all the builtin types together to allow some amount of re-use.
[33mb2b4a2a[m Add IRGen's inevitable specialization of the TypeVisitor class.
[33m88679db[m Add a TypeVisitor class.
[33mda8c019[m Reorg, monster comment.
[33m4d4ab92[m When unqualified name lookup from an instance method, constructor, or destructor finds a metatype member (e.g., a typealias), the resulting access expression should be based on the metatype (possibly specialized) rather than based on 'this'. Fixes <rdar://problem/11926972>.
[33m03d9327[m When determining whether a variadic tuple can be initialized with a scalar, only count the variadic argument as being initializable if it is the only one. Fixes <rdar://problem/11924397>.
[33mc6901f6[m Initial parsing/AST for generic constructors.
[33m3950a6a[m Generic calls status code dump activate!
[33me67466d[m Reorganize how we collect substitutions for callees, and convert the code that was drilling into function expressions into an ASTVisitor.
[33me6917fb[m Add support for "new" with classes with non-default constructors.  <rdar://problem/11917082>.
[33md6a4ba9[m Move TypeLocs to a design where a TypeLoc is a struct containing a type plus location info for that type.  Propagate TypeLocs a bit more through the AST.
[33m2cf4a53[m Add a primitive swift emacs mode.  - Not very complete, and has some problems with ambiguities between variables    and types, among countless other things no doubt.
[33m3c2c6d3[m This is a preliminary File class.  It is missing constructor / destructor support, blocked on rdar://problem/11917082.
[33m222033d[m Some file basic infrastructure.
[33m5e13507[m Introduce the archetype builder, which collects the requirements placed on generic parameters and associated types within the generic parameter clause, expands those requirements out to form the complete set of requirements, then assigns archetypes for each of the generic parameters and their nested types (recursively).
[33m6715220[m Change diagnostic text to be a bit less confusing.
[33m5d1d832[m Remove unused method.
[33me592e07[m Compute full SourceRanges for Decls.
[33mc5a1edd[m Revert r2372, which is breaking some tests.
[33mfca009f[m TypeLoc-related cleanup: add FIXMEs to the places in validateType that need to compute sub-TypeLocs, and fix the places that don't need them not to reuse the parent TypeLoc.
[33m7330aca[m Start propagating TypeLocs into TypeChecker::validateType.
[33m361f931[m Start propgating TypeLocs from the parser into the AST.
[33m3b16fe7[m Fix typo.
[33mf1f67db[m Big cleanup for how we handle computing types for functions and semantic analysis for patterns.
[33m27e3a03[m Implement parsing, AST, and basic validation of requires clauses within generic parameter clauses, e.g.,
[33m6a4098b[m Mess with the way we do canonicalization for ProtocolCompositionTypes in a way that doesn't violate canonical type invariants.  It's still a little messy, but it's consistent.  Fixes <rdar://problem/11886926>.
[33m29b3994[m Add a new entry point for allocating classes.  This API probably isn't really right, but we need something in the meantime to make the optimizer understand that there could be non-trivial destructors involved.
[33mc9cb594[m IRGen for destructors.  (This code is likely to change a lot once we design classes properly, but it should be a decent start.)
[33m3b30fbf[m Support multiple protocols on a generic parameter.
[33mb1d5c33[m Support for trivial protocol compositon types.
[33m7775101[m Switch over constructors so that they return a value instead of being a method to initialize the members.  This doesn't matter so much for structs (the generated IR is essentially equivalent except for small structs), but on classes, we don't want to make "new X" generate code that knows about metadata/destructors/etc for the class X.
[33m7d8231e[m Test basic functionality for protocol composition types.
[33m7a9a8e9[m Another big drop of code to support protocol composition types.  Mostly untested.  As part of this, I changed the order in which we emit erasures:  now we evaluate the operand in-place and only then write the protocols in. This makes it slightly more likely that a generic optimization will be able to devirtualize.
[33mb86d764[m Add some basic structures for protocol composition types.
[33m7990683[m fix the build with whatever version of Xc4.4  I'm using.
[33m5ff5b40[m Misc pieces of Sema for destructors.
[33m4b34dc5[m Add a quick description of constructors and destructors to LangRef.
[33m6b4a248[m Parsing and AST support for destructors on classes.
[33m3d85d78[m Add a missing call to Initialization::markInitialized in GenInit.  <rdar://problem/11851415>.
[33m308c50f[m Fix a verifier crash with generic types.
[33m7f3ca93[m Make foreach loops over generic types work correctly.
[33m70412ba[m Use Slice<T> as the slice type, where available.
[33m43e7559[m Add GenericSubscriptExpr to represent subscripting into a generic type.
[33m908cf45[m A couple minor tweaks to get extensions for generic types working.
[33m0aee5f3[m A few misc fixes for constructing generic types.  Add a WIP implementation of Slice<T>.
[33mfc2ad96[m Add missing check for ErrorType.
[33ma87ae6f[m The number of arguments of a BoundGenericType is fixed by the declaration. Assert sanity rather than testing for insanity.
[33m2da3c6c[m Virtualize TypeInfo::getSizeAndAlignment() and teach it to query the value witness for archetypes. Builtin alignof/sizeof now work properly for archetypes.
[33md684a74[m Implement builtin 'sizeof' and 'alignof' for everthing except archetypes.
[33mcf7f9a0[m Clean up our checking for an explicit '&' when coercing to a reference. The previous checks where based on the subtyping relationship of the reference type, which was a holdover from when implicit vs. explicit references were part of the type system. Now, we just do structural checks.
[33m18c8407[m When matching types, decompose bound generic types so that we can deduce their generic arguments.
[33mbc5bb8e[m Fix the computation of the type of the elements of a generic oneof.
[33m3eae6d2[m Explicitly deal with ignoring labels in type-matching, which forces us to make our equality testing more correct.
[33m728f948[m Make Builtin.load, Builtin.init, and Builtin.assign generic functions.
[33md8e489d[m Generalize the subtype matcher to allow strict type matching in addition to subtype matching, so we centralize the "compare two types structurally" code in one place. Use this matching via TypeChecker::isSameType() to allow deduction when type equality is required.
[33m6e73868[m Allow one to call expressions of polymorphic type within the top-down type checker, when those expressions aren't references to overloaded functions. Eli is running into this with generated ASTs, although I'm unable to reproduce the issue now with simply Swift code.
[33mbe55c18[m Check that the arguments in a bound generic type conform to the protocol requirements of that type, and capture that protocol-conformance information in the canonical bound generic type.
[33mfe2059d[m Add a verifier to check that the protocol conformances provided by SpecializeExpr match up with the protocol requirements as stated on the archetypes.
[33m955ab7b[m Factor out the checking for uses of an expression of polymorphic type as a value, and use it to handle the non-overloaded cases.
[33m99784eb[m Build ASTs correctly for unqualified references to metatype members of a generic type.
[33mbb363fc[m Basic, woefully incomplete support for applying an expression of polymorphic function type.
[33m3820a20[m During coercion, treat expression of generic function type as being overloaded, which forces them through overload resolution where we open up the types.
[33m3fb614e[m Support coercion from overload sets containing generic functions.
[33m693ea40[m Tighten up the checking for the use of '&' when passing an argument to a [byref] parameter. We were far too lax in checking this before.
[33m960b0bf[m Move most type lookup from name-binding into TypeChecker::validateType.  Use this to make type resolution more powerful, so we can resolve members of types like S<Int> and Int[].
[33m6258942[m Explicitly specify whether we're performing type lookup to the name lookup code, rather than deducing it from the translation phase.
[33mab7d855[m Fix a couple places where we weren't calling validateType early enough.
[33mb1a7d8b[m Make sure we call validateType on the list of protocols implemented by a typealias in a protocol before we try to use those types.  Also, a bit of cleanup related to DeclChecker::checkInherited.
[33mf7fda27[m Get rid of a FIXME Doug says is wrong.
[33mb067da1[m Add GenericMemberRefExpr to represent a reference to a member of a generic type. Add a couple other misc pieces necessary for semantic analysis of members of generic types.  We're now up to the point where we can actually construct a useful AST for small testcases.
[33m5af3a5c[m Factor overload resolution for values into its own routine within the overload-resolution code. Expand this overload resolution to also perform deduction of generic arguments for each candidate, independently.
[33ma65b737[m Allow name lookup into generic types.
[33ma54c549[m Per discussion with Doug, add UnboundGenericType and BoundGenericType to represent generic types.
[33mad2fa39[m Treat deducible generic parameter types as unresolved types, because they need to be substituted away for any type containing them to be useful. A nice side-effect of this is that we'll actually properly walk into the source type when a generic function returns, e.g., a tuple type that involves type parameters not resolved by the input arguments.
[33m99fac3a[m Change MetaTypeType so that the instance type is actually a Type, not a TypeDecl*.
[33m4db02e4[m Extend deduction to the source expression of a coercion, so that we can perform deduction based on the context of a call to a generic function, e.g.,
[33m2268f71[m Introduce UnresolvedNominalType to represent a generic type without an argument list, and add an argument list to NominalType to represent a generic type including an argument list.
[33mbac5470[m Collate the OneOfType*/ClassType*/StructType*/ProtocolType* members of the various NominalDecl subclasses into a single NominalType* member in NominalDecl. Use it to make TypeDecl::getDeclaredType() more efficient/simpler, and simplify the ProtocolDecl/ProtocolType interaction along the way.
[33mb07b059[m Rework our approach to deduction of generic parameters during overload resolution. When we see a polymorphic function type, we substitute "deducible generic parameter" types for each of the generic parameters. Coercion then deduces those deducible generic parameter types. This approach eliminates the confusion between the types used in the definition (which must not be coerced) and the types used when the generic function is referenced (which need to be coerced).
[33m04ffc8c[m Introduce a new abstract type, SubstitutableType, to cover types that can be substituted, and do some simply renaming to distance ourselves from archetypes in these code paths.
[33m2774d7c[m Parsing for generic types in a type context.
[33m4555345[m Add basic parser/AST support for defining generic types.
[33mb459cfc[m Introduce OverloadedExpr, a wrapper around an expression that provides the semantics of an overloaded declaration, either because it is a reference to a set of overloaded declarations or because it is a reference to a generic function, either of which can be optionally parenthesized. The basic intent is to avoid the dual DeclRefExpr/OverloadSetRefExpr paths that trigger overload resolution for a call, but as a side effect this allows overload resolution to work when the function itself is parenthesized. Fixes <rdar://problem/10616741>.
[33mff6f882[m Change the convertFromStringLiteral convention to be a bit more efficient: add an alternate entry-point called convertFromASCIIStringLiteral which is called for string literals which contain only ASCII codepoints, and add an optional byteLength argument for the conversion.  <rdar://problem/11764780>.
[33m160ebe5[m Teach the subtype-checking routine to perform generic argument deduction when supplied with a coercion context.
[33mafefdef[m Move the implementation of TypeChecker::isSubtypeOf() over to TypeCheckCoercion; it's going to need to learn about deduction soon
[33m7870209[m Enable deduction of generic arguments for lvalues.
[33m6690789[m Allow destructuring assignments (assignment to a tuple expression).  <rdar://problem/11719247>.
[33m846c526[m Add demangle.swift to CMake build of the runtime
[33m6083420[m IRBuilder.h has moved in top-of-tree LLVM. Update our includes appropriately.
[33m195453c[m More silliness from r2277; sorry about the noise!
[33m5bb6c36[m Support for calling member operators with operands of generic type.
[33m140e3b8[m Fix a silly mistake in the REPL code.
[33ma1a182e[m Initial implementation of member operators.  Known limitations: currently only works for operators on structs/classes, the lookup rules aren't completely settled, and we don't actually check whether it's reasonable to declare a given operator as a member.
[33mce77e79[m Change the library feature list table from html to Numbers format.
[33m2d998f3[m Implement method calls on archetype values.
[33me53aed6[m Initial support for IR-genning generic function bodies. Mangling is still a hack, pending a better type AST.  Fixed a bug where arguments passed indirectly were not being destroyed by the callee (when passed by value).  Changed some of the protocol signatures to use the generic opaque pointer type, making the types a bit more self-documenting in the IR.
[33m54c8160[m First cut at a library feature vs language table.  Most of the entries are marked unknown.  Please feel free to fill in any unknowns you know about.  Also please feel free to add rows or columns.
[33m296ba19[m Very primative demangler.  It is known to correctly demangle at least one function signature.
[33m5776283[m Cleanup: inherit the build system and produce a single tool
[33m01e7041[m Misc fixes on top of John's PolymorphicFunctionType patch.
[33m668f674[m Split off a PolymorphicFunctionType from FunctionType.  I am *positive* that the behavior here is blatantly wrong in a lot of places, but I'm going to leave it to Doug to clean up after me. :)
[33mf44ed31[m Fix a case where type coercion failed when it should have returned unknowable.
[33me390c24[m Allow DeclRefExprs to refer to generic functions.  Teach semaApplyExpr to handle DeclRefExprs referring to generic functions.
[33mcf5eb59[m Extend SpecializeExpr with information about the types used to replace each primary archetype along with the protocol conformance records for each of the requirements placed on that archetype.
[33mdb3aa6a[m When we deduce a generic argument for a generic parameter, verify that the deduced argument conforms to the protocols specified in the archetype. Collect the set of protocol-conformance records for later use.
[33mb35ab5e[m Make the opaque type be a named IR type.
[33m4d4073c[m Provide a dinky little interface for associating a wtable with an archetype within a context.
[33mde61d27[m Switch the translation of an archetype type to be the opaque struct type, not the fixed-buffer type.
[33m6c821dd[m Support allocating local objects of archetype type, at least in theory.
[33m8203b79[m Trivial refactor in preparation for making Initialization part of the TypeInfo API.
[33me3ea138[m Pack of changes leading towards a more-correct implementation of archetypes.
[33m85bdae4[m Restructure code to permit protocols to be converted independently of a ProtocolType.
[33m770ce0f[m Refactor to make it easier to keep common information in the type converter.
[33me2440ff[m Split TypeInfo into its own header.
[33ma13c05f[m Distinguish between 'primary' archetypes, which are type parameters on which other archetypes (such as associated types) are based. Give primary archetypes an index, to help with recording substitutions in the near future.
[33m827e87c[m Switch the representation of the list of protocols to which an archetype conforms from a list of Types (each of which is existential) to the minimized, sorted list of protocol declarations as used by canonical protocol composition types. This stable list is more suitable for IR generation.
[33mf4283ea[m Accommodate style guideline when possible
[33ma570a49[m Elevate priority automatically during benchmarking
[33m8089b38[m Delay I/O to avoid OS-vs-benchmark CPU contention
[33m5b7d3c4[m Subtract out loop and interrupt overhead from benchmark results
[33m68e58b3[m Switch benchmarking to dyld symbol resolver fun
[33m97f9d91[m Initial benchmarking in Swift support
[33me50e5ed[m Allow substitutions of incomplete type bindings. We can't meaningfully test this right now.
[33m34f3e7c[m Introduce rudimentary generic argument deduction as part of expression coercion. Overload resolution uses this argument deduction when dealing with generic functions, to determine when we can invoke a generic function. When a generic function is selected, we create a SpecializeExpr wrapping the DeclRefExpr to the generic function.
[33m1669608[m Give TypeChecker::filterOverloadSet() a new return type, OverloadCandidate, which captures both the declaration we selected and the type is has when used. This will eventually capture the introduction of specialization expressions.
[33m8b36339[m Eliminate an unused, premature optimization parameter
[33mcd13192[m Always put a DeclRefExpr for a generic function into an OverloadedDeclRefExpr, so that it goes through overload resolution, which will (eventually) be responsible for deducing generic arguments.
[33mbcbbe7e[m Introduce SpecializeExpr, an implicit conversion that will be used to specialize a generic function with a given set of substitutions to produce a new, concrete type. This node is not yet used.
[33m2b163c2[m Get rid of a broken optimization in the cleanup generation code.  Fixes <rdar://problem/11720621>.
[33mab29984[m Simplify our handling of tuple elements in the AST and Sema.
[33m7e18b7e[m Zap the unused *Expr::createWithCopy() functions, which baked semantics into the AST library where they don't belong. These were made obsolete by the recent TypeCheckExpr::build(Member)?RefExpr() refactoring.
[33mefd92be[m Introduce a form of TypeChecker::buildMemberRefExpr() that accepts the results of member lookup, and eliminate all uses of MemberLookup::createResultAST(). The AST library should not be performing this semantic analysis.
[33mb34ec23[m Update the FormattedPrintable slice hacks.
[33m7e61089[m Refactor the code that builds declaration reference and member reference expressions, introducing two routines on TypeChecker (buildRefExpr and buildMemberRefExpr) that are intended to be the sole generators of ASTs.
[33m3820561[m Teach the overloaded declaration reference expression to track whether the base of the expression is ignored, as it will be for references to static member functions or when the base is actually of metatype type. Then, always also one to access the type of the base, even if it's a metatype type.
[33m31d1f40[m The type of the 'this' parameter for a protocol method is [byref] This, not [byref] ProtocolType. Fix this in semantic analysis, and update IR generation accordingly.
[33mf4bdd9d[m Introduce support for using static protocol functions within generics.
[33mcf4a05f[m Eliminate SuperConversionExpr. This expression node was only really used in the very narrow case where we were converting from one protocol type to another (super) protocol type. However, ErasureExpr now handles this case via its null conformance entries (for the "trivial" cases), and can cope with general existential types where some conversions are trivial and others are not.
[33mdd2589c[m Teach TypeChecker::conformsToProtocol() to identify protocol conformance when it is trivial, e.g., when the source type is an archetype or existential type that conforms to the candidate protocol or a protocol that implies it. In this case, we don't build a ProtocolConformance structure (which would be uninteresting anyway).
[33md85f426[m Initial implementation of static functions on protocols.  <rdar://problem/11448251>.
[33m1cd0a47[m Allow referring to member types using dotted syntax, at least in most contexts.  This should cover the cases we care about for generics, although I'm not really satisfied with the restrictions on extensions.
[33m0741dce[m Introduce ArchetypeSubscriptExpr to model subscripting of a value of archetype type.
[33mdfc2319[m Make liberal use of the new TypeBase::getRValueType().
[33mc1292fc[m Use TypeChecker::substMemberTypeWithBase() uniformly to isolate the damage from my horrible AssociatedTypeMap hack.
[33m428aa60[m Handle references to archetype members in overload resolution for a value (that is not being called).
[33m433de7c[m Fix a crash-on-invalid in name lookup.
[33m3737d73[m Introduce support for overloading call to members of archetypes.
[33mc88f5b7[m When checking protocol conformance for a given archetype, be sure to substitute that archetype (and all of the associated types it determines) into the type of the candidate. Among other things, this allows us to assign archetype T that conforms to a protocol P into an existential type that conforms to P.
[33mf847fe4[m Introduce basic support for type-checking the definitions of generic functions. This involves a few steps:
[33mdb418bd[m Check the type constraints on a type parameter before building the archetype.
[33m991907c[m Assign archetypes to each of the generic parameters in a generic function declaration.
[33mbf71eeb[m Include the generic parameter list of a function declaration in the FuncDecl AST, and use it for local name lookup.
[33mec31aaf[m Parse a generic parameter list within a function declaration, and introduce the generic type parameters (which are simply type aliases for a to-be-determined archetype type) into scope for name lookup. We can now parse something like
[33m62a3139[m Fix a silly copy-paste mistake.
[33m2feaf74[m Factor the generation of the archetype -> existential type substitutions out into its own static function. No functionality change.
[33m2652928[m Introduce ExistentialSubscriptExpr, which describes subscript operations into an existential type.
[33m10e3a5b[m Don't permit access to members of an existential type if the type of the member (after reifying the 'this' argument) still refers to any associated types. We may want to introduce this feature in some limited capacity later, but it's not important now. The feature is tracked by <rdar://problem/11689181>.
[33m35e6e56[m When we split a token starting with '<' or '>', make sure that the resulting token goes back through the lexer to get the appropriate token kind. Thanks to Chris for spotting this.
[33m1aea990[m Add protocol composition types to LangRef.
[33mafec173[m Fix typo
[33mb23f4eb[m switch from SmallMap to SmallDenseMap.
[33m5688626[m implement irgen support for do/while statements, wrapping up rdar://11576294
[33mc7a9ab2[m rename test.
[33mdb0cd64[m lexer/parser/ast/sema support for do/while statements.  irgen next.
[33mf50bd81[m Fast entry point bug fixes
[33m2db5fa5[m remove an obsolete doc.
[33m916bd0f[m Remove FIXME: "coerceToType" on a pattern is never "unknowable", at least not with our current model for type-checking patterns.
[33md8f77e8[m Add tests for unknowable coercions
[33m4b9efc5[m Introduce the notion of an 'unknowable' coercion result, for cases where it is possible that the coercion will be well-formed, but we don't know because there are subexpressions that don't have types, e.g., a literal. When we come by later and resolve literals, the unknowable may become knowable.
[33m2eb6261[m Don't try to capture TypeDecls in local functions.
[33m8a12c79[m Fix a silly assertion failure with a file with no valid decls.  <rdar://problem/11600182>.
[33maedcded[m Fix a couple missing newlines, one leads to printing weirdness
[33m338aada[m IRGen for logical lvalues with a base of class type.  <rdar://problem/11466574>
[33m2880b0a[m Address Doug's review comments on constructors.
[33mdd55aed[m Fix comment in new file
[33m032d9d3[m Default construction for classes.  <rdar://problem/11619111>.
[33m18dfa5c[m More refactoring; allow ConstructorLookup to find constructors in classes.
[33m72e1bed[m Refactoring for constructor lookup.
[33m45f1fa1[m Fix some comments; remove unused ErrorStmt.
[33md969aee[m Switch everything over to new-style constructors.  Change name lookup so it doesn't use old-style constructors for construction anymore.
[33m9d21e36[m Switch strings over to new constructor syntax.  Fix a few constructor bugs I found along the way.
[33m64d6710[m One more small fix for constructor name lookup.  Make the auto-generated element-wise constructor use the name "constructor".
[33m7965dff[m A few more misc fixes for constructors.  Add a testcase.
[33me5b4b92[m More work on constructors.  Basic testcases with "constructor" declarations appear to be working, although there's probably more work to be done.  (Both old-style and new-style constructors work for the moment.)
[33m30f5e36[m Semantic analysis and AST support for postfix operators. Also prevent us from including unary operators in the lookup results for operators written binary-style and vice-versa.
[33m8c46c69[m Lexically distinguish prefix, postfix, and binary operators and use this information as cues in the language.  Right now, we do not accept things like "-- *i" because the prefix operator is not correctly right-bound;  instead you have to write "--(*i)".  I'm okay with that;  I did add a specialized diagnostic recognizing operator-binary in a place where we're expecting a potential operator-prefix.
[33mf1ffa87[m A few adjustments to AST/Sema for ConstructorDecls, and starting IRGen.
[33m7590702[m Add parsing and semantic analysis for a basic ConstructorDecl.  Still missing: no IRGen, and semantic analysis to actually call them.
[33mf4c1884[m Make misc error handling a bit more robust.
[33m5996df1[m When substituting into the type of a protocol requirement to compare it against potential witnesses, make sure to use the unlabeled form of the substituted type. Otherwise, tuples with element names in the return type will break us. Fixes <rdar://problem/11598297>.
[33mcd8632c[m Compute heap layout for classes lazily, so we don't get infinite recursion. <rdar://problem/11588882>.
[33m987e3e9[m Experimental DictionaryStringInt.  Test included to show basic usage.  I'm having a bit of trouble making it Enumerable.  radar to follow on that.
[33m53646cc[m Better support for mangling, emitting, and using local functions.
[33mb5381ed[m Some overlooked uses of std::vector that are unnecessary now that SmallVector is move-only-compatible.
[33m24a8413[m More CC-related changes.
[33m5064f39[m Refactor towards the goal of using different CCs when passing this pointers or data arguments.
[33m6758b45[m Kill FixedPadding::Realign;  it is not address-invariant, which is a property that we'd prefer to maintain.
[33m3dd7794[m Change the size of a prototype type to 3 pointers rather than a fixed size of 16 bytes.  3 pointers is the magic value in swift:  many, many things are better if we can handle three pointers efficiently.
[33mecc5653[m Add a basic TypeLoc; start threading it through the parser.
[33m0ca4d69[m When coercing an expression of tuple type that is *not* a TupleExpr to another tuple type, we don't have a 'null' tuple shuffle because the type changes. Fixes <rdar://problem/11591629>.
[33mde06e10[m Update generics documentation with our plan of record for dealing with the generic-specialization-or-less-than parsing ambiguity.
[33m6d2eecf[m When substituting a set of protocols for an archetype, if there is only one protocol, just use that as the existential type rather than unnecessarily wrapping it in protocol<>. This is just for simplicity.
[33m81b4501[m When building an archetype within a protocol, capture the list of protocols it conforms to. Use this list when substituting into a protocol's signature, so that we get an existential type back. For example:
[33m27f8a5a[m Teach the parser's handling of scopes to handle local types correctly.
[33m3e55c1a[m Switch the type-checking of the foreach loop over to the Enumerable protocol, eliminating the last bits of the informal for-each protocol. <rdar://problem/11475213>
[33m552e5a1[m Introduce the Enumerable protocol, and make each type with a getElements() method conform to Enumerable specifically.
[33m4ed242a[m Synchronize protocol grammar in parser with the protocol grammar in LangRef.
[33m1bf18a2[m Implement requirements on associated types (<rdar://problem/11548273>).
[33m9abd234[m Allow an 'inheritance' clause on typealiases, specifying what protocols the underlying type of the type alias shall conform to. This isn't super-motivating by itself (one could extend the underying type instead), but serves as documentation, makes typealiases provide the same syntax as other nominal types in this regard, and will also be used to specify requirements on associated types.
[33md41e39a[m Sink the 'inherited' members for the various nominal types down into TypeDecl; TypeAliasDecl will get this ability soon.
[33mb099a17[m Remove protocol-body production from the grammer. It isn't needed
[33mfc9862d[m Unbreak CMake build again, this time to deal with the swift.swift split.
[33m2c28542[m Make sure that we turn off RTTI and exceptions in the CMake build. Oops
[33mb054b07[m Update generics manifesto based on some feedback from Chris.
[33mfe24ea3[m delete some pointless objc_retain/objc_release pairs, which show up in String -> NSString conversions. Finishes off rdar://11583269
[33m5074859[m teach the optimizer about objc_retain and objc_release, allowing us to zap a objc_release(null) from the String->NSString conversion routine (rdar://11583269)
[33m83cee74[m sinking retains pushed them after insertelement instructions in a return sequence, which defeated the optimization which formed "retainThree" tail calls.  Restructure and generalize this optimization to handle the new and old forms.  Through the combination of the two, we now form 19 of them on the stdlib.  Before I broke things, we only formed 14 of them.
[33m540b7b9[m implement trivial retain motion, pushing retains past operations that obviously cannot release an object (unless we get to a matching retain of course).
[33mdab5eb1[m Move fixed point logic out of Misc.swift
[33mdd76b37[m Move floating point structs out of Misc.swift
[33m249d66f[m Move Bool out of Misc.swift
[33m31670eb[m Move struct String out of Misc.swift
[33mefac033[m Step one of breaking swift.swift into logical units
[33m0412f9e[m split expand and optimize tests into their own files.
[33m32f529f[m Split arc-optimizer into two passes: arc-optimize and arc-expand. This makes the two phases independently testable, but is also the right thing to do: previously we'd form swift_retain early enough that inlining would inline them from previously optimized callees into callers, and this would block some mid-level optimizations from doing nice things (because swift_retain isn't no-escape).
[33mfac11ff[m Introduce a swift-specific alias analysis pass that knows that retain/release/alloc don't mod/ref any state to swift code.  This allows the general LLVM optimizer to be *much* more aggressive.  For example, on swift.swift, GVN deletes 15% more instructions, jump threading folds 2.4X more terminators, SCCP removes 3.3X more instructions, and 2 more retain/release pairs are removed by the ARC optimizer.
[33m26159b59e[m First draft of some code to make the general unqualified lookup able to perform lookup into local scopes.  Normally, name-binding doesn't need this because the parser can resolve references to locals, but we need this sort of lookup to handle cases involving local types.  It's also likely this will be generally useful for tools consuming the AST, typo-correction, etc.
[33m89e8b73[m A couple minor tweaks to UnqualifiedLookup.
[33m82755cb[m Add a few comments.
[33md829b3c[m Unify the complete unqualified lookup logic in the UnqualifiedLookup class.
[33m0e7ef8c[m Start refactoring code towards a single complete implementation of unqualified lookup.
[33m05ac354[m Capitalize type names in Generics manifesto
[33m731f8f1[m Update Generics manifesto with:   - Up-to-date syntax   - Discussion of operator/property/subscripting requirements   - Associated type requirements   - Isolating implicit conformance from the rest of the model (with   revised definition of 'Any')   - A few more words on the implementation model   - A discussion of some thorny parsing issues
[33mae86d64[m Rename Decl::getLocStart() to Decl::getStartLoc().  Add Decl::getLoc(), which is essentially the location which should be used for diagnostics.
[33m1dc9b15[m Unbreak CMake build
[33ma7f2593[m make sure to set the tail marker on the generated calls.
[33m91a8067[m Enhance the swift_retainAndReturnThree optimizer to be able to handle the case when swift_retainAndReturnThree is inlined from a previously optimized function.
[33m29a13e9[m Move the NameLookup class into the AST library.
[33m40156c1[m Update CMake.
[33md61b7bf[m Move the REPL-specific type-checking code into its own file.
[33mba4a760[m Make oneofs never implicitly generate an ExtensionDecl.  This matters for local oneofs.
[33meef9e91[m tidy up.
[33m44e1131[m form calls to swift_retainAndReturnThree to improve epilog code when returning string/array slices.  There is more to be done here, but this is enough to get the basic example in rdar://11563395.
[33m1c598be[m Do not abusing the linker for now
[33mb1f08e8[m Do not prevent dead code stripping
[33m41d02db[m teach the canonicalize pass to decompose swift_retainAndReturnThree into is relevant pieces (a swift_retain_noreturn + some copies).  This pessimizes test2 in rdar://11563395 to generate the same code as test1 in that radar.
[33m26bebcf[m IRGen for break/continue.
[33mc404598[m Parsing and semantic analysis for 'break' and 'continue'.
[33m3c2fb97[m Introduce TypeBase::isExistentialType(), to determine whether a given type is either a protocol type or a protocol composition type. The long form of this query returns the minimal set of protocol declarations required by that existential type.
[33m8eeeb36[m IRGen support for member functions on local types.
[33m6abcbcd[m Allow using LinkEntity for members of/witnesses for local types.  As a simple test to start using them, get rid of getAddrOfLocalInjectionFunction.
[33mb6dd26e[m Add swift_retainAndReturnThree performance hack
[33m953b644[m CFI metadata is only needed when frames are needed
[33m64ff644[m add some check lines I forgot.
[33m6291e4c[m zap an include
[33m712c8c6[m fix rdar://11558546 - Don't push a release past the instruction that defines the pointer being released.
[33m9d7eac2[m a testcase from 11542743
[33mc4acd34[m Add a basic arc-optimize testcase.
[33mbb92b74[m make "swift -arc-optimize" actually run the arc optimizer.
[33m6249cdf[m add a way for the driver to run IR passes.  Right now, we run the verifier.
[33me2bfb30[m Add a verifier pass at the end of the optimization pipeline, to catch bugs in the ARC optimizer etc.
[33m0c24d52[m Add rules to verifier for CoerceExpr.
[33m6232341[m Revert r2068.  The AST is still wrong with that fix; it only suppresses the crash.
[33m151e020[m fix the sema crash in rdar://11546285, which happens when CoerceExpr had an unresolvable subexpression on the first pass.  There is still a irgen crash on the same testcase.
[33ma711e43[m Fix bug with currently unused atomic retain/release logic
[33m10f94ca[m Fix missing "continue" in StructDecl IRGen.
[33mc079874[m Implement parsing, AST, type canonicalization, and type validation for protocol conformance types, e.g., 'protocol<P, Q>'. A few things people *might* want to scream about, or at least scrutinize:
[33me63eb30[m Some minor cleanups to decl IRGen.
[33m53b09c6[m Switch type alias to use = for assignment instead of :, which indicates conformance. This resolves rdar://11547856
[33m9895a11[m Get rid of some unnecessary handling for ExtensionDecls.
[33m85ed3e1[m Only allow extensions and protocols at module scope.
[33ma454d62[m Implement some reasonable shadowing rules for declarations.
[33m189b38c[m Fix typo in comment
[33md836150[m Switch script mode over to a two-phase type-checking model, similar to what we use for libraries.  I'm not entirely sure it's the right model, but it's close enough for the moment.
[33m139b979[m Teach CMake how to build assembler files.
[33m60cf194[m Prep for an eventual Size type
[33m13b89db[m implement a new optimization to completely eliminate objects when they don't escape and are only stored to.  This is common because other general LLVM optimizations often forward propagate all the loads out of an object, making it pointless.  This implements rdar://11542745, compiling that example to:
[33md961d05[m hackaround for a really terrible runtime problem, see rdar://11546243.
[33mf781969[m Create FastEntryPoints.h and use it
[33m16cf776[m switch the frontend to generate swift_retain_noresult calls instead of swift_retain calls.  The pertinent difference is that the former can be marked nocapture, allowing general LLVM optimizations more flexibility.
[33m71b4f04[m another _ bug.  Apparently using the wrong one here is "bad".  How about that whole ABI thing :)
[33m88e1dda[m rename _swift_retain_noresult to swift_retain_noresult.  I assume that the _ was unintentional.  If it was intentional let me know.
[33mfd3b5d2[m swift_retain and swift_retain_noresult don't throw.
[33mdd43739[m rework the optimization pass to canonicalize incoming swift_retain calls to swift_retain_noresult calls for the duration of optimization.  When we're done hacking on the function, we rewrite all the retain_noresult calls *back* into swift_retain calls.  No functionality change here.
[33ma5a1a17[m add some commented out debugging stuff.
[33m7191601[m enhance the optimizer to delete release(allocate()) pairs.  This is enough to zap 2 of them from the stdlib: ine from Format.printString.String, and one from Char.printFormatted.
[33m2445a27[m When optimizing release(o1), allow scanning past a release(o2) since it cannot affect the lifetime of o1 in a way we care about.  This allows eliminating 5 more retain/release pairs from the stdlib, including from String(Int128, radix)->String,  String(Double)->String, and the slice reduce methods.
[33m59b8103[m implement the most trivial form of release optimization: scan backwards from a release until we find a retain of the same object.  If we find one, zap both.  This is good enough to delete 22 retain/release pairs out of the stdlib, including the one at the end of String.subscript(rng : IntRange) -> String, which motivated rdar://11537101.
[33m37457d1[m 11543770 need a swift_retain_noresult function
[33m8975c0d[m teach the ARC optimizer to zap retain/release(null), which occurs 3 times in the standard library. rdar://11542761
[33m4f4636d[m adjust to mainline API change, and implement rdar://11542870 - @swift_release should be marked nocapture
[33me32922c[m Implement two simple passes in the ARC optimizer: 1. First thing, canonicalize the input IR so that nothing uses the result of    swift_retain, making it easier to reason about pointers.
[33m899eb00[m Remove unbalanced ')'
[33md1487a3[m Scaffolding for ARC optimizer pass.
[33me654726[m update for mainline api change, much nicer interface now.
[33m8b561e5[m Don't error out when the fast ABI is unavailable
[33maac9bf6[m Introduce the fast runtime ABI for x86_64
[33me16e378[m spacing fix.
[33m5c15e23[m the fixme is already fixed by the new code, I just need to kill off the redundant logic.
[33m1cd3220[m - Fix the diagnostic produced in visitUnresolvedMemberExpr to print the   oneof's type, not the type we're trying to infer.  This matches the diagnostic. - Fix the diagnostic produced by visitUnresolvedMemberExpr when we find   a non-function element but expect a function, to say so. - Fix coercing in visitUnresolvedDotExpr to handle the case when we do infer a   type for the result of the UnresolvedDotExpr.  Even though it isn't helpful, it   isn't a bad thing to infer things :) - Fix the logic that I added in an if(0) block to SemaCoerce::visitApplyExpr to   preserve the "CF_Apply" bit.  Dropping this is bad. - Move this logic around a bit and enable it!  This allows zapping some terrible   "syntactic" processing of UnresolvedMemberExpr, and a fixme.
[33m9291230[m Compute whether the terminal is UTF8 only once
[33ma0fcd33[m - Enhance SemaCoerce to work when DestTy is an unresolved type like "Unresolved -> Int".    It still doesn't work for fully unstructured unresolved types.
[33m6dbf072[m add a helper function, fit to 80 cols
[33m0e7317c[m add a copyright block, mark the array of string classes as const, add a fixme about requiring static ctor, and be more consistent with { placement.
[33me63a471[m Fix value name-binding so it correctly performs member lookup for expressions which aren't inside a member function.
[33m6abecd4[m Minor cleanup.
[33m95838dc[m Move the SequenceExpr transformation from the expression pre-check into the main expression type-checking visitor.
[33m2289b10[m Slightly simplify the code for type-checking decls.
[33ma75fdba[m Fix protocol checking so it happens in the right order.  Fixes <rdar://problem/11515674> in -parse-as-library mode.
[33m2947962[m Fix getLoc() for DotSyntaxCallExpr.
[33mfe968974[m We were accidentally giving value witnesses default visibility, which doesn't play well with others.
[33mc9fdb3b[m Back this out, it's not really doing anything. Revert "Hack the linkage and visibility of witnesses so that the REPL"
[33m28c7ba9[m Hack the linkage and visibility of witnesses so that the REPL doesn't die if the same witness is required on multiple lines. The right solution here is to find some way to re-use the previous functions.
[33m40d1591[m Some minor tweaks to make our use of the allocation entrypoints match the actual entrypoints vended by the runtime: 1) there is no swift_slowRawAlloc 2) swift_deallocObject takes two arguments Also, make all calls to swift_allocObject go through a common function so that we can easily use optimized entrypoints if the runtime provides them.
[33mb562e3a[m Make printing UTF8 in the REPL pretty when the terminal is UTF8
[33m8675f6e[m Add 32-bit allocation support to match John's changes
[33m155ed20[m Name-binding doesn't touch expressions anymore, so UNBOUND_EXPR isn't necessary.
[33m0b805c4[m Simplify: TupleExprs can't have null elements.
[33m6fe5759[m Get rid of a hack where ASTWalker was trying to walk the AST for BinaryExprs in a non-standard order.  It introduces complexity with no obvious benefit.
[33mbf41d39[m Reduce by one the number of times we walk the AST in type-checking.
[33md5cc517[m Add default implementation for printing StructTypes to the REPL, which got temporarily removed with the StructDecl rewrite.
[33m3fbd968[m Update the printf() implementation to match the May demo slides. Major changes include:
[33mea6a7f9[m Introduce String splitFirst/splitFirstIf algorithms.
[33m4b562e6[m Use the actual raw-allocation APIs, including the optimized allocation entrypoints.
[33mf3c30b7[m 'noalias' needs to go on the return value, not on the function operand.  While I'm at it, test all the side-allocation value witnesses.
[33m3bab069[m Fix a think-o where I was adding the callee-determined arguments after the normal arguments instead of before.
[33m30244a2[m Do all the dancing necessary to get method calls through protocols working.
[33m6a16a5a[m Prepare some abstractions for calling through an existential type.
[33m872cd45[m Stub out the less-important implementations of ExistentialMemberRefExpr.
[33m95a8c35[m Implement IR-generation for instance method witnesses.
[33m26cd981[m Benchmark hackery
[33me56d5ed[m Don't attempt to coerce a literal directly to an existential type. Instead, coerce to the appropriate default literal type and then coerce from there to the existential type.
[33m0062c84[m Introduce ExistentialMemberRefExpr for references to the members of values of existential type, e.g.,
[33m9096497[m Rename "dependent type" to "unresolved type" universally. We've been using the term "unresolved" in expressions for a while, and it fits for types better than "dependent type."
[33meb3c93b[m Switch the implementation of the for-each loop over to the formal Range protocol, rather than using an informal protocol. This is most of <rdar://problem/11475213>, although we still use an informal protocol for the initial 'getElements()' call because we don't yet have the ability to add requirements to associated types.
[33mb296d4d[m More NSString bulletproofing
[33m179c7c1[m Make explicit protocol conformance checking more robust against unsatisfied associated type requirements. Otherwise, we would assert because substitution did not have a binding for the unsatisfied archetypes. This whole conforms-to matching stuff will eventually be rewritten, so it doesn't bother me that we don't continue checking very far after failing to satisfy an associated type requirement.
[33m39c2c90[m Loosen type checking for protocol conformance slightly, by comparing the unlabeled types rather than labeled types. It's ridiculous to require the same parameter names (although one could perhaps use them as a tie-breaker).
[33m7f3b2ed[m Drop default arguments in tuples during substitution, rather than carrying them on in a potentially-broken state.
[33m3fdbcff[m Teach TypeBse::getUnlabeledType() not to remove sugar when it doesn't need to
[33m74436a3[m Introduce the implicit 'This' type into protocols, which refers to the type T that conforms to the given protocol. 'This' is modeled simply as an associated type.
[33m130a72c[m Fix typo of GET_INTRINSIC_GENERATOR_GLOBAL
[33md689bee[m avoid a warning with llvm r157312
[33m8d985dc[m Change extension lookup so that decls in the current module don't always shadow imports, which should be enough to unblock demo work.  <rdar://problem/11492474>.
[33m3d11eeb[m Make sure we delay type-checking for default values in tuples if the tuple specifies the type of a global.
[33mcb45b45[m Make type-checking for decls aware of the multi-pass semantics of the global scope for libraries.  No functional change.
[33m377972b[m Start shuffling around code for name binding on values; with the proposed shadowing rules, we need to delay name binding on values until after some parts of type-checking.
[33m8e1cd39[m Implement substitution of types, which substitutes concrete types for archetypes. Use this substitution when checking the variable/function/subscript witnesses during protocol conformance.
[33m360f48f[m Fix a bug with varargs pointed out by Howard.
[33mdeb459e[m Provide some documentation for ArchetypeType
[33md376026[m Implement parsing, AST, and conformance checking for associated types in protocols, e.g.,
[33m03a0704[m Add a really ugly hack to get shadowing for types working.  I'm working on the right solution, but I'm not sure how long that will take.
[33m9552aa5[m Implement basic support for refering to a nested type within unqualified lookup, based on context. For example:
[33m2b7d77a[m Remove an assert that will fire on invalid code (e.g., when one of these types ends up being an error type).
[33m97a1b1a[m Stop pretending that the layout of swift strings are opaque magic
[33m0af1177[m silence a warning, Dave is smarter than clang :)
[33m5f92d4a[m Make OpaqueValueExpr an unchecked expression; it does not persist in the AST.
[33mf50c11b[m CMake: Make sure that we finish building the compiler before trying to build the runtime.
[33m81991db[m WIP: This basic test program now works:
[33m0fb33e4[m WIP: Part two of ObjC bridging
[33m09381b9[m WIP: Part one of ObjC briding
[33m51e3842[m Document 32-bit allocation plan
[33mbce8a7a[m When ValidateType fails on a type, don't keep it around in the AST.
[33m35d7084[m Add framework for handling decls in the verifier.
[33m3ff2ef1[m Allow the verifier to perform partial checking if there's an error in type-checking.
[33mc68c9da[m Introduce ThisApplyExpr, an ApplyExpr meant for the various forms of application expressions that provide a 'this' parameter to a method. There will eventually be more than just DotSyntaxCallExpr, to capture the other syntactic (and implicit) forms.
[33mb1f1e14[m Introduce NominalType as a base class of OneOfType/StructType/ClassType/ProtocolType, an eliminate the ridiculous chained ifs that used to check for most (or all) of these.
[33m58146b4[m Zap a no-longer-relevant FIXME
[33ma9906ad[m Introduce support for implicit user-defined conversions.
[33m62431e0[m The Swift runtime depends on Foundation, or will very, very soon.
[33m3ab815e[m My ugly/evil implementation of SlicePrintable.  It's likely I screwed up somewhere, but it appears to mostly work.
[33m3d53800[m Allocate space for function witnesses.
[33ma8e511d[m Expound a bit about the decisions we need to come to about protocol resilience.
[33md1ce608[m Implement conversion to super-protocols.
[33me231868[m Add witnesses for base protocols.  For now, these are always out-of-line rather than prefixed.
[33me98d38b[m Set up the basic framework for building witness-table layouts in both the abstract and concrete cases.
[33m6848eff[m Replace casual usage of size_t with a typedef
[33m097c176[m Fix premature header inclusion
[33m94e67cc[m Add fast/basic alloc/dealloc APIs
[33m72ebeee[m Try to optimize assignment a bit more, and fix assignment of protocol types to correctly handle self-assignment. This ends up creating such a large amount of code that it's worth extracting into its own helper function.  Fortunately, this can be the same helper function for every protocol type.
[33m06992ee[m Introduce helper templates to make it easier to define type infos that can be efficiently scalarized.
[33mbdaa76a[m Extend the list of types we can use to lookup T[] -> SliceT.
[33m38bac7c[m Add Builtin.ObjCPointer with accompanying IR-gen support and wrap it in an 'id' type in the standard library.
[33m7b22162[m Delete redundant file.
[33m90939b1[m Provide a base class for implementing a single retainable object pointer TypeInfo more conveniently.  Have this class return true for isSingleRetainablePointer().  Further specialize the implementations of the value witnesses so that we no longer ever require type-specific witnesses for reference types.
[33md461d72[m Implement ErasureExpr in IR-gen, at least as far as generating value witnesses goes.
[33m450a722[m Add an IRBuilder::CreateBitCast variant which maps addresses.
[33m71c45f5[m Lion's libc++ headers do not support shared_ptr under -fno-rtti. This is <rdar://problem/10217868>.  Apparently I'm using Lion's libc++ headers somehow, which I should probably fix;  but since the use of shared_ptr is just a hack until DenseMap supports move-only types, I don't feel bad about changing it to a different hack that avoids shared_map altogether.
[33mcf6a1fd[m Implement assignment on protocol types.
[33m85acda3[m Implement basic functionality for protocol types, with the exception of assign.
[33m6b392f8[m Turn initializeWithCopy into a generic operation on TypeInfos so we can optimize sub-operations properly.
[33m675ec22[m Teach IRGen how to emit a call or load directly as the initializer for some hunk of memory.
[33mbb0a98d[m Finish off varargs.
[33m065614c[m Add support for working with IR intrinsics that return multiple values, like the overflow stuff.
[33mb2fb91f[m rip out my previous hack for Builtin.trap() and put in general code that allows access to any LLVM IR intrinsic that has types that can be mapped to swift types.  Notably, this excludes vector stuff, but there is a lot of other goodness that can now be poked at.
[33me19c64a[m A couple minor fixes to TypeBase::getUnlabeledType for varargs tuples.
[33mc381269[m Detect circular protocol inheritance with a cleaner diagnostic.
[33m53cc4c7[m Only oneofs, structs, and classes can be extended. Check this.
[33mf6f5b69[m Semantic analysis for inheritance clauses, which checks for protocol conformance explicitly.
[33m003ee33[m It is considered poor form to store stack-allocated memory in the AST.
[33mcded589[m Make %select{} formatting recursive.
[33m1341f19[m IRGen for varargs tuples.
[33m5e206bc[m Rename DistinctTypeDecl to NominalTypeDecl.
[33m6e69e27[m Kill ScalarToTupleExpr, which is no longer in use.
[33md4750d9[m Finish off the semantic analysis of vararg tuples.
[33mb3a9da6[m MCJIT broke again... just turn it off until we can actually take it seriously.
[33m7614b53[m Semantic analysis, part 1b.
[33m8fc8d4c[m Semantic analysis for varargs, part 1.
[33m80dba01[m Simplify tuple coercion code.  No functional change intended.
[33m099a978[m Parsing and AST support for varargs tuples.
[33m6d32c79[m Add a simple test showing that classes basically work now.
[33mb788bad[m A couple missing pieces for classes.  Also, a few fixes for local types.
[33mc415ea2[m Get rid of an incorrect statement.
[33m5f8d5ef[m Unbreak the CMake build, and add -momit-leaf-frame-pointer to the runtime build for optimized builds.
[33m9dd9d81[m Omit leaf frame pointers in optimized builds
[33m723e1b8[m Some hacking on LangRef to catch up with recent changes to oneofs, structs, and classes.
[33m33f20a1[m Add NewReferenceExpr, for allocating class objects.
[33m98933b8[m More work on ClassDecls; this is enough to get member access working.
[33m245d2a4[m Parse an 'inheritance' clause on extensions, oneofs, structs, and classes, with the same syntax as we have on protocols. This inheritance specifies explicit conformance to a protocol.
[33ma70b05e[m Add doxygen comment.
[33ma5a3986[m Basic parsing plus a bit more of the AST for ClassDecls.
[33mec77975[m Minor fix for mangling; I wasn't trying to change the mangling of oneofs with my last commit.
[33m79c3276[m AST representation for ClassDecls.
[33m5163b40[m Hack in support for Builtin.trap(), resolving rdar://11442881.  a more general solution to get access to arbitrary intrinsics will follow.
[33m4c5c948[m inline isBuiltinValue into its only caller and simplify it.
[33mf3c3ad0[m Remove OverloadedBuiltinKind::Arithmetic, replacing it with OverloadedBuiltinKind::Special and simplifying Builtins.def.
[33m18530ed[m change BuiltinValueKind and isBuiltinValue to be private to Builtins.cpp.
[33m6faa726[m switch binops builtin irgen to the new world order.
[33m6f045aa[m Throw the switch to use "var" syntax to declare members of structs.  This also means we no longer build an implicit extension for every struct decl.  Everything seems to be working, but please yell if this breaks anything.
[33md97a422[m Switch isLiteralCompatibleType over to use MemberLookup rather than performing a lookup directly.
[33m4a18a1c[m Restore a FIXME I accidentally dropped.
[33m87dd43a[m Refactor member and constructor lookup to depend on centralized routines in Module rather than scattering assumptions about how lookup works across Sema.  This should make it easier to make changes in the future which affect lookup.
[33mbf03c9a[m Remove byref(implicit). Instead, introduce [assignment], which only applies to operators whose first parameter is [byref]. Assignments must return Void, and have their first arguments implicitly treated as an lvalue.
[33m907cc52[m Switch a couple booleans in Module over to an enum.
[33m790687e[m Don't try to unique TupleTypes with default values.
[33mf9c3264[m Fix a minor bug in type-checking with library-style parsing.
[33mf945f3c[m Simplify type-checking for FuncDecls.
[33m5b25e63[m Don't allow materialization with byref(implicit).
[33m8ca12ef[m Fix missing newline at EOF
[33m056ba28[m Implement subtyping rules that allow one to convert a function type to another function type, so long as the source is a subtype of the target. The subtyping relation is fairly obvious, allowing parameter renaming, qualification conversions for lvalue types, and protocol-conformance conversions (at the top level of function types). It is a strict subset of the allowed type coercions.
[33m90fc3c3[m split the 3 "arithmetic" binary operations into fp vs integer variants.
[33mdd63c83[m rework compare builtins to use the new-school way of IRGen'ing them.
[33m5dc60f4[m pull hard-coded builtins out of the switch.
[33mfd38dab[m switch cast builtins IRGen to use a different approach.
[33mf1478aa[m regularize cast processing in IRGen
[33mc168af4[m split the Builtin name parsing logic out to its own function.
[33m515bcb4[m Allow subscript declarations in protocols, which require a suitable subscripting operator. Such protocols are fairly useful without associated types, however.
[33m59db256[m Ban the use of SuperConversionExpr to produce lvalues, since that is, in general, not sound. For the limited cases where we did use this expression kind on lvalues (member access or instance method invocations on a superprotocol), leave the conversion to the client of their respective AST nodes (MemberRefExpr, DotSyntaxCallExpr). We may decide to enrich these ASTs in the future with more information about the conversion path, but it's not clear that it's actually useful information for, e.g., IRgen.
[33mba4b2c9[m Switch to a 32-bit ref count
[33m2325219[m Add UInt64 and mach_absolute_time()
[33m8617d17[m Change the IR translation of struct types to just require a single level of IR struct type.  At first we were emitting two layers because structs were secretly tuples, and then more recently we were emitting two layers to avoid having to adjust a bunch of tests.  Just bite the bullet now;  it makes the IR a lot cleaner, and it's never going to be easier.
[33m48cd78c[m Allow an opaque struct type to be specified as the struct to perform struct-layout into.
[33md98c55f[m Followup to r1819: there was an issue with that commit I hadn't spotted before related to mismatched types.  This commit solves it for FuncDecls, but not SubscriptDecls (see the FIXME).
[33mdf91565[m Ban default values in patterns in semantic analysis.  Null out default values from patterns for function signatures, since default values are really part of the type, not the pattern, in that case.  Fixes <rdar://problem/11406484>.
[33m2a78055[m Second attempt at <rdar://problem/11228914>.
[33mec674b3[m Make the implicit 'this' argument [byref] rather than [byref(implicit)], and rely on type coercion for the implicit object argument to deal with the implicitness. This is one half of <rdar://problem/11215969>.
[33m5ac790e[m Fix member name lookup so the logic is clearer, and so we don't end up with strange results for lookups into metatypes.
[33me413f65[m Add a String sort test which has the effect of testing StringSlice.
[33m120f6de[m Add GenStruct.h, which I meant to commit with r1806.
[33ma49d6c8[m Introduce a conversion-to-supertype expression to capture conversions from a protocol to a protocol it inherits. This is a far simpler operation that the general type-erasure expression, so generate this AST when we can.
[33m2b11e0c[m Add a type coercion flag that indicates when we are performing the conversion for the implicit argument of a method ('this'), along with an entry point (coerceObjectArgument) to perform type coercion of the object argument to an lvalue. Use this entry point for member reference expressions (that refer to variables/properties) and method calls. This is a step toward eliminating [byref(implicit)] on the implicit 'this' parameter.
[33mb1627a4[m Disable fixed-length arrays in the parser. They'll get implemented eventually.
[33mde42680[m Switch the boolean 'Apply' in the type-coercion code to a set of flags, with just one flag at this point (CF_Apply). No functionality change.
[33m9e55349[m r1805 and r1806 collided and left Swift in a broken state; fix in the most obvious way.
[33m01a18f6[m Use VarDecls to represent struct members, and MemberRefExprs to represent member access in structs.  Eliminate the horrible hack which was LookThroughOneOfExpr.
[33m875d914[m Extract the layout logic out of GenTuple.cpp into a template header. It does seem silly for this to all be templated, but I couldn't really see a very elegant solution given how I wanted things to be genericized.
[33m755f789[m Diagnose attempts to inherit from a non-protocol type.
[33m09ef952[m Only create erasure expressions in two places: one for lvalues and one for rvalues.
[33m70bfc23[m Implement protocol inheritance, e.g.,
[33m05fe3c9[m Propagate a DeclContext through NameBinding for IdentifierTypes.
[33md10f2b6[m Some doc tweaks for for-each.
[33m28cddd1[m Make sure we use the right IR generation options for the IRGen standard library hack.
[33med63824[m Fix a minor logic issue with swift::irgen::IRBuilder::insertBlockAnywhere.  Fixes the rest of <rdar://problem/11425939>.
[33m8d58b9f[m Make sure we destroy the element variable in a for-each loop in the right place.  Part of <rdar://problem/11425939>.
[33m3d6a57f[m Note why we're using std::shared_ptr for something with unique ownership
[33m3e7b52d[m Implement support for coercing a value of a given type T to a protocol P, so long as T conforms to the protocol P.
[33m88b214d[m Revert r1792; it's missing a file :(
[33mf4f2f9f[m Implement support for coercing a value of a given type T to a protocol P, so long as T conforms to the protocol P.
[33m8f290b6[m Extend the ugly standard library hack so it works for static compilation.  We should be inlining from the standard library now everywhere except the REPL.
[33m1cd9ae2[m Index a String with a Range to get a sub String.
[33m9533bbe[m Removed terminating null from String.
[33m1ae6d24[m Add reverse(Range)->RevereRange and reverse(ReverseRange)->Range.  This fixes <rdar://problem/11350098>.
[33m7cf73fb[m Comment tweaks.
[33mbf3359f[m String is now represented by an internal UInt8[], and as far as I know, no longer leaks memory.
[33mbfe3f84[m Fix PrettyStackTraceDecl so it doesn't crash for a NamedDecl without a name.
[33m76f2e49[m Make retain/release leaf-frames for the fast-path when compiling with -momit-leaf-frame-pointer
[33ma5030c0[m minor pedantic tidying up.
[33m169dd22[m Switch Parser::parseProtocolBody() over to use parseDecl(), with a giant list of "you can't do that" restrictions. Update grammar accordingly, killing off decl-var-simple.
[33m77fa49e[m Introduce StructDecl and StructType; use them for structs instead of OneOfDecl/OneOfType.  To keep this patch small, I'm leaving in LookThroughOneOf etc. for the moment, but that's next on the agenda.
[33ma581941[m Tighten up protocol parsing a bit.
[33m5f2344a[m Introduce ProtocolDecl, which describes (*gasp*) a protocol. Move the guts of ProtocolType over to ProtocolDecl.
[33md9f8ab5[m Get rid of unused functions.
[33m22ef9b4[m Avoid using TypeBase* directly in a case where it isn't necessary.
[33m4ca443d[m Add OneOfDecl; use it as a DeclContext for OneOfElementDecls instead of OneOfType, and get rid of the implicit TypeAliasDecl.  Add TypeDecl as a base class for OneOfDecl and TypeAliasDecl (and StructDecl, once we have it).  Adjust a whole bunch of stuff to this new scheme.
[33m96f6398[m rename Diagnostics.cpp -> DiagnosticList.cpp, it keeps confusing me.
[33m9d589af[m implement really trivial support for formatting integers when stringizing them, by allowing a radix to be specified.
[33md916261[m fix up \n printing in interpolated_string_literal_expr ast dumps
[33mca3732e[m rework the parsing logic for \() in string literals to just parse them as normal paren-exprs (tuples or parens).
[33m0054cd1[m refactor string literal parsing out to its own method, since it is non-trivial now.
[33mad92907[m At Chris's request, extract out some exposition into a document about logical objects.
[33m302de66[m Switch the for-each loop informal protocol from getFirst()/dropFirst() to the more input-iterator-centric getFirstAndAdvance(). Fixes <rdar://problem/11401273>.
[33m72eaa58[m Add SliceUInt8 in preparation for basing String on it.
[33m6e8c163[m fix capitalization
[33m702c135[m fix file header.
[33m5ab9083[m Teach CMake how to build ".swift" files as part of a shared library or executable, and make sure we build "swift.swift" appropriately.
[33m204b416[m raw_fd_ostream doesn't set the "has_error" bit in its ctor if it failed to open the file, it returns the error through the string reference error argument.  This is half of fixing rdar://11388418.
[33m79cf8ed[m add a fixme explaining what is going on.
[33m22300ed[m improve diagnostic for a " in the middle of an interpolated string, including a range:
[33me510882[m change the interface to skipToEndOfInterpolatedExpression to return the interesting character on failure as well as on success.  Simplify the code in Lexer::getEncodedStringLiteral since it cannot be called on a string with an malformed interpolated expression.
[33m822c7a2[m remove a hack that isn't needed now that we pre-lex the tokens in an interpolated string literal, thanks doug.
[33m2d99b7c[m switch LiteralExpr::classof to a range-based check, as suggested by Doug.
[33m0a23de0[m fix rdar://11385385 - When forming the implicit string constructor, use the start of the embedded range, not the "loc" which is somewhat random.
[33m482fce9[m further improvements to SLoc printing: actually print line and column #'s now.  This depends on llvm r156243
[33m3ae29d8[m provide facilities to elide the filename for a sourceloc if it matches the previous sourceloc.  We now print ranges as: [t.swift:22 - :23] instead of [t.swift:22 - t.swift:23].
[33md77d0d3[m refactor SourceRange printing out of Verifier.cpp into methods on SourceRange and SourceLoc.
[33m1357aea[m remove extra blank line AST-dumping sequence_expr.
[33m760b49f[m Remove unused bit from IRGen options.
[33mca1f327[m A couple minor tweaks to IRGen: turn on inlining when we're optimizing, and turn off non-leaf frame pointer elimination when we're generating an object file.
[33mf75e305[m Add ScalarToTupleExpr to represent an implicit conversion from a scalar to a tuple, with or without default arguments.  Make Sema and IRGen work with them.
[33ma143422[m Teach name binding to look into default values for tuple types.
[33m0c380c0[m Make the parser follow the stated grammar for tuple types.
[33mfd62cba[m Refactor extension parsing so it's centralized, and so we parse the body of the extension in the correct DeclContext.
[33mbf281fd[m Exclude REPL escapes from the output of :dump_source.  <rdar://problem/11387569>.
[33mc2868d6[m Make local oneofs not crash in IRGen.  <rdar://problem/11292678>.
[33m2a1e15f[m document string literal interpolation in langref.
[33m024e592[m Now that the parser's lexer can be changed, just change it, instead of mutating the lexer, simplifying things a bit.
[33m7d3c8fb[m Change Parser.L to be a pointer instead of a reference, no functionality change.
[33m678843c[m improve error recovery when the lexer returns a tok::unknown and we're parsing an expression.
[33m2f44c00[m Initial stab at implementing string literal interpolation for simple expressions, e.g. "foo is \(i+j)".  This implements rdar://11223686
[33m774a557[m Merge NamedDecl into ValueDecl, rdar://11379147.
[33mb45d97b[m Don't crash trying to generate an LLVM type for a local oneof.  Part of <rdar://problem/11292678>.
[33m255c5c0[m Fix some obvious issues in DeclNodes.def found by inspection.
[33me6177f3[m Get rid of the outdated notion of type lookup in Module.  <rdar://problem/11026489>.
[33m7444e5e[m Turn on optimizations for swift.swift when building an optimized build.
[33mee254c5[m Get rid of a bit of dead code from the REPL.
[33m0138596[m Avoid JIT'ing swift.swift in both script mode and the REPL.
[33m318e498[m Remove swift.swift from test/.  Yay! :)
[33m59fbf08[m Install swift.swift into lib/swift/; teach swift to look there for swift.swift.
[33m6461b20[m When reallocating a DiverseList, make sure the new end() includes the size of the component we're growing for;
[33m8853504[m Delete a bunch of files from the runtime/ directory which are no longer necessary.
[33m283ef8e[m Build swift.swift as part of the swift runtime.  The CMake changes here aren't complete, but Doug said he would fix that.
[33m0b14053[m Add :dump_source to the REPL.  <rdar://problem/11326637>.
[33m3dbb44e[m '\0' is not an operator character.  Make sure Identifier::isOperatorChar knows that.
[33m1ab9a54[m fix a comment typo
[33mff2bef9[m Extend variable declaration grammar to allow "var a, b : Int, c, d : Double". <rdar://problem/11349535>.
[33m49bf057[m Disable non-leaf frame pointer elimination for both REPL and script modes.
[33ma8128ae[m A couple more minor tweaks to dumping for PatternBindingDecls.
[33m4671ed5[m Make dumping a PatternBindingDecl also print the pattern.  Fix a missing close-paren dumping PatternBindingDecls.  Part of <rdar://problem/11361233>.
[33m2aee4db[m A couple tweaks for REPL editline usage; install default signal handlers so we get better handling for Ctrl+Z etc., and print a newline after the end of input if we showed a prompt.  Fixes <rdar://problem/11364065>.
[33m3f3cfe0[m Don't die if the outermost bound of a new[] expression is dependently-typed.
[33m53d52f6[m Switch from std::vector back to SmallVector, now that SmallVector supports move-only types.
[33mde73b6d[m add IRGen support for var decls in for 'init' clauses, really finishing off 11360347
[33m46c9437[m Add support for var decls in the initializer of a c-style for loop, implementing rdar://11360347 / 11349750.  C-style for loops could be further enhanced by allowing a comma-separated list of statements in the increment, but this isn't something I plan to do in the short term.
[33m1cc4905[m unbreak the build.
[33me31cc60[m Make immediate/script mode use the LLVM optimizers and MCJIT, as part of my experiments with optimizations.  No functional change for the REPL; I still need to work out how to call the optimizer there without either breaking the underlying assumptions of the JIT or re-JITing everything for every line.  (Multi-module support in the JIT would be nice...)
[33m8c478d1[m remove the foreach keyword, switching foreach loops to use 'for' instead. This uses one-token lookahead to distinguish between the two forms.
[33me205e1d[m change the subset of for statements we support: instead of *requiring* parens, now we *do not allow* them.  This is progress towards unifying for and foreach.
[33m54c7c6e[m Add some helper functions to help treat "spaced" lparen and lsquares uniformly.
[33mc895535[m remove another turd required to support obsolete compilers.
[33m5df64dd[m revert r1700 now that clang-421.0.27 is our baseline :)
[33mdcebd1d[m Fix uninitialized member.
[33m48f1556[m Change swift to special case ++ and -- as unary-only operators.  Making them useful.  This resolves:  <rdar://problem/11297111> ++ and -- operators are annoyingly confused with binary operators
[33mcf1314a[m fix catastrophic errors when built with Xcode 4.3, apparently that clang doesn't copy Path with a defaulted copy ctor.
[33ma684be9[m Per John's comments on r1696, use IGM.getPointerSize(), and add a bit to CapturingExpr for whether the function is captured.
[33m2e87330[m Hack fast implementations of '&&' and '||' into IRGen.
[33m0b94665[m A small experiment with the potential benefits of nocapture.  Avoiding the heap allocation helps substantially, but there's still overhead because the LLVM optimizers can't see through swift_release.
[33m9f50c09[m Add a couple hacks to make code using Bools optimize better.
[33mdaa531d[m Make sure we correctly restrict the scope of the FullExpr in IRGenFunction::emitCondition to the actual expression emission, so the branch comes after any cleanups.  Found while experimenting with bools.
[33m6d10ff6[m Add handling for foreach loops to capture analysis.
[33me150bfe[m Remove my ancient notes
[33m1b29b6f[m Minor tweaks to the generics manifesto. The bits about protocols might make good reading for today ;)
[33m02286ee[m add a few more shootout tests, exposing rdar://11344937
[33mc7fd1b6[m add shootout_matrix, with several workarounds for rdar://11327139
[33mab0c800[m fix rdar://11344875, where we would reject "return;"
[33medfe532[m add some benchmarks from shootout, but with reduce problem sizes since swift is so brutally slow.
[33mad5c0bb[m move two docs out of the Notes directory, since most of the docs are notes.
[33mc63e6b2[m remove some old and really obsolete dox.
[33m48c1cbb[m Make the type of VarDecls match the declared type of the variable/parameter/etc.  <rdar://problem/11125010>.
[33m1bfefd3[m A couple trivial fixes: fix wording in a diagnostic, add a missing newline.
[33mf41253e[m Add a couple of missing semantic checks for default values in tuples.  Add a bit more clarifying wording to LangRef.
[33m3c8802e[m Add syntax for declaring multiple unrelated variables on a single line ("var x = 10, y = 20.0"), like we claimed to support during the demo.
[33maa069a9[m fix error recovery to not crash: the lexer should always return a token even in an erroneous token.
[33m615ca4a[m implement the rest of character literal support, and enhance Char to be character literal compatible.  This wraps up rdar://11305635, though some cleanup of the testsuite can now be done.
[33mc7e68a4[m langref and lexer support for character literals.
[33me81331a[m If an error occurs while type-checking a declaration in the REPL, don't look at the declaration again. Fixes <rdar://problem/11331724> / <rdar://problem/11332314>.
[33m86cf79a[m Add a range subscript operation for SliceInt64 that produces a slice, e.g.,
[33m20663a8[m introduce a new abstract LiteralExpr base class shared among the literals, simplifying some code that previously enumerated all of them.
[33mba1caeb[m Fix a stupid mistake in the precompilation code for the REPL.
[33mcc87aec[m add mandelbrot that goes through a temporary array.
[33mbe2bfa9[m Don't emit the begin/end pointers in an array destructor if the element type is trivial, and test that we correctly emit loops when the element type is not trivial.
[33m5e31e0d[m When parsing a multi-dimensional array declarator in an expr-new, update the element type with the computed type.
[33mee61610[m Implement IR generation for NewArrayExpr.
[33m980f948[m Abstract out adding the heap header to things.
[33m034387b[m Fix the definition of Alignment::isOne() and implement a roundUpToAlignment method on Size.
[33m1757b81[m Add support for capturing local FuncDecls.
[33m0241d0e[m Implement IRGen for local function decls.  Known limitations at the moment: currying is unimplemented, and capturing the decl is unimplemented.
[33mae08edf[m Do a bit of naming cleanup in IRGen.  Make sure closure IRgen doesn't get confused when we capture something other than a variable.
[33me33b1aa[m Don't try to synthesize an expression for a return statement which doesn't have one.  <rdar://problem/11315114>.
[33m44b3dd7[m Move bitvector example into the Interpreter subdirectory and add some bit get/set operations to test.
[33m88e1ec0[m Use Eli's swift new c_putchar to move print(String) back into swift.swift :-)
[33mb3b7117[m Fix a pair of bugs with partial updates of logical l-values: first, we weren't registering the cleanup for the temporary if it needed materialization, and second, we were potentially double-consuming cleanups associated with the l-value, e.g. subscript indices.
[33m61b6661[m Support for subscript l-values.
[33mfe8de68[m Correctly generate references to property vars.
[33m93e0241[m Move IRGenFunction::getGlobal into the l-value code.
[33medf3dac[m Abstract the logical lvalue emission code so that it works on all the currently-expected kinds of logical lvalues.
[33mab44ee7[m Don't force PathComponent subclasses to propagate their size upwards;  this is very error-prone.
[33m2f3ff69[m Some tweaks to module import to get the demo flow working.
[33md228618[m Slightly expand the :help text.
[33mb4ec884[m Add missing square bracket token to REPL brace matching.
[33mcf14b1a[m Skip an unnecessary release when building a closure.
[33me6865b3[m Move the implementation of Char printing into swift.swift, and get rid of the old printChar.  Fix a bug in IRGen I ran into while working on that.
[33m8856293[m Two major changes here:  Char has been renamed to Char8.  This is a temporary hack with the intent that Char8 will soon dissappear.  But I'm refactoring and didn't want to break things.  A new type Char has been introduced.  It behaves somewhat like a cross between a UInt32 and a pointer type.  It compares like a UInt32.  It has arithmetic like a pointer, with the difference_type being Int.  The second major change is the introduction of StringCharRange (name donated by Doug).  It is attempting to be a range over String respecting that String is stored as UTF-8.  It is intended that an invariant of String is that it can only hold valid null-terminated UTF-8 (to reduce validation costs).  I also modified the cpp implementation of printChar to accept UTF-32 and print it out via printf using UTF-8.  Still to be done is address the FIXME's in String to transition to UTF-8.  I'm hoping this can be done with the new StringCharRange and foreach.  But I do not know for sure.  I've run out of steam for the night (still on EDT).  For those of you who have more steam for the night and are working hard towards our demo, please feel free to pick any of this up and modify it in whatever way helps the demo best, even if that means reverting it.
[33mee4d656[m Switch misc functions in swift.swift to use the new asmname attribute.
[33m8177663[m Add an asmname attribute which overrides the default mangling for a swift function.  This is a complete hack, and we intend to remove it (along with function declarations which don't include a definition) once we can properly import C modules.  <rdar://problem/11306201>.
[33mbabedb9[m Fix a crash related to nested types in name lookup.  (This is enough to get value lookup working for typealiases in extensions, but not type lookup.)
[33mc65ecc2[m Add BitVector64 test case
[33m953ca36[m When type-checking a statement, keep track of whether it is top-level code. If so, use that DeclContext for foreach's synthesized variable. Because it's kinda nice to be able to use 'foreach' twice in a REPL session.
[33mc055f62[m Initial implementation of global redeclaration checking.  <rdar://problem/11294839>.
[33mc70aa1b[m Make String(0) actually print '0' rather than nothing ;)
[33ma047760[m Teach the import mechanism that it's rude to parse the same library multiple times, as well as teaching the name lookup mechanism that it's similarly rude to report ambiguous results because it searched the same import twice. Fixes <rdar://problem/11287213>.
[33mda897cb[m I'm not happy about this either.  But print(String) is an exact match for printf(%s).  printf takes UTF-8 strings and prints them out.  It doesn't make sense to convert from UTF-8 to UTF-32 and then back to UTF-8 just to print.  Test added to confirm that we can print a non-ASCII UTF-8 String.
[33m27483ce[m s/empty/isEmpty/g for the foreach loop informal protocol, because function names should start with verbs.
[33m6d5f67c[m Implement IR generation for the 'foreach' loop and convert our fractal examples over to using the 'foreach' loop. Addresses <rdar://problem/11259997>.
[33mbf1392c[m Add :dump_ast to dump the AST from the REPL.
[33mc33ee06[m Disable repl prompt coloring for now; see <rdar://problem/11312059>.
[33m6604ece[m Fill in "unimplemented" IRGen pieces so we don't subsequently crash.
[33m5177545[m Implement balancing in the REPL for parens and brackets in addition to braces.  <rdar://problem/11306336>.
[33me1b8daa[m Rework 'foreach' AST to reflect how IRgen actually wants it to look, rather than how I felt like generating it.
[33m924ef61[m Fix repl prompt with '\' continuation.  <rdar://problem/11296808>.
[33mac188c7[m Implement type checking for the foreach loop and extend the AST to hold all of the various expressions and declarations we'll need to understand its semantics.
[33maa70262[m Add UInt8
[33mf997a78[m Parsing and basic AST representation for 'foreach' statement.
[33mc7b7c08[m Following IR gen's motivated lead, split Builtin.store into Builtin.assign and Builtin.init operations.
[33m113aa3d[m Fix the emission of MemberRefExpr l-values and getter/setter pairs in extensions.  The AST here is a little wierd;  I don't really get why there needs to be a PatternBindingDecl here. It's easy enough to ignore.
[33m96d7931[m Teach capture analysis to look through MemberRefExprs.
[33m6cdecc0[m Make all the subscripting getters/setters go down the same path. This intentionally changes the mangling of variable getters and setters so that we can have a reproducible mangling that doesn't depend on things like the variables names, which is important for resilience.  It's not currently important for subscripting, although equally I see no reason to mangle in the subscript pattern name.
[33m85fecab[m Reorganize the emission of a call site so that it's abstracted over exactly how the arguments are emitted.  Introduce a new code path which emits arguments from existing Explosions (possibly of the wrong resilience level).  Use that code path to implement getter/setter code for MemberRefExpr l-values.  This is just a checkpoint for the latter two parts, but the ApplyExpr path is working correctly in the new framework, which is worth a commit.
[33mbecacee[m MemberRefExpr can only refer to a VarDecl for now.
[33m674c286[m Make Callee part of the API to GenFunc.
[33mb40804d[m Make the swift REPL prompt a bit more swift.  This is a bit hackish, and could be improved.
[33m03f874e[m bring my ridiculous hack to the String(double) ctor, not just print(double).  In the demo, we now get: Complex = (r=4.0, i=2.0) instead of: Complex = (r=4.000000e+00, i=2.000000e+00)
[33mdd94cf5[m Add :dump_ir to the REPL.  <rdar://problem/11305412>.
[33m1780f0f[m Minor bulletproofing for Sema code for REPL.
[33m6c3a0e9[m Fix a minor regression in the REPL prompt.
[33m1d4ced4[m I finally figured out the magic invocation to get libedit to do history.  <rdar://problem/11287187>.
[33m399ec31[m Allow backslash to escape an end-of-line in the REPL.
[33mfd00abd[m remove a really really old test that has been broken/disabled forever.
[33m3647240[m Parse swift.swift upfront in the REPL.  This has two benefits: one, we error immediately if swift.swift can't be found, or something is wrong with it. Two, it lets us JIT swift.swift upfront, which makes the REPL prompt feel more responsive.  <rdar://problem/11305258>.
[33m9192d39[m Here's a nickel, get a real compiler.
[33m837fdf0[m Always type-check immediately after a line is finished in the REPL.  This isn't quite the same as how script mode works at the moment, but apparently it's way too confusing to delay type-checking errors.  <rdar://problem/11296808>
[33m3e2c295[m Work around sabre's insistence on using obsolete technology.
[33m9fe42c0[m Merge infix precedence/associativity for binary operators, rather than forcing one to declare, e.g., [infix_left=NNN] on every declaration. The precedence/associativity will be merged from any similarly-named operator in translation unit scope or in an imported module. Fixes <rdar://problem/11261874> very, very narrowly for the demo.
[33ma4de7dd[m Try a different variant of expression printing.  <rdar://problem/11296811>.
[33m86d6ad7[m Implement Chris's tweaks for expression printing in the REPL.  <rdar://problem/11296811>.
[33m67b4140[m Add simple interpreter escapes.  Use ':' since it's reserved by the swift grammar.  <rdar://problem/11296710>.
[33mbc32a8a[m Fix a bug with returning value that need to be refcounted: we want to do a take-load out of the return address slot instead of a normal load, or else we'll end up +1'ing an already +1 value.
[33md68fee8[m Perform Builtin.load and Builtin.store using the type
[33mee905f3[m check in my complex testcase that am building for the demo.  This passes type checking, but is unhappy with irgen.
[33m3844322[m fix typo
[33m470b787[m everyone loves atan2.
[33mb2457f4[m add sin/cos.
[33m34b6a80[m change the floating point printing format to be more concise.  It wouldn't surprise me if this wasn't perfect, but it is close enough for now.  We now print 4.0 instead of 4.000000.
[33me98e2f4[m Make the logic for displaying the "Welcome to swift" equivalent to what libedit uses for the "swift>" prompt.
[33ma1d7ca3[m Fix a crash on an overly large integer now that they are a warning instead of an error.
[33m70028d1[m implement conversions from arithmetic types to Strings.  Fix integer promotions to be sign extend instead of zext since they are signed types.
[33mcd8f3e2[m add some sqrt implementations, to be used by the demo.
[33med4bf70[m Fix the source range for DotSyntaxCallExpr when it is modeling an implicit this, repairing an ASTVerifier abort
[33m1403d0a[m implement print(String) in swift.
[33mab0b5e8[m - Add integer <-> integer conversion functions for Int32 and Int64. - add a top level abort() method. - add an assert() implementation - Add a "Char" typedef for Int32, switch printChar to use it. - Add a method to String to extract an element out of it (currently named   getElement, to be named [] eventually) - Implement String.replPrint in terms of string operations.
[33mea84f6e[m add a new UnsafePointerInt8 type, use it to implement String.size in swift instead of in C++.
[33mc7922be[m on entering the repl, print a welcome message to stderr when it isatty().
[33m6e7d107[m lshr is a useful builtin to have, just not useful for signed shift right :)
[33m4d42b66[m REPL printing for VarDecls.  <rdar://problem/11287158>.
[33m1d58c47[m Fix type-checking to handle some cases with tuples which contain lvalues.  <rdar://problem/11287167>.
[33m0bdca74[m s/lshr/ashr/g in builtins.
[33m12ed53d[m Implement subscripting for SliceSliceInt64. Along the way, fix a silly little parser bug that didn't allow a[i][j] to parse.
[33m8e7902e[m Manage objects (of type Builtin.ObjectPointer) loaded or stored via Builtin.load_ObjectPointer/Builtin.store_ObjectPointer.
[33mb237823[m Implement load and store builtins, which we use to provide get() and set() functions for UnsafePointerInt.
[33m4fe85d6[m Update LangRef documentation for subscript declarations and subscript expressions, with a fun little bit vector example.
[33me26d552[m Implement integer shift-left/shift-right in the Swift standard library.
[33m95cdc20[m Member expressions (which refer to properties) require their bases to be lvalues (materializing them if necessary), as we do with subscript expressions. Introduce a verifier for member expressions to make sure this property holds.
[33m59fab3f[m Teach the subscript expression verifier to check the type of the subscript expression itself.
[33mb0616a7[m Clean up the AST for subscript expressions in a few ways:   - Ensure that the base is always an lvalue, materializing it if necessary   - Give appropriate lvalue qualifiers to the subscript expression   - Make sure to write the converted indices back into the AST
[33m3d2e00d[m Remove stale FIXME
[33m458549e[m If the right-hand side of an assignment is not dependent, but the left-hand side is dependent, coerce the left-hand side to an lvalue of the right-hand side's object type. This allows us to assign into lvalues that may be overloaded on the underlying value type, e.g., subscripting values and overloaded variables. Fixes <rdar://problem/11285171>.
[33m372ecb3[m Fix Ted's latest fractal testcase.  <rdar://problem/11278118>.  (There were two issues: an assertion failure in tryEmitTupleElementAsAddress, and a strange runtime failure caused by incorrect refcounting.)
[33ma2c6150[m Error recovery for the REPL.  Seems to be working reasonably well.  <rdar://problem/11269380>.
[33m7610d26[m A couple minor tweaks to newlines in AST dumping.
[33mbe602fc[m Get rid of the implicit BraceStmt for the TranslationUnit; instead, have the TranslationUnit directly store a list of decls.
[33m596f494[m Add missing getLocStart() implementation for TopLevelCodeDecl.
[33m123622e[m Remove unndeed burningShip test (now in fractal.swift)
[33medf7200[m Add 'fractal.swift' which does both mandelbrot and burning ship using a curried function core.
[33m6122a9f[m Introduce an overloaded subscript expression type, to cope with cases where overloading based on the indices is insufficient to select an overload candidate. Implement type coercion for overloaded subscript expressions, so that the context can help push overload resolution along.
[33mcd43490[m Implement semantic analysis for subscript expressions, using overload resolution to pick the best subscript getter/setter pair. Does not yet allow type coercion to influence overload resolution.
[33md6a9209[m Make the REPL handle unbalanced braces, so multi-line function definitions work.  <rdar://problem/11269371>.
[33ma53aa62[m Fix a minor inconsistency in how ASTs are built for REPL printing.
[33mcd7be4e[m Add an AST for subscript expressions; no real type checking yet.
[33m6a08845[m Add a big doxygen comment for TopLevelCodeDecl.
[33m4ab945f[m Fix Ted's currying fractal example.  <rdar://problem/11278150>.
[33mcbc1eac[m irgen parser and sema support for for statements.
[33ma5e1b4c[m Fix the REPL, which I accidentally broke.  Add a test so it doesn't break by accident again.
[33md5e7784[m Get rid of isModuleScope bit, since we don't like scattering bits across the AST; as a replacement, introduce TopLevelCodeDecl, which provides a DeclContext for all expressions and statements at the top level.  <rdar://problem/11259941>.
[33m4c15635[m Finish type-checking for new[] expressions.
[33m66318f5[m First round of type-checking for new-expressions:  form the appropriate slice type and check the bounds.  The first bound must be a literal or a type with a getArrayBoundValue method, which has the same recursive nature as getLogicValue (i.e. it can return a type that has a getArrayBoundValue that returns an integral type, but that's it;  it's capped at one hop).  The rest of the bounds must be empty (meaning a slice) or constant under the same conditions as fixed-size array types.
[33m5089995[m Fix a consistency error:  just because a value doesn't require reference counting doesn't mean we shouldn't add it to the explosion when "retaining" it.
[33m8ff3075[m Teach getter/setter functions about their corresponding subscript declaration, so they can mangle themselves appropriately.
[33mb6140f3[m Teach IR generation that there are no global subscript operations
[33m846aa7e[m Diagnose attempts to declare subscript operations outside of a type context.
[33m06881fa[m Introduce an AST node for subscript declarations, and verify that the bodies of the getter and setter are being type-checked.
[33m4848072[m Add a hack which makes us run the initializers for "true" and "false" in script mode and REPL mode.  <rdar://problem/11256886>
[33mdf74bc0[m lang ref and parser support for for statements.  AST and sema next.
[33m44af5d1[m refactor some code to expose a new expr-or-stmt-assign production.
[33md702192[m Add "burning ship" fractal test.  Looking to consolidate with mandelbrot.
[33mbffb368[m Replace mandelbrot.swift with mandelbrot2.swift.
[33me161141[m Per Doug's feedback, refine diagnostics when we cannot find a unary or binary operator for a given set of argument types.  When the argument types are not dependent or error types, include them in a short single error diagnostic, and not separated in a separate note.
[33m89752e6[m REPL printing for structs and tuples.
[33m3672f0d[m Fix tests.  Make REPL printing work with lvalues.
[33macc17d6[m Initial implementation of the "print" part of the REPL.
[33mae316ce[m testcase for r1479, it will diverge from the other mandelbrot soon.
[33m6ab877a[m fix name lookup to search through all modules to build the candidate set, instead of stopping with the first module that matches.  Without this, we don't get the unified overload set for all "+" operators, for example.  We arguably should stop searching when we get a type (since they cannot be overloaded) but we can treat that as a follow on issue.
[33m35d7fc5[m fix a crash I'm seeing on test/subscripting.swift: it looks like something isn't pushing a decl onto Entries, which is reasonable in an error condition.  Handle this correctly.
[33m9ba80f7[m Properly pass the arguments specified for subscripting access down to the functions that we generate for the getter/setter, so that the index parameters are in scope.
[33mdd17ba6[m A few minor bugfixes for REPL.
[33m6897b6a[m Add support for parsing a subscripting declaration, e.g.,
[33mc99e526[m Refactor var-get-set grammar to a more general get-set grammar, to prepare for re-use in subscripting. No functionality change (yet).
[33m77bcc0f[m Primative + operator for String
[33mb7b8f17[m Treat a function application A(b) as a coercion of the expression 'b' to the type named by A (when A is in fact a direct reference to a type). If that coercion would fail, then fall back to invoking a constructor. Fixes <rdar://problem/11272190>.
[33m0c95e91[m When calling an object of metatype type, consider as overloading candidates both the elements of a oneof and any methods with the same name as the oneof (which is our current hack for a constructor).
[33m819d03a[m When a member name (e.g., Double.Double) matches the name of a oneof element, add that element as a member lookup result but don't stop there: also find extension functions with that same name.
[33mf30112f[m Add trivial test for IR generation of the getter/setter for a property.
[33m71157c6[m Add parsing support, but no type-checking or IR-generation, for new expressions.
[33m6133630[m When type-checking a slice type, "desugar" it to a type that is generic over the type of the base.  By "generic" I mean that it's looked up by prepending the word "Slice" to the name of the base type.
[33me487813[m Update the language spec for the type-array grammar change.
[33mab28c5b[m Parse array types "inside-out".
[33me6d56fd[m Require an unspaced [ to start a subscript or array-type suffix. Per discussion, this should probably be "no newline since the last token", but that decision should be made simultaneously for ( and [.
[33m9dd1c47[m Add Mandelbrot example.
[33m731e3c4[m Update CMake build to link in libedit, and to not link in mcjit.
[33mf136b16[m eliminate gratuitous lambda that crashes Xcode 4.3 clang.
[33mecb0f2b[m Add a little bit of missing error-checking for libraries.
[33mba9dd2b[m Fix mistake in r1450/r1451 which broke tests.
[33mcf10f00[m Make the REPL allow mutually recursive functions spread across multiple lines, like we do in script mode.
[33mdc213bc[m Implement basic REPL under swift -repl.  Known demo-blockers: need error recovery, need better brace/paren handling, need to implement the "print" part of REPL.
[33mee0e03a[m Remove unnecessary cast<>s.
[33m9cc9c33[m Enhance diagnostic for failed overload resolution with operator calls by printing the operator, adjusting the diagnostic to point to the operator and not the second operand, properly highlighting the ranges of the operands, and printing out the types of the operands when appropriate.
[33m3a44289[m Add a flag to enable library-style parsing/name-binding.  Add a test for library-style parsing.
[33m8528c79[m Rename types to first-letter-upper-case try #2.  The test suite is now passing for me.
[33md5421f5[m Update LangRef for the addition of '..'.
[33m3243108[m Introduce an new expression, MemberRefExpr, that refers to a member of an object. This expression kind is currently used to refer to properties within an object, but will eventually be extended to refer to fields as well (once we make StructDecl real).
[33m9009d29[m More strictly special-case '..'; making '-.' etc. an operator would be a complete disaster.
[33m6a001ef[m Make "..", "*^.^*", etc. into overloadable operators.  Make 1..10 construct a Range.
[33m37de44a[m Implement changes to parsing/sema/etc so that we can implement a REPL and the main module parses the same way as a REPL.
[33mfe8ab72[m Add a few interpreter examples based from samples from rosettacode.org
[33m83c1611[m VarDecls, even property VarDecls, are always lvalues. Make it so.
[33m970d3d2[m A property is only an lvalue when there is a setter.
[33m3584b0a[m implement the rest of support for casts that I care about.
[33ma9d01aa[m eliminate macro in favor of an old-school static function. Implement irgen of ptrtoint and inttoptr, which are only overloaded on one type.  Patch 1.5/2 of builtin cast support.
[33m4f4c8b1[m add initial support for Builtin cast instructions, patch #1/2.
[33m4fc32fd[m For a function that is either a getter or setter for a variable, provide a mapping back to that variable. Teach the mangler to provide a special mangling for such functions (__getVarName, __setVarName). The mangling will undoubtedly change later, but the point is that it will need to match the functions generated for a resilient variable.
[33m868eccf[m implement a new Builtin.gep operation which maps to the LLVM Getelementptr instruction, used for pointer offseting.  We can figure out inbounds later.  This is to be used by UnsafePointerInt
[33m0fdb4d0[m When we parse a 'var' declaration, we add all of the VarDecls and the PatternBindingDecl to the DeclContext. Do the same for the get/set functions for a property, so we don't need to perform 'deep' setting of the DeclContext. This is simpler, although it makes pretty-printing the AST a bit more difficult.
[33mb8127e1[m Make some topics in types <h3> instead of <h4> to show up in TOC
[33m8b6f142[m Wordsmith presentation of "fully-typed" types, add HTML links to this topic, and make header of this section match the name of the concept.
[33mc7c61ec[m remove the unary neg/not builtins.  They're not needed and don't match LLVM IR.
[33mbbd5dfc[m Allow variables with a getter or setter to be declared in a struct/oneof/class extension, making them instance methods. Normal variables are still not allowed in these contexts, however.
[33m0cc17a2[m Revert r1416; it shouldn't be committed until all tests have also been updated.
[33m525ae6a[m Add LangRef commentary that nested assignments are illegal, by design.
[33m91322c3[m Expound commentary on restricting the use of '=' as an operator.
[33mb15fcd6[m Make types have upper case first letter.  Fixes <rdar://problem/10964069>.
[33md571b74[m Add comment to LangRef that '=' is not a user customizable operator identifier.
[33m511195b[m Traverse the getter/setter of a VarDecl, so that we get type checking for these functions. And now that it's actually type-checked, build the getter's AST properly.
[33m62522bb[m add unary ~ to the stdlib for integer (not bool yet) types.  Teach the mangler to mangle it.
[33mcc421b2[m allow ~ as the first character of an operator.
[33m9bf8dcf[m Delete some dead code.
[33m1569d73[m Fix a crash involving extensions.
[33m7823cd4[m Wire properties into the AST for VarDecl, and add dumping support. No tests until we start type-checking something.
[33m9def4fa[m Actually make my getter/setter example well-formed. Thanks, Eli
[33m6ce55ac[m Parse getters and setters for variables.
[33m2599a55[m add ~ as an operator.
[33m8a7c6f7[m Eli points out that 4 is the max length.  apparently I can't handle this.  Thanks Eli! :)
[33mb01c3bd[m We need to eventually add unicode identifier support, but it is beyond the scope of what I intend to do right now.
[33m3e487d7[m Add HTML anchors for 'operator' grammar rules.
[33m09e051c[m reject invalid UTF8 characters in comments.
[33md19939e[m rearrange file a bit, no functionality change.
[33mc92cf52[m since we allow utf8 source files, start validating utf8 characters in string literals and test that they continue to work.  Part of rdar://11220029
[33mdcc3ab2[m Fix rdar://11087238, a crash on structs inside funcs.  This adds a source location to the implicit ExtensionDecl (fixing the crash) and also allows extensions that aren't at the top level.  Eventually we'll want to constrain where extensions can exist (for example, global types should require extensions to be at global scope?) but we don't need to do that now.
[33mc7f0d6b[m Implement rdar://11188044, adding #! support to the parser for main modules.
[33m2e3c720[m fix regex's for floating_literal because "0" is an integer literal not floating.
[33mba56d2c[m Implement support for lookup of members of the current oneof/struct/protocol within a static method. The lookup is performed on the metatype (as one would get when using qualified syntax Type.member). Add tests to verify that this provides proper overloading behavior.
[33maf2399c[m Significantly step up the validity asserting around the cleanup stack. With that in place, fix ~Scope so that it uses the same code for popping as Scope::pop() does, i.e. the code that modifies InnermostScope before popping out.
[33m13aa703[m Explicitly define a move constructor for SemaCoerce::CoerceDiagnostic, for compilers that don't implement the rules for implicitly defining one (e.g., Xcode 4.3 Clang).
[33m8b1244b[m fix an out of date example ted noticed.
[33m548c2e5[m Fix the beginning source ranges for dot expressions where the object argument is the implicit 'this' argument. Add a number of overloading tests for overloaded member access, which naturally exercises these source locations.
[33m4c97c19[m "Fix" a use-after-free when dealing with dead cleanups, where we try to look at the first element of an empty stack. The use-after-free triggers occasionally for me during normal testing (about 1 failure per 5 trials), but triggers on IRgen/func.swift regularly when using guardmalloc.
[33m7e9b7da[m Remove the general diagnostic-suppression mechanism. Instead, introduce a simple suppression mechanism into the type-coercion code, which is the only place we should need it.
[33m0146f89[m Merge GenRefCount.cpp into GenHeap.cpp.
[33m6b1a0a2[m Merge GenLocal.cpp and GenGlobal.cpp.
[33m5ad3782[m Rework the IR-generation of initialization and teach the compiler to enter properly-scoped cleanups to destroy local variables.
[33m828463a[m Pack cleanups a little better.
[33m3e59c64[m Fix a nasty bug when reallocating a DiverseStack.
[33mc36c7e2[m Include what you use.
[33m5c23fa7[m Move the initialization code out into its own file.
[33m3614818[m Introduce a notion of module scope declarations; use it where appropriate instead of checking for a local declcontext.
[33m065a74d[m Make sure we always explicitly set the DeclContext for a VarDecl built from a pattern.
[33m389dd1c[m Mark ~Cleanup() virtual to silence "has virtual functions but non-virtual destructor" warnings.
[33m6e473e8[m Mark ~PathComponent() virtual to silence a bunch of "has virtual functions but non-virtual destructor" warnings in subclasses.
[33m352453a[m Revert "Fix a bunch of "has virtual functions but non-virtual destructor" warnings"
[33mcedf889[m ASTWalker has virtual methods, its dtor should be virtual as well.
[33m9b2c6ac[m improve comment with some justification.
[33m8a61ea1[m Fix a bunch of "has virtual functions but non-virtual destructor" warnings
[33mb69aaa4[m Adjust CMakeLists.txt to account for new name of tblgen binary.  This allows me to generate an Xcode project for Swift using top-of-tree LLVM.
[33mac61437[m by popular demand, reject over-large codepoints.
[33mee0a2d2[m Robustify the lookup of members within a metaclass ever so slightly, by not allowing name lookup to return find struct or tuple members (which make swift crash).
[33mcac963c[m reject unicode encodings for surrogate pairs, and reject \x80 and above. This completes unicode validation for \x, \u, and \U.
[33m5fd74f7[m Fix comment.
[33ma3c34c5[m Introduce an AST node (OverloadedMemberRefExpr) that represents dot syntax when name lookup finds multiple candidates. Overload resolution is then used to select the best candidate and map the overloaded member reference expression down to DotSyntaxCallExpr or DotSyntaxBaseIgnoredExpr, as appropriate.
[33m4ff016d[m start diagnosing invalid UTF encodings, more to follow.
[33m2b1bcdc[m Implement basic encoding to UTF8, giving us the snowman.  Codepoint validation comes next.
[33mce7403d[m implement IRGen of escapes.  High unicode escapes aren't handled yet, but all the basics are.
[33m1bb2443[m document and lex the basic and unicode escape characters. IRGen after lunch.
[33me31361f[m Progress towards rdar://11216049 - Strings cannot span multiple lines, and \ is an escape character (not yet implemented).
[33m0cd849b[m Complete the pattern-matching IR emission logic, at least for exhaustive patterns.
[33m7faaf16[m Editorial
[33m344a0fb[m Change IR-gen to convert canonical types.
[33mf3e27d9[m Change IR-generation so that it emits metadata objects for the heap allocations it makes, and switch swift_alloc over to pass that pointer in as well as the alignment.  Also, compute whether a type is POD during its generation and cache that in the object, and introduce a method on TypeInfo to destroy an object in memory.
[33m6348a5a[m A bit of minor hacking to get print("hello") working.
[33mbb597c7[m Minor cleanup.
[33m2745679[m these types got renamed.
[33m508dcb3[m implement IRGen for simple strings.
[33m5650d08[m implement parsing, AST, and sema support for simple strings, no irgen yet.
[33m2223774[m use cached type, thanks John
[33m65b400e[m introduce a new "Builtin.RawPointer" type, which corresponds to LLVM's "i8*" type, and is just an unmanaged pointer.  Also, introduce a basic swift.string type.
[33mc78bdcf[m Initial lexer support for string literals.  The regex is trivial and will be extended in the future.
[33m779a9a3[m Err, revert the last patch; apparently scoped hashtables work in mysterious ways.
[33mce52704[m Remove unused variable.
[33mc24d6ec[m Factor OverloadSetRefExpr into an abstract base class covering the notion of a reference to a set of declarations. Introduce one derived class, OverloadedDeclRefExpr, which covers the only case we currently handle for overload resolution [*]: a direct (unqualified) reference to an overloaded set of entities. Future subclasses should handle, e.g., overloaded member references such as a.b or a.b.c.
[33m6379980[m Pull the lvalue-to-rvalue conversion into the type coercion logic. This eliminates spurious diagnostics when attempting to coerce (for overload resolution) between lvalues and rvalues. Also, improve error recovery and diagnostics when dealing with an incorrect '&' in the source.
[33ma949c76[m Use llvm::RoundUpToAlignment()
[33mc43698d[m switch to c++-style standard header.
[33mba09485[m zap an oddly duplicated header block.
[33mfbfb76a[m rename 'plus' methods to 'static' methods, resolving: <rdar://problem/10718220> Need a better name than 'plus' for "static" functions
[33m72c423f[m Fix a bug where we were failing to mark the variable associated with a heap l-value as heap, and add a test case to verify that we release the owner of the reference.
[33mca9f85d[m Add code for associating cleanups with intermediate evaluation results and then claiming or forwarding the ownership of such results.
[33medad637[m In preparation for Explosion storing some sort of cleanup pointer, add some APIs for working with non-cleaned-up entities.
[33m2a2059d[m Provide a more specialized diagnostic (+ tests) when coercion fails to resolve an overloaded reference that is not called.
[33m44677bc[m Fixes and embellishments, and actually make IR-gen properly emit release cleanups.  And they work!
[33m82da3ca[m Permit StableIP to be initialized as invalid.
[33m82ca0e7[m Basic infrastructure for cleanup emission and branches.  Totally untested!
[33m8196f40[m Add APIs to IRBuilder to capture a stable insertion point (which stays in the same place in a function even when the current IP is at the end of a block) and to temporarily shift the insertion point.
[33m665e821[m Publicize the stable_iterator members on DiverseStackImpl (since they're inherited from a private base class). Also add some extra consistency checking.
[33m0f3584a[m Downgrade integer overflow diagnostic to a warning, and don't let it have any effect on overload resolution.
[33mda96e3b[m CMake: Build swift_abi library as a shared library. This allows a CMake-built swift to work with -i mode, although one still has to symlink 'lib' appropriately.
[33m6d16863[m Fix comments to reflect LangRef.
[33m2493d2e[m Make LangRef for 'var' reflect what is currently implemented.
[33mf477cf5[m Introduce the notion of the "main" module, i.e. the module which defines main().  Disallow top-level statements in modules other than the main module.  Fix IRGen to generate a main() function in the main module, and implement top-level statements.  Get rid of the main() mangling hack.  Part of <rdar://problem/11185451>.
[33m2822ea9[m Mostly unbreak CMake build. However, we still won't properly find libswift_abi.dylib.
[33m22b7cd0[m Some minor incremental improvements for module import.  Allow explicitly importing Builtin, and implicitly import swift for any module which doesn't explicitly import Builtin or swift.  Fixes <rdar://problem/11185519>.
[33m15bc5df[m Rename Interpret* to immediate mode, which should be a bit more intuitive.
[33m7077046[m Get rid of ParseResult.  <rdar://problem/11018362>.
[33mf5e405c[m Cosmetic fixes.
[33md295d02[m Initial interpreter implementation.  The included pieces are enough to get the included simple.swift running in swift -i mode.  <rdar://problem/10962290>, part 1.
[33m5cf0a09[m Allow type coercion from one function type to another function type, so long as the input and result types are equivalent modulo renaming of labels. This conversion is a no-op.
[33m9c4f9b3[m Remove some uninteresting FIXMEs in the type-coercion code
[33mc86b40f[m Implement type coercion of an overloaded declaration reference that is not being called directly. We previously had a simplistic implementation that required exact type matches; loosen this to simply require coercion, as well as diagnosing ambiguities/lack of suitable candidates.
[33mc28157f[m Make retain/release NULL check object for now
[33m2bf38b5[m Fix an issue where we were failing to type-check calls to single-parameter functions with a literal argument. The argument therefore had unstructured dependent type, and there was no reason to reject it in the first place.
[33m9424413[m Remove ElementRefDecl and DeclVarName.  Add the replacement, PatternBindingDecl.  Use proper pattern parsing for variable declarations.  Uniformly use PatternBindingDecl for variable initialization.  Adapt type-checking and IRGen for this new style of variable declaration.  <rdar://problem/11124980>.
[33m29b4a21[m Rename TypeChecker::convertToType() to TypeChecker::coerceToType(), so that we're slightly-more-consistently using the term 'coerce' to refer to this process.
[33m79ed496[m Implement filtering of overload sets based on argument and destination types. Use this simple overload resolution scheme in both type checking and type coercion, simplifying both code paths a bit.
[33m77ec9a6[m Make more of SemaCoerce's members private
[33mbfe7ff2[m Extend the AST walker that performs type coercion to have two modes: one that performs the coercion on the AST and produces diagnostics for any problems, and one that simply determines whether the coercion would succeed. The former already existed (as TypeChecker::convertToType), while an approximation of the latter was already implemented as Expr::getRankOfConversionTo(). Unifying these code paths addresses several issues:
[33m86d50f9[m Fix the include guard to match the new header name
[33m1a27fd5[m Stub implementation of Allocation ABI logic so that we can make forward progress
[33ma61b68e[m Shuffle ABI files around
[33mcbfc7ec[m Remove pre-maturely commited runtime code
[33m43de14d[m Create ABI subdir and move proposed alloc stubs inside
[33m2c3b36a[m Only call applyTypeToLiteral() from within the type-coercion code.
[33m4980219[m Add a "diagnose()" method to SemaCoerce for coercion-related diagnostics, rather than going directly to the type checker's similar method.
[33m02b250c[m Actually create ImplicitThisTupleElementExpr expressions when we don't have the location of the '.'. Prior to this, ImplicitThisTupleElementExpr was completely unused.
[33m3299d8b[m Eliminate BinaryExpr::getArgTuple(). The argument to a binary expression will always be a two-element tuple, but it may not always be a tuple literal. In the near future, it could also be a tuple shuffle.
[33mcb1d2ca[m implement a new CanType subclass of Type, for use when we known that we have a canonical type. Unlike Type, it implements equality operators.  It is returned by Type->getCanonicalType().
[33mc76edd6[m Remove Expr::setDependentType(); it's not really documenting anything, and with structured dependent types, many more setType() calls actually would have to be setDependentType() to be documenting.
[33m5c6b3df[m Use unstructured dependent types in a few more places
[33me6bb114[m Don't null out the subexpression of a grouping parentheses expression if there's an error.
[33mf370acc[m Introduce the notion of structured dependent types, such as a tuple type with one or more elements of dependent type. Previously, an expression such as (x, 5) would have the (unstructured) dependent type, limiting our ability to type-check the subexpression 'x' early. Now, if 'x' has type 'int' (for example), this expression will now have the type (int, <<unstructured dependent type>>).
[33m2c710fc[m We don't care about -Wnon-virtual-dtor
[33m4cc616f[m Rename the DependentType class to UnstructuredDependentType, because this type is only going to cover dependent types for which there is absolutely no structure. Still no functionality change.
[33m2237178[m Introduce TypeBase::isDependentType(), and use it rather than checks against the DependentType class. No functionality change.
[33mf697dfc[m Unbreak CMake build
[33mdebd036[m Fix a couple crashers for tuples with default values.
[33mb65f969[m Replace ":foo" syntax for oneof members with ".foo".
[33mbc73d19[m Add an unsupported error for curried local functions for the moment.
[33m4384ef1[m Add IRGen for local FuncExprs.  (This doesn't support local FuncDecls yet.)
[33mfb10b02[m Basic capturing appears to be working correctly; turn it on.
[33m29f3fca[m First iteration of CaptureAnalysis.
[33me173985[m Re-pack a few Expr nodes for the inevitable switch to 32-bit source locations.
[33m5fffa75[m Remove empty throw specifications from all of the overloaded new operators; reduces code size by 8k
[33mc6db376[m Remove empty exception-specification from operator new; it pessimizes callers
[33m8f8ae8a[m Unbreak CMake build.
[33m99b75ce[m Further progress on captures in closures.
[33md1d3d67[m Work in progress for IRGen of captures... any suggestions for a better way to write the code involving the capture block would be welcome.
[33m09ba5b5[m Fix uninitialized members in DeclAttributes.
[33m5e38419[m In a currying forwarder, force the release of the data allocation between the point at which values were loaded out and the point at which the call is performed.  This is bad for some things, like not spilling all the arguments, and good for others, like not keeping the allocation around unnecessarily and being able to do a tail call.
[33maafaae2[m Properly include the heap header when laying out structures for the heap.
[33mb0aca87[m Switch the compiler's internal definition of struct SwiftHeapObject to match the header (by adding the refcount field).
[33m51608f5[m Strawman swift_runtime.h.
[33mad5e4c5[m Test case for really basic functionalit with Builtin.ObjectPointer.
[33md789a32[m Module and metatype types are first-class right now, so don't fail to handle them.
[33mcbad8bf[m Fix crash with "!=" overloads.  <rdar://problem/11115904>.
[33md2bbf81[m Zap AnonClosureArgExpr.
[33m7f925de[m Trim stale forward-declarations.
[33m173d750[m Switch IR-generation to use ASTVisitor, or more precisely, to use irgen::ASTVisitor, which is a subclass of the AST version that always looks through some expressions and asserts that others (the unchecked/error ones) can't happen.  The main obstacle to that is access control, because it's quite nice to have the visitor be a non-local class for nesting purposes, but that makes it impossible to use private methods anymore. It's nice to give all the type-specific emitters private interfaces anyway, though;  that ends up being most of the patch.
[33m95f97e8[m The DeclRetTy of an ASTVisitor is the third argument.
[33mdf7ebcd[m Introduce the concept of an 'owned address', i.e. an address with an owner attached.  Use this to implement [byref(heap)].  Force locals to the heap if they've been referenced in a way that requires this.
[33m2cbf897[m Convenience methods for querying whether an l-value type is qualified 'explicit' or 'heap' or whatever.
[33m3a969e5[m remove something old.
[33m01dbc43[m unify code for diagnosing overload sets resolved to no candidates.
[33mf7f5894[m Implement overload set pruning based on whether a call happens in a unary or binary context.  This allows us to discard binary "-" candidates when in a unary context.  This is enough to resolve the last ambiguity, implementing <rdar://problem/11088443> The expression "-1" always has type int
[33mf78a4e0[m implement a bit of context sensitive overload set resolution, resolving some fixme's in name-binding and making progress towards 11088443
[33ma940cdd[m Compute capture lists for FuncExprs and ImplicitClosureExprs.
[33m744bf2d[m unify the call handling code into a single visitApplyExpr implementation, move it out of line.
[33m80b5561[m Start of computing captures for CapturingExprs in the AST; only works for ExplicitClosureExprs so far.  Per previous discussion, anything which can be captured goes through the relevant codepath in Parser::actOnIdentifierExpr.
[33mea17adc[m Completely switch over IRGen for closures to use the standard prologue/epilogue emission.
[33m61c2a9e[m Fix error-checking for UnresolvedMemberExpr coercion.  Some minor improvements for coercion and lvalues.  Converting dependent types still has a lot of issues.
[33mfdc45c7[m Store the VarDecls and Patterns for AnonClosureArgExpr and ExplicitClosureExpr in the AST.
[33md949198[m Reorganize some code to permit primitive type infos to be created from other translation units.
[33m5a4dfb6[m Beginnings of support for heap-allocated locals.
[33m99a6c4c[m Cache %refcounted* null.  This will be particularly important for heap l-values.
[33m03be725[m Document the qualification-conversion function.
[33md6b05b3[m Document the various cached bits of IR on IRGenModule.
[33m618cfc4[m Build VarDecls and a Pattern for the paramters for an explicit closure.  Not used yet.
[33m8ece7c0[m Fix a few minor typos.
[33md39a7ab[m Implement CapturingExpr.  In addition to unifying the hierarchy between FuncExpr and ClosureExpr, this introduces a DeclContext for ClosureExprs.  <rdar://problem/11076715>
[33mbd12853[m Stay conservative about emitting LoadExprs in ignored contexts.
[33md699e00[m Teach IR-gen how to efficiently emit a broad range of expressions when no value is required.  Teach IR-gen to emit DotSyntaxBaseIgnoredExprs as known function references with possibly non-trivial semantics. Undo the change to getSemanticsProvidingExpr().
[33m1a4b945[m Flag in a ValueDecl whether it's ever been used as an l-value or a heap l-value, except to immediate convert it to an r-value or a non-heap l-value.
[33m2fd608a[m Add basic parsing and type-system support for the byref(heap) qualifier, making sure that variables end up so-qualified by default.  Add a RequalifyExpr to capture the act of adding qualifiers (to form a supertype) to an l-value.
[33m8aafdda[m after an epic refactoring fest, finally implement ivar/method lookup in methods, resolving rdar://10682135.
[33m388eb65[m move construction of ast for dot syntax out to NameLookup.  No functionality change.
[33m6185ab6[m move getImplicitThisDecl to FuncDecl where the other 'this' handling stuff goes.
[33mce717d2[m teach IRGenFunction::emitIgnored to handle expressions of module and metattype type. Teach Expr::getSemanticsProvidingExpr to look through DotSyntaxBaseIgnoredExpr. Start generating DotSyntaxBaseIgnoredExpr for all dot syntax exprs where the base is ignored (e.g. "Builtin.mul_i32"), which preserves a lot more source location information and is general goodness for the AST.
[33m0ab662f[m fix -ast-dump of moduleexpr.
[33m4e4c1bf[m rename DotSyntaxPlusFuncUseExpr -> DotSyntaxBaseIgnoredExpr to properly represent its newly generalized role.  It is formed for things like "swift.print" where swift is a module type and is evaluated and ignored.
[33me7cd357[m reimplement TypeChecker::semaUnresolvedDotExpr in terms of the new MemberLookup class.
[33m92f3d6a[m checkpoint, nothing useful here.
[33mf986dba[m Add a new file to handle name lookup tasks, implement a bunch of stuff that will eventually be centralized "dot" lookup mechanics.
[33m1ecef66[m elimiante TC member.
[33m1884e49[m refactor some code out of Sema into AST.
[33mafbd74b[m Add additional verifier support for ApplyExprs.  <rdar://problem/11007947>.
[33m52598e0[m Kill more unnecessary 'Exploded's from method names, and do a minor reorganization with CallPlan.
[33me52c4d6[m Misc LangRef fixes.
[33me020724[m Distinguish between assignment and initialization, and fix some problems with the data pointer of function types.
[33m4b5fe8f[m Make Swift's IRBuilder::CreateLoad allow a name to be assigned, and add a CreateStructGEP for Address.
[33m0a012fc[m Initialize the retain/release function caches.
[33m53de72a[m Pull an unnecessary 'Explosion' out of some names.
[33md76aaea[m Remove the outdated RValue concept;  no functionality change.
[33m8831d35[m The data pointer is also reference-counted.
[33m1f118db[m Basic support for Builtin.ObjectPointer as a completely opaque type.  Also some rudimentary support for retain/release.
[33mb5908a7[m Fix pretty-printing of builtin types:  we use . instead :: now.
[33m975068c[m Add a simpler walker to find all the variables captured by a closure.
[33m2c4cc01[m Make sure we consistently assign LLVM IR names to both function parameters and allocas created for those parameters.  <rdar://problem/10934320>.
[33md466059[m Add support for IRGen for $0 etc.
[33ma6a27d8[m Very basic support for closures in IRGen.  Support for closures with arguments is next.
[33m595676a[m Limit the number of potential getLogicValue() calls for a conditional to 2.  Per Chris's comments.
[33m60d9b2a[m intermediate progress on rdar://10682135, nothing particularly useful so far.
[33m4c5f406[m don't crash when printing a decl that doesn't have its type set yet.
[33mc32bf34[m fix inverted logic.
[33m11f3d2b[m implement a method to get the 'this' argument for a FuncExpr if there is one.
[33mf3b62f0[m enhance astwalker to allow implementations to control pre/post-order visiting of decls.
[33mb54d2bc[m rename Walk.cpp -> ASTWalker.cpp
[33m0cccfe9[m rename the Walker class to ASTWalker to match ASTVisitor.
[33m0340dd1[m rename Walk.h to Walker.h to match the name of the class it declares.
[33m3b0db63[m introduce ImplicitThisTupleElementExpr, progress towards 10682135. IRGen should really use visitors for expr emission...
[33m636ba08[m eliminate some manual forwarding that is now redundant.
[33m7c2da88[m Put 'Expr' in the right place.
[33mfc0c1a7[m make the printer be precise.
[33md75f76a[m split TupleElementExpr into an abstract TupleElementExpr class and a concrete SyntacticTupleElementExpr class.  One step towards resolving rdar://10682135.
[33m6728019[m enhance ASTVisitor for expressions to automatically synthesize visit methods for nodes that are not handled by a visitor.  Make their implementation chain up to a parent node's implementation.  For example, a (silly) visitor could choose to just implement visitExpr and get all nodes.
[33m90e3ac1[m document the auto_closure attribute, wrapping up rdar://10983400 - Need function argument attribute to enable autoclosure
[33me3f6f4b[m Convert test cases to use the new auto_closure attribute, inform conversion ranking about auto_closure, and rip out the CR_AutoClosure implicit conversion.  Our conversion ranking is now completely trivial: we either have an identity conversion or an invalid one - no crazy implicit conversions (still have tuple shuffles etc though).
[33m630dc9c[m implement semantic analysis for autoclosure functiontypes, building ImplicitClosure as appropriate.
[33m71f351e[m fix the autoclosure bit to be properly canonicalized and preserved when building functiontypes.
[33mcd108af[m reject auto_closure on decls.
[33m494aa18[m prune #include
[33m145d926[m Perform sema of FunctionType's that have auto_closure behavior, building a bit in FunctionType.
[33m01b184a[m parse the auto_closure attribute.
[33med436cf[m Forbid the declaration of a custom unary '&' operator.
[33m787e212[m Diagnose all attempts to immediately load from an explicit l-value.
[33mb2a2027[m Revert r1144, r1145, and r1146.  These changes (which removed ParenType in favor of a single-element non-canonical TupleType) broke the type system, in that supposed sugar (the TupleType) supported a different set of operations from the canonical type.  For example, a single-element unlabelled tuple type supports elementwise projection (foo.$0), but the underlying element does not (or supports it differently).
[33mb8b1694[m Complain about file names that aren't valid identifiers. When we divide the world into scripts and modules, this won't matter for the former.  Recognize <stdin> as a special case;  it should instead just always be a script. Fixes rdar://problem/10986311.
[33m4f80408[m improve a comment.
[33m9e87337[m move attributes out to their own .def file, to match expr's and stmt's. Part of rdar://10719165 - Clean up attributes code
[33m6151913[m remove obsolete description of logic_value.
[33m1801605[m Add basic infinite loop checking for conversion for conditional, per John's comment.  There's probably some way I can't think of off the top of my head to write an infinite loop this doesn't catch, but it should be enough to catch obvious mistakes.
[33meada7c6[m Make sure we catch 0x/0o/0b which isn't followed by an appropriate digit.  Per Chris's comment.
[33m862646c[m Perform conversion to bool in conditionals by repeatedly calling ".getLogicValue()" on the value until we reach Builtin.Int1, instead of using convertToLogicValue().  <rdar://problem/10100856>.
[33m50c95e7[m resolve the FIXME.
[33madcf0bc[m Expand out radix detection in applyTypeToLiteral so it uses the same rules as the lexer, instead of using StringRef's autosensing rules.  This makes octal literals work correctly.  Finishes <rdar://problem/10700832>.
[33m6c439ec[m Add grammar for hex/octal/binary literals.  Not completely sure this is the grammar we want (how do we want to handle 0b1a?), but it appears to work.  Sema already handles hex and binary; still needs a bit of hacking for octal.  <rdar://problem/10700832>
[33m8f02e3f[m Make sure we correctly apply lvalue-to-rvalue conversions for CallExprs.  <rdar://problem/10934313>.
[33m48f0f1d[m Fix assertion failure on tests.
[33mddffb63[m Fix build errors with clang-421.
[33m22df695[m Tighten up some logic, finishing off rdar://10666917 - Anonymous closure arguments must be in {}'s
[33m5f7679e[m restrict autoclosure to only happening when the destination function type has an empty tuple as an argument.  This should be restricted even more (rdar://10983400) but this eliminates the most surprising cases at least.
[33md3b8e8b[m Now that we have a list of all argument uses in a closure, eliminate BindAndValidateClosureArgs and replace a tree walk with a simple linked list traversal.
[33m82d73b0[m move visitExplicitClosureExpr out of line, remove the now-dead IgnoreAnonDecls argument to SemaCoerce::convertToType
[33m7b2660d[m Whenever a AnonClosureArgExpr is parsed, immediately add it to a list on the containing and owning closure.
[33m4fde79b[m have the parser keep track of the current explicit closure and diagnose when an argument is found outside any closure.
[33m0cf1e5e[m update testcase to use {} with $42 arguments.  Remove binding of anon closure arguments from implicit auto-closure.
[33m477b614[m diagnose a mismatch of a closure body with its inferred return type.  For example:
[33mc9a0aa6[m bind anonymous closure arguments in an explicit closure.
[33m2564713[m Implement parser and the first part of sema support for explicit closures.  Start by rejecting closures inferred to have non-function type.
[33mf13a615[m rename expr-anon-closure -> expr-explicit-closure. Change the wording to claim that $0 is only valid in an explicit closure.  Add a note about possibly generalizing closure syntax in the future.
[33m6aac931[m add an AST node to represent explicit closures.  Not yet created.
[33ma4beb5f[m factor some expr printing logic.
[33m3a6e84f[m Add a new "ImplicitClosureExpr" subclass of ClosureExpr to represent the autoclosure case.
[33m601e401[m document the forthcoming expr-anon-closure syntax, part of rdar://10666917
[33mce9d3c4[m remove Parser::isStartOfExpr, which is only used by one caller that can be done in a simpler way.
[33mc638af6[m update comment.
[33m2d7baba[m clean up some stuff around function argument types.
[33m6641b06[m remove ParenType, which is now dead.  Grouping parens are represented as non-canonical tuple types.
[33m2b65dca[m Change how we handle grouping parens.  Instead of (x) being ParenType(x), it is now a single element TupleType(x).  In order to preserve sane behavior, we force grouping parens to be non-canonical and have them desugar down to their underlying element type.
[33me40a27c[m update langref for r1142
[33mf8b363f[m enforce a syntactic form that function argument lists must be parenthesized, part of rdar://10666966
[33m58b4a5d[m have the parser produce ErrorStmt nodes to handle semantic errors... except that it never produces semantic errors.  How about that.
[33m0169b2c[m introduce a new ErrorStmt node to represent invalid code in the AST more precisely.  Part of rdar://10962837
[33m6692cba[m simplify expression parsing to return a NullablePtr<Expr> instead of a ParseError<Expr>. The later could represent semantic errors, but we'd rather represent those with an ExprError node instead.  This simplifies the code and allows the parser to build a more fully-formed AST that IDE clients will like.
[33m21c8b4d[m implement a more-sane floating point literal syntax, adding support for exponents.  This resolves rdar://10877508
[33mb49cf74[m doh, make that IntegerLiteralType.
[33ma7cd920[m rename integer_literal_type -> integerLiteralType.
[33m1076367[m implement rdar://10962528 - split up the int/fp literal lexing and grammar. This cleans up handling of int/fp literals by splitting them appart at the lexer level.
[33mdd5df29[m rename convert_from_integer_literal -> convertFromIntegerLiteral to follow the naming convention, part of rdar://10962528
[33maa39667[m disallow destructuring a struct with a var, e.g.:
[33mabb70d7[m remove dot syntax for tuple elements.  Instead of (.x = 4, .y = 5) use the simpler and newfangled (x = 4, y = 5) syntax.  rdar://10962605
[33md3d724c[m rename Builtin.int -> Builtin.Int
[33m17ea0a6[m finish my pass over LangRef, updating it and changing it and the parser to keep the grammars in sync.
[33maf553c2[m random minor updates
[33m831894e[m checkpoint progress updating langref (down to 'var'), still much to do.
[33mee89183[m attribute-list is nullable, so it doesn't need to be optional, this matches lang-ref.
[33mee0f2bb[m var names cannot be operators.  We already diagnosed this at sema time, but it's better to catch it earlier to make the grammar more clear.
[33mcd29a77[m introduce a new parseIdentifier method that *just* parses identifiers, but not operators.  Audit calls to make sure that we use the right one in the right places.  This allows us to reject structs named * for example.
[33mdd0c5af[m Rename parseIdentifier to parseAnyIdentifier to match langref and make it clear to it also allows operators.
[33m5b98c50[m Implement all the integer comparison operators in swift.swift.  Despite the indirection, each of these compiles into nice simple IR at -O3, with:  swift swift.swift -I test -emit-llvm | opt -O3 -S | less
[33m7139336[m implement a few more primitives in swift.swift
[33m81ed106[m change the builtin fp types to be FPIEEE32 instead of FP_IEEE32.  They're completely private and this simplifies buildin processing, which wants to use _ for overloading.
[33m1d6d89a[m implement support for overloaded builtins with floating point operands. Use that to implement operator* for doubles in swift.swift, remove the implementation from stdlib.cpp.
[33mc8b7492[m fix warning: stdlib.cpp:52:2: warning: no newline at end of file [-pedantic]
[33m00b97b3[m Grab-bag of materialization-related changes:   - introduce the concept of qualifiers on l-value types   - teach overload resolution and coercion how to drop explicitness   - require explicitness on normal [byref] arguments   - make 'this' [byref(implicit)]   - special-case '&' as a unary operator in the parser to make it     produce an expression which type-checks as turning implicit l-values     into explicit ones.
[33mbf2ec19[m The very beginnings of a very primitive run time library
[33m9038a38[m We will need a DiverseStack<T> for cleanups, but a stack is really the wrong structure for an l-value.  Use a list instead (that is, something which allows efficient iteration forward through the collection).
[33m803cff8[m Correctly emit references to oneof elements that carry no data. These translate to implicit calls to the injection function.
[33mcd4c7f7[m Implement the emission of oneof injection functions.  As always, oneofs other than enums and singletons are not really implemented.
[33ma9120cf[m Stop storing the lvalue-projection bit on TupleElementExpr and LookThroughOneofExpr.
[33m01a53ac[m improve comment.
[33m2b65cf2[m Make 'this' implicitly [byref] when the container type does not have reference semantics.  Deciding whether the container type has reference semantics requires us to perform some amount of limited name-binding and type-checking first, which introduces a few complexities.
[33m7b29a42[m Design and implement the [byref] attribute, checking that it doesn't appear in places it shouldn't.  The only limits on this checking right now is the inadequacy of location information for types, which is something we ought to fix.
[33mca70a29[m Missing files!  Sorry!
[33m7f60469[m Introduce the notion of a "fully-typed" type, necessary because tuple types can have defaulted elements.  Check for it and complain in function signatures.
[33m5a3567f[m Diagnose attempts to declare operators with anything except 'func'.  It doesn't make any sense to me for operators to have variable semantics, and it's unnecessary complexity in the type-checker.
[33md0f4d86[m Use LValueType everywhere instead of the l-value value kind. Kill off TypeJudgement.  Various fixes and improvements.
[33m5f1bcd7[m Move all the side-allocated members of ASTContext to a single side-allocation.  This is both easier to work with and extend and slightly more efficient.
[33m6ff9afb[m Introduce LValueType.
[33m6d8837d[m Macro metaprogramming for types.
[33m76ad8ff[m Add more parentheses to Types.h.
[33m3b4f155[m Update the language reference for the basic pattern grammar and the function signature changes.
[33me66c13c[m Change the 'walk' APIs to use virtual function dispatch instead . 1,2d 1i Change the 'walk' APIs to use virtual dispatch instead of blocks.  This makes it much easier to thread information through the API, as well to extend the API to handle recursive visiting of other structures (e.g., Decls and Patterns).
[33mce7780a[m I don't think we're really getting anything out of ArgDecl at the moment.  We can put it back if I'm wrong.
[33m16f8b2e[m Revise the language design for function argument clause syntax. A function argument clause is now one or more patterns (which must be parenthesized and explicitly type all positions) not separated by arrows;  the first arrow then separates off the return type.
[33md93cd14[m Use llvm_unreachable to permit optimization based on this case being invalid.
[33m4f1b3de[m When the parser crashes, note where we are on the crash report.
[33m14aa93a[m Publicize an API for printing out a source location for debugging purposes.  Add a PrettyStackTraceLocation for noting that we're currently processing a fixed location.
[33mecb7bbc[m Basic ASTs for pattern-matching.  We're going to generate these for FuncExpr signatures.
[33m430fbcc[m Set up a simple query which asks whether a type is known to be a single retainable object pointer.
[33mea6d6f6[m Define ResilienceScope, which is used to make optimizations more aggressive when their ramifications are purely local.
[33mb85ddcb[m IR generation for curried functions.  For now, parameters are stored in a malloc'ed buffer that gets leaked.
[33m883a167[m Extract out struct layout into a separate file.  No clients yet.
[33mbab9ca3[m switch TupleExpr to use MutableArrayRef.
[33m4ef27b8[m simplify some code to use a foreach loop.
[33m599e4b2[m switch to using the new llvm::MutableArrayRef class, this requires llvm r148463
[33m2eac7d8[m random updates.
[33m594c117[m remove a dead diagnostic, simplify the top-level translation unit parsing gunk
[33m27f47dd[m eliminate the concept of a singular expression, which is obsolete and not in lang ref.
[33m1c7d9f7[m simplify value-specifier code to eliminate the 'expr single' previous special case. Since we reworked how expression binding works, this complexity isn't needed anymore.
[33m5786863[m start updating some dox.
[33m213d613[m It is no longer necessary to remember all the ArgDecls in a FuncExpr.  This coincidentally means that we can create the FuncExpr before we create the ArgDecls and thus avoid the need to reparent them all.
[33mb7e0b0e[m Now that TupleTypeElts tell us directly what ArgDecls are bound, bind ArgDecls correctly in uncurried functions.
[33m7c36780[m sink the 'Init' field from ValueDecl down to VarDecl (as Init) and FuncDecl (as Body), liberating the other ValueDecl's from its baggage.
[33mda63006[m increase specificity of accessors.
[33me3298d8[m rearrange some code to simplify it.
[33m23a7fb4[m now that name binding doesn't have weird "only kill some subtrees" behavior, switch it over to a standard walk.
[33m0587519[m remove some bogus code now that name binding doesn't kill subtrees.  Spare the forest!
[33med7062c[m instead of having name binding kill off entire subtrees that contain invalid variable uses, have it turn the ivalid use into an ErrorExpr.
[33m584ed53[m introduce a new ErrorExpr to represent a subexpression that is semantically inconsistent (so it needs to be killed) but that we want to retain source range information and not kill the entire subtree that contains it.
[33m610e14e[m Use a PrettyStackTraceDecl to note that we're emitting the body of a particular function.
[33m603f7a1[m Modify this to not do a direct access to a private member. I filed Clang PR11793 to track the apparent lapse in access control.
[33m167129d[m stop using ValueDecl::getInit
[33m7d0f7d5[m improve type safety and specificity a bit, the body of a function is always a FuncExpr.
[33m4477b90[m Require creators of initialized TupleTypeElts to provide both of the semantically-important fields.  Make the default constructor trivial, or at least closer to trivial. Provide a space in TupleTypeElt for the parser to drop in the ArgDecl corresponding to this element.
[33mcb80e12[m improve redefinition diagnostics since all type aliases are definitions, not declarations.
[33mea5e37e[m Getterize uses of TupleTypeElt.  I'm trying to figure out how parameter attributes should work here.
[33mfa2ea94[m always turn a named reference to a type into an IdentifierType. This preserving source location info and reduces redundancy in the parser.
[33m1c42e8f[m rename DottedNameType to IdentifierType.  It captures loc information for random uses of type names, among other things.
[33m94cc353[m add missing newlines at end of files.
[33m9c63d1e[m Fix a bug with curried function emission and teach the mangler to differentiate uncurried and curried function types.
[33mac190ab[m completely eliminate the type symbol table.   "boom".
[33m2f7cd03[m switch type lookup to use value lookup for everything.  Dead code ahoy.
[33m9a3d4db[m inject explicit type aliases into the value symbol table.
[33me51139a[m inline lookupOrInsertTypeNameDecl into its only caller.
[33md83d5cf[m "IsUsedAsType" is always true now, nuke it and logic around it.
[33mfaa439f[m rip out a bunch of dead logic from the Scope stuff.
[33m3303aac[m I must have accidentally disabled all the move logic in DiverseStack at some point, reenable it.
[33m51e4489[m rip out now-dead code from NameBinding.  It still generally needs to be beaten into sense later, but this gets it closer to reasonable.
[33mc8ca11a[m Drop in the new DottedNameType and wire it up in name binding. This is horribly hack and slash (but enough to pass all tests) for a few reasons: - I've #if 0'd out the tendrils of the old code - This handles *just* what was handled before instead of being more general - We don't have an llvm::MutableArrayRef type, so there is some really gross   const_cast'ing and other struggles to deal with its absence.
[33m4f81939[m introduce DottedNameType, which will eventually be used for foo.bar in a type context.
[33m8f60daf[m Recommit r1044 out of spite.
[33m26fbede[m revert r1044, it looks like Linking.h wasn't 'svn add'ed.
[33m2fa6d32[m Propagate currying/explosion information down to the mangler.  No functionality change.
[33mf5e5b41[m push OverloadSetRefExpr::createWithCopy through to the rest of the call sites that can benefit from it, reducing redundancy.
[33mfab4ef8[m introduce a new OverloadSetRefExpr::createWithCopy method to eliminate some redundancy in the code that always has to create an overload set or a single declrefexpr depending on what various lookups produce.
[33mf1db6de[m remove the :: token and DCE UnresolvedScopedIdentifierExpr.
[33mc5c81c6[m Implement dot lookup on module types, allowing things like Builtin.add_int32 to find the add_int32 member of the Builtin module.  :: is now dead.
[33m9d10d23[m implement support for normal lookup to find module names, and build a ModuleExpr of the right  type to represent it.  Not tested yet, because nothing can handle module exprs.
[33m82bf169[m implement ModuleType::get.
[33m44da666[m Move ExplosionKind to IRGen.h so that using it doesn't require Explosion.h.  This is just to isolate the parts of IR-generation that shouldn't have anything to do with emitting code within functions.
[33m5dde760[m Switch function prologue and application over to using Explosion and teach them about currying.
[33m1ec9db4[m Provide helper methods to look through parentheses.  Learning from Clang, actually give these explicit high-level behavior rules so that it's clear what should be added to them in the future.
[33m4b8a147[m change the type grammar from qualifying a type with module::typename to module.typename.
[33mbe666df[m introduce a ModuleExpr node.
[33m73570ac[m introduce a new ModuleType, which will be the type given to ModuleExpr's.
[33m5ab30d7[m implement lookup of extension methods with a type as a base, e.g. type.extensionmethod.
[33m22b7ed9[m Eliminate the implosion/RValue-projection code, which is now dead.
[33m5b1fbce[m More renaming.
[33m16ebb9e[m Rename.
[33med47f92[m remove the ability for a::b to resolve a member 'b' in type 'a'.  It now just works for module references like Builtin::int32.
[33mf5799a5[m don't inject the struct constructor into the containing translation unit, because this will affect name lookup done by the name binder, causing an ambiguity error.
[33mbe7d7ff[m print the members of an overloadsetref_expr.  We can handle the truth.
[33m0e638a0[m IR generation for plus func references.  I'm not convinced that we should permit these references, really.
[33m6db2a3a[m implement support for Ty.member to represent the same thing as Ty::member.
[33m5d3158b[m Simplify this now that the base of an unresolved dot reference is always non-null
[33m82cb8e3[m change the prototype for semaApplyExpr to allow it to retunr a new node, allowing it to build ConstructorCallExpr correctly.
[33m59bed69[m Introduce a ParenExpr to represent the special case of a tuple with one element and no labels.  This form is treated specially in essentially every case, so it might as well be its own expression kind.
[33m286abfc[m Mostly kill off RValue.  More tomorrow. :)
[33mc1d68d9[m constructor call and dotsyntaxcall are just sugar for applyexpr.
[33meb165f0[m ok, take a big jump and inject the metatype for a oneof into its scope... instead of injecting the constructor function for a struct.  Everything still seems to work!
[33m4722564[m fix enough to get MetaType constructor calls to be able to resolve slices of oneof's. In this case we're resolving ZeroOneTwoThree(1) to ZeroOneTwoThree::One(1)
[33m4c050c0[m Fix a nasty type checking bug (exposed by my next patch), where we would lose a required type conversion in the presence of integer literals and dependent types.
[33m885783a[m Start switching things over to using explosions.
[33m0ed1f41[m also don't crash on an integer literal type if the type is null, which happens before type checking.
[33mb693da6[m fix -ast-dump to not crash on integer literals with dependent type.
[33m1d38f0d[m don't abbreviate the AST in -ast-dump, it is more confusing than useful.
[33me3a97a5[m enhance type checking of apply exprs to handle application of an argument list to a metatype.  No functionality change since nothing injects metatype'd values into a scope that can be looked up yet.
[33m9f5d37d[m introduce a new ConstructorCallExpr node, which is sugar node used to represent the syntactic form of an argument list applied to a metatype.  Semantically, this is yet-another ApplyExpr.
[33mae11ec7[m Fix CMake build and sync up exception specifications
[33mc7bcadf[m On further reflection and use, the concept of an RValue is not actually very useful;  it is much more interesting to divide r-value emission into "to arguments" and "to memory" models.  To that end, introduce a new structure for holding an "exploded" r-value.
[33mb012616[m getTypeJudgement() should now work on TypeAliasDecl's.
[33m37cb633[m Change TypeAliasDecl to be a ValueDecl, whose type is MetaTypeType.
[33ma4c22e9[m add a hunk missing from previous patch.
[33m173df87[m implement the construction for MetaTypeType's and plug a leak of the ParenTypes map.
[33m627b055[m MetaTypeType doesn't refer to a oneof anymore, it refers to any named type, which means it wraps a TypeAliasDecl.
[33m7249239[m Fix some issues where ScopeInfo::addTypeAliasToScope would return an existing definition (in the redefinition error case) and then clients didn't check to see if the typealias was already filled in. They would just clobber an existing typealias.  Solve this by ensuring that addTypeAliasToScope always returns a new decl.
[33me22a30a[m revert r995: "introduce MetaTypeDecl (though nothing creates it yet)".
[33m89587ef[m add a comment.
[33mf204abf[m introduce MetaTypeDecl (though nothing creates it yet)
[33m527c58f[m implement MetaTypeType, the type system representation of a metatype.
[33ma87944a[m Per discussion with Chris, this assertion is over-aggressive.
[33m7e2b5e5[m Missing cases.
[33md559794[m Introduce a new kind of sugar, ParenType.  A tuple with one anonymous member is actually one of these.
[33mbf932b3[m When type-checking a return, walk down through parameter clauses the same way we do when setting up the scope.  This makes us check extensions correctly, but breaks other tests;  more design is required.
[33mb737b11[m modernize ProtocolType a bit to follow the form of OneOfType
[33m05495d6[m Check that assignments are to l-values.  It really is this easy.
[33mb2569c7[m Provide PrettyStackTraceEntries for Expr* and Stmt* as well, and type-check functions within the former.
[33m5022a63[m Aggressive dead code elimination.
[33m0138e45[m Look through extension decls here, too.  It's not clear to me why we can't just the normal walker for this top-level walking.
[33m5bdea18[m Introduce a PrettyStackTraceEntry implementation for processing declarations and use it in debug builds whenever the tree walker walks into a Decl.
[33mc6decb4[m Emit plus functions as normal global functions. I meant to do this first.
[33mce9259d[m Teach the walker to walk inside ExtensionDecls correctly. Causes massive crashes because something else apparently isn't doing this.  Investigating.
[33m632b979[m Skeletal IR gen support for ExtensionDecl.
[33m19b7a93[m rename BuiltinFloatingPointType to BuiltinFloatType.
[33m320e474[m Codegen was silently truncating IntegerLiteralExpr's to 64 bits, bad codegen!
[33m926a3fe[m completely reimplement floating point literals to follow the model of integer literals.
[33m510d80f[m Fix alignment computation.
[33m224bf57[m Emission of expressions at global scope.
[33m6bb1b94[m Emit initializers of global variables as global constructors. This isn't the actor model for globals, but is certainly still a valid model.
[33m27f4709[m remove #if 0 code.
[33mc91c1d9[m generalize builtin floating point types to support all of the FP types that LLVM supports.  The standard library still only exports float and double, but the swift core should be more general.  Yay for PPC128 :)
[33m8363dd8[m round up size and alignment to a power of two.  Occurred to me in the shower.
[33m3b5a550[m Revisit the Condition logic, which turns out to be subtly wrong in an extremely simple test case that happens to come up in swift.swift.
[33m33f784d[m zap some #if 0 code accidentally left in
[33m9d112b5[m Switch our predicate that checks for too large integers as StringRef::getAsInteger isn't guaranteed to return a minimally fit APInt.  Add test so that both sides of the fencepost are covered.
[33md525ba5[m simplify builtin type processing by eliminating BuiltinTypeKind.
[33m6a51dbb[m Remove hard coded list of integer types from ASTContext, making BuiltinIntegerType have a "plus" factory method to create them like other types.
[33m70b97b6[m use the error type for errors instead of int32
[33m98c5f5f[m change BuiltinIntegerType to keep its width as an ivar, eliminating the number of switches scattered through the compiler.
[33m9c3ad3e[m include types we're trying to convert to in a few diagnostics.
[33mac06620[m add a note to clarify a potentially confusing case of an improperly defined conversion function.  In this case we now produce:
[33ma2ee922[m make a diagnostic more precise and useful.
[33me04492f[m Give oneof types prettier type names.
[33m1fb01a7[m Allow this to be built with Xcode 4.2's version of clang.
[33mb126ed5[m generalize integer literals to allow conversion functions to go through 1 level of indirection in literal conversions.  This allows the testcase to define its "convert_from_integer_literal" function in terms of the library 'int' type instead of requiring them to always be defined in terms of Builtin:: types.  We get the expected chained conversion calls in the AST.
[33m9b7fb0c[m New l-value representation.
[33m667485a[m implement mangling for extensions, by mangling them as the type being extended.
[33m46f701f[m build the final, happy AST for integer literals.  For example, this:
[33mc08263a[m rejigger things so that applyTypeToInteger can return a new and different AST on success.
[33m98703ab[m switch the convert_from_integer_literal function to being a plus function and check its new type constraints.
[33m8ce4737[m implement "a.b" AST and type checker support.  Semantics are that 'a' is evaluated and discard.  'b' is evaluated and returned.
[33m17b11e9[m implement parsing, AST, and LangRef support for 'plus' methods.  Dot syntax will need some work though to actually use them.
[33me08e493[m fully rip the :: form out of the dox
[33mcc0529b[m remove support for "func foo::bar() {}".  "Just use extensions".
[33m378f91b[m add lexer support for the new & terrible 'plus' keyword.
[33mf4ce888[m Remove the reference accessor to ValueDecl::Init.
[33m1c04aa9[m coding standard's nitpicks
[33md3597af[m silence a warning
[33mc7f58d3[m Utility class for a stack of heterogenous objects.  I'm going to need this for l-values as well as the Clang-like cleanup stacks.
[33m1f6481d[m Fill out a few cases.
[33m88d0f28[m Correctly call oneof injections.
[33me0d74cd[m Mangle some decl contexts properly, and fix the mangling of some references in the swift module.
[33meef2f69[m improve AST modeling of dot syntax calls to follow the syntactic structure instead of being weird and broken and losing source loc info.
[33m8a8f297[m Basic resilience query.
[33maffba28[m fix constness.
[33mfe4a1ff[m diagnose uses of integers that are too large for their datatype.
[33mcf09355[m Incremental check-in of resilience document.
[33meb61c15[m diagnose implementations of convert_from_integer_literal with an incorrect type.
[33m6315b94[m split out integer types to their own subclass of BuiltinType.
[33m27d1eb3[m diagnose ambiguous integer conversions.
[33m6dc19d4[m check that literal types have the required method, rejecting invalid conversions of literals to (e.g.) bool.
[33m65b9f40[m allow func's in otherwise empty structs.
[33m2bb9e99[m fix typo
[33md4a5cea[m consolidate routines for applying a type to an integer literal, and move our current sema for too-large integer values to it.
[33m5f1f4d8[m simplify code in Parser::actOnOneOfType now that oneof's always have names. Give OneOfType an ivar for its TypeAlias.  It already knew its DeclContext.
[33m4167366[m Parse resilience attributes.
[33ma1f7eef[m Extract out decl attributes into a separately-allocated structure.
[33m3456720[m Extract decl attributes out into their own file.
[33m6b93558[m On second thought, components need to be known in the AST.
[33ma1b7419[m remove support for looking up global names with dot syntax.  "x.y" != "y(x)" now.
[33mbe5120b[m rearrange code in x.y to only dig into structs to handle tuple lookup.
[33mff130c6[m implement dot lookup in extensions!
[33m3d41114[m fix a minor pasto.
[33mc756d37[m Basic Component interface.
[33m10b29da[m fix formating in -ast-dump
[33m0302a0c[m fix broken tag
[33m0b72409[m ensure that extension members get the proper function type, and a 'this' argument.
[33ma23f19a[m remove redundant qualification
[33m900d45f[m implement a Module::lookupExtensions method to find all the extensions for a given type in a given module.  This depends on llvm r145898.
[33m5da9f8a[m add TinyPtrVector to LLVM.h
[33mfcdddd8[m move ASTStage up to Module, sigh.
[33m32b248b[m [gs]etterize various members of Module, and make them check the invariants they depend on.
[33m212b56a[m actually, the ASTStage should be on Translation unit.  There can be multiple modules in a context and they can all be in different phases of translation.
[33meaa6fcb[m move prototype for the verifier into Subsystems.
[33m02c9d9a[m Make the AST "phase" part of ASTContext, this is generally useful for assertions.
[33m8d53c9f[m restrict 'extension' to only exist at file scope.
[33m603e22a[m diagnose operators in extensions, just an oversight.
[33m2e0df0b[m make oneof and struct decls generate their implicit 'extension' decl for their members.
[33md9c15eb[m make ExtensionDecl be a DeclContext, install members into it properly.
[33m7568876[m update for mainline api change.
[33m3d8fe58[m the world has moved to using getters, conform.
[33mef5fc52[m add basic type checking.
[33md666cc4[m define ExtensionDecl.
[33m784ee90[m Emit exploded tuple shuffles directly.
[33mb69d5f9[m Implement tuple shuffles.
[33m94021a9[m Finish getterizing Decl.h.
[33m32736ea[m Rename hasSingleElement to isTransparentType to better capture what's being tested.  This also makes IR gen correctly avoid a discriminator for a non-transparent single-element oneof.
[33mb700f17[m More getters.
[33md716f82[m Getterize ValueDecl.
[33m9079154[m Getterize TypeAliasDecl.
[33m50fb0d6[m More incremental getterization. .w
[33md74f172[m Incremental getterization of Decl.h.
[33mde3c3ff[m Build an implicit expression to record the conversion of a oneof to its underlying type.  Much better.
[33m737e646[m Remove accidental logging changes.  Having no reliable '0x debugger is obnoxious.
[33m1a948e2[m We also make TupleElementExprs for trivial oneofs.
[33m922e6f0[m Build fix.
[33m6c559b2[m More missing tuple functionality.
[33mff5e6aa[m Implement tuple element projection.
[33mc21b11e[m Add a method for conditionally trying to evaluate an expression as its underlying l-value.  Often more efficient than evaluating it fully into an r-value and only then transforming it.
[33m28f27b2[m Move the source-range checking out to somewhere that runs unconditionally so that we don't need to handle delegation in the checkers just to preserve the standard checks.
[33md3f1048[m When type-checking blah.$2, be sure to set 2 as the field index on the expression.
[33m8aefa67[m Add a convenient way to construct an empty Optional without naming a potentially long template-id.
[33m91b0675[m Improve the source-range verifier by introducing layering violations.  Yay, layering violations!
[33m8022ee6[m Fix a bug with folding sequences of left-associative operators that was caught by Doug's source-range verifier.  Thanks, Doug!
[33m2a4352b[m Fix the build for LLVM API changes.
[33m4f7c4c5[m random tidying
[33m7e96d0d[m embrace macro metaprogramming for decls.
[33mbd66319[m parse (and still discard) the body of an extension.
[33md14ddfc[m Unbreak the makefile build.  Swift now builds with this patch to llvm/Makfile.rules:
[33ma424498[m fix "newline @ end of file" warning.
[33mee05c22[m just a ridiculous micro optimization
[33m8c8e8f6[m Introduce a verifier that ensures that the source range of an expression or statement covers the source ranges of its children. Encountered the bugs addressed in my previous commit.
[33m1ed6cdb[m Fix broken source-range information for expressions of the form "x.y".
[33m55f635a[m Introduce an additional "context" parameter to the expression and statement walk callback functions, where we can stash additional information without breaking all of the callers.
[33m2e49b79[m Rename WalkOrder.h to Walk.h, and introduce typedefs for the function types of the expression and statement walker into it, so we don't end up typing the same darned things over and over again.
[33m3f5c6d7[m Fix typo in comment regarding inclusive range.
[33ma8de31b[m Implement Stmt::getSourceRange() along with proper implementations for each of the subclasses.
[33m9995a39[m Switch Expr::getLoc() over to an implementation that defaults to the starting location of the expression, but can be overridden by subclasses.
[33m0223f3e[m Implement Expr::getSourceRange() and introduce proper support for this function into all of the expression nodes. Re-implement Expr::getStartLoc() in terms of this function, and add it's brother Expr::getEndLoc(), removing the specialized implementations.
[33md4d7ac1[m SMRange is inclusive of the end location, so adjust our end location accordingly when printing diagnostics.
[33mb1c98e1[m Introduce Lexer::getLocForEndOfToken() to adjust source locations to the end of the current token, and use it for proper translation from SourceRange to SMRange when printing diagnostics.
[33mfc183b9[m Decouple the lexer from the ASTContext and specific BufferID. They aren't needed for the lexer proper (which just needs a buffer to dig through). Also, make it possible to suppress lexer diagnostics merely by not giving it a diagnostic engine to work with.
[33md0dd4d4[m Surface the Token and Lexer headers as public headers, since we're going to need to be able to use the lexer from the 'swift' tool itself.
[33m725298a[m Introduce a DiagnosticConsumer abstract interface that is used to actually render emitted diagnostics. This is both a useful generalization (we expect to have a number of other DiagnosticConsumers down the road, as Clang does) and is also important now to avoid a layering violation when adjusting the source location at the end of a SourceRange to the end of the token.
[33mdc8d4d7[m Teach CMake about the various header files in the lib subdirectories, so they show up in the project.
[33m7f1ad81[m Make a few more diagnose() methods return InFlightDiagnostic.
[33mcd7a21d[m Introduce support for adding source ranges to diagnostics.
[33m1334180[m Add non-const operator-> and operator* overloads to Optional.
[33me12215b[m Introduce InFlightDiagnostic, a move-only class that will be used to emit "extra" information (ranges, Fix-Its, etc.) for a diagnostic. It's quite similar in design to Clang's DiagnosticBuilder, but slightly cleaner/more restrictive.
[33m7106232[m Generalize the Diag<...> specializations within Diagnostic and DiagnosticEngine so that they work properly (without extensions) for zero arguments. Then, eliminate the zero-argument specializations.
[33mbea0b60[m Fix CMake build system
[33m9e783ad[m introduce and use a new parseMatchingToken method.
[33mf02dc05[m introduce a form of parseToken that returns the location of the parsed token on success, allowing simplifications in clients.
[33mffa9a55[m implement skeleton of extension body parsing.
[33m5c7c141[m Sketch out a LangRef description of extensions, and add lexer support for them.
[33m0b9b982[m rework parseDecl to do validation itself, allow decls in oneof's
[33mc872bb4[m improve error recovery in {}'s by using less hacky recovery.
[33mb5c6fa8[m split error recovery behavior out of parseDecl, making it more conventional and allowing more appropriate recovery in various caller's contexts.
[33m7e08140[m rearrange some code to use common predicates.
[33mbcd6f2f[m helper function-ize.
[33m9b7ec67[m improve error recovery with mangled decls.
[33md95aadc[m structs can now contain any 'decl'
[33meac219b[m Rework the decl grammar a bit: now "decl" doesn't include import declarations, but they are explicitly allowed at translation unit scope. This also introduces a parseDecl method which does the obvious thing.
[33mb61fe6d[m reject unnamed members in structs.
[33m45bcd19[m allow typealias's in structs, inject struct members into the proper declcontext.
[33mff63661[m disallow operators in structs.
[33mc67304f[m reject var's in structs, all data members must come before all func's.
[33m32af5d5[m add a test for .area on rects.
[33mb559c3f[m allow var's and funcs within structs, part of rdar://10157702
[33mc941b4b[m remove two unimplemented and highly ambiguous grammar productions.
[33mb081915[m clean up the interface to parseDeclFunc, and fix a FIXME whereby the 'this' argument to protocol methods wasn't injected early enough to be found by name lookup.
[33ma8ef04f[m restore some grammar productions accidentally lost in r816.
[33mdce8416[m allow dyn_cast'ing from declcontext to OneOfType.
[33m174d86d[m eliminate anonymous protocols, resolving rdar://10157535.
[33m80caaa7[m remove support for anonymous oneof types, which cause issues for mangling and are more of a theoretically good idea than an actually useful idea.
[33m828045f[m make the dot optional in tuple literals, now you can use foo(x = 4, 7) instead of foo(.x = 4, 7).  This resolves rdar://10157455
[33m9e9f421[m getAliasType() doesn't need an ASTContext argument anymore.
[33md2ed4c2[m remove some unneeded ASTContext arguments from subsystem entrypoints now that it is reachable from TU
[33mda564d5[m A long journey later, implement support for type inference of integer literals instead of forcing them to int64 all the time.  Now the integer_literal_type in the standard library is only used to resolve ambiguity in expressions.  Among other amazing things, we now correctly accept:
[33m5daed86[m give TypeChecker the current translation unit being scanned, instead of just the ASTContext.
[33m2dcaed3[m tidy up
[33m164ab0f[m move lookupTypeName out to Module::lookupGlobalType and have it look in the current module as well for consistency.
[33me0a1899[m move lookupGlobalValue into Module, making it accessable to all of sema.
[33m5d8d0fd[m Have the name binder publish the list of imported modules into the TranslationUnit, making it a real part of the AST.  Also, rework TUModuleCache to do its computation when it is constructed, instead of trying in each query.
[33m1f42ec4[m rename method for consistency.
[33m623de6c[m now that ModuleProvider is gone, we can match against the module name instead of the access path.  Tracking just the access path in the imports list greatly simplifies all of the client and means that we don't have to create a bogus ImportDecl for the builtin module just to make name lookup work.
[33m17fd624[m now that Module's have their own cache of name lookup info... including the current module we're working on, eliminate the cloned version of the value lookup code from NameBinder.
[33m69fb384[m give name binder the translation unit it is binding.
[33mdd63b23[m strength reduce.
[33m1e1755e[m don't forget to svn add new files.
[33me3b53c3[m move the module-level name lookup stuff out of NameBinding.cpp into the Module class.  Add a new Module.cpp file to implement this (along with the existing caching strategy, if you're curious).  This eliminates the parallel 'ModuleProvider' heirarchy.
[33m4933a27[m clean up lookupType/lookupValue to only take an AccessPath instead of an import decl. Strip of the module name implicit in the access path.
[33m2ea1e72[m merge two copies of the same predicate into a helper method.
[33m0ca79b1[m rename ASTContext::BuiltinModule -> TheBuiltinModule for consistency with the other ASTContext members.
[33m8e1c6c8[m flatten ModuleKind discriminator into DeclContext's one.  Now Module is an abstract class and we have an actual AST-level concept of the builtin module.
[33mfed3546[m increase the # bits for DeclContextKind's to 3 bits.
[33mdb0fd34[m inline addBuiltinImport.
[33me6e58d1[m Have NameBinder ctor set up the implicit import for the builtin module.  Heap allocate it for consistency.
[33m75e558a[m rearrange code to group class declaration and implementation together.
[33mbf91e00[m rearrange code, upshot being that "a.b" will resolve if there is only one candidate for b even if a is dependent.
[33md4b9889[m remove dead code, unresolved dot expressions always have a base now.
[33mcc7ac96[m fix some bugs handling dependent typed values, prepare for integers becoming dependent typed.
[33ma65fd18[m add a note.
[33m7376580[m stub out some work towards getting slices going. I need John reengaged before we can actually make progress here.
[33me788098[m update comments
[33m55fa356[m rename TypeChecking -> TypeChecker to match the name of the class.
[33maf0d4a6[m use Diagnostic class to simplify parseIdentifier.
[33m22808d5[m introduce a new Diagnostic class to represent a diagID + arguments.
[33m2cee9d3[m simplify code a bit, I hear that classes with ctors can be in unions these days.
[33m9298082[m move Diagnostics header to include/swift/AST to match .cpp files.
[33m30b6007[m move the diagnostics stuff from Basic -> AST to fix layering.
[33m2f434d9[m straighten out identifiers in diagnostics a bit.
[33mdfd529c[m rename diags::foo to diag::foo
[33mf92f616[m remove hte ASTContext::hadError bool.
[33m5e8370d[m eliminate some printouts from IRGen in favor of real diagnostics.
[33m51680e3[m remove the deprecated error/warning/note methods, finally.
[33m2ac742d[m convert the rest of sema to the new diagnostics stuff.
[33m0c3b3fe[m use Type and Identifier arguments to diagnostics more uniformly.
[33m0c0e65e[m violate diagnostic layering harder, making it fine to cram types into diagnostics. Lets here it for non-pod's in unions.
[33m2f5964a[m switch TC Coercion over.
[33md36e080[m switch name binding to the new diagnostics stuffola
[33m2092dde[m switch the lexer over to the new diagnostics subsystem.  Drop the "no newline at the end of // comment" warning, swift doesn't require a \n at the end of file.
[33m60afdf4[m switch irgen to new diags
[33m9f906da[m sink (a copy of) HadError into DiagnosticEngine, so that errors produced by it trigger error returns from main().
[33m84e92c5[m remove obsolete functions
[33ma1781fe[m switch expr parsing to the new diagnostics subsystem
[33m6fcd10e[m deconstify member to make Diag<>'s assignable and otherwise behave as a proper value type.
[33m8c07ba4[m switch parseStmtBrace to the new diagnostics api
[33md8343e9[m convert parseToken to new diagnostic api
[33m96f732b[m convert parseType to take a DiagID.
[33mf149ab5[m make Identifiers default to be quoted in diagnostic output.
[33mff9d19a[m switch another diagnostic off deprecated calls.
[33mfcc547d[m switch parseIdentifier and all its uses to the new diagnostics machinery.
[33m3bc1db5[m add convenience support in diagnostics for identifiers.  This is a layering violation, to be resolved later.
[33m3c43cae[m now that types can get their astcontext, remove some pointless argument passing.
[33mc9d8f92[m remove an assert used for testing.
[33m7aaf0c5[m rework the canonical type system a bit to make it so that all Types can access their ASTContext without bloating everything.  Basically, now instead of having a canonical type point to itself when canonical, it points to the ASTContext when canonical.  This means that Canonical types always have direct access to their context and non-canonical ones just indirect through the canonical type pointer to get to it (so it's two jumps away) by using a PointerUnion.
[33m3d168c4[m make sure Type aliases in the builtin module get a declcontext.
[33md69b3ce[m add a helper method, not particularly useful yet because not all decls have a DeclContext.
[33m5565174[m remove helper method, it is the same as T->isEqual(S, Ctx)
[33m33b3a22[m fix a fixme around a dead method.
[33ma7c7d64[m Switch swift to use SourceLoc instead of SMLoc.
[33m3ec9a97[m Add datatypes for swift to represent source locations and ranges, which are distinct from the SMXXX types.  This is important because SMRange and SourceRange have subtly different semantics, and is also nice to isolate SMLoc from swift.
[33m44cc26c[m switch to LLVM umbrella header to get stringref.
[33m2d43b88[m update for mainline API changes.
[33mf121bd5[m Arbitrary-associativity operator precedence parsing.
[33m25ee366[m Add an lvalue-to-rvalue conversion AST node.
[33m5249bc7[m Metaprogram getLoc() and getStartLoc().
[33m6b27921[m Propagate around l-value-ness.  There aren't any interesting invariants here yet.
[33mf97641d[m Add support for %select{option1|option2}idx to the diagnostic formatter, and use it in the parser
[33ma60a77b[m C99 variadic macros suck. Use template metaprogramming tricks so we aren't forced to rely on extensions.
[33m2d6ff76[m Fix the make-based build system
[33mc0d0149[m Don't rely on silly GNU extensions. __VA_ARGS__ works fine the way we're using it
[33md7a47dd[m Don't build zero-length arrays
[33m3d15bf3[m Introduce a diagnostic-formatting engine and port most of the parser's diagnostics over to it.
[33m3603e5b[m Punt on verification if there's an error in the translation unit. This will be required until there's some sort of error marking in the AST, at which point that marking will just turn off shouldVerify for that subtree.
[33mb6f312a[m Verification should clearly follow each phase rather than coming at the start of the next phase.
[33m709177e[m Simplify adding new verifications by stage.  Add a verification of assignment statements.
[33m05459ec[m Add a convenience method for checking whether two types are equivalent.
[33m5fddb24[m Basic verifier framework.
[33m2db653cbf[m Sequence, UnresolvedDot, and UnresolvedMember expressions actually do survive name-binding.
[33m344fe89[m Macro metaprogramming for Stmt nodes.
[33mcf0da63[m A couple more unreachables.
[33m7e7d1d6[m Use Expr metaprogramming to build the list of unchecked cases.
[33mef8b77b[m Use Expr metaprogramming.
[33mbbf14c6[m Macro metaprogramming for the Expr hierarchy.
[33m3c769e0[m L-value element projections.
[33mb2facda[m Getterize Stmt.h.
[33mb351394[m Getterify the rest of Expr.h.
[33m802262a[m More incremental getterization.
[33m7a259f4[m Differentiate between the starting location and caret location of an expression.  More incremental getterization.
[33m02e47ed[m Privatize Expr's Ty and Kind members;  introduce getters and setters.
[33mff37c78[m Missing cases.
[33m35d822f[m Give this enumeration an explicit backing type.
[33mc61c807[m Mangle types for all declarations.  Save the names of modules and mangle those in, too.
[33mcb54ecc[m Emit local variables and their initializers.
[33mb82dc62[m Enter a function context correctly when parsing a FuncDecl's body.
[33m913d77c[m implement codegen support for fp immediates.
[33m8eaddc1[m AST support for floating point literals.
[33m9d240a1[m add lexer and langref support for floating point literals.  No AST/CodeGen support yet.
[33mc3fb2ec[m Missing commit.
[33m7723785[m implement a.x syntax for using elements of a protocol.
[33m4a5c409[m Change the stdlib so that int is just a typealias for int64, not its own unique type. Update langref to describe the builtin module as an implementation detail of the stdlib, expand the stdlib a bit.
[33mda27a65[m don't reallocate small vectors, just a cleanup.
[33mf833a1e[m have ASTContext own the strings for its import paths instead of referencing strings sitting on the stack in main().  No functionality change, just futureproofs ASTContext a bit.
[33me248bc8[m switch to llvm.h
[33m8e369b3[m make builtins.cpp include its header first (exposing that it isn't actually self-contained), and switch to AST.h
[33m37b07c8[m Add builtin bindings for a bunch of primitive LLVM instructions.
[33md562999[m Add the missing Module.h.
[33mad8081b[m Remove the duplicate swift.swift by implementing import search paths.
[33m8a3f79b[m Document the scope-qualifier grammar correctly in the parser comments.
[33m97cb2cd[m Add a comment explaining the trade-off behind using a single builtins cache.
[33m54ff2cc[m Lop the last word off ModuleDecl and TranslationUnitDecl.
[33m91d2a75[m remove obsolete comment, fix typo
[33mf2ae02a[m switch a couple of files to use AST.h umbrella header.  Swift eagerly awaits clang modules...
[33ma915596[m switch decl's classof to use range comparisons.
[33m1e89b0e[m Remove the __builtin type keywords and make the Builtin module export those types.
[33maaf8ace[m Qualified lookup needs to be a different lookup kind so that having a builtin module around doesn't contaminate unqualified lookups.
[33m44b6081[m OneOfElementDecls actually can appear at top-level, apparently. They don't need any magic, though.
[33mccb2d4e[m Framework for builtin lookup.
[33m66b287d[m Slow module access down with pointless abstraction.
[33m6ddc151[m Support qualified names for types.
[33m4a0f713[m Progress towards a builtin module.
[33m2cd676b[m IR generation for 'if' statements.  Adjust the standard library to use global functions for the relational operators, just to get prettier IR.
[33m0090c43[m all members of a protocol have to be NamedDecl's, tighten up typing.  Various tidying up.
[33m060c8c5[m Emit l-values and assignment statements.
[33mf9f2e5e[m protocol members shalt get the right declcontext and type.
[33mb1ec40a[m s/suffix/prefix/, and explain the choice of T.
[33md03c398[m Add the missing Mangle.cpp.
[33md70f0ae[m Implement basic mangling.
[33m34ec8bc[m implement support for var members of protocols.
[33mc7fd9ec[m remove the old grammar production for func's in protocols and just use decl-func instead.  Hey look, now we have support for default implementations.
[33m21119f3[m Make simple calls work.  Note that parameters are working, too.
[33m5d78286[m split the "func a::b()" form out to its own grammar production.
[33ma838f41[m eliminate ProtocolFuncElementDecl, just use FuncDecl instead.
[33mfa34062[m refactor the attribute grammar so that attribute-list is nullable, simplifying LangRef and the parser.
[33m17319a0[m implement the rest of parser support for 'func's in protocols.  This makes it pretty clear that I should just use FuncDecl in a protocol.
[33me7e0c65[m checkpoint, nothing interesting to see here.
[33m70bbb65[m make ProtocolType a DeclContext, add AST and trivial sema support for ProtocolFuncElementDecl, the first thing we will allow in a protocol.
[33mcd66133[m simplify interface to OneOfType::getNew.
[33mbd9e21e[m add a method to get an ASTContext from a DeclContext.
[33m74b804a[m rearrange DeclContext arguments so that they are at the end, not the beginning.
[33me0005b6[m actually parse the {} body of the protocol
[33mff9fda8[m Document floating-point intrinsics
[33m7d89538[m elements of a protocol aren't comma separated.
[33ma6ce868[m Document Parser::ContextChange.
[33m7b78e7b[m Document DeclContext.
[33md77e4ad[m implement support for protocol decls.
[33m6dfa912[m 'float' -> 'float32', 'double' -> 'float64'
[33m998325d[m refactor some 'oneof' parsing code for consistency.
[33mf9b024a[m implement parser and AST support for trivial (empty) protocol types.
[33m58b81c8[m Add builtin float and double types.
[33m6daf126[m Remove spurious colons from tuple type elements.
[33m26dfa97[m better QOI for invalid arguments, produce: error: unexpected diagnostic produced: error: operators must have one or two arguments func %%%() {} ^
[33mfd4aefa[m rename the infix attribute to infix_left.
[33maf4d36f[m Eliminate the 'unary' attribute, instead just know that operators that take a single argument are unary.  Move a bunch of semantic checking of operators from the parser to TypeCheckDecl now that it has a decent place to hold it.
[33mb00ad81[m remove dead prototype
[33m01ea4fc[m fix a fixme by using ErrorType to potentially improve e rror recovery
[33mdc257f9[m refactor decl checking logic into a DeclVisitor.
[33ma84673d[m We don't save the access path anywhere when computing function arguments.
[33m34714f3[m CurContext -> CurDeclContext
[33mbf62f36[m Switch DeclContext to use a PointerIntPair.
[33m63ca527[m Introduce accessors into DeclVarName and eliminate direct mutation by setting all fields on construction. Use this opportunity to save a pointer of storage for every DeclVarName. squeeze out a pointer's worth of storage
[33m2fc593a[m Unbreak CMake build
[33m67bcc9f[m Some headers have moved around in LLVM; update to their new locations.
[33m4a426c3[m add some notes about API fragility + named arguments.
[33mdfa2e07[m move decl type checking out to TypeCheckDecl.cpp
[33mc135a64[m eliminate checkBody now that it is just an ugly wrapper around typeCheckExpression.  Change typeCheckExpression to mutate its argument.
[33me89a22a[m now that typeCheckExpression is our main entry point for expr type checking, have it do "completeness" checking (also fixing some regressions I introduced along the way).  Exprs are now modularly checked, woo!
[33m161b2c8[m make typeCheckExpression take an optional "convert to type" which comes from context, simplifying a bunch of code.
[33ma0a7c2a[m fix the expression type checker to not recurse down into statements, resolving some type checking issues.
[33md7c0076[m finish up sema of 'return', force converting the returned expression to the return type of the enclosing func.
[33me0ce019[m split type validation out to its own .cpp file.
[33mda64531[m modernize #includes.
[33ma071b37[m optimize out trivial accessors.
[33m2020470[m rip statement checkout out of the expr checker, allowing us to enable checking of top level var decls etc.
[33mcbd84c3[m split statement type checking out to its own file, detangling some stuff from Expr checking. More to be done.
[33mb2bd8e1[m Introduce the idea of a DeclContext.
[33m2711ad0[m now that WalkOrder is in a common header, move the WalkStmt to be a Stmt method, rename it to just 'walk' to follow the naming convention, and give it an accurate doc comment for good measure.
[33mcb59d9c[m split the walkorder enum out to its own header file.  This is a silly waste of a file, but is needed to share it between two other heads.  Header files seem so baroque.
[33m0667195[m Implement rudimentary l-value and r-value emission for DeclRefExpr. Swift's ASTs are lacking the extremely useful concept of a DeclContext, without which it's probably possible to make this work, but it'll be extremely awkward.  Anyway, these hacks are good enough to get the test passing again.
[33mca0c671[m IR generation for tuple literals.
[33m1c874a2[m Hack in IR generation for integer literals by making a crazy assumption about how the int type is represented.
[33m156c029[m Implement return statements;  add some related infrastructure, including a new file for control flow code.
[33mb691cf4[m Define the JumpDest type.  Eventually this will also get a ScopeDepth member.
[33m2ac244e[m unimplemented() should flag an error to cause the process to fail. XFAIL func.swift again until return statements are implemented.
[33m06719bb[m Update the CMake lists for all these new files.
[33mbde7b74[m Add a new file for emitting local declarations.
[33m64c7257[m Flesh out more unimplemented stuff.
[33me200bed[m Basic framework for emitting Swift statements.
[33mb2bbab9[m Build function emission around emitting a FuncExpr instead of a FuncDecl.
[33me749b07[m Break down expressions;  some more unimplemented support.
[33m9baf355[m Add a method for reporting unimplemented errors.
[33m1f38885[m Teach the scalar tuple representation how to load and store rvalues. This fixes the previously-broken test.
[33m29b25c5[m Add an accessor for computing the alignment at a known offset.
[33mc7bc658[m Access the data pointer as the second element.
[33mb60d480[m Initial prologue/epilogue emission code.  This breaks func.swift because of the unimplemented load/store methods.
[33ma769b26[m Give RValueSchema an isScalar(unsigned) accessor, too.
[33m26cee15[m Switch expr walking functionality to take blocks instead of function pointer + void*.
[33m0ce7d17[m If there are exactly two options in a oneof, use i1 instead of i8.
[33m3af1305[m ADTs which carry no non-discriminator payload can always be scalar.
[33mcb3fe4d[m The array-decay-to-bool conversion is better than the array-to-ArrayRef conversion, so disambiguate.
[33mab931ce[m Improve type safety on storage type;  no functionality change.
[33mb48755d[m Provide a nice little convenience method for testing whether an RValue is a scalar with an exact number of arguments.  Useful for asserts.
[33m0ceeb2e[m Make Chris happy.
[33m3e65b21[m Provide r-value schemas for various implemented types.  Use these to implement function signature lowering.  Basic setup for IR generation of functions.  Test that we can properly declare a simple function.
[33mdfa3345[m Introduce the idea of an r-value schema.
[33maacd7ad[m LValues should also store the target alignment.
[33m02c0dd6[m Provide an IRBuilder customization point that, among other things, consumes our alignment type.
[33mba077c6[m Permit sizes to be scaled by a constant factor.
[33mea63f11[m move expression type coercion out to TypeCheckCoercion, and change terminology to follow that which is understood by other people.
[33m43aae84[m pull SemaTupleExpr into the TypeChecker class.
[33maae5e30[m inline SemaDeclRefExpr into its only call site.
[33mdfbb6b1[m move "bottom-up" type checking into TypeCheckExpr.cpp, and change terminology to follow directionality that other people find more natural.
[33m63cd4a9[m sketch out the new type checking organization.
[33mad0852d[m move the definition of the TypeChecker class out to its own private header, in preparation for splitting up TypeChecking.cpp.
[33mc827cc1[m tidy up visitor, UnresolvedDotExpr base cannot be null since John's rework.
[33mbd357f9[m unify the binary operator logic too.
[33m49dd631[m unify the UnaryExpr and CallExpr type checking logic.
[33m3e02267[m hoist the argument expression of Call/Unary/Binary up to ApplyExpr.
[33m035b65d[m change the representation of BinaryExpr to use an implicit tuple to bind its LHS/RHS together, making it more similar to other ApplyExprs.
[33m624efc8[m introduce a new ApplyExpr class, and make it the parent class of CallExpr,UnaryExpr,BinaryExpr.
[33mb04c19e[m introduce a enw AST/AST.h umbrella header and use it to simplify #includes.
[33me04dc98[m Correctly llvm:: qualify NullablePtr.
[33m97c6cca[m More IR-generation infrastructure.
[33mf03486e[m diagnose a bunch of problem cases with operators.
[33m6cff7d4[m Factor performIRGeneration into Subsystems.h.
[33m86f4371[m Basic IR generation of tuple and oneof types.
[33m28f05f0[m add parser and sema support for user defined unary operators.
[33m41a924e[m synch up the grammar in the parser and langref, and make the expression section of langref make more sense.
[33m4c9b8ec[m add ast and sema support for unary operators.  We need some serious AST refactoring to unify our representation of calls, which I'll do later.
[33mac0facd[m Fix the build.
[33mdc31882[m Incorporate notes into the pattern-matching manifesto.  A few more random observations that weren't brought up during the meeting.
[33me248958[m Pattern-matching manifesto.
[33me12da02[m tidy up a bit more, DenseMap is already transitively included, so no need to use a pImpl to hide it.
[33m8896412[m remove the old SemaDecl and Sema classes.
[33ma9534d0[m merge handleEndOfTranslationUnit into ParseDecl.
[33mcb18028[m rework all of the scope and name lookup logic, introducing a new ScopeInfo class and moving a bunch more stuff out of SemaDecl.
[33m60d1573[m merge VarDecl name processing into ParseDecl
[33m7e252a0[m move a bunch of code from SemaDecl to ParseDecl
[33m7503367[m split decl parsing logic out to ParseDecl.cpp
[33m26f66a8[m move all the parser headers into lib/Parse since they are now all private. I chose to just delete the -lex action in swift, since it was only useful for about 10 minutes during bringup and probably never will be again.
[33m92051fd[m add a new Subsystems.h file to hold the entrypoints for various subsystems, instead of smashing them into Parser.h, resolving some FIXME's.
[33m73a3f9d[m fix clients to not poke the Parser class directly.
[33mc863bea[m merge SemaExpr into ParseExpr.cpp
[33m047ecf3[m split expr parsing out to its own file.
[33maf5b901[m Remove dead -framework link line
[33mf6ff397[m zap some more S.Context's now that Parser has its own context member.
[33mdab303a[m move statement parsing out to its own file.
[33me5c5dab[m give parser its own ASTContext member instead of having to indirect through Sema.
[33m4f2e5e7[m update cmake.
[33mc86d4a5[m Split parsing for types out to its own ParseType.cpp file, and merge SemaType into it.
[33m15922d7[m Go ahead and support outputting to .ll, .bc, .s, and .o.
[33m6009504[m split ParseResult out to its own file.
[33m5d9e2e4[m now that the Sema code is in the parse library, the Sema headers are all private, make it so.
[33m7f71bc5[m it doesn't help much, but try to improve link times.
[33m33f774f[m Rearrange a bunch of code for better layering: instead of Parser depending on Sema, just move the Sema code into the Parser library.  There is no way to use one without the other.  The library formerly known as Sema will get renamed.
[33mf18dcec[m Fix broken CMake file
[33m3b3fb3f[m Commit missing file.
[33mf3ea9d7[m minimal hack to fix the build.
[33m42449b0[m Massively slow down link times by uselessly emitting empty modules.
[33mbca0413[m Structure for IR generation.
[33mb40d2ce[m fix naming convention violations.
[33m2689efa[m have the error type squeltch type checking.
[33m0dcbc8a[m remove some code that is unreachable now that sequence exprs go away reliably.
[33m4e074b6[m fix some busted logic handling overload resolution, producing a correct (but poor QoI) error about no candidates an ambiguity.
[33m0015b82[m When type checking :foo(), we should defer type checking for "root to leaf" type checking instead of emitting an error.  This fixes the test breakage from the big rework patch.
[33m09da5dd[m restructure code for readability, no functionality change.
[33mb8fd1574[m rip out the dead "isPrecededByIdentifier" logic from the AST and Lexer.
[33m414f2ae[m apply_expr -> call_expr
[33m7f7a8cf[m Use POSIX when OS specific inlines are not available
[33m4607612[m Basic alloc/dealloc front end cache
[33med478a5[m Add makefile logic to build runtime
[33mddd1348[m Rename ApplyExpr to CallExpr and change the signature of SemaCallExpr.
[33m7de102d[m Revise LangRef per Chris's review.
[33m432a738[m fix broken link
[33mff767b7[m Update the language reference for the operator and juxtaposition changes.
[33m51a01a0[m All the excess-exprs stuff is dead code, now that the parser decides statement boundaries correctly.
[33m3ce8ca0[m don't promote a sema error to a parse error.
[33m096c203[m oneof element names can't be operators.
[33m4814530[m rework validateType to be more conventional: not updating types in place.
[33m9f2ca5e[m Remove juxtaposition handling from the type-checker and put it in the parser.  Implement the grammar which permits this. Enforce that binary operators have to, well, operators.
[33m1dc200c[m introduce an official ErrorType.  This is to be used when a type is incorrectly constructed.  When put on a decl, this should cause all uses of the decl to collapse away into badness during type checking.
[33m10f5c2f[m remove the UnresolvedType, representing it with a null Type() instead.  There is no need to have two different ways to represent the same thing.  This has the pleasant bonus that stuff crashes when you do things with unresolved types.
[33m4523081[m fix a case where Sema installed a non-null type.  This isn't needed, we like null types coming out of the parser.
[33mc81d4c3[m lets use isspace here, this gives us \f for free! woo
[33m4eb2201[m Make the lexer just determine whether an LP is spaced or not;  the parser can consume this as appropriate.  For now it isn't, but that will change.
[33m36f5427[m Make the lexer disambiguate between a ( that is the start of an expression and a ( that is the start of a call argument list.
[33m0871b12[m add support for /**/ comments to the lexer, allow nesting of them since we won't have the #if 0 hack to handle nesting.
[33mabe344b[m switch statements to use ParseResult, enhance ParseResult to map ParseResult<BraceStmt> convertible to ParseResult<Stmt>.
[33m7a5e383[m some localized cleanups for diagnostics.
[33m0e8a66e[m Introduce a new ParseResult<T> helper class, which is effectively oneof { T*, Absent, ParseError, SemaError }.
[33m9e6817b[m implement lexer, parser, and dox support for while loops, everything is hooked up now.
[33mce6f6a8[m add AST support for WhileStmt.  This isn't important, but is easy to add.
[33m944183d[m Split tok::oper out of tok::identifier.  No functionality change. The consumeToken(Tok.getKind()) is terrible, but will disappear when most of these cases have operators stripped out.
[33m41fc50e[m Remove the ability for protocol<P1, P2, P3> to refer to a type. Plus, some minor syntactic fixes and clarifications.
[33m3e8e0a0[m Fix the examples for oneof's with elements that have an associated type, the grammar and parser already require a :, but the examples never got updated.
[33m35ec617[m Update generics proposal based on today's discussion. Major changes:   - Use implicit conformance to protocols (duck typing)   - Treat protocols as types, eliminating the any<proto1, proto2, ...>   syntax in favor of...   - Introduce a syntax for anonymous protocols   - Switch [] syntax over to be more C++-like   - Switch protocol inheritance -> protocol refinement, and use : to   separate a protocol from those protocols it refines   - Clarify our intent w.r.t. type argument deduction   - Note that we don't intend to implement run-time overload   resolution out of the box
[33m02d66f8[m Minor fixes and tweaks based on feedback from Chris
[33mb64c49f[m Generics manifesto
[33m8f9ada5[m Pages document on range concepts.  This is by no means a completed design.  This is a statement of direction to let you guys know that there is activity here.  I've been heavily influenced by Andrei Alexandrescu's work with D.  I'm trying to see if I can keep from exposing begin() and end() iterators.  Even Andrei has yet to admit that is practical.  However we both think it is a possibility.  The document syntactically appears to expose begin and end iterators, but it does not.  The begin and end that appear in the document are nothing but generic tag types, and are not actual iterator factory functions. The client 'apparent interface' is fairly small.  However I'm concerned that the range author's implementation effort is rather large at this point once one gets to bidirectional and random_access ranges.
[33m433d6de[m implement AST and parser support for 'return'.  We're still not doing a conversion to a return type yet though.  We happily diagnose thigns like this as an error:
[33m39660b5[m add langref and lexer support for return stmt.
[33m46d0862[m expr-brace -> stmt-brace in comments.
[33mb7049da[m clean up the grammar by introducing an explicit 'decl' production. It turns out we already allow nested functions, how about that.
[33mba773ca[m make unbound sequences of expressions that are not in a BraceStmt be an error.
[33m6e872fe[m when type checking of a sequence expr has completed, if that sequence expr is in a bracestmt context, inline the sequence into the brace.  No particular behavior change other than an adapted AST.
[33mc86e786[m switch langref to new func syntax, switch implementation to use FuncExpr instead of LambdaExpr.
[33ma64c74e[m Replace lambda keyword with func.  One annoying aspect of this that I didn't think about will occur when/if we want to support attributes on func expression. That should look like "func [attributes]{ ... }" but now that requires looking beyond that attributes to know if this is a funcdecl or funcexpr.  Nothing that more heroic lookahead can't handle.
[33mea9cd78[m lambda expressions now require a type that start with a tuple, such as (x : int). John can fix func decls.
[33m23759c8[m rename Lex -> lex too.
[33mfdc2dcc[m rename lexer methods to follow the naming convention and add the ability to lookahead one token.
[33m0265e3c[m make 'else if' a special case, disallowing things like "else ;".
[33maca2ef8[m add notes on "not having headers" from our discussion yesterday.
[33m0d002a7[m Teach the Makefile to autogenerate lit.site.cfg as part of 'make test', and remove sabre's hardcoded copy.
[33mdc56b32[m linkify some grammar references, add testcase, remove entry from readme.
[33m350b89e[m Represent assignments as their own AssignStmt, preserving the model we had before, but removing the hack where we'd represent them as a binary operator with a null operator function.  We still have no clear semantics for what is valid or not.
[33m118b995[m add a method missed for SemiStmt.
[33mebc33d3[m add AST support for semicolon statements and clean up the parser.  While noone cares, it is trivial to support and good for completeness.
[33m20c5221[m rename test.
[33m0c4bc6e[m add an explicit test for statements, splitting them out of expr-stmt. Add a test for 'else if'.
[33mfb8621f[m introduce DeclVisitor, ExprVisitor, and StmtVisitor template typedefs.
[33md5523fa[m rename ExprStmtVisitor to ASTVisitor.
[33m9279ebe[m add Decl visition to ExprStmtVisitor.h, switch Decl.cpp to print the same way expr and stmt does.
[33m93ac2b3[m rename FuncExpr to LambdaExpr.
[33mc3bbefc[m add support for lambda expressions (anonymous functions), which are the thing that func is sugar for.  Unfortunately, we can't use 'func' without introducing ambiguity since decls and exprs can exist in the same context, I'm not wed to 'lambda' as the keyword, thoughts welcome.
[33ma8e2788[m implement semantic analysis for FuncExpr and have the parser lower func decls to func exprs.  All the tests pass again.  Now we have a strict equality between:
[33md232974[m introduce a new FuncExpr AST node.  No clients yet though.
[33mf7c8735[m rename ExprVisitor to ExprStmtVisitor, since it can visit either kind.
[33m8148b8c[m fix the expr side of the visitor to follow the naming convention.
[33m63ce0be[m make the big switch: {} are now statements, not expressions.  This removes some annoying things from the grammar (like expr-non-brace), and makes it so that the body/else of an if is just a statement.
[33m72260c7[m add name binding support for statements at top-level.
[33m4c85ca4[m add new file
[33m30b878c[m add support for walking statements properly, dissolving some hacks.
[33m382f33e[m introduce statements, make if (and ;) a statement.  This includes a few horrible hacks, but is the right direction to go.
[33mc739c79[m fit in 80 cols
[33m0e95d1b[m start carving out a place for statements, this is obviously in progress, I made the mistake of upgrading Xcode and now it doesn't launch...
[33m91e6174[m add a skeletal place to talk about some of the decisions we've (at least tentatively) made w.r.t. statements.
[33m7146e55[m don't lose the changes from r443
[33m698d880[m convert to plaintext.
[33m66271c8[m add some notes on top level code and how namespace level vars should be handled, per our discussion on monday.
[33m5adacc9[m Added swap and changed my mind on the best move assignment implementation:  It now just does a swap, thus avoiding a branch and atomic decrement.
[33m6f17c38[m Introduce move construction and move assignment just so everyone gets a simple introduction to the subject.  These are nothing but optimizations of the copy constructor and copy assignment.  They only get called with the rhs is an rvalue.  The lhs gets the value of the rhs, and the rhs can get set to any valid value.  If the resulting operation isn't faster than a copy, then the move member should just be removed so the copy member can take over.  For string the move members are likely to be only very slightly faster.  I'm attempting to avoid atomics and branches in the move members, though there is one branch and one atomic decrement in the move assignment operator.
[33mb7ba707[m Updated to prototype as discussed yesterday.  Added substring function.  I currently have the data null-terminated, except when created by substring, just to aid in I/O.  It will be easy to strip the trailing null off.  It is not currently counted in the size() or size_bytes() observers.  Though not complete, this prototype is looking promising to me.  Problem area:  On 32 bit platforms I don't have robust storage for the bit that says whether or not the char* is owned.  I'm currently using the high bit of the pointer.  I note that when the pointer is not owned (it points into rom), it is 1-byte aligned, making the use of the low order bit problematic.
[33md594e37[m move string stuff into runtime/swift
[33mf47e851[m check-in of prototype string.  This is not a finished product by any stretch of the imagination.  It is a first draft.  The intent of the string subdirectory is that it is temporary.  Once we get string figured out and integrated into a runtime library, this directory should go away.
[33m4071dec[m update whitepaper for new syntax.
[33m0fc77ab[m Per discussion on swift-dev, unify 'meth' and 'func' syntax into just 'func' syntax where you can optionally declare a receiver type.  This is cleaner both conceptually and in implementation, and eliminates drug references. :)
[33m6f7c702[m disable copy and assignment of various types, and plain 'operator new' of others using the new '0x way.
[33m6fbe70d[m convert TokenKind to a scoped enum, eliminating the old c++'98 hackaround to emulate it.
[33m3a05960[m convert TypeKind and WalkOrder to scoped enums
[33me122365[m switch ExprKind to be a scoped enum.  This required renaming IntegerLiteral to IntegerLiteralExpr, which is good for consistency anyway.
[33mf3c270f[m convert DeclKind to an scoped enum
[33m123c200[m switch more stuff to use enum class, C++'0x needs a :foo operator :)
[33m259fab4[m adopt a few more '0x features.
[33mf114a7a[m close some declarations with shift right, adopting another killer '0x feature :)
[33m4dc572d[m per discussion on swift dev, remove the "=" syntax for defining a body of a function.
[33m096a3e1[m switch to range-based for loops where possible.  I'm actually surprised how many places are blocked by needing an index exposed for other purposes.  Not having a MutableArrayRef doesn't help either.
[33mdc32e37[m enable c++'0x for the makefiles and adopt it in a trivial case.
[33m52e1af0[m Use Clang in C++0x mode with libc++ when building with CMake. Also, put these settings into the CMake cache.
[33m9659fa7[m [CMake] when using Xcode, use gnu++-0x dialect and enable a bunch of warnings that should be on by default.  libc++ cannot be used yet because of a known issue in 'memory'.
[33m4f29cc0[m convert TheUnresolvedType/TheDependentType and the empty tuple type to be accessors on their respective classes, for consistency.
[33mc9ec409[m Context.getNewOneOfType -> OneOfType::getNew
[33ma39857a[m migrate ASTContext::getTupleType -> TupleType::get
[33m649a577[m move from ASTContext::getArrayType -> ArrayType::get
[33me106d33[m while I'm in a cleanup mood, move the factory functions from types off of ASTContext onto the types themselves.  This never made sense for clang, and makes the same amount of sense for swift.  Start with function types.
[33m3af81cc[m raw_ostream and NullablePtr.  While there are more types that could be handled in similar ways, this gets the most of them.
[33m10017be[m ArrayRef and SmallVector[Impl]
[33m7275ca5[m pull in StringRef and Twine.
[33m19dbcaa[m pull the casting operators into LLVM.h
[33me647b29[m stop the llvm-namespace-qualification-insanity by caving in and adding a new swift/AST/LLVM.h file which forward declares and imports common llvm classes, starting with SMLoc.
[33md6cf48a[m add a "using llvm::SMLoc" to simplify some code, move "-> ()" inference into Sema.  The boundary between Parser and Sema* is nebulous at best.
[33m434f369[m fix a bunch of failing testcases.  I didn't notice this because lit is not interacting with cmake properly.
[33m79b312c[m reduce duplication in type checking.  Vars/func/method's are all conceptually the same, vardecl just requires checking the name specifier.
[33m9e8c824[m implement AST and sema support for methods.  The example method in the testcase now AST's to:
[33mba2793a[m implement parser support for methods, including dox and a testcase.  No AST or sema yet.
[33m504ee85[m introduce a 'meth' keyword.
[33med09f95[m notes from doug's feedback
[33m207ede0[m Add my notes from skimming the implementation
[33m244b31c[m add some more notes.
[33mdd4c4e7[m add some typestate notes from a review of plaid papers.
[33m96103ca[m use the new llvm::TinyPtrVector class, which was derived from this code.
[33m248454b[m Add documentation files to the Xcode project
[33m5032319[m Teach module lookup to look first in the directory where the importing module is located, and then fall back to the current directory if nothing was found there. This allows us to run the Swift regression tests from a directory other than "test" (e.g., in the build directory, as is currently needed by CMake).
[33m86ab76d[m Introduce a CMake build system for Swift.
[33m023c9cc[m Fix a typo
[33mf720555[m improve diagnostic from:
[33m464d255[m Implement AST building and type checking for if expressions, these now work per-documentation, though the diagnostics are awful.
[33m2db54bd[m change consumeToken to return the location of the token that it just consumed, simplifying some common callers.
[33m3b80f42[m The condition of an expression is converted to a logic value with convertToLogicValue, at least right now.
[33m8d0aec7[m Rip out a really terrible hack introduced as a short-term workaround when overloading was implemented, which was only needed to support the if/else expression nodes. Now that if/else is a proper language construct, this hack dissolves.
[33mb9e7823[m Implement lexing and parsing support for a proper if expression.  There is no AST building or typechecking support yet.  Document the intended semantics in LangRef.  This is clearly subject to change, but is a starting point.
[33m724b495[m Fix int to not be a typealias for __builtin_int64_type - it is a struct containing one now.  This allows different operators to be defined (some day) for uint and int, even though both are i32's.
[33mde094d7[m Introduce i1/i8/i16/i64 types, and switch int to be 64-bit.
[33m471e52b[m add some half thought out ideas of error handling for some future design discussion.
[33m0b06857[m Use TupleShuffleExpr to finally eliminate the last remenants of the ASDAG.  Our AST is actually a tree again.  The testcase compiles into: ...           (vardecl 'c' type='(a : int, b : int)')           (vardecl 'd' type='(b : int, a : int)'             (tuple_shuffle type='(b : int, a : int)' Elements=[1, 0]               (declref_expr type='(a : int, b : int)' decl=c))))))
[33m4bf1fea[m use new AllocateCopy method.
[33m79ba41c[m add a specialization of AllocateCopy to help out argument deduction a bit, simplifying some code.
[33m56b3a5e[m introduce a new TupleShuffleExpr expression kind, which will be used to eliminate the ASDAG.
[33m09d1be4[m Completely remove the ability to do elementwise conversion of tuple values to compatible-but-different tuple types, unless the tuple value is a tuple literal (syntactically a paren expression).  This is both unnecessary except in insane cases (see the testcase) and breaks some invariants that we'd like to keep (like the AST being a tree).  Reordering of elements is still fine.
[33md781810[m Use conversion ranking in binary expression overloading.
[33m6720390[m Implement a first, very simple cut at ranking conversions for overload sets.  This is important because we previously required exact type matching for overload resolution, and (int) != (.x : int) so no arguments with names would match up with anonymous values.
[33m687bb2c[m Move the getTupleFieldForScalarInit helper function out of TypeChecking.cpp into TupleType::getFieldForScalarInit.
[33md3d1278[m John points out that struct foo { ... } is more consistent with oneof and generally makes more sense than struct foo (...).  Switch!
[33m27da589[m various updates.
[33m3cce562[m add a bunch of random documents
[33mc5eeb2c[m Fix overload resolution in function application to not just pick the first match that matches the input argument type.  If there are multiple pieces to the function then multiple candidates can have the same input type.
[33m91fb835[m Implement support for overloaded binary operators.
[33md923da6[m Throw in a terrible hack to make "var x7 = x1.search(42).width;" work.  The parsing hacks to allow if/else to work should be ripped out and if/else should be added to the grammar properly.
[33mc588ee2[m Reject any attempt to form an overload set with binary operators that have different precedence levels.  It doesn't make sense for + of ints to have a different level than + of floats.
[33mc3c602f[m Reimplement processing of dot expressions to have their base resolved as part of Type checking of SequenceExprs.  This ensures that we can establish a proper base expression for the value.
[33mdec08ec[m Check for floating tuple literals that look like argument lists only after an entire SequenceExpr is done being processed.  This allows: 	var x6 = x1.search(42) to work right.
[33m8c833bc[m More writing.
[33mc45c929[m Describe expressions.
[33m0d54f3e[m Major cleanups to decls and types section of langref.html.  Expressions needs to be largely rewritten.
[33ma6ccf69[m Implement support for overloading in .-style name lookup.  This is not super useful yet because we don't have conversion ranking, but it's progress.
[33mda28ba8[m Completely disable equality comparisons of Type.
[33m3e66832[m Implement selection of an overload function based on its argument.
[33m1450aae[m Fix a bug preventing ov_var+4 from resolving.
[33m936f365[m Implement equality testing (ignoring sugar) for types. Implement simple context sensitive type inference for overload sets.
[33m3b4a8b0[m 1. With overloading in play, SemaDecl should never resolve unqualified lookup that hits at translation unit scope to a DeclRefExpr.  Doing so can break overloading. 2. This exposed a bug: when parsing structs, we weren't adding all decls to the translation unit, we were just adding the type alias. 3. This exposed that TypeChecking wasn't handling OneOfElementDecl. 4. Introduce a new NLKind enum in NameLookup instead of passing around a bool. 5. Have unqualified lookup that returns an overload set form a new OverloadSetRefExpr, which has dependent type. 6. Enhance various stuff to handle OverloadSetRefExpr.  It's still not fully handled yet though, so it can't be used for anything useful. 7. Change Expr.cpp to print types with << instead of T->print(OS) which is simpler and correct in the face of null.
[33m2810c91[m Implement lookup of overloaded values through import decls.
[33mce8c32d[m Diagnose redefinition of a binop with a nonbinop and visaversa.
[33m229141a[m Start adding support for value overloading.  Right now we allow overloaded definitions (at top level only), and name binding just takes the first value of a name.
[33me071e0f[m add a helper, tweak a comment.
[33mea53191[m properly initialize an ivar.
[33m55f5533[m Disallow comparison of Type's.  You can still compare type pointers if you know what you're doing.
[33m5e28a6f[m Finally get around to doing a major type system refactoring, where we introduce Type as a "smart pointer" and rename the existing Type class to TypeBase.
[33m85579ef[m Inline a bunch of trivial SemaExpr routines into parser.  No need for the additional indirection/layering.
[33m5e23464[m Implement basic "dot syntax" for applying functions to values.  size.area now applies size to area when area is defined as a global function.
[33me55e5ca[m Improve error message.
[33m7530ec9[m Add a error to reject foo() when foo is not a function type.  Previously we allowed it because these are two valid top-level values, but we now reject them because they are almost certainly a bug.  This can be disabled by putting a space between them if this is useful for some reason.
[33m866a5fd[m Minor tidying.
[33m85f67d0[m NameBinder shouldn't create exprs, it should return decls.
[33me85928e[m Split dollar identifier processing out to its own method.
[33md3201b3[m improve diagnostic.
[33med7b06c6f[m Move semantic analysis of scoped identifiers (x::a) to typechecking, allowing forward referencing of types.  This introduces a new UnresolvedScopedIdentifierExpr node to represent the unresolved form.
[33meb9d135[m Allow name binding to bind to struct elements.
[33mb1ea095[m Factor a OneOf predicate into a helper method.
[33mc9ee19e[m Implement parser, sema, doc, and name lookup support for refined import declarations.  You can still only do top level references, but that's because we don't have namespaces or anything else interesting yet.
[33m2205513[m Add a comment acknowledging that conversions are ambiguous and give an example.  Simplify some code.
[33m2595be1[m Clean up when type verification fails.  This fixes the last testsuite failure! woot.
[33m828deb9[m improve wording of a diagnostic.
[33m7a04188[m Improve location info and some other diagnostics in a couple cases.
[33m8d2e911[m Make the type conversion errors *much* more specific, useful, and non-redundant.
[33m89a52ec[m Fix a crash on invalid where we didn't discard a munged subexpression tree.
[33m80b293c[m Eliminate ConversionReason by having convertToType generate an error and the caller generate a note.
[33m7200939[m Move type conversion routines into SemaCoerceBottomUp.
[33mc45bfcf[m Constant prop the IgnoreNonDecls argument to convertToType to be false since it is at all callsites.
[33m8c06074[m rearrange a ton of code in TypeCHecking.cpp
[33mcf836f7[m Eliminate a getAs<> by not discarding type info.
[33m29c2cd0[m Rearrange a bunch of type checking conversion code to be forceful and not tolerate failure.  Get rid of "try this, then this, then this" sort of conversion checking.
[33m0114224[m Split default value processing stuff out to its own file.
[33ma93a1f6[m Rearrange some cases, only try to-tuple conversion if a tupleexpr isn't a grouping paren.
[33mfd2bf74[m Move getCanonicalType from being a method on ASTContext to being a method on Type.
[33me51f356[m Improve comments.
[33maeb7c08[m The isGroupingParen() predicate doesn't make sense since TupleExpr can be used to create tuple expressions out of a scalar when there is a single element involved.  In this case, isGroupingParen would return true but the source and dest types would be different.
[33ma1cf13d[m Switch ActOnTupleType to take an ArrayRef, simplifying it.
[33mae2f026[m Use isGroupingParen() in one more place, add a TupleExpr::getElementName helper method.
[33m20772e3[m Add a TupleExpr::isGroupingParen() method and use it in a few places.
[33me759c9c[m Fix bottom-up processing of tuple exprs in two ways: 1. Single-element tuples with names are not grouping parens. 2. Redo Sema of a tuple if we do propagate a type into it.
[33m094bbaa[m On second blush, this fix isn't a great one.  Add a fixme and disable it for now so a test continues to fail.
[33mdb44f88[m Don't shave off "excess" elements of a body until the first element has a non-dependent type.  Dependent types may resolve to functions and slicing of their bodies isn't a good idea.
[33m1fda8dd[m Fix a scoping problem with my recent "make oneof constructors have the right typealias name" patch.
[33m7406f8b[m Fix a case to look through typealiases where it should.
[33m0d9da2b[m Improve diagnostics for oneof decls by making the constructors for the elements use the named type for the oneof decl instead of the underlying (unnamed) oneof type.
[33m7bc6903[m Print tuple types correctly.
[33m6950fa6[m Improve expr dumping to not crash on null exprs, print the Arg# for anonexprs.
[33m8f073c5[m This went with the previous patch.
[33mbbac24c[m Improve struct declarations to use their TypeAlias for the constructor results.  In the testcase we now get: error: cannot convert initializer type 'CGPoint' to explicitly specified type 'int'   var d : int = CGPoint(.y = 1, .x = 2);   // Using injected name.                 ^
[33m024b479[m Fix a crash on invalid: we can't produce null elements of brace exprs.
[33mffb93e6[m Fix a pretty big issue in typechecking.  We were processing things like:  func f() {    var x = 4    f() }
[33mc9eb885[m Introduce top-level expressions and simplify TranslationUnitDecl (and various things that hack on it) by making it hold a single BraceExpr instead of a list of exprs and decls.
[33ma1e6e7b[m implement name binding support (including looking through imports) for types!  We can now have a swift standard library.
[33m968339f[m Integer literals should refer to the integer_literal_type type alias decl, not to unresolvedtype directly!
[33mcb8884e[m Move error reporting for unresolved types from SemaDecl to NameBinding, where it should be.  This requires enhancing TranslationUnitDecl to hold a list of unresolved types.
[33m0972480[m Add a todo comment, use a note instead of warning in one case.
[33m204ffac[m Implement import for value names!
[33m6807ad7[m Move some type validity checking to SemaDecl::handleEndOfTranslationUnit, out of NameBinding.
[33m60cdb19[m Add a new ImportDecl to represent imports.
[33md23c2f2[m Document and implement lexer and parser support for trivial import decls.  No Sema/AST support yet.
[33mcabbe43[m Update to describe handling of integer_literal_type.
[33m5e44da8[m Change how integer literals get types.  Instead of having TypeChecker force them to __builtin_int32_ty, have sema give them integer_literal_type, and expect the library to define what that actually is for a given file.
[33m4d5d33d[m Rework the argument binding logic to do the type application on the fly.
[33m78d6a6d[m Implement resolution and type assignment of Anonymous closure argument expressions
[33m3a57e3f[m Reimplement the SemaExpressionTree expression walking logic in terms of Expr->WalkExpr, which already has it.  Enhance WalkExpr to allow skipping visitation of subtrees.  No functionality change.
[33m6ab4eec[m Two changes that got mixed up: #1: Change type conversion errors to print the types involved, making the diagnostic better.  We still don't have ranges, but it is progress.
[33m07b8860[m Implement name binding for forward referenced values, and diagnose references to undefined decls.  This properly implements the rest of name-binding!  Since we don't have import statements yet, we don't have to worry about types.  SemaDecl still does all the heavy lifting for them.
[33mca1b16b[m Cleanup SemaExpr::ActOnDotIdentifier.
[33m7759b4b[m Diagnose invalid name binding, such as:
[33m1cc8bef[m Fix a scary and long standing bug which never manifested because vars and funcs had the same data.
[33mbcc4f47[m Fix previous patch.
[33m25c1d7b[m Fix some issues handling rewalks of the same expression when something was found to be invalid.
[33m1bd1f1b[m Implement type checking support for validating tuple types with default values.
[33m44ac12c[m Remove some old code, add an assert to get an assert instead of null pointer deref on invalid call.
[33md6d92de[m Wire DiagnoseUnresolvedType back up and clean up handling of vardecls.  This now causes us to explode on tuples with default values so temporarily remove the tests.  This also causes us to reject more anondecl tests since those aren't (re)implemented yet.
[33mc5506dc[m Capture the structure of a declared VarName in the ast as DeclVarName.
[33mb15573e[m Implement type checking of ElementRefDecl's in SemaExpressionTree, diagnosing an invalid case and propagating types further.
[33m770b9cb[m Fix tests so that top level variables have types, even if they have initializers.
[33m1eb17f1[m Stub out a namebinding pass, fix some crash-on-invalid cases in TypeChecking.
[33mdb23694[m Check in a massive rewrite of how sema works for expressions in an effort to make way for separate parsing, name binding, type checking phases.
[33m7c774d3[m Add a Type::getString() method for diagnostics.
[33m3f0af37[m Allow allocating a type of any ArrayRef from ASTContext.
[33mf0219a3[m Fix a comment in type.h, allow printing of null types, fix oneof printing.
[33m71eb272[m Build AST nodes for references to unresolved names.  These can be resolved after parse time.
[33m6d98e3f[m Fix some missing \n's
[33mb3e5c55[m Change the parser methods to lower case to follow naming conventions.
[33mddb760b[m Remove the concept of an ASTConsumer, add a new TranslationUnitDecl.
[33m40d4fed[m Make it invalid to call getCanonicalType before name binding is fully completed.  This *will* cause assertion failures on valid code at this point because too much sema stuff happens at parse time.
[33mabb710a[m Minor code tidying + comments, add some expected error tests.
[33mbd4ccf1[m Fix structs to require that their element type be a syntactic tuple.  Rejecting the testcase.
[33m291967c[m Make ParseIdentifier do the string->identifier conversion, simplifying clients. no functionality change.
[33m61d6217[m Improve consistency by pushing Identifiers into Sema instead of StringRefs.
[33mb233848[m Tidy up and clean up code and error recovery in the parser.  Add some templated allocation functions to ASTContext to simplify clients.
[33ma37e526[m Improve error message to list the type name.
[33m272d9e8[m Propagate "there were errors in the input" out to the exit code of the swift app by adding a "HadError" bool to ASTContext.
[33m3ab8ea1[m add run lines to all the tests and use a less broken test makefile.
[33m553e276[m Wire up support for completing types that are used but not yet defined!
[33mffef30f[m Change name lookup of types to always succeed: if a type is used before it is defined, just cons up a new TypeAliasDecl for the unresolved type and return it.  Diagnose these at the end of the translation unit instead of at their first use.
[33mdd2e2d8[m Introduce UnresolvedType, make ASTContext have the singleton, update getCanonicalType to do the "right" thing.
[33mc38e709[m improve the makefile.
[33m80e1ae6[m Rework a bunch of stuff in the type system: now the *only* way to name a type is through a 'typealias' and there is no such thing as a OneOfDecl.  Instead, we have OneOfType's, which are always anonymous.  "oneof declarations" and "struct declarations" are now both just sugar.
[33m7bbe52b[m Expand the swift language to allow typealiases, oneof, and struct within a brace expression.  This allows us to have shadowing of type names.
[33m50b3fcc[m Switch TupleType to hold its elements with an llvm::ArrayRef instead of manually doing it.
[33mf9673bb[m Remove the type symbol table from ASTContext, using the scoped hash table in SemaDecl instead.  We resolve a bunch of fixmes (types now give a "previous definition here" diag), remove weird mutating state from ASTContext, and allow us to have shadowed types.
[33m5a74864[m Add a scoped hash table for type names to SemaDecl, make Scope push it along with the value scoped hash table. Nothing is added to the type symtab yet though.
[33m6a1416b[m Revert my last patch.  Instead of having a TypeScope and ValueScope, we'll just make Scope do both!
[33me6f00fe[m Rename the Scope class to ValueScope
[33m2e26241[m Fix AliasType to point to the TypeAliasDecl instead of replicating its contents.
[33m93eea9c[m Simplify ASTContext's transforming of NamedTypeDecls into types.  It now doesn't unique them, the decls do for themselves.  ASTContext still has the type symbol table.
[33mcb9b183[m Introduce and create a new TypeAliasDecl for typealiases.
[33mad4389e[m Introduce a new TypeAliasDecl class and NamedTypeDecl parent class.  We're not creating it yet, but hey it's there.
[33m1a97122[m Update to build with mainline LLVM.
[33m2cc0b81[m Introduce bool into the standard library, updating comparisons and short circuit operators.  Expand the documentation for standard types and the operators.  Fix the precedence of the comparison operators to be correct.
[33m818cd27[m Implement tuple to tuple conversions that involve default element values.
[33me488b69[m Implement sema support for TupleExprs with default elements (represented with null), implement support for conversions from scalar to tuples with multiple default elements.
[33m8234b6f[m Add some sema for tuple elements which are specified with a default value.  Still not used for conversions yet.
[33mf6d7adc[m Parse tuple element types as value-specifier's, allowing them to have initializers.  Sema isn't wired up yet though.
[33mbc616e9[m Split the initializer syntax from var decls out to their own 'value-specifier' production
[33m28789d4[m Resolve a fixme: use foo.$1 instead of foo.field1
[33m3bd8a85[m Fix weirdness in the lang spec by making $123 be a special type of implementation identifier token, handling it uniformly in the grammar in the few places that it is valid.
[33m2653092[m Change the grammar for oneof elements to require a ':' make them more swift like and less ml like.  Before we had:
[33m70bb588[m Various updates thanks to comments from DaveZ, add a right hand sidebar with commentary.
[33m906ba90[m Rename 'data' to 'oneof', resolving a fixme in the spec.  Yay for CLU!
[33m3892ef2[m add some FIXMEs for comments from bertrand
[33m2f0d968[m Move field exprs to their own section in langref.  Document subscript exprs.  Still no sema support.
[33m6f8dd4c[m add parser support for array indexes
[33mf66d7a6[m Update langref for array types.
[33m6f75642[m Wire up sema support for creating array types.
[33mff38a2d[m AST Support for arrays.
[33mfd54c7f[m add parser support for array types, no sema or ast yet.
[33md6862a7[m Fix decl-brace to not require ';'s
[33m154c0c6[m Resolve a fixme by eliminating the ; in func decls and making the grammar more restrictive.
[33m8c393e2[m add some random notes for arrays
[33m4b0f1a4[m flesh out a lot more of the langref.
[33mfc5bbfb[m Add an initial swift language manual, much work still needed.
[33mb9fbd77[m Fix a bunch of minor bugs found through inspection:
[33mbb541a2[m add a note.
[33m26e63c2[m rip out a bunch of special case parsing logic for function arguments now that tuples have a sane syntax.
[33m0fcf9a4[m Bertand finally beat some sense into me, convincing me that tuples with named elements are more important than tuples with anonymous elements. This changes the grammar for tuple type elements to be:  ///   type-tuple-element:  ///     identifier? ':' type
[33m7d86d0b[m Wire up sema support for field access of single element data declarations.  This allows Foo.X to work with structs.
[33mba39ed0[m add another example, fix a sema bug found by inspection.
[33me9db331[m Struct declarations also inject their name into the global scope, allowing them to be used unqualified.
[33mf92a3d5[m Implement parser support for structs, improve datadecl dumping.
[33mbffee37[m Generalize the expression walker to allow rewrites to be implemented.
[33ma885cd5[m Diagnose completely unresolved expressions with an error like this:
[33m55f104b[m Handle context sensitive type inference of function-like data constructors.
[33m7897dde[m Substantially refactor tuple type inference so that the code works for both the bottom-up and the top-down cases.  Also make it rewrite tuple exprs in place where it can (which is required by the new code).
[33m4537b3a[m refactor code into a visitor, no functionality change.
[33ma7f3e05[m Hook up enough sema support to get things like this working:
[33m272cbca[m Implement parser, ast and minimal sema support for :foo expressions, type resolution isn't done yet.
[33m47e034f[m Fix element values to have a proper function type when they take an argument.  Now this:
[33mad438c5[m Implement the rest of sema for scoped identifier references (X::Y) we now get a proper DeclRefExpr, and this:
[33m10e3eac[m Create a DataElementDecl to represent the elements of a data, and wire up sema support for creating them when the data is defined.
[33m43f2d1d[m wire up parser and basic sema support for scoped identifier expressions (X::Y).
[33m09a023c[m Now that we have simple user defined data types, remove the __builtin_else_hack type. woot.
[33mac855b6[m Move ActOnTypeAlias to SemaDecl since a type alias *is* a decl that *installs* a type.  Add some fixme's and rename some junk in ASTContext relating to the typemap.  Diagnose redefinitions of named types.  Install a typemap entry when a data declaration is defined.
[33m9ba168a[m Fix Alias uniquing to reuse the already-uniqued identifier object instead of being a string map.  Make getAliasType fail if a redefinition happens and make getNamedType return datatype's as well.
[33maefb083[m Make the DataType class, wire it into ASTContext.
[33ma43a8f2[m Wire data decls up to -ast-dump.  Fix some minor bugs exposed along the way.
[33m0ad8498[m declare DeclData and create it in sema.
[33m57c6971[m Split NamedDecl into NamedDecl with a ValueDecl subclass that has the type and value of the decl.
[33m3ea5878[m add scafolding for sema of datas.
[33mecdc8da[m add parser support for type specifiers in data descriptors.
[33m17c36aa[m add parser support for simple data declarations
[33m8fa431c[m rename testcase, add a new test for UDTs
[33m19e5390[m twinify more diagnostics.
[33m51b9de2[m update to build with llvm mainline (twinification of SourceMgr)
[33m91f5abd[m Implement parser support for assignment, what a hack :-)
[33m1bef5bd[m Bertrand prefers $0 to _1 for anonymous closure arguments.
[33mfb75d0c[m cleanup
[33m2950397[m Enhance juxtaposition binding handling to handle binary operators and functions in a more fine-grained way, allowing if/else to work without braces.
[33md2abfde[m introduce a new builtin type to represent the result of the else binary operator (which is a temporary hack until we get user defined types).
[33m45610c0[m rework func argument parsing to be more consistent across ->'s.
[33md5f8345[m Next step to allow use of named arguments: Create a new ArgDecl AST node, and have SemaDecl form them.  We now correctly diagnose argument name redefinitions (though the diagnostic sucks because we don't have loc info)
[33mb927b55[m Finally get around to allowing *use* of a named incoming function argument.  The first step is to set up a scope for them and walk the argument names, keeping track of access path info.
[33m0251436[m implement support for tuple expressions with names specified for the elements.
[33m4fe0a17[m Fix a problem where we didn't bind anondecls early enough which prevented them from getting their types when in nested closures.  For example, var test : int->int->int = _0;
[33m5afc6bd[m Add Type::getAs<> and support for minimally desugaring types.  Start preserving more type sugar in the type conversion code.
[33mcbecebb[m -ast-dump shouldn't crash on empty identifiers
[33m429ecb8[m Finish ast and sema support for name binding elements of tuples in var decls.
[33m544f3fd[m Now that tuples aren't abusing ParseDeclVar, we can have ParseDeclVar insert the decl into the current scope, a prereq for more interesting names.
[33mbf63029[m rework tuple element parsing to not use ParseDeclVar, since tuple elements are fundamentally different.  While we're at it, switch to an arguably more natural syntax for field elements, naming them with .x : type instead of var x : type
[33m34a1bea[m inline ParseTypeOrDeclVar and ParseExprOrDeclVar into their single callers and simplify the code around them.
[33m43a526f[m a step towards parsing richer names.  I need to do some refactoring of var parsing before going further.
[33mc129462[m Cleanup type stuff.
[33me1e3356[m int is no longer a keyword, it is a type alias for the new __builtin_int32_type type.
[33m69133a6[m now that we have type aliases, eliminate void as a keyword.
[33ma8916a6[m implement semantic analysis and AST representation for AliasType (aka typedefs in C).
[33m8f86874[m add parser support for typealiases, we have to be able to exercise the canonical type system somehow.
[33m86ce100[m clean up some parser logic.
[33mf704c58[m Two significant changes:  1. Change the representation of TupleType to contain TupleTypeElt structs instead of PointerUnion<Type*, NameDecl*>  2. Change type canonicalization to not strip field names off tuples, and change type conversion logic to use canonical types again.
[33m807a82c[m Resolve a fixme involving precedence of juxtaposition.
[33mf125062[m Wire up elementwise type conversion for tuple conversion.  This allows us to handle cases like:
[33m04f7a08[m add support for tuple field access with ".", e.g.:
[33m6858e37[m implement a lot more semantic analysis for tuple conversions.
[33m66897ed[m Remove a bunch of dead code, it isn't worth keeping it around.
[33m1bb344c[m strength reduce our handling of dependent types.  Now, you can't compose dependent types, there isn't a (dep, int) type, the whole tuple gets dependent type.  This simplifies things a bit.
[33m7a5b428[m start reworking tuple compatibility: two different tuples aren't compatible because their canonical type is the same, they are compatible because one can be converted to the other.  I'm just going to rip out canonical type support for now.
[33m23cca34[m FIXME fixed!
[33mc6499fe[m Fixme patrol, clean some up.
[33mc2fdbb6[m Tuple types with a single element are now valid.  var x : (((int))); is now a triply nested tuple.  To make this work, values are allowed to convert to tuples with one element.
[33m8e3881d[m Enhance the lexer to handle lazy ||/&& and add them to the prolog.
[33m47afc23[m Expand lexer to cover a broader range of punctuators for function names.  Add comparison functions to standard prolog.
[33m08fead5[m rework func scope insertion so that recursion works, next up: vars.
[33m9b30ba0[m refactor function body parsing+sema a bit.
[33mce30c19[m Implement the rest of type inference for anondecls.  They now work!
[33m0cfdb77[m rearrange code, no functionality change.
[33m06b5f4d[m Finish factoring sema routines out of ast building logic.
[33meae5244[m start refactoring to allow bottom-up type inference with re-sema.  Still much to be done.
[33m422da5d[m Give _0 a dependent type and use type inference to determine what it is based on context.  Still some "bottom up" type inference logic missing, and we don't infer all the types in the expression tree of things like: func6((_0 4) + _0);
[33m1a9f102[m switch expression printing over to use a visitor instead of hand rolled dispatch.
[33m84c765d[m Start building out type propagation framework for inferring expression types in specified contexts.  To do this, build a simple expr visitor class.
[33m483b8a2[m Enhance HandleConversionToType to take a conversion reason and to produce diagnostics itself instead of relying on clients to do it.
[33m9107a90[m add support for representing dependent types.
[33mb3c9942[m Rework handling of sequence expressions and juxtaposition to eagerly bind arguments to functions.  This means that in situations like:
[33mba04392[m Tighten up sema of anon closure arguments to reject invalid code like this:
[33m6670786[m Implement support for anonymous closure arguments.  For example, we can now compile this:
[33mbb0fecf[m fix an error recovery bug that lead to a crash.
[33md022fc6[m unbreak function prototypes
[33m9d33ef3[m add infrasturctuer for binding to "named anonymous" arguments.
[33m4c7ddf3[m Enhance the auto-closure generating code to handle recursive cases, where multiple levels of application are required to get it.  Eventually named arguments will be usable at each level, but not yet.
[33m6d9d480[m Allow optional = after func with a body.
[33me842e93[m improve error recovery for var decls and simplify parser code.
[33m4cba5da[m Improve error recovery (and clean up code!) on a malformed func decl
[33mce55229[m Allow arbitrary expressions as the body of a function, don't require brace-expr.
[33m20de997[m Implement type checking for func bodies now that autoclosurification is done.
[33m874421d[m Implement AST and Sema support for auto-closures.  We now parse:
[33mcc15dc4[m add a simple 'make wc' target, to do a wordcount.  Up to 3400 lines.
[33m35328c4[m testing whether rdar://8238427 is reproducible.
[33m514fe6c[m test commit
[33m8562512[m test commit
[33m1afe647[m add basic sema support for funcdecl, not verifying types yet though.
[33mfef3e71[m stub out parsing of func declarations.
[33mda8a6af[m add a new expression to model sequences instead of hacking up braceexpr to do it.
[33mb1f00a1[m Implement sema check for function application to verify that the argument matches the formal parameter type.
[33ma6b810b[m Enforce type rules in SemaExpr::ActOnBinaryExpr, validating that proper types are passed into the LHS/RHS of the operator.
[33m883efc2[m various cleanups to fixmes.  Move a parsing check from sema to parser.
[33mfa78da1[m implement lazy construction of canonical types, ala clang.  This only affect tuples at the moment, but will affect type aliases someday.
[33m4740573[m tidy up some dead code in parser, rearrange readme
[33m7e0123c[m Kill off add/sub/mul/div as special AST nodes.  Instead, + is just yet-another identifier token and BinaryExpr is a generalized infix call expression.
[33m6f98156[m Implement the 'expression results in unevaluated function' error, so something like this:
[33m5562fc3[m Actually form ApplyExprs.  We're not checking that the actual argument matches the formal argument for a function yet, but we can parse some nice stuff like:
[33m12fa92e[m Add a new ApplyExpr expression AST node for function application.
[33m6c89184[m rework sequence handling, we still build an incorrect AST: this time we build a BraceExpr to represent it.
[33mcd99eee[m Add parser support and stub out a SemaExpr callback for sequence exprs, the foundation of function calls.
[33mdee8d84[m implement semantic analysis checks for the infix attribute.
[33m9b42d1b[m enhance parenexpr to be tupleexpr.  The grouping paren case is just a special case of a tuple literal with one child.
[33m4a2ea23[m Enhance the parser to parse infix decls.  The AST it constructs is still not correct though.  We have no way to represent function calls yet!
[33m9411086[m add support for parsing attribute lists, and add the first attribute, infix=42.  It is now parsed and slammed into the AST, but not used.
[33m769c4a0[m fix a bug in my refactoring.
[33m2bafb0e[m Introduce new NamedDecl and FuncDecl classes.  The difference between the two is syntactic sugar, so most clients want NamedDecl.  This doesn't implement FuncDecl yet, which isn't a high prio for me in the short term.
[33m9a0d6c7[m change the handling of nullable so that hte parser actually checks for the error and only invokes sema if the inputs are valid, tidying up some code.
[33md7ac94c[m make use of the new nullable expression result by returning null from some sema errors.
[33m315107d[m Use the new NullablePtr<> class to allow better error recovery when parsing invalid expressions.
[33m1a74366[m implement semantic analysis support for binops, which amounts to enforcing that the LHS and RHS are both integer operations.
[33m05730aa[m Properly treat tuples types with one element as grouping parens.  Teach ActOnParenExpr to do the right type propagation.
[33m06faa36[m Implement sema support for shadowed declarations.
[33m64ecbb8[m Implement AST and trivial Sema support for brace expressions.
[33m1103ff5[m Implement basic parser support for brace expressions.
[33m5818541[m now that we have name lookup, we can implement references to other values.  crazzay.
[33m82ea1ae[m eliminate unneeded complexity.
[33mf248ffb[m Introduce a scope abstraction, the next step to implementing name lookup.
[33m7ff4cc6[m split the decl processing stuff in Sema out into a new SemaDecl class where it belongs.  Tidy up headers a bit.
[33med1be4f[m add printing support for Identifier, switch VarDecl to have an identifier instead of a stringref.
[33m8bf327b[m add a new AST/Identifier class which represents a uniqued string. Add support to ASTContext to unique strings into identifiers.
[33md8c6da6[m tweak comments.  void is no longer in the AST, but it shouldn't even be a keyword
[33m5c28366[m diagnose invalid code like 'var x : void = 4;'
[33m0380f7a[m fix inverted logic
[33ma860fe4[m implement support for printing types, add them to -ast-dump
[33m34602d5[m Make Expr::Kind public.
[33m9235478[m implement support for isa/dyncast of types.
[33m7f9b361[m follow the predominant pattern of making const ivars const and public instead of private with accessors.
[33mac1200c[m rename Token::getLocation() to Token::getLoc()
[33md6c8f0b[m make the AST representation of void just be ().
[33mfba7359[m eliminate a #include from ASTContext.h
[33m842821d[m add FunctionType, have sema create it and have ASTContext unique it.
[33m49b3c52[m implement parser support for function types.
[33mc363b58[m Introduce TupleType, an AST representation of tuples.
[33mb1d2537[m type things as VarDecl instead of as Decl, return things by value from void parse methods.
[33maa126e8[m add a new SemaType module, add parser support for tuples. Add lexer support for ->.  Expand the testcase.
[33mf7c8e53[m implement isa/dyncast and dumping support for exprs. We can now parse and print this: var x3 = 4+5*4+12/97;
[33m547b2a8[m implement vardecl dumping and Casting.h support for decls.
[33m43f414c[m stub out a new ast dumper consumer.
[33mcea9a29[m fix some include guards and an uninitialized member
[33ma3795e1[m actually invoke the ast consumer.
[33m669c129[m introduce new ASTConsumer interface, have parser invoke methods on it.
[33m2264640[m fix a fixme by sinking some sema into sema.
[33m2eeee5f[m give ASTContext a SourceMgr reference, add diagnostic hooks to SemaBase.
[33mc5e5444[m make the parser actually create VarDecl AST nodes.
[33m340a7fa[m stub out Decl AST's.
[33m9eb6733[m Exprs have types.
[33ma3164a1[m add void type.
[33m9e8489a[m make the parser build type asts.
[33mf36e4aa[m introduce Type ast node.
[33m454dd86[m add a testcase
[33ma63671f[m add binary expression ast node.
[33m17aad28[m set up expression kinds, add ParenExpr ast node.
[33ma39a7ec[m make the sema methods be prefixed with ActOn
[33m66199fa[m implement a new IntegerLiteral ast node, add plumbing for allocation of exprs from ASTContext.
[33md6edeb7[m thread Expr* results through the parser and SemaExpr.
[33m910f84b[m thread astcontext from the driver, down through Sema.
[33md3756f2[m Sketch out the new AST library, lets start with expressions.
[33mb45fe8a[m set up semaexpr and sema base.  Give SemaExpr a couple trivial methods.
[33m8b9b84f[m forgot to svn add this.
[33mc02e462[m wire sema up to the Parser.
[33m68a2d3a[m stub out the Sema object.
[33m66fe17f[m parse some trivial binary expression, like: var x3 = 4+5*4+12/97;
[33m3e53d83[m implement support for parenthesized expressions.
[33m9460c31[m implement enough parser support to parse:
[33m15ed0a7[m better fix for make clean.
[33m5450892[m Set up trivial parser support stuff and sketch out a few productions.  We can now get this far:
[33m05f5028[m stub out a parser hook.
[33m3cd9e46[m add numeric constant support, we can now lex exciting stuff like this:
[33m6236dea[m implement lexer support for identifiers and our 2 keywords so far.
[33m80ba9c7[m add some more punctuator characters and // comments.
[33m461f41e[m start lexing trivial tokens, discard whitespace between them.
[33mdb8e130[m Start setting up the lexer object.
[33m874badb[m consolidate lexer stuff into the Parser lib.
[33m5e88a21[m sketch out lexer and token interfaces.
[33mafc81c1[m initial checkin, nothing much to see here.
[33m18844bc[m initial swift test
